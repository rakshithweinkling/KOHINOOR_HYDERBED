

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Jul 28 00:29:20 2025

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	intentry,global,class=CODE,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	swtext1,local,class=CONST,delta=2
   103                           	psect	swtext2,local,class=CONST,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	dabs	1,0x7E,2
   110  0000                     
   111                           ; Version 1.43
   112                           ; Generated 25/07/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC16F18345 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0097                     	;# 
   188  009B                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  0111                     	;# 
   198  0112                     	;# 
   199  0113                     	;# 
   200  0114                     	;# 
   201  0115                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  0118                     	;# 
   205  0119                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0197                     	;# 
   210  0199                     	;# 
   211  0199                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019A                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019D                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019E                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  019F                     	;# 
   233  019F                     	;# 
   234  019F                     	;# 
   235  020C                     	;# 
   236  020D                     	;# 
   237  020E                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0219                     	;# 
   255  021A                     	;# 
   256  021B                     	;# 
   257  021C                     	;# 
   258  021D                     	;# 
   259  021D                     	;# 
   260  021E                     	;# 
   261  021F                     	;# 
   262  028C                     	;# 
   263  028D                     	;# 
   264  028E                     	;# 
   265  0291                     	;# 
   266  0291                     	;# 
   267  0292                     	;# 
   268  0293                     	;# 
   269  0294                     	;# 
   270  0295                     	;# 
   271  0295                     	;# 
   272  0296                     	;# 
   273  0297                     	;# 
   274  0298                     	;# 
   275  029F                     	;# 
   276  030C                     	;# 
   277  030D                     	;# 
   278  030E                     	;# 
   279  0311                     	;# 
   280  0311                     	;# 
   281  0312                     	;# 
   282  0313                     	;# 
   283  0314                     	;# 
   284  0315                     	;# 
   285  0315                     	;# 
   286  0316                     	;# 
   287  0317                     	;# 
   288  0318                     	;# 
   289  038C                     	;# 
   290  038D                     	;# 
   291  038E                     	;# 
   292  0391                     	;# 
   293  0392                     	;# 
   294  0393                     	;# 
   295  0394                     	;# 
   296  0395                     	;# 
   297  0396                     	;# 
   298  0397                     	;# 
   299  0398                     	;# 
   300  0399                     	;# 
   301  039A                     	;# 
   302  039C                     	;# 
   303  039D                     	;# 
   304  039E                     	;# 
   305  039F                     	;# 
   306  0411                     	;# 
   307  0411                     	;# 
   308  0412                     	;# 
   309  0413                     	;# 
   310  0414                     	;# 
   311  0415                     	;# 
   312  0416                     	;# 
   313  0417                     	;# 
   314  0418                     	;# 
   315  0418                     	;# 
   316  0419                     	;# 
   317  041A                     	;# 
   318  041B                     	;# 
   319  041C                     	;# 
   320  041D                     	;# 
   321  041E                     	;# 
   322  041F                     	;# 
   323  0498                     	;# 
   324  0498                     	;# 
   325  0499                     	;# 
   326  049A                     	;# 
   327  049B                     	;# 
   328  049B                     	;# 
   329  049C                     	;# 
   330  049D                     	;# 
   331  049E                     	;# 
   332  049F                     	;# 
   333  0617                     	;# 
   334  0618                     	;# 
   335  0619                     	;# 
   336  0619                     	;# 
   337  061A                     	;# 
   338  061B                     	;# 
   339  061C                     	;# 
   340  061C                     	;# 
   341  061F                     	;# 
   342  0691                     	;# 
   343  0692                     	;# 
   344  0693                     	;# 
   345  0694                     	;# 
   346  0695                     	;# 
   347  0696                     	;# 
   348  0697                     	;# 
   349  0698                     	;# 
   350  0699                     	;# 
   351  0711                     	;# 
   352  0712                     	;# 
   353  0713                     	;# 
   354  0714                     	;# 
   355  0715                     	;# 
   356  0716                     	;# 
   357  0717                     	;# 
   358  0718                     	;# 
   359  0719                     	;# 
   360  0891                     	;# 
   361  0891                     	;# 
   362  0891                     	;# 
   363  0891                     	;# 
   364  0891                     	;# 
   365  0891                     	;# 
   366  0892                     	;# 
   367  0892                     	;# 
   368  0892                     	;# 
   369  0893                     	;# 
   370  0893                     	;# 
   371  0893                     	;# 
   372  0893                     	;# 
   373  0893                     	;# 
   374  0893                     	;# 
   375  0894                     	;# 
   376  0894                     	;# 
   377  0894                     	;# 
   378  0895                     	;# 
   379  0895                     	;# 
   380  0895                     	;# 
   381  0896                     	;# 
   382  0896                     	;# 
   383  0896                     	;# 
   384  089B                     	;# 
   385  0911                     	;# 
   386  0912                     	;# 
   387  0913                     	;# 
   388  0914                     	;# 
   389  0915                     	;# 
   390  0916                     	;# 
   391  0918                     	;# 
   392  0919                     	;# 
   393  091A                     	;# 
   394  091B                     	;# 
   395  091C                     	;# 
   396  091D                     	;# 
   397  091E                     	;# 
   398  091F                     	;# 
   399  0E0F                     	;# 
   400  0E10                     	;# 
   401  0E11                     	;# 
   402  0E12                     	;# 
   403  0E13                     	;# 
   404  0E14                     	;# 
   405  0E15                     	;# 
   406  0E16                     	;# 
   407  0E17                     	;# 
   408  0E18                     	;# 
   409  0E19                     	;# 
   410  0E1A                     	;# 
   411  0E1B                     	;# 
   412  0E1C                     	;# 
   413  0E1D                     	;# 
   414  0E1E                     	;# 
   415  0E1F                     	;# 
   416  0E20                     	;# 
   417  0E21                     	;# 
   418  0E22                     	;# 
   419  0E24                     	;# 
   420  0E25                     	;# 
   421  0E28                     	;# 
   422  0E29                     	;# 
   423  0E2A                     	;# 
   424  0E2B                     	;# 
   425  0E2C                     	;# 
   426  0E2D                     	;# 
   427  0E2E                     	;# 
   428  0E2F                     	;# 
   429  0E90                     	;# 
   430  0E91                     	;# 
   431  0E92                     	;# 
   432  0E94                     	;# 
   433  0E95                     	;# 
   434  0E9C                     	;# 
   435  0E9D                     	;# 
   436  0E9E                     	;# 
   437  0E9F                     	;# 
   438  0EA0                     	;# 
   439  0EA1                     	;# 
   440  0EA2                     	;# 
   441  0EA3                     	;# 
   442  0EA4                     	;# 
   443  0EA5                     	;# 
   444  0EA6                     	;# 
   445  0EA7                     	;# 
   446  0F0F                     	;# 
   447  0F10                     	;# 
   448  0F11                     	;# 
   449  0F12                     	;# 
   450  0F13                     	;# 
   451  0F14                     	;# 
   452  0F15                     	;# 
   453  0F16                     	;# 
   454  0F17                     	;# 
   455  0F18                     	;# 
   456  0F19                     	;# 
   457  0F1A                     	;# 
   458  0F1B                     	;# 
   459  0F1C                     	;# 
   460  0F1D                     	;# 
   461  0F1E                     	;# 
   462  0F1F                     	;# 
   463  0F20                     	;# 
   464  0F21                     	;# 
   465  0F22                     	;# 
   466  0F23                     	;# 
   467  0F24                     	;# 
   468  0F25                     	;# 
   469  0F26                     	;# 
   470  0F27                     	;# 
   471  0F28                     	;# 
   472  0F29                     	;# 
   473  0F2A                     	;# 
   474  0F2B                     	;# 
   475  0F2C                     	;# 
   476  0F2D                     	;# 
   477  0F2E                     	;# 
   478  0F2F                     	;# 
   479  0F30                     	;# 
   480  0F31                     	;# 
   481  0F32                     	;# 
   482  0F33                     	;# 
   483  0F34                     	;# 
   484  0F35                     	;# 
   485  0F36                     	;# 
   486  0F37                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0013                     	;# 
   517  0014                     	;# 
   518  0015                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  001D                     	;# 
   530  001E                     	;# 
   531  001F                     	;# 
   532  008C                     	;# 
   533  008D                     	;# 
   534  008E                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0094                     	;# 
   540  0097                     	;# 
   541  009B                     	;# 
   542  009B                     	;# 
   543  009C                     	;# 
   544  009D                     	;# 
   545  009E                     	;# 
   546  009F                     	;# 
   547  010C                     	;# 
   548  010D                     	;# 
   549  010E                     	;# 
   550  0111                     	;# 
   551  0112                     	;# 
   552  0113                     	;# 
   553  0114                     	;# 
   554  0115                     	;# 
   555  0116                     	;# 
   556  0117                     	;# 
   557  0118                     	;# 
   558  0119                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0197                     	;# 
   563  0199                     	;# 
   564  0199                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019A                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019D                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019E                     	;# 
   582  019E                     	;# 
   583  019F                     	;# 
   584  019F                     	;# 
   585  019F                     	;# 
   586  019F                     	;# 
   587  019F                     	;# 
   588  020C                     	;# 
   589  020D                     	;# 
   590  020E                     	;# 
   591  0211                     	;# 
   592  0211                     	;# 
   593  0212                     	;# 
   594  0212                     	;# 
   595  0213                     	;# 
   596  0213                     	;# 
   597  0214                     	;# 
   598  0214                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0215                     	;# 
   602  0215                     	;# 
   603  0216                     	;# 
   604  0216                     	;# 
   605  0217                     	;# 
   606  0217                     	;# 
   607  0219                     	;# 
   608  021A                     	;# 
   609  021B                     	;# 
   610  021C                     	;# 
   611  021D                     	;# 
   612  021D                     	;# 
   613  021E                     	;# 
   614  021F                     	;# 
   615  028C                     	;# 
   616  028D                     	;# 
   617  028E                     	;# 
   618  0291                     	;# 
   619  0291                     	;# 
   620  0292                     	;# 
   621  0293                     	;# 
   622  0294                     	;# 
   623  0295                     	;# 
   624  0295                     	;# 
   625  0296                     	;# 
   626  0297                     	;# 
   627  0298                     	;# 
   628  029F                     	;# 
   629  030C                     	;# 
   630  030D                     	;# 
   631  030E                     	;# 
   632  0311                     	;# 
   633  0311                     	;# 
   634  0312                     	;# 
   635  0313                     	;# 
   636  0314                     	;# 
   637  0315                     	;# 
   638  0315                     	;# 
   639  0316                     	;# 
   640  0317                     	;# 
   641  0318                     	;# 
   642  038C                     	;# 
   643  038D                     	;# 
   644  038E                     	;# 
   645  0391                     	;# 
   646  0392                     	;# 
   647  0393                     	;# 
   648  0394                     	;# 
   649  0395                     	;# 
   650  0396                     	;# 
   651  0397                     	;# 
   652  0398                     	;# 
   653  0399                     	;# 
   654  039A                     	;# 
   655  039C                     	;# 
   656  039D                     	;# 
   657  039E                     	;# 
   658  039F                     	;# 
   659  0411                     	;# 
   660  0411                     	;# 
   661  0412                     	;# 
   662  0413                     	;# 
   663  0414                     	;# 
   664  0415                     	;# 
   665  0416                     	;# 
   666  0417                     	;# 
   667  0418                     	;# 
   668  0418                     	;# 
   669  0419                     	;# 
   670  041A                     	;# 
   671  041B                     	;# 
   672  041C                     	;# 
   673  041D                     	;# 
   674  041E                     	;# 
   675  041F                     	;# 
   676  0498                     	;# 
   677  0498                     	;# 
   678  0499                     	;# 
   679  049A                     	;# 
   680  049B                     	;# 
   681  049B                     	;# 
   682  049C                     	;# 
   683  049D                     	;# 
   684  049E                     	;# 
   685  049F                     	;# 
   686  0617                     	;# 
   687  0618                     	;# 
   688  0619                     	;# 
   689  0619                     	;# 
   690  061A                     	;# 
   691  061B                     	;# 
   692  061C                     	;# 
   693  061C                     	;# 
   694  061F                     	;# 
   695  0691                     	;# 
   696  0692                     	;# 
   697  0693                     	;# 
   698  0694                     	;# 
   699  0695                     	;# 
   700  0696                     	;# 
   701  0697                     	;# 
   702  0698                     	;# 
   703  0699                     	;# 
   704  0711                     	;# 
   705  0712                     	;# 
   706  0713                     	;# 
   707  0714                     	;# 
   708  0715                     	;# 
   709  0716                     	;# 
   710  0717                     	;# 
   711  0718                     	;# 
   712  0719                     	;# 
   713  0891                     	;# 
   714  0891                     	;# 
   715  0891                     	;# 
   716  0891                     	;# 
   717  0891                     	;# 
   718  0891                     	;# 
   719  0892                     	;# 
   720  0892                     	;# 
   721  0892                     	;# 
   722  0893                     	;# 
   723  0893                     	;# 
   724  0893                     	;# 
   725  0893                     	;# 
   726  0893                     	;# 
   727  0893                     	;# 
   728  0894                     	;# 
   729  0894                     	;# 
   730  0894                     	;# 
   731  0895                     	;# 
   732  0895                     	;# 
   733  0895                     	;# 
   734  0896                     	;# 
   735  0896                     	;# 
   736  0896                     	;# 
   737  089B                     	;# 
   738  0911                     	;# 
   739  0912                     	;# 
   740  0913                     	;# 
   741  0914                     	;# 
   742  0915                     	;# 
   743  0916                     	;# 
   744  0918                     	;# 
   745  0919                     	;# 
   746  091A                     	;# 
   747  091B                     	;# 
   748  091C                     	;# 
   749  091D                     	;# 
   750  091E                     	;# 
   751  091F                     	;# 
   752  0E0F                     	;# 
   753  0E10                     	;# 
   754  0E11                     	;# 
   755  0E12                     	;# 
   756  0E13                     	;# 
   757  0E14                     	;# 
   758  0E15                     	;# 
   759  0E16                     	;# 
   760  0E17                     	;# 
   761  0E18                     	;# 
   762  0E19                     	;# 
   763  0E1A                     	;# 
   764  0E1B                     	;# 
   765  0E1C                     	;# 
   766  0E1D                     	;# 
   767  0E1E                     	;# 
   768  0E1F                     	;# 
   769  0E20                     	;# 
   770  0E21                     	;# 
   771  0E22                     	;# 
   772  0E24                     	;# 
   773  0E25                     	;# 
   774  0E28                     	;# 
   775  0E29                     	;# 
   776  0E2A                     	;# 
   777  0E2B                     	;# 
   778  0E2C                     	;# 
   779  0E2D                     	;# 
   780  0E2E                     	;# 
   781  0E2F                     	;# 
   782  0E90                     	;# 
   783  0E91                     	;# 
   784  0E92                     	;# 
   785  0E94                     	;# 
   786  0E95                     	;# 
   787  0E9C                     	;# 
   788  0E9D                     	;# 
   789  0E9E                     	;# 
   790  0E9F                     	;# 
   791  0EA0                     	;# 
   792  0EA1                     	;# 
   793  0EA2                     	;# 
   794  0EA3                     	;# 
   795  0EA4                     	;# 
   796  0EA5                     	;# 
   797  0EA6                     	;# 
   798  0EA7                     	;# 
   799  0F0F                     	;# 
   800  0F10                     	;# 
   801  0F11                     	;# 
   802  0F12                     	;# 
   803  0F13                     	;# 
   804  0F14                     	;# 
   805  0F15                     	;# 
   806  0F16                     	;# 
   807  0F17                     	;# 
   808  0F18                     	;# 
   809  0F19                     	;# 
   810  0F1A                     	;# 
   811  0F1B                     	;# 
   812  0F1C                     	;# 
   813  0F1D                     	;# 
   814  0F1E                     	;# 
   815  0F1F                     	;# 
   816  0F20                     	;# 
   817  0F21                     	;# 
   818  0F22                     	;# 
   819  0F23                     	;# 
   820  0F24                     	;# 
   821  0F25                     	;# 
   822  0F26                     	;# 
   823  0F27                     	;# 
   824  0F28                     	;# 
   825  0F29                     	;# 
   826  0F2A                     	;# 
   827  0F2B                     	;# 
   828  0F2C                     	;# 
   829  0F2D                     	;# 
   830  0F2E                     	;# 
   831  0F2F                     	;# 
   832  0F30                     	;# 
   833  0F31                     	;# 
   834  0F32                     	;# 
   835  0F33                     	;# 
   836  0F34                     	;# 
   837  0F35                     	;# 
   838  0F36                     	;# 
   839  0F37                     	;# 
   840  0FE4                     	;# 
   841  0FE5                     	;# 
   842  0FE6                     	;# 
   843  0FE7                     	;# 
   844  0FE8                     	;# 
   845  0FE9                     	;# 
   846  0FEA                     	;# 
   847  0FEB                     	;# 
   848  0FED                     	;# 
   849  0FEE                     	;# 
   850  0FEF                     	;# 
   851  0000                     	;# 
   852  0001                     	;# 
   853  0002                     	;# 
   854  0003                     	;# 
   855  0004                     	;# 
   856  0005                     	;# 
   857  0006                     	;# 
   858  0007                     	;# 
   859  0008                     	;# 
   860  0009                     	;# 
   861  000A                     	;# 
   862  000B                     	;# 
   863  000C                     	;# 
   864  000D                     	;# 
   865  000E                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  0019                     	;# 
   879  001A                     	;# 
   880  001B                     	;# 
   881  001C                     	;# 
   882  001D                     	;# 
   883  001E                     	;# 
   884  001F                     	;# 
   885  008C                     	;# 
   886  008D                     	;# 
   887  008E                     	;# 
   888  0090                     	;# 
   889  0091                     	;# 
   890  0092                     	;# 
   891  0093                     	;# 
   892  0094                     	;# 
   893  0097                     	;# 
   894  009B                     	;# 
   895  009B                     	;# 
   896  009C                     	;# 
   897  009D                     	;# 
   898  009E                     	;# 
   899  009F                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  0111                     	;# 
   904  0112                     	;# 
   905  0113                     	;# 
   906  0114                     	;# 
   907  0115                     	;# 
   908  0116                     	;# 
   909  0117                     	;# 
   910  0118                     	;# 
   911  0119                     	;# 
   912  018C                     	;# 
   913  018D                     	;# 
   914  018E                     	;# 
   915  0197                     	;# 
   916  0199                     	;# 
   917  0199                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019A                     	;# 
   921  019A                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019B                     	;# 
   925  019B                     	;# 
   926  019B                     	;# 
   927  019C                     	;# 
   928  019C                     	;# 
   929  019C                     	;# 
   930  019D                     	;# 
   931  019D                     	;# 
   932  019D                     	;# 
   933  019E                     	;# 
   934  019E                     	;# 
   935  019E                     	;# 
   936  019F                     	;# 
   937  019F                     	;# 
   938  019F                     	;# 
   939  019F                     	;# 
   940  019F                     	;# 
   941  020C                     	;# 
   942  020D                     	;# 
   943  020E                     	;# 
   944  0211                     	;# 
   945  0211                     	;# 
   946  0212                     	;# 
   947  0212                     	;# 
   948  0213                     	;# 
   949  0213                     	;# 
   950  0214                     	;# 
   951  0214                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0216                     	;# 
   957  0216                     	;# 
   958  0217                     	;# 
   959  0217                     	;# 
   960  0219                     	;# 
   961  021A                     	;# 
   962  021B                     	;# 
   963  021C                     	;# 
   964  021D                     	;# 
   965  021D                     	;# 
   966  021E                     	;# 
   967  021F                     	;# 
   968  028C                     	;# 
   969  028D                     	;# 
   970  028E                     	;# 
   971  0291                     	;# 
   972  0291                     	;# 
   973  0292                     	;# 
   974  0293                     	;# 
   975  0294                     	;# 
   976  0295                     	;# 
   977  0295                     	;# 
   978  0296                     	;# 
   979  0297                     	;# 
   980  0298                     	;# 
   981  029F                     	;# 
   982  030C                     	;# 
   983  030D                     	;# 
   984  030E                     	;# 
   985  0311                     	;# 
   986  0311                     	;# 
   987  0312                     	;# 
   988  0313                     	;# 
   989  0314                     	;# 
   990  0315                     	;# 
   991  0315                     	;# 
   992  0316                     	;# 
   993  0317                     	;# 
   994  0318                     	;# 
   995  038C                     	;# 
   996  038D                     	;# 
   997  038E                     	;# 
   998  0391                     	;# 
   999  0392                     	;# 
  1000  0393                     	;# 
  1001  0394                     	;# 
  1002  0395                     	;# 
  1003  0396                     	;# 
  1004  0397                     	;# 
  1005  0398                     	;# 
  1006  0399                     	;# 
  1007  039A                     	;# 
  1008  039C                     	;# 
  1009  039D                     	;# 
  1010  039E                     	;# 
  1011  039F                     	;# 
  1012  0411                     	;# 
  1013  0411                     	;# 
  1014  0412                     	;# 
  1015  0413                     	;# 
  1016  0414                     	;# 
  1017  0415                     	;# 
  1018  0416                     	;# 
  1019  0417                     	;# 
  1020  0418                     	;# 
  1021  0418                     	;# 
  1022  0419                     	;# 
  1023  041A                     	;# 
  1024  041B                     	;# 
  1025  041C                     	;# 
  1026  041D                     	;# 
  1027  041E                     	;# 
  1028  041F                     	;# 
  1029  0498                     	;# 
  1030  0498                     	;# 
  1031  0499                     	;# 
  1032  049A                     	;# 
  1033  049B                     	;# 
  1034  049B                     	;# 
  1035  049C                     	;# 
  1036  049D                     	;# 
  1037  049E                     	;# 
  1038  049F                     	;# 
  1039  0617                     	;# 
  1040  0618                     	;# 
  1041  0619                     	;# 
  1042  0619                     	;# 
  1043  061A                     	;# 
  1044  061B                     	;# 
  1045  061C                     	;# 
  1046  061C                     	;# 
  1047  061F                     	;# 
  1048  0691                     	;# 
  1049  0692                     	;# 
  1050  0693                     	;# 
  1051  0694                     	;# 
  1052  0695                     	;# 
  1053  0696                     	;# 
  1054  0697                     	;# 
  1055  0698                     	;# 
  1056  0699                     	;# 
  1057  0711                     	;# 
  1058  0712                     	;# 
  1059  0713                     	;# 
  1060  0714                     	;# 
  1061  0715                     	;# 
  1062  0716                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0719                     	;# 
  1066  0891                     	;# 
  1067  0891                     	;# 
  1068  0891                     	;# 
  1069  0891                     	;# 
  1070  0891                     	;# 
  1071  0891                     	;# 
  1072  0892                     	;# 
  1073  0892                     	;# 
  1074  0892                     	;# 
  1075  0893                     	;# 
  1076  0893                     	;# 
  1077  0893                     	;# 
  1078  0893                     	;# 
  1079  0893                     	;# 
  1080  0893                     	;# 
  1081  0894                     	;# 
  1082  0894                     	;# 
  1083  0894                     	;# 
  1084  0895                     	;# 
  1085  0895                     	;# 
  1086  0895                     	;# 
  1087  0896                     	;# 
  1088  0896                     	;# 
  1089  0896                     	;# 
  1090  089B                     	;# 
  1091  0911                     	;# 
  1092  0912                     	;# 
  1093  0913                     	;# 
  1094  0914                     	;# 
  1095  0915                     	;# 
  1096  0916                     	;# 
  1097  0918                     	;# 
  1098  0919                     	;# 
  1099  091A                     	;# 
  1100  091B                     	;# 
  1101  091C                     	;# 
  1102  091D                     	;# 
  1103  091E                     	;# 
  1104  091F                     	;# 
  1105  0E0F                     	;# 
  1106  0E10                     	;# 
  1107  0E11                     	;# 
  1108  0E12                     	;# 
  1109  0E13                     	;# 
  1110  0E14                     	;# 
  1111  0E15                     	;# 
  1112  0E16                     	;# 
  1113  0E17                     	;# 
  1114  0E18                     	;# 
  1115  0E19                     	;# 
  1116  0E1A                     	;# 
  1117  0E1B                     	;# 
  1118  0E1C                     	;# 
  1119  0E1D                     	;# 
  1120  0E1E                     	;# 
  1121  0E1F                     	;# 
  1122  0E20                     	;# 
  1123  0E21                     	;# 
  1124  0E22                     	;# 
  1125  0E24                     	;# 
  1126  0E25                     	;# 
  1127  0E28                     	;# 
  1128  0E29                     	;# 
  1129  0E2A                     	;# 
  1130  0E2B                     	;# 
  1131  0E2C                     	;# 
  1132  0E2D                     	;# 
  1133  0E2E                     	;# 
  1134  0E2F                     	;# 
  1135  0E90                     	;# 
  1136  0E91                     	;# 
  1137  0E92                     	;# 
  1138  0E94                     	;# 
  1139  0E95                     	;# 
  1140  0E9C                     	;# 
  1141  0E9D                     	;# 
  1142  0E9E                     	;# 
  1143  0E9F                     	;# 
  1144  0EA0                     	;# 
  1145  0EA1                     	;# 
  1146  0EA2                     	;# 
  1147  0EA3                     	;# 
  1148  0EA4                     	;# 
  1149  0EA5                     	;# 
  1150  0EA6                     	;# 
  1151  0EA7                     	;# 
  1152  0F0F                     	;# 
  1153  0F10                     	;# 
  1154  0F11                     	;# 
  1155  0F12                     	;# 
  1156  0F13                     	;# 
  1157  0F14                     	;# 
  1158  0F15                     	;# 
  1159  0F16                     	;# 
  1160  0F17                     	;# 
  1161  0F18                     	;# 
  1162  0F19                     	;# 
  1163  0F1A                     	;# 
  1164  0F1B                     	;# 
  1165  0F1C                     	;# 
  1166  0F1D                     	;# 
  1167  0F1E                     	;# 
  1168  0F1F                     	;# 
  1169  0F20                     	;# 
  1170  0F21                     	;# 
  1171  0F22                     	;# 
  1172  0F23                     	;# 
  1173  0F24                     	;# 
  1174  0F25                     	;# 
  1175  0F26                     	;# 
  1176  0F27                     	;# 
  1177  0F28                     	;# 
  1178  0F29                     	;# 
  1179  0F2A                     	;# 
  1180  0F2B                     	;# 
  1181  0F2C                     	;# 
  1182  0F2D                     	;# 
  1183  0F2E                     	;# 
  1184  0F2F                     	;# 
  1185  0F30                     	;# 
  1186  0F31                     	;# 
  1187  0F32                     	;# 
  1188  0F33                     	;# 
  1189  0F34                     	;# 
  1190  0F35                     	;# 
  1191  0F36                     	;# 
  1192  0F37                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  0010                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0013                     	;# 
  1223  0014                     	;# 
  1224  0015                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  0019                     	;# 
  1232  001A                     	;# 
  1233  001B                     	;# 
  1234  001C                     	;# 
  1235  001D                     	;# 
  1236  001E                     	;# 
  1237  001F                     	;# 
  1238  008C                     	;# 
  1239  008D                     	;# 
  1240  008E                     	;# 
  1241  0090                     	;# 
  1242  0091                     	;# 
  1243  0092                     	;# 
  1244  0093                     	;# 
  1245  0094                     	;# 
  1246  0097                     	;# 
  1247  009B                     	;# 
  1248  009B                     	;# 
  1249  009C                     	;# 
  1250  009D                     	;# 
  1251  009E                     	;# 
  1252  009F                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  018C                     	;# 
  1266  018D                     	;# 
  1267  018E                     	;# 
  1268  0197                     	;# 
  1269  0199                     	;# 
  1270  0199                     	;# 
  1271  0199                     	;# 
  1272  019A                     	;# 
  1273  019A                     	;# 
  1274  019A                     	;# 
  1275  019B                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019C                     	;# 
  1281  019C                     	;# 
  1282  019C                     	;# 
  1283  019D                     	;# 
  1284  019D                     	;# 
  1285  019D                     	;# 
  1286  019E                     	;# 
  1287  019E                     	;# 
  1288  019E                     	;# 
  1289  019F                     	;# 
  1290  019F                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  019F                     	;# 
  1294  020C                     	;# 
  1295  020D                     	;# 
  1296  020E                     	;# 
  1297  0211                     	;# 
  1298  0211                     	;# 
  1299  0212                     	;# 
  1300  0212                     	;# 
  1301  0213                     	;# 
  1302  0213                     	;# 
  1303  0214                     	;# 
  1304  0214                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0215                     	;# 
  1308  0215                     	;# 
  1309  0216                     	;# 
  1310  0216                     	;# 
  1311  0217                     	;# 
  1312  0217                     	;# 
  1313  0219                     	;# 
  1314  021A                     	;# 
  1315  021B                     	;# 
  1316  021C                     	;# 
  1317  021D                     	;# 
  1318  021D                     	;# 
  1319  021E                     	;# 
  1320  021F                     	;# 
  1321  028C                     	;# 
  1322  028D                     	;# 
  1323  028E                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0294                     	;# 
  1329  0295                     	;# 
  1330  0295                     	;# 
  1331  0296                     	;# 
  1332  0297                     	;# 
  1333  0298                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  030E                     	;# 
  1338  0311                     	;# 
  1339  0311                     	;# 
  1340  0312                     	;# 
  1341  0313                     	;# 
  1342  0314                     	;# 
  1343  0315                     	;# 
  1344  0315                     	;# 
  1345  0316                     	;# 
  1346  0317                     	;# 
  1347  0318                     	;# 
  1348  038C                     	;# 
  1349  038D                     	;# 
  1350  038E                     	;# 
  1351  0391                     	;# 
  1352  0392                     	;# 
  1353  0393                     	;# 
  1354  0394                     	;# 
  1355  0395                     	;# 
  1356  0396                     	;# 
  1357  0397                     	;# 
  1358  0398                     	;# 
  1359  0399                     	;# 
  1360  039A                     	;# 
  1361  039C                     	;# 
  1362  039D                     	;# 
  1363  039E                     	;# 
  1364  039F                     	;# 
  1365  0411                     	;# 
  1366  0411                     	;# 
  1367  0412                     	;# 
  1368  0413                     	;# 
  1369  0414                     	;# 
  1370  0415                     	;# 
  1371  0416                     	;# 
  1372  0417                     	;# 
  1373  0418                     	;# 
  1374  0418                     	;# 
  1375  0419                     	;# 
  1376  041A                     	;# 
  1377  041B                     	;# 
  1378  041C                     	;# 
  1379  041D                     	;# 
  1380  041E                     	;# 
  1381  041F                     	;# 
  1382  0498                     	;# 
  1383  0498                     	;# 
  1384  0499                     	;# 
  1385  049A                     	;# 
  1386  049B                     	;# 
  1387  049B                     	;# 
  1388  049C                     	;# 
  1389  049D                     	;# 
  1390  049E                     	;# 
  1391  049F                     	;# 
  1392  0617                     	;# 
  1393  0618                     	;# 
  1394  0619                     	;# 
  1395  0619                     	;# 
  1396  061A                     	;# 
  1397  061B                     	;# 
  1398  061C                     	;# 
  1399  061C                     	;# 
  1400  061F                     	;# 
  1401  0691                     	;# 
  1402  0692                     	;# 
  1403  0693                     	;# 
  1404  0694                     	;# 
  1405  0695                     	;# 
  1406  0696                     	;# 
  1407  0697                     	;# 
  1408  0698                     	;# 
  1409  0699                     	;# 
  1410  0711                     	;# 
  1411  0712                     	;# 
  1412  0713                     	;# 
  1413  0714                     	;# 
  1414  0715                     	;# 
  1415  0716                     	;# 
  1416  0717                     	;# 
  1417  0718                     	;# 
  1418  0719                     	;# 
  1419  0891                     	;# 
  1420  0891                     	;# 
  1421  0891                     	;# 
  1422  0891                     	;# 
  1423  0891                     	;# 
  1424  0891                     	;# 
  1425  0892                     	;# 
  1426  0892                     	;# 
  1427  0892                     	;# 
  1428  0893                     	;# 
  1429  0893                     	;# 
  1430  0893                     	;# 
  1431  0893                     	;# 
  1432  0893                     	;# 
  1433  0893                     	;# 
  1434  0894                     	;# 
  1435  0894                     	;# 
  1436  0894                     	;# 
  1437  0895                     	;# 
  1438  0895                     	;# 
  1439  0895                     	;# 
  1440  0896                     	;# 
  1441  0896                     	;# 
  1442  0896                     	;# 
  1443  089B                     	;# 
  1444  0911                     	;# 
  1445  0912                     	;# 
  1446  0913                     	;# 
  1447  0914                     	;# 
  1448  0915                     	;# 
  1449  0916                     	;# 
  1450  0918                     	;# 
  1451  0919                     	;# 
  1452  091A                     	;# 
  1453  091B                     	;# 
  1454  091C                     	;# 
  1455  091D                     	;# 
  1456  091E                     	;# 
  1457  091F                     	;# 
  1458  0E0F                     	;# 
  1459  0E10                     	;# 
  1460  0E11                     	;# 
  1461  0E12                     	;# 
  1462  0E13                     	;# 
  1463  0E14                     	;# 
  1464  0E15                     	;# 
  1465  0E16                     	;# 
  1466  0E17                     	;# 
  1467  0E18                     	;# 
  1468  0E19                     	;# 
  1469  0E1A                     	;# 
  1470  0E1B                     	;# 
  1471  0E1C                     	;# 
  1472  0E1D                     	;# 
  1473  0E1E                     	;# 
  1474  0E1F                     	;# 
  1475  0E20                     	;# 
  1476  0E21                     	;# 
  1477  0E22                     	;# 
  1478  0E24                     	;# 
  1479  0E25                     	;# 
  1480  0E28                     	;# 
  1481  0E29                     	;# 
  1482  0E2A                     	;# 
  1483  0E2B                     	;# 
  1484  0E2C                     	;# 
  1485  0E2D                     	;# 
  1486  0E2E                     	;# 
  1487  0E2F                     	;# 
  1488  0E90                     	;# 
  1489  0E91                     	;# 
  1490  0E92                     	;# 
  1491  0E94                     	;# 
  1492  0E95                     	;# 
  1493  0E9C                     	;# 
  1494  0E9D                     	;# 
  1495  0E9E                     	;# 
  1496  0E9F                     	;# 
  1497  0EA0                     	;# 
  1498  0EA1                     	;# 
  1499  0EA2                     	;# 
  1500  0EA3                     	;# 
  1501  0EA4                     	;# 
  1502  0EA5                     	;# 
  1503  0EA6                     	;# 
  1504  0EA7                     	;# 
  1505  0F0F                     	;# 
  1506  0F10                     	;# 
  1507  0F11                     	;# 
  1508  0F12                     	;# 
  1509  0F13                     	;# 
  1510  0F14                     	;# 
  1511  0F15                     	;# 
  1512  0F16                     	;# 
  1513  0F17                     	;# 
  1514  0F18                     	;# 
  1515  0F19                     	;# 
  1516  0F1A                     	;# 
  1517  0F1B                     	;# 
  1518  0F1C                     	;# 
  1519  0F1D                     	;# 
  1520  0F1E                     	;# 
  1521  0F1F                     	;# 
  1522  0F20                     	;# 
  1523  0F21                     	;# 
  1524  0F22                     	;# 
  1525  0F23                     	;# 
  1526  0F24                     	;# 
  1527  0F25                     	;# 
  1528  0F26                     	;# 
  1529  0F27                     	;# 
  1530  0F28                     	;# 
  1531  0F29                     	;# 
  1532  0F2A                     	;# 
  1533  0F2B                     	;# 
  1534  0F2C                     	;# 
  1535  0F2D                     	;# 
  1536  0F2E                     	;# 
  1537  0F2F                     	;# 
  1538  0F30                     	;# 
  1539  0F31                     	;# 
  1540  0F32                     	;# 
  1541  0F33                     	;# 
  1542  0F34                     	;# 
  1543  0F35                     	;# 
  1544  0F36                     	;# 
  1545  0F37                     	;# 
  1546  0FE4                     	;# 
  1547  0FE5                     	;# 
  1548  0FE6                     	;# 
  1549  0FE7                     	;# 
  1550  0FE8                     	;# 
  1551  0FE9                     	;# 
  1552  0FEA                     	;# 
  1553  0FEB                     	;# 
  1554  0FED                     	;# 
  1555  0FEE                     	;# 
  1556  0FEF                     	;# 
  1557  0000                     	;# 
  1558  0001                     	;# 
  1559  0002                     	;# 
  1560  0003                     	;# 
  1561  0004                     	;# 
  1562  0005                     	;# 
  1563  0006                     	;# 
  1564  0007                     	;# 
  1565  0008                     	;# 
  1566  0009                     	;# 
  1567  000A                     	;# 
  1568  000B                     	;# 
  1569  000C                     	;# 
  1570  000D                     	;# 
  1571  000E                     	;# 
  1572  0010                     	;# 
  1573  0011                     	;# 
  1574  0012                     	;# 
  1575  0013                     	;# 
  1576  0014                     	;# 
  1577  0015                     	;# 
  1578  0015                     	;# 
  1579  0016                     	;# 
  1580  0016                     	;# 
  1581  0017                     	;# 
  1582  0018                     	;# 
  1583  0019                     	;# 
  1584  0019                     	;# 
  1585  001A                     	;# 
  1586  001B                     	;# 
  1587  001C                     	;# 
  1588  001D                     	;# 
  1589  001E                     	;# 
  1590  001F                     	;# 
  1591  008C                     	;# 
  1592  008D                     	;# 
  1593  008E                     	;# 
  1594  0090                     	;# 
  1595  0091                     	;# 
  1596  0092                     	;# 
  1597  0093                     	;# 
  1598  0094                     	;# 
  1599  0097                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  009F                     	;# 
  1606  010C                     	;# 
  1607  010D                     	;# 
  1608  010E                     	;# 
  1609  0111                     	;# 
  1610  0112                     	;# 
  1611  0113                     	;# 
  1612  0114                     	;# 
  1613  0115                     	;# 
  1614  0116                     	;# 
  1615  0117                     	;# 
  1616  0118                     	;# 
  1617  0119                     	;# 
  1618  018C                     	;# 
  1619  018D                     	;# 
  1620  018E                     	;# 
  1621  0197                     	;# 
  1622  0199                     	;# 
  1623  0199                     	;# 
  1624  0199                     	;# 
  1625  019A                     	;# 
  1626  019A                     	;# 
  1627  019A                     	;# 
  1628  019B                     	;# 
  1629  019B                     	;# 
  1630  019B                     	;# 
  1631  019B                     	;# 
  1632  019B                     	;# 
  1633  019C                     	;# 
  1634  019C                     	;# 
  1635  019C                     	;# 
  1636  019D                     	;# 
  1637  019D                     	;# 
  1638  019D                     	;# 
  1639  019E                     	;# 
  1640  019E                     	;# 
  1641  019E                     	;# 
  1642  019F                     	;# 
  1643  019F                     	;# 
  1644  019F                     	;# 
  1645  019F                     	;# 
  1646  019F                     	;# 
  1647  020C                     	;# 
  1648  020D                     	;# 
  1649  020E                     	;# 
  1650  0211                     	;# 
  1651  0211                     	;# 
  1652  0212                     	;# 
  1653  0212                     	;# 
  1654  0213                     	;# 
  1655  0213                     	;# 
  1656  0214                     	;# 
  1657  0214                     	;# 
  1658  0215                     	;# 
  1659  0215                     	;# 
  1660  0215                     	;# 
  1661  0215                     	;# 
  1662  0216                     	;# 
  1663  0216                     	;# 
  1664  0217                     	;# 
  1665  0217                     	;# 
  1666  0219                     	;# 
  1667  021A                     	;# 
  1668  021B                     	;# 
  1669  021C                     	;# 
  1670  021D                     	;# 
  1671  021D                     	;# 
  1672  021E                     	;# 
  1673  021F                     	;# 
  1674  028C                     	;# 
  1675  028D                     	;# 
  1676  028E                     	;# 
  1677  0291                     	;# 
  1678  0291                     	;# 
  1679  0292                     	;# 
  1680  0293                     	;# 
  1681  0294                     	;# 
  1682  0295                     	;# 
  1683  0295                     	;# 
  1684  0296                     	;# 
  1685  0297                     	;# 
  1686  0298                     	;# 
  1687  029F                     	;# 
  1688  030C                     	;# 
  1689  030D                     	;# 
  1690  030E                     	;# 
  1691  0311                     	;# 
  1692  0311                     	;# 
  1693  0312                     	;# 
  1694  0313                     	;# 
  1695  0314                     	;# 
  1696  0315                     	;# 
  1697  0315                     	;# 
  1698  0316                     	;# 
  1699  0317                     	;# 
  1700  0318                     	;# 
  1701  038C                     	;# 
  1702  038D                     	;# 
  1703  038E                     	;# 
  1704  0391                     	;# 
  1705  0392                     	;# 
  1706  0393                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0397                     	;# 
  1711  0398                     	;# 
  1712  0399                     	;# 
  1713  039A                     	;# 
  1714  039C                     	;# 
  1715  039D                     	;# 
  1716  039E                     	;# 
  1717  039F                     	;# 
  1718  0411                     	;# 
  1719  0411                     	;# 
  1720  0412                     	;# 
  1721  0413                     	;# 
  1722  0414                     	;# 
  1723  0415                     	;# 
  1724  0416                     	;# 
  1725  0417                     	;# 
  1726  0418                     	;# 
  1727  0418                     	;# 
  1728  0419                     	;# 
  1729  041A                     	;# 
  1730  041B                     	;# 
  1731  041C                     	;# 
  1732  041D                     	;# 
  1733  041E                     	;# 
  1734  041F                     	;# 
  1735  0498                     	;# 
  1736  0498                     	;# 
  1737  0499                     	;# 
  1738  049A                     	;# 
  1739  049B                     	;# 
  1740  049B                     	;# 
  1741  049C                     	;# 
  1742  049D                     	;# 
  1743  049E                     	;# 
  1744  049F                     	;# 
  1745  0617                     	;# 
  1746  0618                     	;# 
  1747  0619                     	;# 
  1748  0619                     	;# 
  1749  061A                     	;# 
  1750  061B                     	;# 
  1751  061C                     	;# 
  1752  061C                     	;# 
  1753  061F                     	;# 
  1754  0691                     	;# 
  1755  0692                     	;# 
  1756  0693                     	;# 
  1757  0694                     	;# 
  1758  0695                     	;# 
  1759  0696                     	;# 
  1760  0697                     	;# 
  1761  0698                     	;# 
  1762  0699                     	;# 
  1763  0711                     	;# 
  1764  0712                     	;# 
  1765  0713                     	;# 
  1766  0714                     	;# 
  1767  0715                     	;# 
  1768  0716                     	;# 
  1769  0717                     	;# 
  1770  0718                     	;# 
  1771  0719                     	;# 
  1772  0891                     	;# 
  1773  0891                     	;# 
  1774  0891                     	;# 
  1775  0891                     	;# 
  1776  0891                     	;# 
  1777  0891                     	;# 
  1778  0892                     	;# 
  1779  0892                     	;# 
  1780  0892                     	;# 
  1781  0893                     	;# 
  1782  0893                     	;# 
  1783  0893                     	;# 
  1784  0893                     	;# 
  1785  0893                     	;# 
  1786  0893                     	;# 
  1787  0894                     	;# 
  1788  0894                     	;# 
  1789  0894                     	;# 
  1790  0895                     	;# 
  1791  0895                     	;# 
  1792  0895                     	;# 
  1793  0896                     	;# 
  1794  0896                     	;# 
  1795  0896                     	;# 
  1796  089B                     	;# 
  1797  0911                     	;# 
  1798  0912                     	;# 
  1799  0913                     	;# 
  1800  0914                     	;# 
  1801  0915                     	;# 
  1802  0916                     	;# 
  1803  0918                     	;# 
  1804  0919                     	;# 
  1805  091A                     	;# 
  1806  091B                     	;# 
  1807  091C                     	;# 
  1808  091D                     	;# 
  1809  091E                     	;# 
  1810  091F                     	;# 
  1811  0E0F                     	;# 
  1812  0E10                     	;# 
  1813  0E11                     	;# 
  1814  0E12                     	;# 
  1815  0E13                     	;# 
  1816  0E14                     	;# 
  1817  0E15                     	;# 
  1818  0E16                     	;# 
  1819  0E17                     	;# 
  1820  0E18                     	;# 
  1821  0E19                     	;# 
  1822  0E1A                     	;# 
  1823  0E1B                     	;# 
  1824  0E1C                     	;# 
  1825  0E1D                     	;# 
  1826  0E1E                     	;# 
  1827  0E1F                     	;# 
  1828  0E20                     	;# 
  1829  0E21                     	;# 
  1830  0E22                     	;# 
  1831  0E24                     	;# 
  1832  0E25                     	;# 
  1833  0E28                     	;# 
  1834  0E29                     	;# 
  1835  0E2A                     	;# 
  1836  0E2B                     	;# 
  1837  0E2C                     	;# 
  1838  0E2D                     	;# 
  1839  0E2E                     	;# 
  1840  0E2F                     	;# 
  1841  0E90                     	;# 
  1842  0E91                     	;# 
  1843  0E92                     	;# 
  1844  0E94                     	;# 
  1845  0E95                     	;# 
  1846  0E9C                     	;# 
  1847  0E9D                     	;# 
  1848  0E9E                     	;# 
  1849  0E9F                     	;# 
  1850  0EA0                     	;# 
  1851  0EA1                     	;# 
  1852  0EA2                     	;# 
  1853  0EA3                     	;# 
  1854  0EA4                     	;# 
  1855  0EA5                     	;# 
  1856  0EA6                     	;# 
  1857  0EA7                     	;# 
  1858  0F0F                     	;# 
  1859  0F10                     	;# 
  1860  0F11                     	;# 
  1861  0F12                     	;# 
  1862  0F13                     	;# 
  1863  0F14                     	;# 
  1864  0F15                     	;# 
  1865  0F16                     	;# 
  1866  0F17                     	;# 
  1867  0F18                     	;# 
  1868  0F19                     	;# 
  1869  0F1A                     	;# 
  1870  0F1B                     	;# 
  1871  0F1C                     	;# 
  1872  0F1D                     	;# 
  1873  0F1E                     	;# 
  1874  0F1F                     	;# 
  1875  0F20                     	;# 
  1876  0F21                     	;# 
  1877  0F22                     	;# 
  1878  0F23                     	;# 
  1879  0F24                     	;# 
  1880  0F25                     	;# 
  1881  0F26                     	;# 
  1882  0F27                     	;# 
  1883  0F28                     	;# 
  1884  0F29                     	;# 
  1885  0F2A                     	;# 
  1886  0F2B                     	;# 
  1887  0F2C                     	;# 
  1888  0F2D                     	;# 
  1889  0F2E                     	;# 
  1890  0F2F                     	;# 
  1891  0F30                     	;# 
  1892  0F31                     	;# 
  1893  0F32                     	;# 
  1894  0F33                     	;# 
  1895  0F34                     	;# 
  1896  0F35                     	;# 
  1897  0F36                     	;# 
  1898  0F37                     	;# 
  1899  0FE4                     	;# 
  1900  0FE5                     	;# 
  1901  0FE6                     	;# 
  1902  0FE7                     	;# 
  1903  0FE8                     	;# 
  1904  0FE9                     	;# 
  1905  0FEA                     	;# 
  1906  0FEB                     	;# 
  1907  0FED                     	;# 
  1908  0FEE                     	;# 
  1909  0FEF                     	;# 
  1910  0000                     	;# 
  1911  0001                     	;# 
  1912  0002                     	;# 
  1913  0003                     	;# 
  1914  0004                     	;# 
  1915  0005                     	;# 
  1916  0006                     	;# 
  1917  0007                     	;# 
  1918  0008                     	;# 
  1919  0009                     	;# 
  1920  000A                     	;# 
  1921  000B                     	;# 
  1922  000C                     	;# 
  1923  000D                     	;# 
  1924  000E                     	;# 
  1925  0010                     	;# 
  1926  0011                     	;# 
  1927  0012                     	;# 
  1928  0013                     	;# 
  1929  0014                     	;# 
  1930  0015                     	;# 
  1931  0015                     	;# 
  1932  0016                     	;# 
  1933  0016                     	;# 
  1934  0017                     	;# 
  1935  0018                     	;# 
  1936  0019                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  001D                     	;# 
  1942  001E                     	;# 
  1943  001F                     	;# 
  1944  008C                     	;# 
  1945  008D                     	;# 
  1946  008E                     	;# 
  1947  0090                     	;# 
  1948  0091                     	;# 
  1949  0092                     	;# 
  1950  0093                     	;# 
  1951  0094                     	;# 
  1952  0097                     	;# 
  1953  009B                     	;# 
  1954  009B                     	;# 
  1955  009C                     	;# 
  1956  009D                     	;# 
  1957  009E                     	;# 
  1958  009F                     	;# 
  1959  010C                     	;# 
  1960  010D                     	;# 
  1961  010E                     	;# 
  1962  0111                     	;# 
  1963  0112                     	;# 
  1964  0113                     	;# 
  1965  0114                     	;# 
  1966  0115                     	;# 
  1967  0116                     	;# 
  1968  0117                     	;# 
  1969  0118                     	;# 
  1970  0119                     	;# 
  1971  018C                     	;# 
  1972  018D                     	;# 
  1973  018E                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  0199                     	;# 
  1977  0199                     	;# 
  1978  019A                     	;# 
  1979  019A                     	;# 
  1980  019A                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019C                     	;# 
  1987  019C                     	;# 
  1988  019C                     	;# 
  1989  019D                     	;# 
  1990  019D                     	;# 
  1991  019D                     	;# 
  1992  019E                     	;# 
  1993  019E                     	;# 
  1994  019E                     	;# 
  1995  019F                     	;# 
  1996  019F                     	;# 
  1997  019F                     	;# 
  1998  019F                     	;# 
  1999  019F                     	;# 
  2000  020C                     	;# 
  2001  020D                     	;# 
  2002  020E                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0219                     	;# 
  2020  021A                     	;# 
  2021  021B                     	;# 
  2022  021C                     	;# 
  2023  021D                     	;# 
  2024  021D                     	;# 
  2025  021E                     	;# 
  2026  021F                     	;# 
  2027  028C                     	;# 
  2028  028D                     	;# 
  2029  028E                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0294                     	;# 
  2035  0295                     	;# 
  2036  0295                     	;# 
  2037  0296                     	;# 
  2038  0297                     	;# 
  2039  0298                     	;# 
  2040  029F                     	;# 
  2041  030C                     	;# 
  2042  030D                     	;# 
  2043  030E                     	;# 
  2044  0311                     	;# 
  2045  0311                     	;# 
  2046  0312                     	;# 
  2047  0313                     	;# 
  2048  0314                     	;# 
  2049  0315                     	;# 
  2050  0315                     	;# 
  2051  0316                     	;# 
  2052  0317                     	;# 
  2053  0318                     	;# 
  2054  038C                     	;# 
  2055  038D                     	;# 
  2056  038E                     	;# 
  2057  0391                     	;# 
  2058  0392                     	;# 
  2059  0393                     	;# 
  2060  0394                     	;# 
  2061  0395                     	;# 
  2062  0396                     	;# 
  2063  0397                     	;# 
  2064  0398                     	;# 
  2065  0399                     	;# 
  2066  039A                     	;# 
  2067  039C                     	;# 
  2068  039D                     	;# 
  2069  039E                     	;# 
  2070  039F                     	;# 
  2071  0411                     	;# 
  2072  0411                     	;# 
  2073  0412                     	;# 
  2074  0413                     	;# 
  2075  0414                     	;# 
  2076  0415                     	;# 
  2077  0416                     	;# 
  2078  0417                     	;# 
  2079  0418                     	;# 
  2080  0418                     	;# 
  2081  0419                     	;# 
  2082  041A                     	;# 
  2083  041B                     	;# 
  2084  041C                     	;# 
  2085  041D                     	;# 
  2086  041E                     	;# 
  2087  041F                     	;# 
  2088  0498                     	;# 
  2089  0498                     	;# 
  2090  0499                     	;# 
  2091  049A                     	;# 
  2092  049B                     	;# 
  2093  049B                     	;# 
  2094  049C                     	;# 
  2095  049D                     	;# 
  2096  049E                     	;# 
  2097  049F                     	;# 
  2098  0617                     	;# 
  2099  0618                     	;# 
  2100  0619                     	;# 
  2101  0619                     	;# 
  2102  061A                     	;# 
  2103  061B                     	;# 
  2104  061C                     	;# 
  2105  061C                     	;# 
  2106  061F                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0696                     	;# 
  2113  0697                     	;# 
  2114  0698                     	;# 
  2115  0699                     	;# 
  2116  0711                     	;# 
  2117  0712                     	;# 
  2118  0713                     	;# 
  2119  0714                     	;# 
  2120  0715                     	;# 
  2121  0716                     	;# 
  2122  0717                     	;# 
  2123  0718                     	;# 
  2124  0719                     	;# 
  2125  0891                     	;# 
  2126  0891                     	;# 
  2127  0891                     	;# 
  2128  0891                     	;# 
  2129  0891                     	;# 
  2130  0891                     	;# 
  2131  0892                     	;# 
  2132  0892                     	;# 
  2133  0892                     	;# 
  2134  0893                     	;# 
  2135  0893                     	;# 
  2136  0893                     	;# 
  2137  0893                     	;# 
  2138  0893                     	;# 
  2139  0893                     	;# 
  2140  0894                     	;# 
  2141  0894                     	;# 
  2142  0894                     	;# 
  2143  0895                     	;# 
  2144  0895                     	;# 
  2145  0895                     	;# 
  2146  0896                     	;# 
  2147  0896                     	;# 
  2148  0896                     	;# 
  2149  089B                     	;# 
  2150  0911                     	;# 
  2151  0912                     	;# 
  2152  0913                     	;# 
  2153  0914                     	;# 
  2154  0915                     	;# 
  2155  0916                     	;# 
  2156  0918                     	;# 
  2157  0919                     	;# 
  2158  091A                     	;# 
  2159  091B                     	;# 
  2160  091C                     	;# 
  2161  091D                     	;# 
  2162  091E                     	;# 
  2163  091F                     	;# 
  2164  0E0F                     	;# 
  2165  0E10                     	;# 
  2166  0E11                     	;# 
  2167  0E12                     	;# 
  2168  0E13                     	;# 
  2169  0E14                     	;# 
  2170  0E15                     	;# 
  2171  0E16                     	;# 
  2172  0E17                     	;# 
  2173  0E18                     	;# 
  2174  0E19                     	;# 
  2175  0E1A                     	;# 
  2176  0E1B                     	;# 
  2177  0E1C                     	;# 
  2178  0E1D                     	;# 
  2179  0E1E                     	;# 
  2180  0E1F                     	;# 
  2181  0E20                     	;# 
  2182  0E21                     	;# 
  2183  0E22                     	;# 
  2184  0E24                     	;# 
  2185  0E25                     	;# 
  2186  0E28                     	;# 
  2187  0E29                     	;# 
  2188  0E2A                     	;# 
  2189  0E2B                     	;# 
  2190  0E2C                     	;# 
  2191  0E2D                     	;# 
  2192  0E2E                     	;# 
  2193  0E2F                     	;# 
  2194  0E90                     	;# 
  2195  0E91                     	;# 
  2196  0E92                     	;# 
  2197  0E94                     	;# 
  2198  0E95                     	;# 
  2199  0E9C                     	;# 
  2200  0E9D                     	;# 
  2201  0E9E                     	;# 
  2202  0E9F                     	;# 
  2203  0EA0                     	;# 
  2204  0EA1                     	;# 
  2205  0EA2                     	;# 
  2206  0EA3                     	;# 
  2207  0EA4                     	;# 
  2208  0EA5                     	;# 
  2209  0EA6                     	;# 
  2210  0EA7                     	;# 
  2211  0F0F                     	;# 
  2212  0F10                     	;# 
  2213  0F11                     	;# 
  2214  0F12                     	;# 
  2215  0F13                     	;# 
  2216  0F14                     	;# 
  2217  0F15                     	;# 
  2218  0F16                     	;# 
  2219  0F17                     	;# 
  2220  0F18                     	;# 
  2221  0F19                     	;# 
  2222  0F1A                     	;# 
  2223  0F1B                     	;# 
  2224  0F1C                     	;# 
  2225  0F1D                     	;# 
  2226  0F1E                     	;# 
  2227  0F1F                     	;# 
  2228  0F20                     	;# 
  2229  0F21                     	;# 
  2230  0F22                     	;# 
  2231  0F23                     	;# 
  2232  0F24                     	;# 
  2233  0F25                     	;# 
  2234  0F26                     	;# 
  2235  0F27                     	;# 
  2236  0F28                     	;# 
  2237  0F29                     	;# 
  2238  0F2A                     	;# 
  2239  0F2B                     	;# 
  2240  0F2C                     	;# 
  2241  0F2D                     	;# 
  2242  0F2E                     	;# 
  2243  0F2F                     	;# 
  2244  0F30                     	;# 
  2245  0F31                     	;# 
  2246  0F32                     	;# 
  2247  0F33                     	;# 
  2248  0F34                     	;# 
  2249  0F35                     	;# 
  2250  0F36                     	;# 
  2251  0F37                     	;# 
  2252  0FE4                     	;# 
  2253  0FE5                     	;# 
  2254  0FE6                     	;# 
  2255  0FE7                     	;# 
  2256  0FE8                     	;# 
  2257  0FE9                     	;# 
  2258  0FEA                     	;# 
  2259  0FEB                     	;# 
  2260  0FED                     	;# 
  2261  0FEE                     	;# 
  2262  0FEF                     	;# 
  2263  0000                     	;# 
  2264  0001                     	;# 
  2265  0002                     	;# 
  2266  0003                     	;# 
  2267  0004                     	;# 
  2268  0005                     	;# 
  2269  0006                     	;# 
  2270  0007                     	;# 
  2271  0008                     	;# 
  2272  0009                     	;# 
  2273  000A                     	;# 
  2274  000B                     	;# 
  2275  000C                     	;# 
  2276  000D                     	;# 
  2277  000E                     	;# 
  2278  0010                     	;# 
  2279  0011                     	;# 
  2280  0012                     	;# 
  2281  0013                     	;# 
  2282  0014                     	;# 
  2283  0015                     	;# 
  2284  0015                     	;# 
  2285  0016                     	;# 
  2286  0016                     	;# 
  2287  0017                     	;# 
  2288  0018                     	;# 
  2289  0019                     	;# 
  2290  0019                     	;# 
  2291  001A                     	;# 
  2292  001B                     	;# 
  2293  001C                     	;# 
  2294  001D                     	;# 
  2295  001E                     	;# 
  2296  001F                     	;# 
  2297  008C                     	;# 
  2298  008D                     	;# 
  2299  008E                     	;# 
  2300  0090                     	;# 
  2301  0091                     	;# 
  2302  0092                     	;# 
  2303  0093                     	;# 
  2304  0094                     	;# 
  2305  0097                     	;# 
  2306  009B                     	;# 
  2307  009B                     	;# 
  2308  009C                     	;# 
  2309  009D                     	;# 
  2310  009E                     	;# 
  2311  009F                     	;# 
  2312  010C                     	;# 
  2313  010D                     	;# 
  2314  010E                     	;# 
  2315  0111                     	;# 
  2316  0112                     	;# 
  2317  0113                     	;# 
  2318  0114                     	;# 
  2319  0115                     	;# 
  2320  0116                     	;# 
  2321  0117                     	;# 
  2322  0118                     	;# 
  2323  0119                     	;# 
  2324  018C                     	;# 
  2325  018D                     	;# 
  2326  018E                     	;# 
  2327  0197                     	;# 
  2328  0199                     	;# 
  2329  0199                     	;# 
  2330  0199                     	;# 
  2331  019A                     	;# 
  2332  019A                     	;# 
  2333  019A                     	;# 
  2334  019B                     	;# 
  2335  019B                     	;# 
  2336  019B                     	;# 
  2337  019B                     	;# 
  2338  019B                     	;# 
  2339  019C                     	;# 
  2340  019C                     	;# 
  2341  019C                     	;# 
  2342  019D                     	;# 
  2343  019D                     	;# 
  2344  019D                     	;# 
  2345  019E                     	;# 
  2346  019E                     	;# 
  2347  019E                     	;# 
  2348  019F                     	;# 
  2349  019F                     	;# 
  2350  019F                     	;# 
  2351  019F                     	;# 
  2352  019F                     	;# 
  2353  020C                     	;# 
  2354  020D                     	;# 
  2355  020E                     	;# 
  2356  0211                     	;# 
  2357  0211                     	;# 
  2358  0212                     	;# 
  2359  0212                     	;# 
  2360  0213                     	;# 
  2361  0213                     	;# 
  2362  0214                     	;# 
  2363  0214                     	;# 
  2364  0215                     	;# 
  2365  0215                     	;# 
  2366  0215                     	;# 
  2367  0215                     	;# 
  2368  0216                     	;# 
  2369  0216                     	;# 
  2370  0217                     	;# 
  2371  0217                     	;# 
  2372  0219                     	;# 
  2373  021A                     	;# 
  2374  021B                     	;# 
  2375  021C                     	;# 
  2376  021D                     	;# 
  2377  021D                     	;# 
  2378  021E                     	;# 
  2379  021F                     	;# 
  2380  028C                     	;# 
  2381  028D                     	;# 
  2382  028E                     	;# 
  2383  0291                     	;# 
  2384  0291                     	;# 
  2385  0292                     	;# 
  2386  0293                     	;# 
  2387  0294                     	;# 
  2388  0295                     	;# 
  2389  0295                     	;# 
  2390  0296                     	;# 
  2391  0297                     	;# 
  2392  0298                     	;# 
  2393  029F                     	;# 
  2394  030C                     	;# 
  2395  030D                     	;# 
  2396  030E                     	;# 
  2397  0311                     	;# 
  2398  0311                     	;# 
  2399  0312                     	;# 
  2400  0313                     	;# 
  2401  0314                     	;# 
  2402  0315                     	;# 
  2403  0315                     	;# 
  2404  0316                     	;# 
  2405  0317                     	;# 
  2406  0318                     	;# 
  2407  038C                     	;# 
  2408  038D                     	;# 
  2409  038E                     	;# 
  2410  0391                     	;# 
  2411  0392                     	;# 
  2412  0393                     	;# 
  2413  0394                     	;# 
  2414  0395                     	;# 
  2415  0396                     	;# 
  2416  0397                     	;# 
  2417  0398                     	;# 
  2418  0399                     	;# 
  2419  039A                     	;# 
  2420  039C                     	;# 
  2421  039D                     	;# 
  2422  039E                     	;# 
  2423  039F                     	;# 
  2424  0411                     	;# 
  2425  0411                     	;# 
  2426  0412                     	;# 
  2427  0413                     	;# 
  2428  0414                     	;# 
  2429  0415                     	;# 
  2430  0416                     	;# 
  2431  0417                     	;# 
  2432  0418                     	;# 
  2433  0418                     	;# 
  2434  0419                     	;# 
  2435  041A                     	;# 
  2436  041B                     	;# 
  2437  041C                     	;# 
  2438  041D                     	;# 
  2439  041E                     	;# 
  2440  041F                     	;# 
  2441  0498                     	;# 
  2442  0498                     	;# 
  2443  0499                     	;# 
  2444  049A                     	;# 
  2445  049B                     	;# 
  2446  049B                     	;# 
  2447  049C                     	;# 
  2448  049D                     	;# 
  2449  049E                     	;# 
  2450  049F                     	;# 
  2451  0617                     	;# 
  2452  0618                     	;# 
  2453  0619                     	;# 
  2454  0619                     	;# 
  2455  061A                     	;# 
  2456  061B                     	;# 
  2457  061C                     	;# 
  2458  061C                     	;# 
  2459  061F                     	;# 
  2460  0691                     	;# 
  2461  0692                     	;# 
  2462  0693                     	;# 
  2463  0694                     	;# 
  2464  0695                     	;# 
  2465  0696                     	;# 
  2466  0697                     	;# 
  2467  0698                     	;# 
  2468  0699                     	;# 
  2469  0711                     	;# 
  2470  0712                     	;# 
  2471  0713                     	;# 
  2472  0714                     	;# 
  2473  0715                     	;# 
  2474  0716                     	;# 
  2475  0717                     	;# 
  2476  0718                     	;# 
  2477  0719                     	;# 
  2478  0891                     	;# 
  2479  0891                     	;# 
  2480  0891                     	;# 
  2481  0891                     	;# 
  2482  0891                     	;# 
  2483  0891                     	;# 
  2484  0892                     	;# 
  2485  0892                     	;# 
  2486  0892                     	;# 
  2487  0893                     	;# 
  2488  0893                     	;# 
  2489  0893                     	;# 
  2490  0893                     	;# 
  2491  0893                     	;# 
  2492  0893                     	;# 
  2493  0894                     	;# 
  2494  0894                     	;# 
  2495  0894                     	;# 
  2496  0895                     	;# 
  2497  0895                     	;# 
  2498  0895                     	;# 
  2499  0896                     	;# 
  2500  0896                     	;# 
  2501  0896                     	;# 
  2502  089B                     	;# 
  2503  0911                     	;# 
  2504  0912                     	;# 
  2505  0913                     	;# 
  2506  0914                     	;# 
  2507  0915                     	;# 
  2508  0916                     	;# 
  2509  0918                     	;# 
  2510  0919                     	;# 
  2511  091A                     	;# 
  2512  091B                     	;# 
  2513  091C                     	;# 
  2514  091D                     	;# 
  2515  091E                     	;# 
  2516  091F                     	;# 
  2517  0E0F                     	;# 
  2518  0E10                     	;# 
  2519  0E11                     	;# 
  2520  0E12                     	;# 
  2521  0E13                     	;# 
  2522  0E14                     	;# 
  2523  0E15                     	;# 
  2524  0E16                     	;# 
  2525  0E17                     	;# 
  2526  0E18                     	;# 
  2527  0E19                     	;# 
  2528  0E1A                     	;# 
  2529  0E1B                     	;# 
  2530  0E1C                     	;# 
  2531  0E1D                     	;# 
  2532  0E1E                     	;# 
  2533  0E1F                     	;# 
  2534  0E20                     	;# 
  2535  0E21                     	;# 
  2536  0E22                     	;# 
  2537  0E24                     	;# 
  2538  0E25                     	;# 
  2539  0E28                     	;# 
  2540  0E29                     	;# 
  2541  0E2A                     	;# 
  2542  0E2B                     	;# 
  2543  0E2C                     	;# 
  2544  0E2D                     	;# 
  2545  0E2E                     	;# 
  2546  0E2F                     	;# 
  2547  0E90                     	;# 
  2548  0E91                     	;# 
  2549  0E92                     	;# 
  2550  0E94                     	;# 
  2551  0E95                     	;# 
  2552  0E9C                     	;# 
  2553  0E9D                     	;# 
  2554  0E9E                     	;# 
  2555  0E9F                     	;# 
  2556  0EA0                     	;# 
  2557  0EA1                     	;# 
  2558  0EA2                     	;# 
  2559  0EA3                     	;# 
  2560  0EA4                     	;# 
  2561  0EA5                     	;# 
  2562  0EA6                     	;# 
  2563  0EA7                     	;# 
  2564  0F0F                     	;# 
  2565  0F10                     	;# 
  2566  0F11                     	;# 
  2567  0F12                     	;# 
  2568  0F13                     	;# 
  2569  0F14                     	;# 
  2570  0F15                     	;# 
  2571  0F16                     	;# 
  2572  0F17                     	;# 
  2573  0F18                     	;# 
  2574  0F19                     	;# 
  2575  0F1A                     	;# 
  2576  0F1B                     	;# 
  2577  0F1C                     	;# 
  2578  0F1D                     	;# 
  2579  0F1E                     	;# 
  2580  0F1F                     	;# 
  2581  0F20                     	;# 
  2582  0F21                     	;# 
  2583  0F22                     	;# 
  2584  0F23                     	;# 
  2585  0F24                     	;# 
  2586  0F25                     	;# 
  2587  0F26                     	;# 
  2588  0F27                     	;# 
  2589  0F28                     	;# 
  2590  0F29                     	;# 
  2591  0F2A                     	;# 
  2592  0F2B                     	;# 
  2593  0F2C                     	;# 
  2594  0F2D                     	;# 
  2595  0F2E                     	;# 
  2596  0F2F                     	;# 
  2597  0F30                     	;# 
  2598  0F31                     	;# 
  2599  0F32                     	;# 
  2600  0F33                     	;# 
  2601  0F34                     	;# 
  2602  0F35                     	;# 
  2603  0F36                     	;# 
  2604  0F37                     	;# 
  2605  0FE4                     	;# 
  2606  0FE5                     	;# 
  2607  0FE6                     	;# 
  2608  0FE7                     	;# 
  2609  0FE8                     	;# 
  2610  0FE9                     	;# 
  2611  0FEA                     	;# 
  2612  0FEB                     	;# 
  2613  0FED                     	;# 
  2614  0FEE                     	;# 
  2615  0FEF                     	;# 
  2616  0000                     	;# 
  2617  0001                     	;# 
  2618  0002                     	;# 
  2619  0003                     	;# 
  2620  0004                     	;# 
  2621  0005                     	;# 
  2622  0006                     	;# 
  2623  0007                     	;# 
  2624  0008                     	;# 
  2625  0009                     	;# 
  2626  000A                     	;# 
  2627  000B                     	;# 
  2628  000C                     	;# 
  2629  000D                     	;# 
  2630  000E                     	;# 
  2631  0010                     	;# 
  2632  0011                     	;# 
  2633  0012                     	;# 
  2634  0013                     	;# 
  2635  0014                     	;# 
  2636  0015                     	;# 
  2637  0015                     	;# 
  2638  0016                     	;# 
  2639  0016                     	;# 
  2640  0017                     	;# 
  2641  0018                     	;# 
  2642  0019                     	;# 
  2643  0019                     	;# 
  2644  001A                     	;# 
  2645  001B                     	;# 
  2646  001C                     	;# 
  2647  001D                     	;# 
  2648  001E                     	;# 
  2649  001F                     	;# 
  2650  008C                     	;# 
  2651  008D                     	;# 
  2652  008E                     	;# 
  2653  0090                     	;# 
  2654  0091                     	;# 
  2655  0092                     	;# 
  2656  0093                     	;# 
  2657  0094                     	;# 
  2658  0097                     	;# 
  2659  009B                     	;# 
  2660  009B                     	;# 
  2661  009C                     	;# 
  2662  009D                     	;# 
  2663  009E                     	;# 
  2664  009F                     	;# 
  2665  010C                     	;# 
  2666  010D                     	;# 
  2667  010E                     	;# 
  2668  0111                     	;# 
  2669  0112                     	;# 
  2670  0113                     	;# 
  2671  0114                     	;# 
  2672  0115                     	;# 
  2673  0116                     	;# 
  2674  0117                     	;# 
  2675  0118                     	;# 
  2676  0119                     	;# 
  2677  018C                     	;# 
  2678  018D                     	;# 
  2679  018E                     	;# 
  2680  0197                     	;# 
  2681  0199                     	;# 
  2682  0199                     	;# 
  2683  0199                     	;# 
  2684  019A                     	;# 
  2685  019A                     	;# 
  2686  019A                     	;# 
  2687  019B                     	;# 
  2688  019B                     	;# 
  2689  019B                     	;# 
  2690  019B                     	;# 
  2691  019B                     	;# 
  2692  019C                     	;# 
  2693  019C                     	;# 
  2694  019C                     	;# 
  2695  019D                     	;# 
  2696  019D                     	;# 
  2697  019D                     	;# 
  2698  019E                     	;# 
  2699  019E                     	;# 
  2700  019E                     	;# 
  2701  019F                     	;# 
  2702  019F                     	;# 
  2703  019F                     	;# 
  2704  019F                     	;# 
  2705  019F                     	;# 
  2706  020C                     	;# 
  2707  020D                     	;# 
  2708  020E                     	;# 
  2709  0211                     	;# 
  2710  0211                     	;# 
  2711  0212                     	;# 
  2712  0212                     	;# 
  2713  0213                     	;# 
  2714  0213                     	;# 
  2715  0214                     	;# 
  2716  0214                     	;# 
  2717  0215                     	;# 
  2718  0215                     	;# 
  2719  0215                     	;# 
  2720  0215                     	;# 
  2721  0216                     	;# 
  2722  0216                     	;# 
  2723  0217                     	;# 
  2724  0217                     	;# 
  2725  0219                     	;# 
  2726  021A                     	;# 
  2727  021B                     	;# 
  2728  021C                     	;# 
  2729  021D                     	;# 
  2730  021D                     	;# 
  2731  021E                     	;# 
  2732  021F                     	;# 
  2733  028C                     	;# 
  2734  028D                     	;# 
  2735  028E                     	;# 
  2736  0291                     	;# 
  2737  0291                     	;# 
  2738  0292                     	;# 
  2739  0293                     	;# 
  2740  0294                     	;# 
  2741  0295                     	;# 
  2742  0295                     	;# 
  2743  0296                     	;# 
  2744  0297                     	;# 
  2745  0298                     	;# 
  2746  029F                     	;# 
  2747  030C                     	;# 
  2748  030D                     	;# 
  2749  030E                     	;# 
  2750  0311                     	;# 
  2751  0311                     	;# 
  2752  0312                     	;# 
  2753  0313                     	;# 
  2754  0314                     	;# 
  2755  0315                     	;# 
  2756  0315                     	;# 
  2757  0316                     	;# 
  2758  0317                     	;# 
  2759  0318                     	;# 
  2760  038C                     	;# 
  2761  038D                     	;# 
  2762  038E                     	;# 
  2763  0391                     	;# 
  2764  0392                     	;# 
  2765  0393                     	;# 
  2766  0394                     	;# 
  2767  0395                     	;# 
  2768  0396                     	;# 
  2769  0397                     	;# 
  2770  0398                     	;# 
  2771  0399                     	;# 
  2772  039A                     	;# 
  2773  039C                     	;# 
  2774  039D                     	;# 
  2775  039E                     	;# 
  2776  039F                     	;# 
  2777  0411                     	;# 
  2778  0411                     	;# 
  2779  0412                     	;# 
  2780  0413                     	;# 
  2781  0414                     	;# 
  2782  0415                     	;# 
  2783  0416                     	;# 
  2784  0417                     	;# 
  2785  0418                     	;# 
  2786  0418                     	;# 
  2787  0419                     	;# 
  2788  041A                     	;# 
  2789  041B                     	;# 
  2790  041C                     	;# 
  2791  041D                     	;# 
  2792  041E                     	;# 
  2793  041F                     	;# 
  2794  0498                     	;# 
  2795  0498                     	;# 
  2796  0499                     	;# 
  2797  049A                     	;# 
  2798  049B                     	;# 
  2799  049B                     	;# 
  2800  049C                     	;# 
  2801  049D                     	;# 
  2802  049E                     	;# 
  2803  049F                     	;# 
  2804  0617                     	;# 
  2805  0618                     	;# 
  2806  0619                     	;# 
  2807  0619                     	;# 
  2808  061A                     	;# 
  2809  061B                     	;# 
  2810  061C                     	;# 
  2811  061C                     	;# 
  2812  061F                     	;# 
  2813  0691                     	;# 
  2814  0692                     	;# 
  2815  0693                     	;# 
  2816  0694                     	;# 
  2817  0695                     	;# 
  2818  0696                     	;# 
  2819  0697                     	;# 
  2820  0698                     	;# 
  2821  0699                     	;# 
  2822  0711                     	;# 
  2823  0712                     	;# 
  2824  0713                     	;# 
  2825  0714                     	;# 
  2826  0715                     	;# 
  2827  0716                     	;# 
  2828  0717                     	;# 
  2829  0718                     	;# 
  2830  0719                     	;# 
  2831  0891                     	;# 
  2832  0891                     	;# 
  2833  0891                     	;# 
  2834  0891                     	;# 
  2835  0891                     	;# 
  2836  0891                     	;# 
  2837  0892                     	;# 
  2838  0892                     	;# 
  2839  0892                     	;# 
  2840  0893                     	;# 
  2841  0893                     	;# 
  2842  0893                     	;# 
  2843  0893                     	;# 
  2844  0893                     	;# 
  2845  0893                     	;# 
  2846  0894                     	;# 
  2847  0894                     	;# 
  2848  0894                     	;# 
  2849  0895                     	;# 
  2850  0895                     	;# 
  2851  0895                     	;# 
  2852  0896                     	;# 
  2853  0896                     	;# 
  2854  0896                     	;# 
  2855  089B                     	;# 
  2856  0911                     	;# 
  2857  0912                     	;# 
  2858  0913                     	;# 
  2859  0914                     	;# 
  2860  0915                     	;# 
  2861  0916                     	;# 
  2862  0918                     	;# 
  2863  0919                     	;# 
  2864  091A                     	;# 
  2865  091B                     	;# 
  2866  091C                     	;# 
  2867  091D                     	;# 
  2868  091E                     	;# 
  2869  091F                     	;# 
  2870  0E0F                     	;# 
  2871  0E10                     	;# 
  2872  0E11                     	;# 
  2873  0E12                     	;# 
  2874  0E13                     	;# 
  2875  0E14                     	;# 
  2876  0E15                     	;# 
  2877  0E16                     	;# 
  2878  0E17                     	;# 
  2879  0E18                     	;# 
  2880  0E19                     	;# 
  2881  0E1A                     	;# 
  2882  0E1B                     	;# 
  2883  0E1C                     	;# 
  2884  0E1D                     	;# 
  2885  0E1E                     	;# 
  2886  0E1F                     	;# 
  2887  0E20                     	;# 
  2888  0E21                     	;# 
  2889  0E22                     	;# 
  2890  0E24                     	;# 
  2891  0E25                     	;# 
  2892  0E28                     	;# 
  2893  0E29                     	;# 
  2894  0E2A                     	;# 
  2895  0E2B                     	;# 
  2896  0E2C                     	;# 
  2897  0E2D                     	;# 
  2898  0E2E                     	;# 
  2899  0E2F                     	;# 
  2900  0E90                     	;# 
  2901  0E91                     	;# 
  2902  0E92                     	;# 
  2903  0E94                     	;# 
  2904  0E95                     	;# 
  2905  0E9C                     	;# 
  2906  0E9D                     	;# 
  2907  0E9E                     	;# 
  2908  0E9F                     	;# 
  2909  0EA0                     	;# 
  2910  0EA1                     	;# 
  2911  0EA2                     	;# 
  2912  0EA3                     	;# 
  2913  0EA4                     	;# 
  2914  0EA5                     	;# 
  2915  0EA6                     	;# 
  2916  0EA7                     	;# 
  2917  0F0F                     	;# 
  2918  0F10                     	;# 
  2919  0F11                     	;# 
  2920  0F12                     	;# 
  2921  0F13                     	;# 
  2922  0F14                     	;# 
  2923  0F15                     	;# 
  2924  0F16                     	;# 
  2925  0F17                     	;# 
  2926  0F18                     	;# 
  2927  0F19                     	;# 
  2928  0F1A                     	;# 
  2929  0F1B                     	;# 
  2930  0F1C                     	;# 
  2931  0F1D                     	;# 
  2932  0F1E                     	;# 
  2933  0F1F                     	;# 
  2934  0F20                     	;# 
  2935  0F21                     	;# 
  2936  0F22                     	;# 
  2937  0F23                     	;# 
  2938  0F24                     	;# 
  2939  0F25                     	;# 
  2940  0F26                     	;# 
  2941  0F27                     	;# 
  2942  0F28                     	;# 
  2943  0F29                     	;# 
  2944  0F2A                     	;# 
  2945  0F2B                     	;# 
  2946  0F2C                     	;# 
  2947  0F2D                     	;# 
  2948  0F2E                     	;# 
  2949  0F2F                     	;# 
  2950  0F30                     	;# 
  2951  0F31                     	;# 
  2952  0F32                     	;# 
  2953  0F33                     	;# 
  2954  0F34                     	;# 
  2955  0F35                     	;# 
  2956  0F36                     	;# 
  2957  0F37                     	;# 
  2958  0FE4                     	;# 
  2959  0FE5                     	;# 
  2960  0FE6                     	;# 
  2961  0FE7                     	;# 
  2962  0FE8                     	;# 
  2963  0FE9                     	;# 
  2964  0FEA                     	;# 
  2965  0FEB                     	;# 
  2966  0FED                     	;# 
  2967  0FEE                     	;# 
  2968  0FEF                     	;# 
  2969  0000                     	;# 
  2970  0001                     	;# 
  2971  0002                     	;# 
  2972  0003                     	;# 
  2973  0004                     	;# 
  2974  0005                     	;# 
  2975  0006                     	;# 
  2976  0007                     	;# 
  2977  0008                     	;# 
  2978  0009                     	;# 
  2979  000A                     	;# 
  2980  000B                     	;# 
  2981  000C                     	;# 
  2982  000D                     	;# 
  2983  000E                     	;# 
  2984  0010                     	;# 
  2985  0011                     	;# 
  2986  0012                     	;# 
  2987  0013                     	;# 
  2988  0014                     	;# 
  2989  0015                     	;# 
  2990  0015                     	;# 
  2991  0016                     	;# 
  2992  0016                     	;# 
  2993  0017                     	;# 
  2994  0018                     	;# 
  2995  0019                     	;# 
  2996  0019                     	;# 
  2997  001A                     	;# 
  2998  001B                     	;# 
  2999  001C                     	;# 
  3000  001D                     	;# 
  3001  001E                     	;# 
  3002  001F                     	;# 
  3003  008C                     	;# 
  3004  008D                     	;# 
  3005  008E                     	;# 
  3006  0090                     	;# 
  3007  0091                     	;# 
  3008  0092                     	;# 
  3009  0093                     	;# 
  3010  0094                     	;# 
  3011  0097                     	;# 
  3012  009B                     	;# 
  3013  009B                     	;# 
  3014  009C                     	;# 
  3015  009D                     	;# 
  3016  009E                     	;# 
  3017  009F                     	;# 
  3018  010C                     	;# 
  3019  010D                     	;# 
  3020  010E                     	;# 
  3021  0111                     	;# 
  3022  0112                     	;# 
  3023  0113                     	;# 
  3024  0114                     	;# 
  3025  0115                     	;# 
  3026  0116                     	;# 
  3027  0117                     	;# 
  3028  0118                     	;# 
  3029  0119                     	;# 
  3030  018C                     	;# 
  3031  018D                     	;# 
  3032  018E                     	;# 
  3033  0197                     	;# 
  3034  0199                     	;# 
  3035  0199                     	;# 
  3036  0199                     	;# 
  3037  019A                     	;# 
  3038  019A                     	;# 
  3039  019A                     	;# 
  3040  019B                     	;# 
  3041  019B                     	;# 
  3042  019B                     	;# 
  3043  019B                     	;# 
  3044  019B                     	;# 
  3045  019C                     	;# 
  3046  019C                     	;# 
  3047  019C                     	;# 
  3048  019D                     	;# 
  3049  019D                     	;# 
  3050  019D                     	;# 
  3051  019E                     	;# 
  3052  019E                     	;# 
  3053  019E                     	;# 
  3054  019F                     	;# 
  3055  019F                     	;# 
  3056  019F                     	;# 
  3057  019F                     	;# 
  3058  019F                     	;# 
  3059  020C                     	;# 
  3060  020D                     	;# 
  3061  020E                     	;# 
  3062  0211                     	;# 
  3063  0211                     	;# 
  3064  0212                     	;# 
  3065  0212                     	;# 
  3066  0213                     	;# 
  3067  0213                     	;# 
  3068  0214                     	;# 
  3069  0214                     	;# 
  3070  0215                     	;# 
  3071  0215                     	;# 
  3072  0215                     	;# 
  3073  0215                     	;# 
  3074  0216                     	;# 
  3075  0216                     	;# 
  3076  0217                     	;# 
  3077  0217                     	;# 
  3078  0219                     	;# 
  3079  021A                     	;# 
  3080  021B                     	;# 
  3081  021C                     	;# 
  3082  021D                     	;# 
  3083  021D                     	;# 
  3084  021E                     	;# 
  3085  021F                     	;# 
  3086  028C                     	;# 
  3087  028D                     	;# 
  3088  028E                     	;# 
  3089  0291                     	;# 
  3090  0291                     	;# 
  3091  0292                     	;# 
  3092  0293                     	;# 
  3093  0294                     	;# 
  3094  0295                     	;# 
  3095  0295                     	;# 
  3096  0296                     	;# 
  3097  0297                     	;# 
  3098  0298                     	;# 
  3099  029F                     	;# 
  3100  030C                     	;# 
  3101  030D                     	;# 
  3102  030E                     	;# 
  3103  0311                     	;# 
  3104  0311                     	;# 
  3105  0312                     	;# 
  3106  0313                     	;# 
  3107  0314                     	;# 
  3108  0315                     	;# 
  3109  0315                     	;# 
  3110  0316                     	;# 
  3111  0317                     	;# 
  3112  0318                     	;# 
  3113  038C                     	;# 
  3114  038D                     	;# 
  3115  038E                     	;# 
  3116  0391                     	;# 
  3117  0392                     	;# 
  3118  0393                     	;# 
  3119  0394                     	;# 
  3120  0395                     	;# 
  3121  0396                     	;# 
  3122  0397                     	;# 
  3123  0398                     	;# 
  3124  0399                     	;# 
  3125  039A                     	;# 
  3126  039C                     	;# 
  3127  039D                     	;# 
  3128  039E                     	;# 
  3129  039F                     	;# 
  3130  0411                     	;# 
  3131  0411                     	;# 
  3132  0412                     	;# 
  3133  0413                     	;# 
  3134  0414                     	;# 
  3135  0415                     	;# 
  3136  0416                     	;# 
  3137  0417                     	;# 
  3138  0418                     	;# 
  3139  0418                     	;# 
  3140  0419                     	;# 
  3141  041A                     	;# 
  3142  041B                     	;# 
  3143  041C                     	;# 
  3144  041D                     	;# 
  3145  041E                     	;# 
  3146  041F                     	;# 
  3147  0498                     	;# 
  3148  0498                     	;# 
  3149  0499                     	;# 
  3150  049A                     	;# 
  3151  049B                     	;# 
  3152  049B                     	;# 
  3153  049C                     	;# 
  3154  049D                     	;# 
  3155  049E                     	;# 
  3156  049F                     	;# 
  3157  0617                     	;# 
  3158  0618                     	;# 
  3159  0619                     	;# 
  3160  0619                     	;# 
  3161  061A                     	;# 
  3162  061B                     	;# 
  3163  061C                     	;# 
  3164  061C                     	;# 
  3165  061F                     	;# 
  3166  0691                     	;# 
  3167  0692                     	;# 
  3168  0693                     	;# 
  3169  0694                     	;# 
  3170  0695                     	;# 
  3171  0696                     	;# 
  3172  0697                     	;# 
  3173  0698                     	;# 
  3174  0699                     	;# 
  3175  0711                     	;# 
  3176  0712                     	;# 
  3177  0713                     	;# 
  3178  0714                     	;# 
  3179  0715                     	;# 
  3180  0716                     	;# 
  3181  0717                     	;# 
  3182  0718                     	;# 
  3183  0719                     	;# 
  3184  0891                     	;# 
  3185  0891                     	;# 
  3186  0891                     	;# 
  3187  0891                     	;# 
  3188  0891                     	;# 
  3189  0891                     	;# 
  3190  0892                     	;# 
  3191  0892                     	;# 
  3192  0892                     	;# 
  3193  0893                     	;# 
  3194  0893                     	;# 
  3195  0893                     	;# 
  3196  0893                     	;# 
  3197  0893                     	;# 
  3198  0893                     	;# 
  3199  0894                     	;# 
  3200  0894                     	;# 
  3201  0894                     	;# 
  3202  0895                     	;# 
  3203  0895                     	;# 
  3204  0895                     	;# 
  3205  0896                     	;# 
  3206  0896                     	;# 
  3207  0896                     	;# 
  3208  089B                     	;# 
  3209  0911                     	;# 
  3210  0912                     	;# 
  3211  0913                     	;# 
  3212  0914                     	;# 
  3213  0915                     	;# 
  3214  0916                     	;# 
  3215  0918                     	;# 
  3216  0919                     	;# 
  3217  091A                     	;# 
  3218  091B                     	;# 
  3219  091C                     	;# 
  3220  091D                     	;# 
  3221  091E                     	;# 
  3222  091F                     	;# 
  3223  0E0F                     	;# 
  3224  0E10                     	;# 
  3225  0E11                     	;# 
  3226  0E12                     	;# 
  3227  0E13                     	;# 
  3228  0E14                     	;# 
  3229  0E15                     	;# 
  3230  0E16                     	;# 
  3231  0E17                     	;# 
  3232  0E18                     	;# 
  3233  0E19                     	;# 
  3234  0E1A                     	;# 
  3235  0E1B                     	;# 
  3236  0E1C                     	;# 
  3237  0E1D                     	;# 
  3238  0E1E                     	;# 
  3239  0E1F                     	;# 
  3240  0E20                     	;# 
  3241  0E21                     	;# 
  3242  0E22                     	;# 
  3243  0E24                     	;# 
  3244  0E25                     	;# 
  3245  0E28                     	;# 
  3246  0E29                     	;# 
  3247  0E2A                     	;# 
  3248  0E2B                     	;# 
  3249  0E2C                     	;# 
  3250  0E2D                     	;# 
  3251  0E2E                     	;# 
  3252  0E2F                     	;# 
  3253  0E90                     	;# 
  3254  0E91                     	;# 
  3255  0E92                     	;# 
  3256  0E94                     	;# 
  3257  0E95                     	;# 
  3258  0E9C                     	;# 
  3259  0E9D                     	;# 
  3260  0E9E                     	;# 
  3261  0E9F                     	;# 
  3262  0EA0                     	;# 
  3263  0EA1                     	;# 
  3264  0EA2                     	;# 
  3265  0EA3                     	;# 
  3266  0EA4                     	;# 
  3267  0EA5                     	;# 
  3268  0EA6                     	;# 
  3269  0EA7                     	;# 
  3270  0F0F                     	;# 
  3271  0F10                     	;# 
  3272  0F11                     	;# 
  3273  0F12                     	;# 
  3274  0F13                     	;# 
  3275  0F14                     	;# 
  3276  0F15                     	;# 
  3277  0F16                     	;# 
  3278  0F17                     	;# 
  3279  0F18                     	;# 
  3280  0F19                     	;# 
  3281  0F1A                     	;# 
  3282  0F1B                     	;# 
  3283  0F1C                     	;# 
  3284  0F1D                     	;# 
  3285  0F1E                     	;# 
  3286  0F1F                     	;# 
  3287  0F20                     	;# 
  3288  0F21                     	;# 
  3289  0F22                     	;# 
  3290  0F23                     	;# 
  3291  0F24                     	;# 
  3292  0F25                     	;# 
  3293  0F26                     	;# 
  3294  0F27                     	;# 
  3295  0F28                     	;# 
  3296  0F29                     	;# 
  3297  0F2A                     	;# 
  3298  0F2B                     	;# 
  3299  0F2C                     	;# 
  3300  0F2D                     	;# 
  3301  0F2E                     	;# 
  3302  0F2F                     	;# 
  3303  0F30                     	;# 
  3304  0F31                     	;# 
  3305  0F32                     	;# 
  3306  0F33                     	;# 
  3307  0F34                     	;# 
  3308  0F35                     	;# 
  3309  0F36                     	;# 
  3310  0F37                     	;# 
  3311  0FE4                     	;# 
  3312  0FE5                     	;# 
  3313  0FE6                     	;# 
  3314  0FE7                     	;# 
  3315  0FE8                     	;# 
  3316  0FE9                     	;# 
  3317  0FEA                     	;# 
  3318  0FEB                     	;# 
  3319  0FED                     	;# 
  3320  0FEE                     	;# 
  3321  0FEF                     	;# 
  3322  0000                     	;# 
  3323  0001                     	;# 
  3324  0002                     	;# 
  3325  0003                     	;# 
  3326  0004                     	;# 
  3327  0005                     	;# 
  3328  0006                     	;# 
  3329  0007                     	;# 
  3330  0008                     	;# 
  3331  0009                     	;# 
  3332  000A                     	;# 
  3333  000B                     	;# 
  3334  000C                     	;# 
  3335  000D                     	;# 
  3336  000E                     	;# 
  3337  0010                     	;# 
  3338  0011                     	;# 
  3339  0012                     	;# 
  3340  0013                     	;# 
  3341  0014                     	;# 
  3342  0015                     	;# 
  3343  0015                     	;# 
  3344  0016                     	;# 
  3345  0016                     	;# 
  3346  0017                     	;# 
  3347  0018                     	;# 
  3348  0019                     	;# 
  3349  0019                     	;# 
  3350  001A                     	;# 
  3351  001B                     	;# 
  3352  001C                     	;# 
  3353  001D                     	;# 
  3354  001E                     	;# 
  3355  001F                     	;# 
  3356  008C                     	;# 
  3357  008D                     	;# 
  3358  008E                     	;# 
  3359  0090                     	;# 
  3360  0091                     	;# 
  3361  0092                     	;# 
  3362  0093                     	;# 
  3363  0094                     	;# 
  3364  0097                     	;# 
  3365  009B                     	;# 
  3366  009B                     	;# 
  3367  009C                     	;# 
  3368  009D                     	;# 
  3369  009E                     	;# 
  3370  009F                     	;# 
  3371  010C                     	;# 
  3372  010D                     	;# 
  3373  010E                     	;# 
  3374  0111                     	;# 
  3375  0112                     	;# 
  3376  0113                     	;# 
  3377  0114                     	;# 
  3378  0115                     	;# 
  3379  0116                     	;# 
  3380  0117                     	;# 
  3381  0118                     	;# 
  3382  0119                     	;# 
  3383  018C                     	;# 
  3384  018D                     	;# 
  3385  018E                     	;# 
  3386  0197                     	;# 
  3387  0199                     	;# 
  3388  0199                     	;# 
  3389  0199                     	;# 
  3390  019A                     	;# 
  3391  019A                     	;# 
  3392  019A                     	;# 
  3393  019B                     	;# 
  3394  019B                     	;# 
  3395  019B                     	;# 
  3396  019B                     	;# 
  3397  019B                     	;# 
  3398  019C                     	;# 
  3399  019C                     	;# 
  3400  019C                     	;# 
  3401  019D                     	;# 
  3402  019D                     	;# 
  3403  019D                     	;# 
  3404  019E                     	;# 
  3405  019E                     	;# 
  3406  019E                     	;# 
  3407  019F                     	;# 
  3408  019F                     	;# 
  3409  019F                     	;# 
  3410  019F                     	;# 
  3411  019F                     	;# 
  3412  020C                     	;# 
  3413  020D                     	;# 
  3414  020E                     	;# 
  3415  0211                     	;# 
  3416  0211                     	;# 
  3417  0212                     	;# 
  3418  0212                     	;# 
  3419  0213                     	;# 
  3420  0213                     	;# 
  3421  0214                     	;# 
  3422  0214                     	;# 
  3423  0215                     	;# 
  3424  0215                     	;# 
  3425  0215                     	;# 
  3426  0215                     	;# 
  3427  0216                     	;# 
  3428  0216                     	;# 
  3429  0217                     	;# 
  3430  0217                     	;# 
  3431  0219                     	;# 
  3432  021A                     	;# 
  3433  021B                     	;# 
  3434  021C                     	;# 
  3435  021D                     	;# 
  3436  021D                     	;# 
  3437  021E                     	;# 
  3438  021F                     	;# 
  3439  028C                     	;# 
  3440  028D                     	;# 
  3441  028E                     	;# 
  3442  0291                     	;# 
  3443  0291                     	;# 
  3444  0292                     	;# 
  3445  0293                     	;# 
  3446  0294                     	;# 
  3447  0295                     	;# 
  3448  0295                     	;# 
  3449  0296                     	;# 
  3450  0297                     	;# 
  3451  0298                     	;# 
  3452  029F                     	;# 
  3453  030C                     	;# 
  3454  030D                     	;# 
  3455  030E                     	;# 
  3456  0311                     	;# 
  3457  0311                     	;# 
  3458  0312                     	;# 
  3459  0313                     	;# 
  3460  0314                     	;# 
  3461  0315                     	;# 
  3462  0315                     	;# 
  3463  0316                     	;# 
  3464  0317                     	;# 
  3465  0318                     	;# 
  3466  038C                     	;# 
  3467  038D                     	;# 
  3468  038E                     	;# 
  3469  0391                     	;# 
  3470  0392                     	;# 
  3471  0393                     	;# 
  3472  0394                     	;# 
  3473  0395                     	;# 
  3474  0396                     	;# 
  3475  0397                     	;# 
  3476  0398                     	;# 
  3477  0399                     	;# 
  3478  039A                     	;# 
  3479  039C                     	;# 
  3480  039D                     	;# 
  3481  039E                     	;# 
  3482  039F                     	;# 
  3483  0411                     	;# 
  3484  0411                     	;# 
  3485  0412                     	;# 
  3486  0413                     	;# 
  3487  0414                     	;# 
  3488  0415                     	;# 
  3489  0416                     	;# 
  3490  0417                     	;# 
  3491  0418                     	;# 
  3492  0418                     	;# 
  3493  0419                     	;# 
  3494  041A                     	;# 
  3495  041B                     	;# 
  3496  041C                     	;# 
  3497  041D                     	;# 
  3498  041E                     	;# 
  3499  041F                     	;# 
  3500  0498                     	;# 
  3501  0498                     	;# 
  3502  0499                     	;# 
  3503  049A                     	;# 
  3504  049B                     	;# 
  3505  049B                     	;# 
  3506  049C                     	;# 
  3507  049D                     	;# 
  3508  049E                     	;# 
  3509  049F                     	;# 
  3510  0617                     	;# 
  3511  0618                     	;# 
  3512  0619                     	;# 
  3513  0619                     	;# 
  3514  061A                     	;# 
  3515  061B                     	;# 
  3516  061C                     	;# 
  3517  061C                     	;# 
  3518  061F                     	;# 
  3519  0691                     	;# 
  3520  0692                     	;# 
  3521  0693                     	;# 
  3522  0694                     	;# 
  3523  0695                     	;# 
  3524  0696                     	;# 
  3525  0697                     	;# 
  3526  0698                     	;# 
  3527  0699                     	;# 
  3528  0711                     	;# 
  3529  0712                     	;# 
  3530  0713                     	;# 
  3531  0714                     	;# 
  3532  0715                     	;# 
  3533  0716                     	;# 
  3534  0717                     	;# 
  3535  0718                     	;# 
  3536  0719                     	;# 
  3537  0891                     	;# 
  3538  0891                     	;# 
  3539  0891                     	;# 
  3540  0891                     	;# 
  3541  0891                     	;# 
  3542  0891                     	;# 
  3543  0892                     	;# 
  3544  0892                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0893                     	;# 
  3548  0893                     	;# 
  3549  0893                     	;# 
  3550  0893                     	;# 
  3551  0893                     	;# 
  3552  0894                     	;# 
  3553  0894                     	;# 
  3554  0894                     	;# 
  3555  0895                     	;# 
  3556  0895                     	;# 
  3557  0895                     	;# 
  3558  0896                     	;# 
  3559  0896                     	;# 
  3560  0896                     	;# 
  3561  089B                     	;# 
  3562  0911                     	;# 
  3563  0912                     	;# 
  3564  0913                     	;# 
  3565  0914                     	;# 
  3566  0915                     	;# 
  3567  0916                     	;# 
  3568  0918                     	;# 
  3569  0919                     	;# 
  3570  091A                     	;# 
  3571  091B                     	;# 
  3572  091C                     	;# 
  3573  091D                     	;# 
  3574  091E                     	;# 
  3575  091F                     	;# 
  3576  0E0F                     	;# 
  3577  0E10                     	;# 
  3578  0E11                     	;# 
  3579  0E12                     	;# 
  3580  0E13                     	;# 
  3581  0E14                     	;# 
  3582  0E15                     	;# 
  3583  0E16                     	;# 
  3584  0E17                     	;# 
  3585  0E18                     	;# 
  3586  0E19                     	;# 
  3587  0E1A                     	;# 
  3588  0E1B                     	;# 
  3589  0E1C                     	;# 
  3590  0E1D                     	;# 
  3591  0E1E                     	;# 
  3592  0E1F                     	;# 
  3593  0E20                     	;# 
  3594  0E21                     	;# 
  3595  0E22                     	;# 
  3596  0E24                     	;# 
  3597  0E25                     	;# 
  3598  0E28                     	;# 
  3599  0E29                     	;# 
  3600  0E2A                     	;# 
  3601  0E2B                     	;# 
  3602  0E2C                     	;# 
  3603  0E2D                     	;# 
  3604  0E2E                     	;# 
  3605  0E2F                     	;# 
  3606  0E90                     	;# 
  3607  0E91                     	;# 
  3608  0E92                     	;# 
  3609  0E94                     	;# 
  3610  0E95                     	;# 
  3611  0E9C                     	;# 
  3612  0E9D                     	;# 
  3613  0E9E                     	;# 
  3614  0E9F                     	;# 
  3615  0EA0                     	;# 
  3616  0EA1                     	;# 
  3617  0EA2                     	;# 
  3618  0EA3                     	;# 
  3619  0EA4                     	;# 
  3620  0EA5                     	;# 
  3621  0EA6                     	;# 
  3622  0EA7                     	;# 
  3623  0F0F                     	;# 
  3624  0F10                     	;# 
  3625  0F11                     	;# 
  3626  0F12                     	;# 
  3627  0F13                     	;# 
  3628  0F14                     	;# 
  3629  0F15                     	;# 
  3630  0F16                     	;# 
  3631  0F17                     	;# 
  3632  0F18                     	;# 
  3633  0F19                     	;# 
  3634  0F1A                     	;# 
  3635  0F1B                     	;# 
  3636  0F1C                     	;# 
  3637  0F1D                     	;# 
  3638  0F1E                     	;# 
  3639  0F1F                     	;# 
  3640  0F20                     	;# 
  3641  0F21                     	;# 
  3642  0F22                     	;# 
  3643  0F23                     	;# 
  3644  0F24                     	;# 
  3645  0F25                     	;# 
  3646  0F26                     	;# 
  3647  0F27                     	;# 
  3648  0F28                     	;# 
  3649  0F29                     	;# 
  3650  0F2A                     	;# 
  3651  0F2B                     	;# 
  3652  0F2C                     	;# 
  3653  0F2D                     	;# 
  3654  0F2E                     	;# 
  3655  0F2F                     	;# 
  3656  0F30                     	;# 
  3657  0F31                     	;# 
  3658  0F32                     	;# 
  3659  0F33                     	;# 
  3660  0F34                     	;# 
  3661  0F35                     	;# 
  3662  0F36                     	;# 
  3663  0F37                     	;# 
  3664  0FE4                     	;# 
  3665  0FE5                     	;# 
  3666  0FE6                     	;# 
  3667  0FE7                     	;# 
  3668  0FE8                     	;# 
  3669  0FE9                     	;# 
  3670  0FEA                     	;# 
  3671  0FEB                     	;# 
  3672  0FED                     	;# 
  3673  0FEE                     	;# 
  3674  0FEF                     	;# 
  3675  0000                     	;# 
  3676  0001                     	;# 
  3677  0002                     	;# 
  3678  0003                     	;# 
  3679  0004                     	;# 
  3680  0005                     	;# 
  3681  0006                     	;# 
  3682  0007                     	;# 
  3683  0008                     	;# 
  3684  0009                     	;# 
  3685  000A                     	;# 
  3686  000B                     	;# 
  3687  000C                     	;# 
  3688  000D                     	;# 
  3689  000E                     	;# 
  3690  0010                     	;# 
  3691  0011                     	;# 
  3692  0012                     	;# 
  3693  0013                     	;# 
  3694  0014                     	;# 
  3695  0015                     	;# 
  3696  0015                     	;# 
  3697  0016                     	;# 
  3698  0016                     	;# 
  3699  0017                     	;# 
  3700  0018                     	;# 
  3701  0019                     	;# 
  3702  0019                     	;# 
  3703  001A                     	;# 
  3704  001B                     	;# 
  3705  001C                     	;# 
  3706  001D                     	;# 
  3707  001E                     	;# 
  3708  001F                     	;# 
  3709  008C                     	;# 
  3710  008D                     	;# 
  3711  008E                     	;# 
  3712  0090                     	;# 
  3713  0091                     	;# 
  3714  0092                     	;# 
  3715  0093                     	;# 
  3716  0094                     	;# 
  3717  0097                     	;# 
  3718  009B                     	;# 
  3719  009B                     	;# 
  3720  009C                     	;# 
  3721  009D                     	;# 
  3722  009E                     	;# 
  3723  009F                     	;# 
  3724  010C                     	;# 
  3725  010D                     	;# 
  3726  010E                     	;# 
  3727  0111                     	;# 
  3728  0112                     	;# 
  3729  0113                     	;# 
  3730  0114                     	;# 
  3731  0115                     	;# 
  3732  0116                     	;# 
  3733  0117                     	;# 
  3734  0118                     	;# 
  3735  0119                     	;# 
  3736  018C                     	;# 
  3737  018D                     	;# 
  3738  018E                     	;# 
  3739  0197                     	;# 
  3740  0199                     	;# 
  3741  0199                     	;# 
  3742  0199                     	;# 
  3743  019A                     	;# 
  3744  019A                     	;# 
  3745  019A                     	;# 
  3746  019B                     	;# 
  3747  019B                     	;# 
  3748  019B                     	;# 
  3749  019B                     	;# 
  3750  019B                     	;# 
  3751  019C                     	;# 
  3752  019C                     	;# 
  3753  019C                     	;# 
  3754  019D                     	;# 
  3755  019D                     	;# 
  3756  019D                     	;# 
  3757  019E                     	;# 
  3758  019E                     	;# 
  3759  019E                     	;# 
  3760  019F                     	;# 
  3761  019F                     	;# 
  3762  019F                     	;# 
  3763  019F                     	;# 
  3764  019F                     	;# 
  3765  020C                     	;# 
  3766  020D                     	;# 
  3767  020E                     	;# 
  3768  0211                     	;# 
  3769  0211                     	;# 
  3770  0212                     	;# 
  3771  0212                     	;# 
  3772  0213                     	;# 
  3773  0213                     	;# 
  3774  0214                     	;# 
  3775  0214                     	;# 
  3776  0215                     	;# 
  3777  0215                     	;# 
  3778  0215                     	;# 
  3779  0215                     	;# 
  3780  0216                     	;# 
  3781  0216                     	;# 
  3782  0217                     	;# 
  3783  0217                     	;# 
  3784  0219                     	;# 
  3785  021A                     	;# 
  3786  021B                     	;# 
  3787  021C                     	;# 
  3788  021D                     	;# 
  3789  021D                     	;# 
  3790  021E                     	;# 
  3791  021F                     	;# 
  3792  028C                     	;# 
  3793  028D                     	;# 
  3794  028E                     	;# 
  3795  0291                     	;# 
  3796  0291                     	;# 
  3797  0292                     	;# 
  3798  0293                     	;# 
  3799  0294                     	;# 
  3800  0295                     	;# 
  3801  0295                     	;# 
  3802  0296                     	;# 
  3803  0297                     	;# 
  3804  0298                     	;# 
  3805  029F                     	;# 
  3806  030C                     	;# 
  3807  030D                     	;# 
  3808  030E                     	;# 
  3809  0311                     	;# 
  3810  0311                     	;# 
  3811  0312                     	;# 
  3812  0313                     	;# 
  3813  0314                     	;# 
  3814  0315                     	;# 
  3815  0315                     	;# 
  3816  0316                     	;# 
  3817  0317                     	;# 
  3818  0318                     	;# 
  3819  038C                     	;# 
  3820  038D                     	;# 
  3821  038E                     	;# 
  3822  0391                     	;# 
  3823  0392                     	;# 
  3824  0393                     	;# 
  3825  0394                     	;# 
  3826  0395                     	;# 
  3827  0396                     	;# 
  3828  0397                     	;# 
  3829  0398                     	;# 
  3830  0399                     	;# 
  3831  039A                     	;# 
  3832  039C                     	;# 
  3833  039D                     	;# 
  3834  039E                     	;# 
  3835  039F                     	;# 
  3836  0411                     	;# 
  3837  0411                     	;# 
  3838  0412                     	;# 
  3839  0413                     	;# 
  3840  0414                     	;# 
  3841  0415                     	;# 
  3842  0416                     	;# 
  3843  0417                     	;# 
  3844  0418                     	;# 
  3845  0418                     	;# 
  3846  0419                     	;# 
  3847  041A                     	;# 
  3848  041B                     	;# 
  3849  041C                     	;# 
  3850  041D                     	;# 
  3851  041E                     	;# 
  3852  041F                     	;# 
  3853  0498                     	;# 
  3854  0498                     	;# 
  3855  0499                     	;# 
  3856  049A                     	;# 
  3857  049B                     	;# 
  3858  049B                     	;# 
  3859  049C                     	;# 
  3860  049D                     	;# 
  3861  049E                     	;# 
  3862  049F                     	;# 
  3863  0617                     	;# 
  3864  0618                     	;# 
  3865  0619                     	;# 
  3866  0619                     	;# 
  3867  061A                     	;# 
  3868  061B                     	;# 
  3869  061C                     	;# 
  3870  061C                     	;# 
  3871  061F                     	;# 
  3872  0691                     	;# 
  3873  0692                     	;# 
  3874  0693                     	;# 
  3875  0694                     	;# 
  3876  0695                     	;# 
  3877  0696                     	;# 
  3878  0697                     	;# 
  3879  0698                     	;# 
  3880  0699                     	;# 
  3881  0711                     	;# 
  3882  0712                     	;# 
  3883  0713                     	;# 
  3884  0714                     	;# 
  3885  0715                     	;# 
  3886  0716                     	;# 
  3887  0717                     	;# 
  3888  0718                     	;# 
  3889  0719                     	;# 
  3890  0891                     	;# 
  3891  0891                     	;# 
  3892  0891                     	;# 
  3893  0891                     	;# 
  3894  0891                     	;# 
  3895  0891                     	;# 
  3896  0892                     	;# 
  3897  0892                     	;# 
  3898  0892                     	;# 
  3899  0893                     	;# 
  3900  0893                     	;# 
  3901  0893                     	;# 
  3902  0893                     	;# 
  3903  0893                     	;# 
  3904  0893                     	;# 
  3905  0894                     	;# 
  3906  0894                     	;# 
  3907  0894                     	;# 
  3908  0895                     	;# 
  3909  0895                     	;# 
  3910  0895                     	;# 
  3911  0896                     	;# 
  3912  0896                     	;# 
  3913  0896                     	;# 
  3914  089B                     	;# 
  3915  0911                     	;# 
  3916  0912                     	;# 
  3917  0913                     	;# 
  3918  0914                     	;# 
  3919  0915                     	;# 
  3920  0916                     	;# 
  3921  0918                     	;# 
  3922  0919                     	;# 
  3923  091A                     	;# 
  3924  091B                     	;# 
  3925  091C                     	;# 
  3926  091D                     	;# 
  3927  091E                     	;# 
  3928  091F                     	;# 
  3929  0E0F                     	;# 
  3930  0E10                     	;# 
  3931  0E11                     	;# 
  3932  0E12                     	;# 
  3933  0E13                     	;# 
  3934  0E14                     	;# 
  3935  0E15                     	;# 
  3936  0E16                     	;# 
  3937  0E17                     	;# 
  3938  0E18                     	;# 
  3939  0E19                     	;# 
  3940  0E1A                     	;# 
  3941  0E1B                     	;# 
  3942  0E1C                     	;# 
  3943  0E1D                     	;# 
  3944  0E1E                     	;# 
  3945  0E1F                     	;# 
  3946  0E20                     	;# 
  3947  0E21                     	;# 
  3948  0E22                     	;# 
  3949  0E24                     	;# 
  3950  0E25                     	;# 
  3951  0E28                     	;# 
  3952  0E29                     	;# 
  3953  0E2A                     	;# 
  3954  0E2B                     	;# 
  3955  0E2C                     	;# 
  3956  0E2D                     	;# 
  3957  0E2E                     	;# 
  3958  0E2F                     	;# 
  3959  0E90                     	;# 
  3960  0E91                     	;# 
  3961  0E92                     	;# 
  3962  0E94                     	;# 
  3963  0E95                     	;# 
  3964  0E9C                     	;# 
  3965  0E9D                     	;# 
  3966  0E9E                     	;# 
  3967  0E9F                     	;# 
  3968  0EA0                     	;# 
  3969  0EA1                     	;# 
  3970  0EA2                     	;# 
  3971  0EA3                     	;# 
  3972  0EA4                     	;# 
  3973  0EA5                     	;# 
  3974  0EA6                     	;# 
  3975  0EA7                     	;# 
  3976  0F0F                     	;# 
  3977  0F10                     	;# 
  3978  0F11                     	;# 
  3979  0F12                     	;# 
  3980  0F13                     	;# 
  3981  0F14                     	;# 
  3982  0F15                     	;# 
  3983  0F16                     	;# 
  3984  0F17                     	;# 
  3985  0F18                     	;# 
  3986  0F19                     	;# 
  3987  0F1A                     	;# 
  3988  0F1B                     	;# 
  3989  0F1C                     	;# 
  3990  0F1D                     	;# 
  3991  0F1E                     	;# 
  3992  0F1F                     	;# 
  3993  0F20                     	;# 
  3994  0F21                     	;# 
  3995  0F22                     	;# 
  3996  0F23                     	;# 
  3997  0F24                     	;# 
  3998  0F25                     	;# 
  3999  0F26                     	;# 
  4000  0F27                     	;# 
  4001  0F28                     	;# 
  4002  0F29                     	;# 
  4003  0F2A                     	;# 
  4004  0F2B                     	;# 
  4005  0F2C                     	;# 
  4006  0F2D                     	;# 
  4007  0F2E                     	;# 
  4008  0F2F                     	;# 
  4009  0F30                     	;# 
  4010  0F31                     	;# 
  4011  0F32                     	;# 
  4012  0F33                     	;# 
  4013  0F34                     	;# 
  4014  0F35                     	;# 
  4015  0F36                     	;# 
  4016  0F37                     	;# 
  4017  0FE4                     	;# 
  4018  0FE5                     	;# 
  4019  0FE6                     	;# 
  4020  0FE7                     	;# 
  4021  0FE8                     	;# 
  4022  0FE9                     	;# 
  4023  0FEA                     	;# 
  4024  0FEB                     	;# 
  4025  0FED                     	;# 
  4026  0FEE                     	;# 
  4027  0FEF                     	;# 
  4028  0000                     	;# 
  4029  0001                     	;# 
  4030  0002                     	;# 
  4031  0003                     	;# 
  4032  0004                     	;# 
  4033  0005                     	;# 
  4034  0006                     	;# 
  4035  0007                     	;# 
  4036  0008                     	;# 
  4037  0009                     	;# 
  4038  000A                     	;# 
  4039  000B                     	;# 
  4040  000C                     	;# 
  4041  000D                     	;# 
  4042  000E                     	;# 
  4043  0010                     	;# 
  4044  0011                     	;# 
  4045  0012                     	;# 
  4046  0013                     	;# 
  4047  0014                     	;# 
  4048  0015                     	;# 
  4049  0015                     	;# 
  4050  0016                     	;# 
  4051  0016                     	;# 
  4052  0017                     	;# 
  4053  0018                     	;# 
  4054  0019                     	;# 
  4055  0019                     	;# 
  4056  001A                     	;# 
  4057  001B                     	;# 
  4058  001C                     	;# 
  4059  001D                     	;# 
  4060  001E                     	;# 
  4061  001F                     	;# 
  4062  008C                     	;# 
  4063  008D                     	;# 
  4064  008E                     	;# 
  4065  0090                     	;# 
  4066  0091                     	;# 
  4067  0092                     	;# 
  4068  0093                     	;# 
  4069  0094                     	;# 
  4070  0097                     	;# 
  4071  009B                     	;# 
  4072  009B                     	;# 
  4073  009C                     	;# 
  4074  009D                     	;# 
  4075  009E                     	;# 
  4076  009F                     	;# 
  4077  010C                     	;# 
  4078  010D                     	;# 
  4079  010E                     	;# 
  4080  0111                     	;# 
  4081  0112                     	;# 
  4082  0113                     	;# 
  4083  0114                     	;# 
  4084  0115                     	;# 
  4085  0116                     	;# 
  4086  0117                     	;# 
  4087  0118                     	;# 
  4088  0119                     	;# 
  4089  018C                     	;# 
  4090  018D                     	;# 
  4091  018E                     	;# 
  4092  0197                     	;# 
  4093  0199                     	;# 
  4094  0199                     	;# 
  4095  0199                     	;# 
  4096  019A                     	;# 
  4097  019A                     	;# 
  4098  019A                     	;# 
  4099  019B                     	;# 
  4100  019B                     	;# 
  4101  019B                     	;# 
  4102  019B                     	;# 
  4103  019B                     	;# 
  4104  019C                     	;# 
  4105  019C                     	;# 
  4106  019C                     	;# 
  4107  019D                     	;# 
  4108  019D                     	;# 
  4109  019D                     	;# 
  4110  019E                     	;# 
  4111  019E                     	;# 
  4112  019E                     	;# 
  4113  019F                     	;# 
  4114  019F                     	;# 
  4115  019F                     	;# 
  4116  019F                     	;# 
  4117  019F                     	;# 
  4118  020C                     	;# 
  4119  020D                     	;# 
  4120  020E                     	;# 
  4121  0211                     	;# 
  4122  0211                     	;# 
  4123  0212                     	;# 
  4124  0212                     	;# 
  4125  0213                     	;# 
  4126  0213                     	;# 
  4127  0214                     	;# 
  4128  0214                     	;# 
  4129  0215                     	;# 
  4130  0215                     	;# 
  4131  0215                     	;# 
  4132  0215                     	;# 
  4133  0216                     	;# 
  4134  0216                     	;# 
  4135  0217                     	;# 
  4136  0217                     	;# 
  4137  0219                     	;# 
  4138  021A                     	;# 
  4139  021B                     	;# 
  4140  021C                     	;# 
  4141  021D                     	;# 
  4142  021D                     	;# 
  4143  021E                     	;# 
  4144  021F                     	;# 
  4145  028C                     	;# 
  4146  028D                     	;# 
  4147  028E                     	;# 
  4148  0291                     	;# 
  4149  0291                     	;# 
  4150  0292                     	;# 
  4151  0293                     	;# 
  4152  0294                     	;# 
  4153  0295                     	;# 
  4154  0295                     	;# 
  4155  0296                     	;# 
  4156  0297                     	;# 
  4157  0298                     	;# 
  4158  029F                     	;# 
  4159  030C                     	;# 
  4160  030D                     	;# 
  4161  030E                     	;# 
  4162  0311                     	;# 
  4163  0311                     	;# 
  4164  0312                     	;# 
  4165  0313                     	;# 
  4166  0314                     	;# 
  4167  0315                     	;# 
  4168  0315                     	;# 
  4169  0316                     	;# 
  4170  0317                     	;# 
  4171  0318                     	;# 
  4172  038C                     	;# 
  4173  038D                     	;# 
  4174  038E                     	;# 
  4175  0391                     	;# 
  4176  0392                     	;# 
  4177  0393                     	;# 
  4178  0394                     	;# 
  4179  0395                     	;# 
  4180  0396                     	;# 
  4181  0397                     	;# 
  4182  0398                     	;# 
  4183  0399                     	;# 
  4184  039A                     	;# 
  4185  039C                     	;# 
  4186  039D                     	;# 
  4187  039E                     	;# 
  4188  039F                     	;# 
  4189  0411                     	;# 
  4190  0411                     	;# 
  4191  0412                     	;# 
  4192  0413                     	;# 
  4193  0414                     	;# 
  4194  0415                     	;# 
  4195  0416                     	;# 
  4196  0417                     	;# 
  4197  0418                     	;# 
  4198  0418                     	;# 
  4199  0419                     	;# 
  4200  041A                     	;# 
  4201  041B                     	;# 
  4202  041C                     	;# 
  4203  041D                     	;# 
  4204  041E                     	;# 
  4205  041F                     	;# 
  4206  0498                     	;# 
  4207  0498                     	;# 
  4208  0499                     	;# 
  4209  049A                     	;# 
  4210  049B                     	;# 
  4211  049B                     	;# 
  4212  049C                     	;# 
  4213  049D                     	;# 
  4214  049E                     	;# 
  4215  049F                     	;# 
  4216  0617                     	;# 
  4217  0618                     	;# 
  4218  0619                     	;# 
  4219  0619                     	;# 
  4220  061A                     	;# 
  4221  061B                     	;# 
  4222  061C                     	;# 
  4223  061C                     	;# 
  4224  061F                     	;# 
  4225  0691                     	;# 
  4226  0692                     	;# 
  4227  0693                     	;# 
  4228  0694                     	;# 
  4229  0695                     	;# 
  4230  0696                     	;# 
  4231  0697                     	;# 
  4232  0698                     	;# 
  4233  0699                     	;# 
  4234  0711                     	;# 
  4235  0712                     	;# 
  4236  0713                     	;# 
  4237  0714                     	;# 
  4238  0715                     	;# 
  4239  0716                     	;# 
  4240  0717                     	;# 
  4241  0718                     	;# 
  4242  0719                     	;# 
  4243  0891                     	;# 
  4244  0891                     	;# 
  4245  0891                     	;# 
  4246  0891                     	;# 
  4247  0891                     	;# 
  4248  0891                     	;# 
  4249  0892                     	;# 
  4250  0892                     	;# 
  4251  0892                     	;# 
  4252  0893                     	;# 
  4253  0893                     	;# 
  4254  0893                     	;# 
  4255  0893                     	;# 
  4256  0893                     	;# 
  4257  0893                     	;# 
  4258  0894                     	;# 
  4259  0894                     	;# 
  4260  0894                     	;# 
  4261  0895                     	;# 
  4262  0895                     	;# 
  4263  0895                     	;# 
  4264  0896                     	;# 
  4265  0896                     	;# 
  4266  0896                     	;# 
  4267  089B                     	;# 
  4268  0911                     	;# 
  4269  0912                     	;# 
  4270  0913                     	;# 
  4271  0914                     	;# 
  4272  0915                     	;# 
  4273  0916                     	;# 
  4274  0918                     	;# 
  4275  0919                     	;# 
  4276  091A                     	;# 
  4277  091B                     	;# 
  4278  091C                     	;# 
  4279  091D                     	;# 
  4280  091E                     	;# 
  4281  091F                     	;# 
  4282  0E0F                     	;# 
  4283  0E10                     	;# 
  4284  0E11                     	;# 
  4285  0E12                     	;# 
  4286  0E13                     	;# 
  4287  0E14                     	;# 
  4288  0E15                     	;# 
  4289  0E16                     	;# 
  4290  0E17                     	;# 
  4291  0E18                     	;# 
  4292  0E19                     	;# 
  4293  0E1A                     	;# 
  4294  0E1B                     	;# 
  4295  0E1C                     	;# 
  4296  0E1D                     	;# 
  4297  0E1E                     	;# 
  4298  0E1F                     	;# 
  4299  0E20                     	;# 
  4300  0E21                     	;# 
  4301  0E22                     	;# 
  4302  0E24                     	;# 
  4303  0E25                     	;# 
  4304  0E28                     	;# 
  4305  0E29                     	;# 
  4306  0E2A                     	;# 
  4307  0E2B                     	;# 
  4308  0E2C                     	;# 
  4309  0E2D                     	;# 
  4310  0E2E                     	;# 
  4311  0E2F                     	;# 
  4312  0E90                     	;# 
  4313  0E91                     	;# 
  4314  0E92                     	;# 
  4315  0E94                     	;# 
  4316  0E95                     	;# 
  4317  0E9C                     	;# 
  4318  0E9D                     	;# 
  4319  0E9E                     	;# 
  4320  0E9F                     	;# 
  4321  0EA0                     	;# 
  4322  0EA1                     	;# 
  4323  0EA2                     	;# 
  4324  0EA3                     	;# 
  4325  0EA4                     	;# 
  4326  0EA5                     	;# 
  4327  0EA6                     	;# 
  4328  0EA7                     	;# 
  4329  0F0F                     	;# 
  4330  0F10                     	;# 
  4331  0F11                     	;# 
  4332  0F12                     	;# 
  4333  0F13                     	;# 
  4334  0F14                     	;# 
  4335  0F15                     	;# 
  4336  0F16                     	;# 
  4337  0F17                     	;# 
  4338  0F18                     	;# 
  4339  0F19                     	;# 
  4340  0F1A                     	;# 
  4341  0F1B                     	;# 
  4342  0F1C                     	;# 
  4343  0F1D                     	;# 
  4344  0F1E                     	;# 
  4345  0F1F                     	;# 
  4346  0F20                     	;# 
  4347  0F21                     	;# 
  4348  0F22                     	;# 
  4349  0F23                     	;# 
  4350  0F24                     	;# 
  4351  0F25                     	;# 
  4352  0F26                     	;# 
  4353  0F27                     	;# 
  4354  0F28                     	;# 
  4355  0F29                     	;# 
  4356  0F2A                     	;# 
  4357  0F2B                     	;# 
  4358  0F2C                     	;# 
  4359  0F2D                     	;# 
  4360  0F2E                     	;# 
  4361  0F2F                     	;# 
  4362  0F30                     	;# 
  4363  0F31                     	;# 
  4364  0F32                     	;# 
  4365  0F33                     	;# 
  4366  0F34                     	;# 
  4367  0F35                     	;# 
  4368  0F36                     	;# 
  4369  0F37                     	;# 
  4370  0FE4                     	;# 
  4371  0FE5                     	;# 
  4372  0FE6                     	;# 
  4373  0FE7                     	;# 
  4374  0FE8                     	;# 
  4375  0FE9                     	;# 
  4376  0FEA                     	;# 
  4377  0FEB                     	;# 
  4378  0FED                     	;# 
  4379  0FEE                     	;# 
  4380  0FEF                     	;# 
  4381  0000                     	;# 
  4382  0001                     	;# 
  4383  0002                     	;# 
  4384  0003                     	;# 
  4385  0004                     	;# 
  4386  0005                     	;# 
  4387  0006                     	;# 
  4388  0007                     	;# 
  4389  0008                     	;# 
  4390  0009                     	;# 
  4391  000A                     	;# 
  4392  000B                     	;# 
  4393  000C                     	;# 
  4394  000D                     	;# 
  4395  000E                     	;# 
  4396  0010                     	;# 
  4397  0011                     	;# 
  4398  0012                     	;# 
  4399  0013                     	;# 
  4400  0014                     	;# 
  4401  0015                     	;# 
  4402  0015                     	;# 
  4403  0016                     	;# 
  4404  0016                     	;# 
  4405  0017                     	;# 
  4406  0018                     	;# 
  4407  0019                     	;# 
  4408  0019                     	;# 
  4409  001A                     	;# 
  4410  001B                     	;# 
  4411  001C                     	;# 
  4412  001D                     	;# 
  4413  001E                     	;# 
  4414  001F                     	;# 
  4415  008C                     	;# 
  4416  008D                     	;# 
  4417  008E                     	;# 
  4418  0090                     	;# 
  4419  0091                     	;# 
  4420  0092                     	;# 
  4421  0093                     	;# 
  4422  0094                     	;# 
  4423  0097                     	;# 
  4424  009B                     	;# 
  4425  009B                     	;# 
  4426  009C                     	;# 
  4427  009D                     	;# 
  4428  009E                     	;# 
  4429  009F                     	;# 
  4430  010C                     	;# 
  4431  010D                     	;# 
  4432  010E                     	;# 
  4433  0111                     	;# 
  4434  0112                     	;# 
  4435  0113                     	;# 
  4436  0114                     	;# 
  4437  0115                     	;# 
  4438  0116                     	;# 
  4439  0117                     	;# 
  4440  0118                     	;# 
  4441  0119                     	;# 
  4442  018C                     	;# 
  4443  018D                     	;# 
  4444  018E                     	;# 
  4445  0197                     	;# 
  4446  0199                     	;# 
  4447  0199                     	;# 
  4448  0199                     	;# 
  4449  019A                     	;# 
  4450  019A                     	;# 
  4451  019A                     	;# 
  4452  019B                     	;# 
  4453  019B                     	;# 
  4454  019B                     	;# 
  4455  019B                     	;# 
  4456  019B                     	;# 
  4457  019C                     	;# 
  4458  019C                     	;# 
  4459  019C                     	;# 
  4460  019D                     	;# 
  4461  019D                     	;# 
  4462  019D                     	;# 
  4463  019E                     	;# 
  4464  019E                     	;# 
  4465  019E                     	;# 
  4466  019F                     	;# 
  4467  019F                     	;# 
  4468  019F                     	;# 
  4469  019F                     	;# 
  4470  019F                     	;# 
  4471  020C                     	;# 
  4472  020D                     	;# 
  4473  020E                     	;# 
  4474  0211                     	;# 
  4475  0211                     	;# 
  4476  0212                     	;# 
  4477  0212                     	;# 
  4478  0213                     	;# 
  4479  0213                     	;# 
  4480  0214                     	;# 
  4481  0214                     	;# 
  4482  0215                     	;# 
  4483  0215                     	;# 
  4484  0215                     	;# 
  4485  0215                     	;# 
  4486  0216                     	;# 
  4487  0216                     	;# 
  4488  0217                     	;# 
  4489  0217                     	;# 
  4490  0219                     	;# 
  4491  021A                     	;# 
  4492  021B                     	;# 
  4493  021C                     	;# 
  4494  021D                     	;# 
  4495  021D                     	;# 
  4496  021E                     	;# 
  4497  021F                     	;# 
  4498  028C                     	;# 
  4499  028D                     	;# 
  4500  028E                     	;# 
  4501  0291                     	;# 
  4502  0291                     	;# 
  4503  0292                     	;# 
  4504  0293                     	;# 
  4505  0294                     	;# 
  4506  0295                     	;# 
  4507  0295                     	;# 
  4508  0296                     	;# 
  4509  0297                     	;# 
  4510  0298                     	;# 
  4511  029F                     	;# 
  4512  030C                     	;# 
  4513  030D                     	;# 
  4514  030E                     	;# 
  4515  0311                     	;# 
  4516  0311                     	;# 
  4517  0312                     	;# 
  4518  0313                     	;# 
  4519  0314                     	;# 
  4520  0315                     	;# 
  4521  0315                     	;# 
  4522  0316                     	;# 
  4523  0317                     	;# 
  4524  0318                     	;# 
  4525  038C                     	;# 
  4526  038D                     	;# 
  4527  038E                     	;# 
  4528  0391                     	;# 
  4529  0392                     	;# 
  4530  0393                     	;# 
  4531  0394                     	;# 
  4532  0395                     	;# 
  4533  0396                     	;# 
  4534  0397                     	;# 
  4535  0398                     	;# 
  4536  0399                     	;# 
  4537  039A                     	;# 
  4538  039C                     	;# 
  4539  039D                     	;# 
  4540  039E                     	;# 
  4541  039F                     	;# 
  4542  0411                     	;# 
  4543  0411                     	;# 
  4544  0412                     	;# 
  4545  0413                     	;# 
  4546  0414                     	;# 
  4547  0415                     	;# 
  4548  0416                     	;# 
  4549  0417                     	;# 
  4550  0418                     	;# 
  4551  0418                     	;# 
  4552  0419                     	;# 
  4553  041A                     	;# 
  4554  041B                     	;# 
  4555  041C                     	;# 
  4556  041D                     	;# 
  4557  041E                     	;# 
  4558  041F                     	;# 
  4559  0498                     	;# 
  4560  0498                     	;# 
  4561  0499                     	;# 
  4562  049A                     	;# 
  4563  049B                     	;# 
  4564  049B                     	;# 
  4565  049C                     	;# 
  4566  049D                     	;# 
  4567  049E                     	;# 
  4568  049F                     	;# 
  4569  0617                     	;# 
  4570  0618                     	;# 
  4571  0619                     	;# 
  4572  0619                     	;# 
  4573  061A                     	;# 
  4574  061B                     	;# 
  4575  061C                     	;# 
  4576  061C                     	;# 
  4577  061F                     	;# 
  4578  0691                     	;# 
  4579  0692                     	;# 
  4580  0693                     	;# 
  4581  0694                     	;# 
  4582  0695                     	;# 
  4583  0696                     	;# 
  4584  0697                     	;# 
  4585  0698                     	;# 
  4586  0699                     	;# 
  4587  0711                     	;# 
  4588  0712                     	;# 
  4589  0713                     	;# 
  4590  0714                     	;# 
  4591  0715                     	;# 
  4592  0716                     	;# 
  4593  0717                     	;# 
  4594  0718                     	;# 
  4595  0719                     	;# 
  4596  0891                     	;# 
  4597  0891                     	;# 
  4598  0891                     	;# 
  4599  0891                     	;# 
  4600  0891                     	;# 
  4601  0891                     	;# 
  4602  0892                     	;# 
  4603  0892                     	;# 
  4604  0892                     	;# 
  4605  0893                     	;# 
  4606  0893                     	;# 
  4607  0893                     	;# 
  4608  0893                     	;# 
  4609  0893                     	;# 
  4610  0893                     	;# 
  4611  0894                     	;# 
  4612  0894                     	;# 
  4613  0894                     	;# 
  4614  0895                     	;# 
  4615  0895                     	;# 
  4616  0895                     	;# 
  4617  0896                     	;# 
  4618  0896                     	;# 
  4619  0896                     	;# 
  4620  089B                     	;# 
  4621  0911                     	;# 
  4622  0912                     	;# 
  4623  0913                     	;# 
  4624  0914                     	;# 
  4625  0915                     	;# 
  4626  0916                     	;# 
  4627  0918                     	;# 
  4628  0919                     	;# 
  4629  091A                     	;# 
  4630  091B                     	;# 
  4631  091C                     	;# 
  4632  091D                     	;# 
  4633  091E                     	;# 
  4634  091F                     	;# 
  4635  0E0F                     	;# 
  4636  0E10                     	;# 
  4637  0E11                     	;# 
  4638  0E12                     	;# 
  4639  0E13                     	;# 
  4640  0E14                     	;# 
  4641  0E15                     	;# 
  4642  0E16                     	;# 
  4643  0E17                     	;# 
  4644  0E18                     	;# 
  4645  0E19                     	;# 
  4646  0E1A                     	;# 
  4647  0E1B                     	;# 
  4648  0E1C                     	;# 
  4649  0E1D                     	;# 
  4650  0E1E                     	;# 
  4651  0E1F                     	;# 
  4652  0E20                     	;# 
  4653  0E21                     	;# 
  4654  0E22                     	;# 
  4655  0E24                     	;# 
  4656  0E25                     	;# 
  4657  0E28                     	;# 
  4658  0E29                     	;# 
  4659  0E2A                     	;# 
  4660  0E2B                     	;# 
  4661  0E2C                     	;# 
  4662  0E2D                     	;# 
  4663  0E2E                     	;# 
  4664  0E2F                     	;# 
  4665  0E90                     	;# 
  4666  0E91                     	;# 
  4667  0E92                     	;# 
  4668  0E94                     	;# 
  4669  0E95                     	;# 
  4670  0E9C                     	;# 
  4671  0E9D                     	;# 
  4672  0E9E                     	;# 
  4673  0E9F                     	;# 
  4674  0EA0                     	;# 
  4675  0EA1                     	;# 
  4676  0EA2                     	;# 
  4677  0EA3                     	;# 
  4678  0EA4                     	;# 
  4679  0EA5                     	;# 
  4680  0EA6                     	;# 
  4681  0EA7                     	;# 
  4682  0F0F                     	;# 
  4683  0F10                     	;# 
  4684  0F11                     	;# 
  4685  0F12                     	;# 
  4686  0F13                     	;# 
  4687  0F14                     	;# 
  4688  0F15                     	;# 
  4689  0F16                     	;# 
  4690  0F17                     	;# 
  4691  0F18                     	;# 
  4692  0F19                     	;# 
  4693  0F1A                     	;# 
  4694  0F1B                     	;# 
  4695  0F1C                     	;# 
  4696  0F1D                     	;# 
  4697  0F1E                     	;# 
  4698  0F1F                     	;# 
  4699  0F20                     	;# 
  4700  0F21                     	;# 
  4701  0F22                     	;# 
  4702  0F23                     	;# 
  4703  0F24                     	;# 
  4704  0F25                     	;# 
  4705  0F26                     	;# 
  4706  0F27                     	;# 
  4707  0F28                     	;# 
  4708  0F29                     	;# 
  4709  0F2A                     	;# 
  4710  0F2B                     	;# 
  4711  0F2C                     	;# 
  4712  0F2D                     	;# 
  4713  0F2E                     	;# 
  4714  0F2F                     	;# 
  4715  0F30                     	;# 
  4716  0F31                     	;# 
  4717  0F32                     	;# 
  4718  0F33                     	;# 
  4719  0F34                     	;# 
  4720  0F35                     	;# 
  4721  0F36                     	;# 
  4722  0F37                     	;# 
  4723  0FE4                     	;# 
  4724  0FE5                     	;# 
  4725  0FE6                     	;# 
  4726  0FE7                     	;# 
  4727  0FE8                     	;# 
  4728  0FE9                     	;# 
  4729  0FEA                     	;# 
  4730  0FEB                     	;# 
  4731  0FED                     	;# 
  4732  0FEE                     	;# 
  4733  0FEF                     	;# 
  4734  0000                     	;# 
  4735  0001                     	;# 
  4736  0002                     	;# 
  4737  0003                     	;# 
  4738  0004                     	;# 
  4739  0005                     	;# 
  4740  0006                     	;# 
  4741  0007                     	;# 
  4742  0008                     	;# 
  4743  0009                     	;# 
  4744  000A                     	;# 
  4745  000B                     	;# 
  4746  000C                     	;# 
  4747  000D                     	;# 
  4748  000E                     	;# 
  4749  0010                     	;# 
  4750  0011                     	;# 
  4751  0012                     	;# 
  4752  0013                     	;# 
  4753  0014                     	;# 
  4754  0015                     	;# 
  4755  0015                     	;# 
  4756  0016                     	;# 
  4757  0016                     	;# 
  4758  0017                     	;# 
  4759  0018                     	;# 
  4760  0019                     	;# 
  4761  0019                     	;# 
  4762  001A                     	;# 
  4763  001B                     	;# 
  4764  001C                     	;# 
  4765  001D                     	;# 
  4766  001E                     	;# 
  4767  001F                     	;# 
  4768  008C                     	;# 
  4769  008D                     	;# 
  4770  008E                     	;# 
  4771  0090                     	;# 
  4772  0091                     	;# 
  4773  0092                     	;# 
  4774  0093                     	;# 
  4775  0094                     	;# 
  4776  0097                     	;# 
  4777  009B                     	;# 
  4778  009B                     	;# 
  4779  009C                     	;# 
  4780  009D                     	;# 
  4781  009E                     	;# 
  4782  009F                     	;# 
  4783  010C                     	;# 
  4784  010D                     	;# 
  4785  010E                     	;# 
  4786  0111                     	;# 
  4787  0112                     	;# 
  4788  0113                     	;# 
  4789  0114                     	;# 
  4790  0115                     	;# 
  4791  0116                     	;# 
  4792  0117                     	;# 
  4793  0118                     	;# 
  4794  0119                     	;# 
  4795  018C                     	;# 
  4796  018D                     	;# 
  4797  018E                     	;# 
  4798  0197                     	;# 
  4799  0199                     	;# 
  4800  0199                     	;# 
  4801  0199                     	;# 
  4802  019A                     	;# 
  4803  019A                     	;# 
  4804  019A                     	;# 
  4805  019B                     	;# 
  4806  019B                     	;# 
  4807  019B                     	;# 
  4808  019B                     	;# 
  4809  019B                     	;# 
  4810  019C                     	;# 
  4811  019C                     	;# 
  4812  019C                     	;# 
  4813  019D                     	;# 
  4814  019D                     	;# 
  4815  019D                     	;# 
  4816  019E                     	;# 
  4817  019E                     	;# 
  4818  019E                     	;# 
  4819  019F                     	;# 
  4820  019F                     	;# 
  4821  019F                     	;# 
  4822  019F                     	;# 
  4823  019F                     	;# 
  4824  020C                     	;# 
  4825  020D                     	;# 
  4826  020E                     	;# 
  4827  0211                     	;# 
  4828  0211                     	;# 
  4829  0212                     	;# 
  4830  0212                     	;# 
  4831  0213                     	;# 
  4832  0213                     	;# 
  4833  0214                     	;# 
  4834  0214                     	;# 
  4835  0215                     	;# 
  4836  0215                     	;# 
  4837  0215                     	;# 
  4838  0215                     	;# 
  4839  0216                     	;# 
  4840  0216                     	;# 
  4841  0217                     	;# 
  4842  0217                     	;# 
  4843  0219                     	;# 
  4844  021A                     	;# 
  4845  021B                     	;# 
  4846  021C                     	;# 
  4847  021D                     	;# 
  4848  021D                     	;# 
  4849  021E                     	;# 
  4850  021F                     	;# 
  4851  028C                     	;# 
  4852  028D                     	;# 
  4853  028E                     	;# 
  4854  0291                     	;# 
  4855  0291                     	;# 
  4856  0292                     	;# 
  4857  0293                     	;# 
  4858  0294                     	;# 
  4859  0295                     	;# 
  4860  0295                     	;# 
  4861  0296                     	;# 
  4862  0297                     	;# 
  4863  0298                     	;# 
  4864  029F                     	;# 
  4865  030C                     	;# 
  4866  030D                     	;# 
  4867  030E                     	;# 
  4868  0311                     	;# 
  4869  0311                     	;# 
  4870  0312                     	;# 
  4871  0313                     	;# 
  4872  0314                     	;# 
  4873  0315                     	;# 
  4874  0315                     	;# 
  4875  0316                     	;# 
  4876  0317                     	;# 
  4877  0318                     	;# 
  4878  038C                     	;# 
  4879  038D                     	;# 
  4880  038E                     	;# 
  4881  0391                     	;# 
  4882  0392                     	;# 
  4883  0393                     	;# 
  4884  0394                     	;# 
  4885  0395                     	;# 
  4886  0396                     	;# 
  4887  0397                     	;# 
  4888  0398                     	;# 
  4889  0399                     	;# 
  4890  039A                     	;# 
  4891  039C                     	;# 
  4892  039D                     	;# 
  4893  039E                     	;# 
  4894  039F                     	;# 
  4895  0411                     	;# 
  4896  0411                     	;# 
  4897  0412                     	;# 
  4898  0413                     	;# 
  4899  0414                     	;# 
  4900  0415                     	;# 
  4901  0416                     	;# 
  4902  0417                     	;# 
  4903  0418                     	;# 
  4904  0418                     	;# 
  4905  0419                     	;# 
  4906  041A                     	;# 
  4907  041B                     	;# 
  4908  041C                     	;# 
  4909  041D                     	;# 
  4910  041E                     	;# 
  4911  041F                     	;# 
  4912  0498                     	;# 
  4913  0498                     	;# 
  4914  0499                     	;# 
  4915  049A                     	;# 
  4916  049B                     	;# 
  4917  049B                     	;# 
  4918  049C                     	;# 
  4919  049D                     	;# 
  4920  049E                     	;# 
  4921  049F                     	;# 
  4922  0617                     	;# 
  4923  0618                     	;# 
  4924  0619                     	;# 
  4925  0619                     	;# 
  4926  061A                     	;# 
  4927  061B                     	;# 
  4928  061C                     	;# 
  4929  061C                     	;# 
  4930  061F                     	;# 
  4931  0691                     	;# 
  4932  0692                     	;# 
  4933  0693                     	;# 
  4934  0694                     	;# 
  4935  0695                     	;# 
  4936  0696                     	;# 
  4937  0697                     	;# 
  4938  0698                     	;# 
  4939  0699                     	;# 
  4940  0711                     	;# 
  4941  0712                     	;# 
  4942  0713                     	;# 
  4943  0714                     	;# 
  4944  0715                     	;# 
  4945  0716                     	;# 
  4946  0717                     	;# 
  4947  0718                     	;# 
  4948  0719                     	;# 
  4949  0891                     	;# 
  4950  0891                     	;# 
  4951  0891                     	;# 
  4952  0891                     	;# 
  4953  0891                     	;# 
  4954  0891                     	;# 
  4955  0892                     	;# 
  4956  0892                     	;# 
  4957  0892                     	;# 
  4958  0893                     	;# 
  4959  0893                     	;# 
  4960  0893                     	;# 
  4961  0893                     	;# 
  4962  0893                     	;# 
  4963  0893                     	;# 
  4964  0894                     	;# 
  4965  0894                     	;# 
  4966  0894                     	;# 
  4967  0895                     	;# 
  4968  0895                     	;# 
  4969  0895                     	;# 
  4970  0896                     	;# 
  4971  0896                     	;# 
  4972  0896                     	;# 
  4973  089B                     	;# 
  4974  0911                     	;# 
  4975  0912                     	;# 
  4976  0913                     	;# 
  4977  0914                     	;# 
  4978  0915                     	;# 
  4979  0916                     	;# 
  4980  0918                     	;# 
  4981  0919                     	;# 
  4982  091A                     	;# 
  4983  091B                     	;# 
  4984  091C                     	;# 
  4985  091D                     	;# 
  4986  091E                     	;# 
  4987  091F                     	;# 
  4988  0E0F                     	;# 
  4989  0E10                     	;# 
  4990  0E11                     	;# 
  4991  0E12                     	;# 
  4992  0E13                     	;# 
  4993  0E14                     	;# 
  4994  0E15                     	;# 
  4995  0E16                     	;# 
  4996  0E17                     	;# 
  4997  0E18                     	;# 
  4998  0E19                     	;# 
  4999  0E1A                     	;# 
  5000  0E1B                     	;# 
  5001  0E1C                     	;# 
  5002  0E1D                     	;# 
  5003  0E1E                     	;# 
  5004  0E1F                     	;# 
  5005  0E20                     	;# 
  5006  0E21                     	;# 
  5007  0E22                     	;# 
  5008  0E24                     	;# 
  5009  0E25                     	;# 
  5010  0E28                     	;# 
  5011  0E29                     	;# 
  5012  0E2A                     	;# 
  5013  0E2B                     	;# 
  5014  0E2C                     	;# 
  5015  0E2D                     	;# 
  5016  0E2E                     	;# 
  5017  0E2F                     	;# 
  5018  0E90                     	;# 
  5019  0E91                     	;# 
  5020  0E92                     	;# 
  5021  0E94                     	;# 
  5022  0E95                     	;# 
  5023  0E9C                     	;# 
  5024  0E9D                     	;# 
  5025  0E9E                     	;# 
  5026  0E9F                     	;# 
  5027  0EA0                     	;# 
  5028  0EA1                     	;# 
  5029  0EA2                     	;# 
  5030  0EA3                     	;# 
  5031  0EA4                     	;# 
  5032  0EA5                     	;# 
  5033  0EA6                     	;# 
  5034  0EA7                     	;# 
  5035  0F0F                     	;# 
  5036  0F10                     	;# 
  5037  0F11                     	;# 
  5038  0F12                     	;# 
  5039  0F13                     	;# 
  5040  0F14                     	;# 
  5041  0F15                     	;# 
  5042  0F16                     	;# 
  5043  0F17                     	;# 
  5044  0F18                     	;# 
  5045  0F19                     	;# 
  5046  0F1A                     	;# 
  5047  0F1B                     	;# 
  5048  0F1C                     	;# 
  5049  0F1D                     	;# 
  5050  0F1E                     	;# 
  5051  0F1F                     	;# 
  5052  0F20                     	;# 
  5053  0F21                     	;# 
  5054  0F22                     	;# 
  5055  0F23                     	;# 
  5056  0F24                     	;# 
  5057  0F25                     	;# 
  5058  0F26                     	;# 
  5059  0F27                     	;# 
  5060  0F28                     	;# 
  5061  0F29                     	;# 
  5062  0F2A                     	;# 
  5063  0F2B                     	;# 
  5064  0F2C                     	;# 
  5065  0F2D                     	;# 
  5066  0F2E                     	;# 
  5067  0F2F                     	;# 
  5068  0F30                     	;# 
  5069  0F31                     	;# 
  5070  0F32                     	;# 
  5071  0F33                     	;# 
  5072  0F34                     	;# 
  5073  0F35                     	;# 
  5074  0F36                     	;# 
  5075  0F37                     	;# 
  5076  0FE4                     	;# 
  5077  0FE5                     	;# 
  5078  0FE6                     	;# 
  5079  0FE7                     	;# 
  5080  0FE8                     	;# 
  5081  0FE9                     	;# 
  5082  0FEA                     	;# 
  5083  0FEB                     	;# 
  5084  0FED                     	;# 
  5085  0FEE                     	;# 
  5086  0FEF                     	;# 
  5087  0000                     	;# 
  5088  0001                     	;# 
  5089  0002                     	;# 
  5090  0003                     	;# 
  5091  0004                     	;# 
  5092  0005                     	;# 
  5093  0006                     	;# 
  5094  0007                     	;# 
  5095  0008                     	;# 
  5096  0009                     	;# 
  5097  000A                     	;# 
  5098  000B                     	;# 
  5099  000C                     	;# 
  5100  000D                     	;# 
  5101  000E                     	;# 
  5102  0010                     	;# 
  5103  0011                     	;# 
  5104  0012                     	;# 
  5105  0013                     	;# 
  5106  0014                     	;# 
  5107  0015                     	;# 
  5108  0015                     	;# 
  5109  0016                     	;# 
  5110  0016                     	;# 
  5111  0017                     	;# 
  5112  0018                     	;# 
  5113  0019                     	;# 
  5114  0019                     	;# 
  5115  001A                     	;# 
  5116  001B                     	;# 
  5117  001C                     	;# 
  5118  001D                     	;# 
  5119  001E                     	;# 
  5120  001F                     	;# 
  5121  008C                     	;# 
  5122  008D                     	;# 
  5123  008E                     	;# 
  5124  0090                     	;# 
  5125  0091                     	;# 
  5126  0092                     	;# 
  5127  0093                     	;# 
  5128  0094                     	;# 
  5129  0097                     	;# 
  5130  009B                     	;# 
  5131  009B                     	;# 
  5132  009C                     	;# 
  5133  009D                     	;# 
  5134  009E                     	;# 
  5135  009F                     	;# 
  5136  010C                     	;# 
  5137  010D                     	;# 
  5138  010E                     	;# 
  5139  0111                     	;# 
  5140  0112                     	;# 
  5141  0113                     	;# 
  5142  0114                     	;# 
  5143  0115                     	;# 
  5144  0116                     	;# 
  5145  0117                     	;# 
  5146  0118                     	;# 
  5147  0119                     	;# 
  5148  018C                     	;# 
  5149  018D                     	;# 
  5150  018E                     	;# 
  5151  0197                     	;# 
  5152  0199                     	;# 
  5153  0199                     	;# 
  5154  0199                     	;# 
  5155  019A                     	;# 
  5156  019A                     	;# 
  5157  019A                     	;# 
  5158  019B                     	;# 
  5159  019B                     	;# 
  5160  019B                     	;# 
  5161  019B                     	;# 
  5162  019B                     	;# 
  5163  019C                     	;# 
  5164  019C                     	;# 
  5165  019C                     	;# 
  5166  019D                     	;# 
  5167  019D                     	;# 
  5168  019D                     	;# 
  5169  019E                     	;# 
  5170  019E                     	;# 
  5171  019E                     	;# 
  5172  019F                     	;# 
  5173  019F                     	;# 
  5174  019F                     	;# 
  5175  019F                     	;# 
  5176  019F                     	;# 
  5177  020C                     	;# 
  5178  020D                     	;# 
  5179  020E                     	;# 
  5180  0211                     	;# 
  5181  0211                     	;# 
  5182  0212                     	;# 
  5183  0212                     	;# 
  5184  0213                     	;# 
  5185  0213                     	;# 
  5186  0214                     	;# 
  5187  0214                     	;# 
  5188  0215                     	;# 
  5189  0215                     	;# 
  5190  0215                     	;# 
  5191  0215                     	;# 
  5192  0216                     	;# 
  5193  0216                     	;# 
  5194  0217                     	;# 
  5195  0217                     	;# 
  5196  0219                     	;# 
  5197  021A                     	;# 
  5198  021B                     	;# 
  5199  021C                     	;# 
  5200  021D                     	;# 
  5201  021D                     	;# 
  5202  021E                     	;# 
  5203  021F                     	;# 
  5204  028C                     	;# 
  5205  028D                     	;# 
  5206  028E                     	;# 
  5207  0291                     	;# 
  5208  0291                     	;# 
  5209  0292                     	;# 
  5210  0293                     	;# 
  5211  0294                     	;# 
  5212  0295                     	;# 
  5213  0295                     	;# 
  5214  0296                     	;# 
  5215  0297                     	;# 
  5216  0298                     	;# 
  5217  029F                     	;# 
  5218  030C                     	;# 
  5219  030D                     	;# 
  5220  030E                     	;# 
  5221  0311                     	;# 
  5222  0311                     	;# 
  5223  0312                     	;# 
  5224  0313                     	;# 
  5225  0314                     	;# 
  5226  0315                     	;# 
  5227  0315                     	;# 
  5228  0316                     	;# 
  5229  0317                     	;# 
  5230  0318                     	;# 
  5231  038C                     	;# 
  5232  038D                     	;# 
  5233  038E                     	;# 
  5234  0391                     	;# 
  5235  0392                     	;# 
  5236  0393                     	;# 
  5237  0394                     	;# 
  5238  0395                     	;# 
  5239  0396                     	;# 
  5240  0397                     	;# 
  5241  0398                     	;# 
  5242  0399                     	;# 
  5243  039A                     	;# 
  5244  039C                     	;# 
  5245  039D                     	;# 
  5246  039E                     	;# 
  5247  039F                     	;# 
  5248  0411                     	;# 
  5249  0411                     	;# 
  5250  0412                     	;# 
  5251  0413                     	;# 
  5252  0414                     	;# 
  5253  0415                     	;# 
  5254  0416                     	;# 
  5255  0417                     	;# 
  5256  0418                     	;# 
  5257  0418                     	;# 
  5258  0419                     	;# 
  5259  041A                     	;# 
  5260  041B                     	;# 
  5261  041C                     	;# 
  5262  041D                     	;# 
  5263  041E                     	;# 
  5264  041F                     	;# 
  5265  0498                     	;# 
  5266  0498                     	;# 
  5267  0499                     	;# 
  5268  049A                     	;# 
  5269  049B                     	;# 
  5270  049B                     	;# 
  5271  049C                     	;# 
  5272  049D                     	;# 
  5273  049E                     	;# 
  5274  049F                     	;# 
  5275  0617                     	;# 
  5276  0618                     	;# 
  5277  0619                     	;# 
  5278  0619                     	;# 
  5279  061A                     	;# 
  5280  061B                     	;# 
  5281  061C                     	;# 
  5282  061C                     	;# 
  5283  061F                     	;# 
  5284  0691                     	;# 
  5285  0692                     	;# 
  5286  0693                     	;# 
  5287  0694                     	;# 
  5288  0695                     	;# 
  5289  0696                     	;# 
  5290  0697                     	;# 
  5291  0698                     	;# 
  5292  0699                     	;# 
  5293  0711                     	;# 
  5294  0712                     	;# 
  5295  0713                     	;# 
  5296  0714                     	;# 
  5297  0715                     	;# 
  5298  0716                     	;# 
  5299  0717                     	;# 
  5300  0718                     	;# 
  5301  0719                     	;# 
  5302  0891                     	;# 
  5303  0891                     	;# 
  5304  0891                     	;# 
  5305  0891                     	;# 
  5306  0891                     	;# 
  5307  0891                     	;# 
  5308  0892                     	;# 
  5309  0892                     	;# 
  5310  0892                     	;# 
  5311  0893                     	;# 
  5312  0893                     	;# 
  5313  0893                     	;# 
  5314  0893                     	;# 
  5315  0893                     	;# 
  5316  0893                     	;# 
  5317  0894                     	;# 
  5318  0894                     	;# 
  5319  0894                     	;# 
  5320  0895                     	;# 
  5321  0895                     	;# 
  5322  0895                     	;# 
  5323  0896                     	;# 
  5324  0896                     	;# 
  5325  0896                     	;# 
  5326  089B                     	;# 
  5327  0911                     	;# 
  5328  0912                     	;# 
  5329  0913                     	;# 
  5330  0914                     	;# 
  5331  0915                     	;# 
  5332  0916                     	;# 
  5333  0918                     	;# 
  5334  0919                     	;# 
  5335  091A                     	;# 
  5336  091B                     	;# 
  5337  091C                     	;# 
  5338  091D                     	;# 
  5339  091E                     	;# 
  5340  091F                     	;# 
  5341  0E0F                     	;# 
  5342  0E10                     	;# 
  5343  0E11                     	;# 
  5344  0E12                     	;# 
  5345  0E13                     	;# 
  5346  0E14                     	;# 
  5347  0E15                     	;# 
  5348  0E16                     	;# 
  5349  0E17                     	;# 
  5350  0E18                     	;# 
  5351  0E19                     	;# 
  5352  0E1A                     	;# 
  5353  0E1B                     	;# 
  5354  0E1C                     	;# 
  5355  0E1D                     	;# 
  5356  0E1E                     	;# 
  5357  0E1F                     	;# 
  5358  0E20                     	;# 
  5359  0E21                     	;# 
  5360  0E22                     	;# 
  5361  0E24                     	;# 
  5362  0E25                     	;# 
  5363  0E28                     	;# 
  5364  0E29                     	;# 
  5365  0E2A                     	;# 
  5366  0E2B                     	;# 
  5367  0E2C                     	;# 
  5368  0E2D                     	;# 
  5369  0E2E                     	;# 
  5370  0E2F                     	;# 
  5371  0E90                     	;# 
  5372  0E91                     	;# 
  5373  0E92                     	;# 
  5374  0E94                     	;# 
  5375  0E95                     	;# 
  5376  0E9C                     	;# 
  5377  0E9D                     	;# 
  5378  0E9E                     	;# 
  5379  0E9F                     	;# 
  5380  0EA0                     	;# 
  5381  0EA1                     	;# 
  5382  0EA2                     	;# 
  5383  0EA3                     	;# 
  5384  0EA4                     	;# 
  5385  0EA5                     	;# 
  5386  0EA6                     	;# 
  5387  0EA7                     	;# 
  5388  0F0F                     	;# 
  5389  0F10                     	;# 
  5390  0F11                     	;# 
  5391  0F12                     	;# 
  5392  0F13                     	;# 
  5393  0F14                     	;# 
  5394  0F15                     	;# 
  5395  0F16                     	;# 
  5396  0F17                     	;# 
  5397  0F18                     	;# 
  5398  0F19                     	;# 
  5399  0F1A                     	;# 
  5400  0F1B                     	;# 
  5401  0F1C                     	;# 
  5402  0F1D                     	;# 
  5403  0F1E                     	;# 
  5404  0F1F                     	;# 
  5405  0F20                     	;# 
  5406  0F21                     	;# 
  5407  0F22                     	;# 
  5408  0F23                     	;# 
  5409  0F24                     	;# 
  5410  0F25                     	;# 
  5411  0F26                     	;# 
  5412  0F27                     	;# 
  5413  0F28                     	;# 
  5414  0F29                     	;# 
  5415  0F2A                     	;# 
  5416  0F2B                     	;# 
  5417  0F2C                     	;# 
  5418  0F2D                     	;# 
  5419  0F2E                     	;# 
  5420  0F2F                     	;# 
  5421  0F30                     	;# 
  5422  0F31                     	;# 
  5423  0F32                     	;# 
  5424  0F33                     	;# 
  5425  0F34                     	;# 
  5426  0F35                     	;# 
  5427  0F36                     	;# 
  5428  0F37                     	;# 
  5429  0FE4                     	;# 
  5430  0FE5                     	;# 
  5431  0FE6                     	;# 
  5432  0FE7                     	;# 
  5433  0FE8                     	;# 
  5434  0FE9                     	;# 
  5435  0FEA                     	;# 
  5436  0FEB                     	;# 
  5437  0FED                     	;# 
  5438  0FEE                     	;# 
  5439  0FEF                     	;# 
  5440  0000                     	;# 
  5441  0001                     	;# 
  5442  0002                     	;# 
  5443  0003                     	;# 
  5444  0004                     	;# 
  5445  0005                     	;# 
  5446  0006                     	;# 
  5447  0007                     	;# 
  5448  0008                     	;# 
  5449  0009                     	;# 
  5450  000A                     	;# 
  5451  000B                     	;# 
  5452  000C                     	;# 
  5453  000D                     	;# 
  5454  000E                     	;# 
  5455  0010                     	;# 
  5456  0011                     	;# 
  5457  0012                     	;# 
  5458  0013                     	;# 
  5459  0014                     	;# 
  5460  0015                     	;# 
  5461  0015                     	;# 
  5462  0016                     	;# 
  5463  0016                     	;# 
  5464  0017                     	;# 
  5465  0018                     	;# 
  5466  0019                     	;# 
  5467  0019                     	;# 
  5468  001A                     	;# 
  5469  001B                     	;# 
  5470  001C                     	;# 
  5471  001D                     	;# 
  5472  001E                     	;# 
  5473  001F                     	;# 
  5474  008C                     	;# 
  5475  008D                     	;# 
  5476  008E                     	;# 
  5477  0090                     	;# 
  5478  0091                     	;# 
  5479  0092                     	;# 
  5480  0093                     	;# 
  5481  0094                     	;# 
  5482  0097                     	;# 
  5483  009B                     	;# 
  5484  009B                     	;# 
  5485  009C                     	;# 
  5486  009D                     	;# 
  5487  009E                     	;# 
  5488  009F                     	;# 
  5489  010C                     	;# 
  5490  010D                     	;# 
  5491  010E                     	;# 
  5492  0111                     	;# 
  5493  0112                     	;# 
  5494  0113                     	;# 
  5495  0114                     	;# 
  5496  0115                     	;# 
  5497  0116                     	;# 
  5498  0117                     	;# 
  5499  0118                     	;# 
  5500  0119                     	;# 
  5501  018C                     	;# 
  5502  018D                     	;# 
  5503  018E                     	;# 
  5504  0197                     	;# 
  5505  0199                     	;# 
  5506  0199                     	;# 
  5507  0199                     	;# 
  5508  019A                     	;# 
  5509  019A                     	;# 
  5510  019A                     	;# 
  5511  019B                     	;# 
  5512  019B                     	;# 
  5513  019B                     	;# 
  5514  019B                     	;# 
  5515  019B                     	;# 
  5516  019C                     	;# 
  5517  019C                     	;# 
  5518  019C                     	;# 
  5519  019D                     	;# 
  5520  019D                     	;# 
  5521  019D                     	;# 
  5522  019E                     	;# 
  5523  019E                     	;# 
  5524  019E                     	;# 
  5525  019F                     	;# 
  5526  019F                     	;# 
  5527  019F                     	;# 
  5528  019F                     	;# 
  5529  019F                     	;# 
  5530  020C                     	;# 
  5531  020D                     	;# 
  5532  020E                     	;# 
  5533  0211                     	;# 
  5534  0211                     	;# 
  5535  0212                     	;# 
  5536  0212                     	;# 
  5537  0213                     	;# 
  5538  0213                     	;# 
  5539  0214                     	;# 
  5540  0214                     	;# 
  5541  0215                     	;# 
  5542  0215                     	;# 
  5543  0215                     	;# 
  5544  0215                     	;# 
  5545  0216                     	;# 
  5546  0216                     	;# 
  5547  0217                     	;# 
  5548  0217                     	;# 
  5549  0219                     	;# 
  5550  021A                     	;# 
  5551  021B                     	;# 
  5552  021C                     	;# 
  5553  021D                     	;# 
  5554  021D                     	;# 
  5555  021E                     	;# 
  5556  021F                     	;# 
  5557  028C                     	;# 
  5558  028D                     	;# 
  5559  028E                     	;# 
  5560  0291                     	;# 
  5561  0291                     	;# 
  5562  0292                     	;# 
  5563  0293                     	;# 
  5564  0294                     	;# 
  5565  0295                     	;# 
  5566  0295                     	;# 
  5567  0296                     	;# 
  5568  0297                     	;# 
  5569  0298                     	;# 
  5570  029F                     	;# 
  5571  030C                     	;# 
  5572  030D                     	;# 
  5573  030E                     	;# 
  5574  0311                     	;# 
  5575  0311                     	;# 
  5576  0312                     	;# 
  5577  0313                     	;# 
  5578  0314                     	;# 
  5579  0315                     	;# 
  5580  0315                     	;# 
  5581  0316                     	;# 
  5582  0317                     	;# 
  5583  0318                     	;# 
  5584  038C                     	;# 
  5585  038D                     	;# 
  5586  038E                     	;# 
  5587  0391                     	;# 
  5588  0392                     	;# 
  5589  0393                     	;# 
  5590  0394                     	;# 
  5591  0395                     	;# 
  5592  0396                     	;# 
  5593  0397                     	;# 
  5594  0398                     	;# 
  5595  0399                     	;# 
  5596  039A                     	;# 
  5597  039C                     	;# 
  5598  039D                     	;# 
  5599  039E                     	;# 
  5600  039F                     	;# 
  5601  0411                     	;# 
  5602  0411                     	;# 
  5603  0412                     	;# 
  5604  0413                     	;# 
  5605  0414                     	;# 
  5606  0415                     	;# 
  5607  0416                     	;# 
  5608  0417                     	;# 
  5609  0418                     	;# 
  5610  0418                     	;# 
  5611  0419                     	;# 
  5612  041A                     	;# 
  5613  041B                     	;# 
  5614  041C                     	;# 
  5615  041D                     	;# 
  5616  041E                     	;# 
  5617  041F                     	;# 
  5618  0498                     	;# 
  5619  0498                     	;# 
  5620  0499                     	;# 
  5621  049A                     	;# 
  5622  049B                     	;# 
  5623  049B                     	;# 
  5624  049C                     	;# 
  5625  049D                     	;# 
  5626  049E                     	;# 
  5627  049F                     	;# 
  5628  0617                     	;# 
  5629  0618                     	;# 
  5630  0619                     	;# 
  5631  0619                     	;# 
  5632  061A                     	;# 
  5633  061B                     	;# 
  5634  061C                     	;# 
  5635  061C                     	;# 
  5636  061F                     	;# 
  5637  0691                     	;# 
  5638  0692                     	;# 
  5639  0693                     	;# 
  5640  0694                     	;# 
  5641  0695                     	;# 
  5642  0696                     	;# 
  5643  0697                     	;# 
  5644  0698                     	;# 
  5645  0699                     	;# 
  5646  0711                     	;# 
  5647  0712                     	;# 
  5648  0713                     	;# 
  5649  0714                     	;# 
  5650  0715                     	;# 
  5651  0716                     	;# 
  5652  0717                     	;# 
  5653  0718                     	;# 
  5654  0719                     	;# 
  5655  0891                     	;# 
  5656  0891                     	;# 
  5657  0891                     	;# 
  5658  0891                     	;# 
  5659  0891                     	;# 
  5660  0891                     	;# 
  5661  0892                     	;# 
  5662  0892                     	;# 
  5663  0892                     	;# 
  5664  0893                     	;# 
  5665  0893                     	;# 
  5666  0893                     	;# 
  5667  0893                     	;# 
  5668  0893                     	;# 
  5669  0893                     	;# 
  5670  0894                     	;# 
  5671  0894                     	;# 
  5672  0894                     	;# 
  5673  0895                     	;# 
  5674  0895                     	;# 
  5675  0895                     	;# 
  5676  0896                     	;# 
  5677  0896                     	;# 
  5678  0896                     	;# 
  5679  089B                     	;# 
  5680  0911                     	;# 
  5681  0912                     	;# 
  5682  0913                     	;# 
  5683  0914                     	;# 
  5684  0915                     	;# 
  5685  0916                     	;# 
  5686  0918                     	;# 
  5687  0919                     	;# 
  5688  091A                     	;# 
  5689  091B                     	;# 
  5690  091C                     	;# 
  5691  091D                     	;# 
  5692  091E                     	;# 
  5693  091F                     	;# 
  5694  0E0F                     	;# 
  5695  0E10                     	;# 
  5696  0E11                     	;# 
  5697  0E12                     	;# 
  5698  0E13                     	;# 
  5699  0E14                     	;# 
  5700  0E15                     	;# 
  5701  0E16                     	;# 
  5702  0E17                     	;# 
  5703  0E18                     	;# 
  5704  0E19                     	;# 
  5705  0E1A                     	;# 
  5706  0E1B                     	;# 
  5707  0E1C                     	;# 
  5708  0E1D                     	;# 
  5709  0E1E                     	;# 
  5710  0E1F                     	;# 
  5711  0E20                     	;# 
  5712  0E21                     	;# 
  5713  0E22                     	;# 
  5714  0E24                     	;# 
  5715  0E25                     	;# 
  5716  0E28                     	;# 
  5717  0E29                     	;# 
  5718  0E2A                     	;# 
  5719  0E2B                     	;# 
  5720  0E2C                     	;# 
  5721  0E2D                     	;# 
  5722  0E2E                     	;# 
  5723  0E2F                     	;# 
  5724  0E90                     	;# 
  5725  0E91                     	;# 
  5726  0E92                     	;# 
  5727  0E94                     	;# 
  5728  0E95                     	;# 
  5729  0E9C                     	;# 
  5730  0E9D                     	;# 
  5731  0E9E                     	;# 
  5732  0E9F                     	;# 
  5733  0EA0                     	;# 
  5734  0EA1                     	;# 
  5735  0EA2                     	;# 
  5736  0EA3                     	;# 
  5737  0EA4                     	;# 
  5738  0EA5                     	;# 
  5739  0EA6                     	;# 
  5740  0EA7                     	;# 
  5741  0F0F                     	;# 
  5742  0F10                     	;# 
  5743  0F11                     	;# 
  5744  0F12                     	;# 
  5745  0F13                     	;# 
  5746  0F14                     	;# 
  5747  0F15                     	;# 
  5748  0F16                     	;# 
  5749  0F17                     	;# 
  5750  0F18                     	;# 
  5751  0F19                     	;# 
  5752  0F1A                     	;# 
  5753  0F1B                     	;# 
  5754  0F1C                     	;# 
  5755  0F1D                     	;# 
  5756  0F1E                     	;# 
  5757  0F1F                     	;# 
  5758  0F20                     	;# 
  5759  0F21                     	;# 
  5760  0F22                     	;# 
  5761  0F23                     	;# 
  5762  0F24                     	;# 
  5763  0F25                     	;# 
  5764  0F26                     	;# 
  5765  0F27                     	;# 
  5766  0F28                     	;# 
  5767  0F29                     	;# 
  5768  0F2A                     	;# 
  5769  0F2B                     	;# 
  5770  0F2C                     	;# 
  5771  0F2D                     	;# 
  5772  0F2E                     	;# 
  5773  0F2F                     	;# 
  5774  0F30                     	;# 
  5775  0F31                     	;# 
  5776  0F32                     	;# 
  5777  0F33                     	;# 
  5778  0F34                     	;# 
  5779  0F35                     	;# 
  5780  0F36                     	;# 
  5781  0F37                     	;# 
  5782  0FE4                     	;# 
  5783  0FE5                     	;# 
  5784  0FE6                     	;# 
  5785  0FE7                     	;# 
  5786  0FE8                     	;# 
  5787  0FE9                     	;# 
  5788  0FEA                     	;# 
  5789  0FEB                     	;# 
  5790  0FED                     	;# 
  5791  0FEE                     	;# 
  5792  0FEF                     	;# 
  5793  0000                     	;# 
  5794  0001                     	;# 
  5795  0002                     	;# 
  5796  0003                     	;# 
  5797  0004                     	;# 
  5798  0005                     	;# 
  5799  0006                     	;# 
  5800  0007                     	;# 
  5801  0008                     	;# 
  5802  0009                     	;# 
  5803  000A                     	;# 
  5804  000B                     	;# 
  5805  000C                     	;# 
  5806  000D                     	;# 
  5807  000E                     	;# 
  5808  0010                     	;# 
  5809  0011                     	;# 
  5810  0012                     	;# 
  5811  0013                     	;# 
  5812  0014                     	;# 
  5813  0015                     	;# 
  5814  0015                     	;# 
  5815  0016                     	;# 
  5816  0016                     	;# 
  5817  0017                     	;# 
  5818  0018                     	;# 
  5819  0019                     	;# 
  5820  0019                     	;# 
  5821  001A                     	;# 
  5822  001B                     	;# 
  5823  001C                     	;# 
  5824  001D                     	;# 
  5825  001E                     	;# 
  5826  001F                     	;# 
  5827  008C                     	;# 
  5828  008D                     	;# 
  5829  008E                     	;# 
  5830  0090                     	;# 
  5831  0091                     	;# 
  5832  0092                     	;# 
  5833  0093                     	;# 
  5834  0094                     	;# 
  5835  0097                     	;# 
  5836  009B                     	;# 
  5837  009B                     	;# 
  5838  009C                     	;# 
  5839  009D                     	;# 
  5840  009E                     	;# 
  5841  009F                     	;# 
  5842  010C                     	;# 
  5843  010D                     	;# 
  5844  010E                     	;# 
  5845  0111                     	;# 
  5846  0112                     	;# 
  5847  0113                     	;# 
  5848  0114                     	;# 
  5849  0115                     	;# 
  5850  0116                     	;# 
  5851  0117                     	;# 
  5852  0118                     	;# 
  5853  0119                     	;# 
  5854  018C                     	;# 
  5855  018D                     	;# 
  5856  018E                     	;# 
  5857  0197                     	;# 
  5858  0199                     	;# 
  5859  0199                     	;# 
  5860  0199                     	;# 
  5861  019A                     	;# 
  5862  019A                     	;# 
  5863  019A                     	;# 
  5864  019B                     	;# 
  5865  019B                     	;# 
  5866  019B                     	;# 
  5867  019B                     	;# 
  5868  019B                     	;# 
  5869  019C                     	;# 
  5870  019C                     	;# 
  5871  019C                     	;# 
  5872  019D                     	;# 
  5873  019D                     	;# 
  5874  019D                     	;# 
  5875  019E                     	;# 
  5876  019E                     	;# 
  5877  019E                     	;# 
  5878  019F                     	;# 
  5879  019F                     	;# 
  5880  019F                     	;# 
  5881  019F                     	;# 
  5882  019F                     	;# 
  5883  020C                     	;# 
  5884  020D                     	;# 
  5885  020E                     	;# 
  5886  0211                     	;# 
  5887  0211                     	;# 
  5888  0212                     	;# 
  5889  0212                     	;# 
  5890  0213                     	;# 
  5891  0213                     	;# 
  5892  0214                     	;# 
  5893  0214                     	;# 
  5894  0215                     	;# 
  5895  0215                     	;# 
  5896  0215                     	;# 
  5897  0215                     	;# 
  5898  0216                     	;# 
  5899  0216                     	;# 
  5900  0217                     	;# 
  5901  0217                     	;# 
  5902  0219                     	;# 
  5903  021A                     	;# 
  5904  021B                     	;# 
  5905  021C                     	;# 
  5906  021D                     	;# 
  5907  021D                     	;# 
  5908  021E                     	;# 
  5909  021F                     	;# 
  5910  028C                     	;# 
  5911  028D                     	;# 
  5912  028E                     	;# 
  5913  0291                     	;# 
  5914  0291                     	;# 
  5915  0292                     	;# 
  5916  0293                     	;# 
  5917  0294                     	;# 
  5918  0295                     	;# 
  5919  0295                     	;# 
  5920  0296                     	;# 
  5921  0297                     	;# 
  5922  0298                     	;# 
  5923  029F                     	;# 
  5924  030C                     	;# 
  5925  030D                     	;# 
  5926  030E                     	;# 
  5927  0311                     	;# 
  5928  0311                     	;# 
  5929  0312                     	;# 
  5930  0313                     	;# 
  5931  0314                     	;# 
  5932  0315                     	;# 
  5933  0315                     	;# 
  5934  0316                     	;# 
  5935  0317                     	;# 
  5936  0318                     	;# 
  5937  038C                     	;# 
  5938  038D                     	;# 
  5939  038E                     	;# 
  5940  0391                     	;# 
  5941  0392                     	;# 
  5942  0393                     	;# 
  5943  0394                     	;# 
  5944  0395                     	;# 
  5945  0396                     	;# 
  5946  0397                     	;# 
  5947  0398                     	;# 
  5948  0399                     	;# 
  5949  039A                     	;# 
  5950  039C                     	;# 
  5951  039D                     	;# 
  5952  039E                     	;# 
  5953  039F                     	;# 
  5954  0411                     	;# 
  5955  0411                     	;# 
  5956  0412                     	;# 
  5957  0413                     	;# 
  5958  0414                     	;# 
  5959  0415                     	;# 
  5960  0416                     	;# 
  5961  0417                     	;# 
  5962  0418                     	;# 
  5963  0418                     	;# 
  5964  0419                     	;# 
  5965  041A                     	;# 
  5966  041B                     	;# 
  5967  041C                     	;# 
  5968  041D                     	;# 
  5969  041E                     	;# 
  5970  041F                     	;# 
  5971  0498                     	;# 
  5972  0498                     	;# 
  5973  0499                     	;# 
  5974  049A                     	;# 
  5975  049B                     	;# 
  5976  049B                     	;# 
  5977  049C                     	;# 
  5978  049D                     	;# 
  5979  049E                     	;# 
  5980  049F                     	;# 
  5981  0617                     	;# 
  5982  0618                     	;# 
  5983  0619                     	;# 
  5984  0619                     	;# 
  5985  061A                     	;# 
  5986  061B                     	;# 
  5987  061C                     	;# 
  5988  061C                     	;# 
  5989  061F                     	;# 
  5990  0691                     	;# 
  5991  0692                     	;# 
  5992  0693                     	;# 
  5993  0694                     	;# 
  5994  0695                     	;# 
  5995  0696                     	;# 
  5996  0697                     	;# 
  5997  0698                     	;# 
  5998  0699                     	;# 
  5999  0711                     	;# 
  6000  0712                     	;# 
  6001  0713                     	;# 
  6002  0714                     	;# 
  6003  0715                     	;# 
  6004  0716                     	;# 
  6005  0717                     	;# 
  6006  0718                     	;# 
  6007  0719                     	;# 
  6008  0891                     	;# 
  6009  0891                     	;# 
  6010  0891                     	;# 
  6011  0891                     	;# 
  6012  0891                     	;# 
  6013  0891                     	;# 
  6014  0892                     	;# 
  6015  0892                     	;# 
  6016  0892                     	;# 
  6017  0893                     	;# 
  6018  0893                     	;# 
  6019  0893                     	;# 
  6020  0893                     	;# 
  6021  0893                     	;# 
  6022  0893                     	;# 
  6023  0894                     	;# 
  6024  0894                     	;# 
  6025  0894                     	;# 
  6026  0895                     	;# 
  6027  0895                     	;# 
  6028  0895                     	;# 
  6029  0896                     	;# 
  6030  0896                     	;# 
  6031  0896                     	;# 
  6032  089B                     	;# 
  6033  0911                     	;# 
  6034  0912                     	;# 
  6035  0913                     	;# 
  6036  0914                     	;# 
  6037  0915                     	;# 
  6038  0916                     	;# 
  6039  0918                     	;# 
  6040  0919                     	;# 
  6041  091A                     	;# 
  6042  091B                     	;# 
  6043  091C                     	;# 
  6044  091D                     	;# 
  6045  091E                     	;# 
  6046  091F                     	;# 
  6047  0E0F                     	;# 
  6048  0E10                     	;# 
  6049  0E11                     	;# 
  6050  0E12                     	;# 
  6051  0E13                     	;# 
  6052  0E14                     	;# 
  6053  0E15                     	;# 
  6054  0E16                     	;# 
  6055  0E17                     	;# 
  6056  0E18                     	;# 
  6057  0E19                     	;# 
  6058  0E1A                     	;# 
  6059  0E1B                     	;# 
  6060  0E1C                     	;# 
  6061  0E1D                     	;# 
  6062  0E1E                     	;# 
  6063  0E1F                     	;# 
  6064  0E20                     	;# 
  6065  0E21                     	;# 
  6066  0E22                     	;# 
  6067  0E24                     	;# 
  6068  0E25                     	;# 
  6069  0E28                     	;# 
  6070  0E29                     	;# 
  6071  0E2A                     	;# 
  6072  0E2B                     	;# 
  6073  0E2C                     	;# 
  6074  0E2D                     	;# 
  6075  0E2E                     	;# 
  6076  0E2F                     	;# 
  6077  0E90                     	;# 
  6078  0E91                     	;# 
  6079  0E92                     	;# 
  6080  0E94                     	;# 
  6081  0E95                     	;# 
  6082  0E9C                     	;# 
  6083  0E9D                     	;# 
  6084  0E9E                     	;# 
  6085  0E9F                     	;# 
  6086  0EA0                     	;# 
  6087  0EA1                     	;# 
  6088  0EA2                     	;# 
  6089  0EA3                     	;# 
  6090  0EA4                     	;# 
  6091  0EA5                     	;# 
  6092  0EA6                     	;# 
  6093  0EA7                     	;# 
  6094  0F0F                     	;# 
  6095  0F10                     	;# 
  6096  0F11                     	;# 
  6097  0F12                     	;# 
  6098  0F13                     	;# 
  6099  0F14                     	;# 
  6100  0F15                     	;# 
  6101  0F16                     	;# 
  6102  0F17                     	;# 
  6103  0F18                     	;# 
  6104  0F19                     	;# 
  6105  0F1A                     	;# 
  6106  0F1B                     	;# 
  6107  0F1C                     	;# 
  6108  0F1D                     	;# 
  6109  0F1E                     	;# 
  6110  0F1F                     	;# 
  6111  0F20                     	;# 
  6112  0F21                     	;# 
  6113  0F22                     	;# 
  6114  0F23                     	;# 
  6115  0F24                     	;# 
  6116  0F25                     	;# 
  6117  0F26                     	;# 
  6118  0F27                     	;# 
  6119  0F28                     	;# 
  6120  0F29                     	;# 
  6121  0F2A                     	;# 
  6122  0F2B                     	;# 
  6123  0F2C                     	;# 
  6124  0F2D                     	;# 
  6125  0F2E                     	;# 
  6126  0F2F                     	;# 
  6127  0F30                     	;# 
  6128  0F31                     	;# 
  6129  0F32                     	;# 
  6130  0F33                     	;# 
  6131  0F34                     	;# 
  6132  0F35                     	;# 
  6133  0F36                     	;# 
  6134  0F37                     	;# 
  6135  0FE4                     	;# 
  6136  0FE5                     	;# 
  6137  0FE6                     	;# 
  6138  0FE7                     	;# 
  6139  0FE8                     	;# 
  6140  0FE9                     	;# 
  6141  0FEA                     	;# 
  6142  0FEB                     	;# 
  6143  0FED                     	;# 
  6144  0FEE                     	;# 
  6145  0FEF                     	;# 
  6146                           
  6147 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  6148  0000                     
  6149 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  6150  0000                     
  6151 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  6152  0000                     
  6153                           	psect	idataBANK0
  6154  0914                     __pidataBANK0:	
  6155                           
  6156                           ;initializer for _sample_period
  6157  0914  34C8               	retlw	200
  6158                           
  6159                           	psect	idataBANK1
  6160  0BEE                     __pidataBANK1:	
  6161                           
  6162                           ;initializer for _Button_StateMachine
  6163  0BEE  34A0               	retlw	low _Button_State_Initializing
  6164  0BEF  3407               	retlw	high _Button_State_Initializing
  6165  0BF0  349A               	retlw	low _Button_State_NotPressed
  6166  0BF1  3404               	retlw	high _Button_State_NotPressed
  6167  0BF2  3434               	retlw	low _Button_State_Pressed
  6168  0BF3  3407               	retlw	high _Button_State_Pressed
  6169                           
  6170                           ;initializer for _Sensor_scanB
  6171  0BF4  347F               	retlw	low _MTOUCH_CVD_ScanB_0
  6172  0BF5  340C               	retlw	high _MTOUCH_CVD_ScanB_0
  6173                           
  6174                           ;initializer for _Sensor_scanA
  6175  0BF6  3459               	retlw	low _MTOUCH_CVD_ScanA_0
  6176  0BF7  340C               	retlw	high _MTOUCH_CVD_ScanA_0
  6177                           
  6178                           ;initializer for _callback_sampled
  6179  0BF8  3413               	retlw	low _Sensor_DefaultCallback
  6180  0BF9  3409               	retlw	high _Sensor_DefaultCallback
  6181                           
  6182                           ;initializer for _callback_notPressed
  6183  0BFA  3411               	retlw	low _Button_DefaultCallback
  6184  0BFB  3409               	retlw	high _Button_DefaultCallback
  6185                           
  6186                           ;initializer for _callback_pressed
  6187  0BFC  3411               	retlw	low _Button_DefaultCallback
  6188  0BFD  3409               	retlw	high _Button_DefaultCallback
  6189                           
  6190                           ;initializer for _controls
  6191  0BFE  3400               	retlw	0
  6192  0BFF  3461               	retlw	97
  6193  0C00  3462               	retlw	98
  6194  0C01  3400               	retlw	0
  6195  0C02  3400               	retlw	0
  6196  0C03  3401               	retlw	1
  6197  0C04  3400               	retlw	0
  6198  0C05  3405               	retlw	5
  6199  0C06  3400               	retlw	0
  6200                           
  6201                           ;initializer for _mtouch_sensor
  6202  0C07  3400               	retlw	0
  6203  0C08  3459               	retlw	low _MTOUCH_CVD_ScanA_0
  6204  0C09  340C               	retlw	high _MTOUCH_CVD_ScanA_0
  6205  0C0A  347F               	retlw	low _MTOUCH_CVD_ScanB_0
  6206  0C0B  340C               	retlw	high _MTOUCH_CVD_ScanB_0
  6207  0C0C  3420               	retlw	32
  6208  0C0D  3400               	retlw	0
  6209  0C0E  3400               	retlw	0
  6210  0C0F  3400               	retlw	0
  6211                           
  6212                           	psect	stringtext1
  6213  1011                     __pstringtext1:	
  6214  1011                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  6215  1011  3403               	retlw	3
  6216  1012  340D               	retlw	13
  6217  1013  340E               	retlw	14
  6218  1014  3414               	retlw	20
  6219  1015  340D               	retlw	13
  6220  1016                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  6221                           
  6222                           	psect	stringtext2
  6223  1000                     __pstringtext2:	
  6224  1000                     _mtouch_button_init:	
  6225  1000  3400               	retlw	0
  6226  1001  3400               	retlw	0
  6227  1002  3400               	retlw	0
  6228  1003  3400               	retlw	0
  6229  1004  3400               	retlw	0
  6230  1005  3400               	retlw	0
  6231  1006  3400               	retlw	0
  6232  1007  3400               	retlw	0
  6233  1008  3400               	retlw	0
  6234  1009  3400               	retlw	0
  6235  100A  3400               	retlw	0
  6236  100B  3400               	retlw	0
  6237  100C  3400               	retlw	0
  6238  100D  3400               	retlw	0
  6239  100E  3428               	retlw	40
  6240  100F  3401               	retlw	1
  6241  1010  3404               	retlw	4
  6242  1011                     __end_of_mtouch_button_init:	
  6243                           
  6244                           	psect	nvBANK1
  6245  00ED                     __pnvBANK1:	
  6246  00ED                     _TMR6_InterruptHandler:	
  6247  00ED                     	ds	2
  6248                           
  6249                           	psect	nvBANK2
  6250  0120                     __pnvBANK2:	
  6251  0120                     _EUSART_ErrorHandler:	
  6252  0120                     	ds	2
  6253  0122                     _EUSART_OverrunErrorHandler:	
  6254  0122                     	ds	2
  6255  0124                     _EUSART_FramingErrorHandler:	
  6256  0124                     	ds	2
  6257  000C                     _PORTAbits	set	12
  6258  0012                     _PIR2bits	set	18
  6259  0010                     _PIR0bits	set	16
  6260  0011                     _PIR1bits	set	17
  6261  000B                     _INTCONbits	set	11
  6262  005F                     _GIE	set	95
  6263  009B                     _ADRES	set	155
  6264  0092                     _PIE2bits	set	146
  6265  0090                     _PIE0bits	set	144
  6266  0097                     _WDTCON	set	151
  6267  008E                     _TRISC	set	142
  6268  008D                     _TRISB	set	141
  6269  008C                     _TRISA	set	140
  6270  009D                     _ADCON0bits	set	157
  6271  009F                     _ADACT	set	159
  6272  009E                     _ADCON1	set	158
  6273  009D                     _ADCON0	set	157
  6274  010E                     _LATCbits	set	270
  6275  010E                     _LATC	set	270
  6276  010D                     _LATB	set	269
  6277  010C                     _LATA	set	268
  6278  019A                     _TX1REG	set	410
  6279  0199                     _RC1REG	set	409
  6280  019D                     _RC1STAbits	set	413
  6281  019E                     _TX1STAbits	set	414
  6282  019C                     _SP1BRGH	set	412
  6283  019B                     _SP1BRGL	set	411
  6284  019E                     _TX1STA	set	414
  6285  019D                     _RC1STA	set	413
  6286  019F                     _BAUD1CON	set	415
  6287  018C                     _ANSELA	set	396
  6288  018D                     _ANSELB	set	397
  6289  018E                     _ANSELC	set	398
  6290  020E                     _WPUC	set	526
  6291  020C                     _WPUA	set	524
  6292  020D                     _WPUB	set	525
  6293  028E                     _ODCONC	set	654
  6294  028D                     _ODCONB	set	653
  6295  028C                     _ODCONA	set	652
  6296  030E                     _SLRCONC	set	782
  6297  030D                     _SLRCONB	set	781
  6298  030C                     _SLRCONA	set	780
  6299  038E                     _INLVLC	set	910
  6300  038D                     _INLVLB	set	909
  6301  038C                     _INLVLA	set	908
  6302  041E                     _T6CON	set	1054
  6303  041C                     _TMR6	set	1052
  6304  041D                     _PR6	set	1053
  6305  041E                     _T6CONbits	set	1054
  6306  0896                     _NVMCON2	set	2198
  6307  0893                     _NVMDATL	set	2195
  6308  0894                     _NVMDATH	set	2196
  6309  0895                     _NVMCON1bits	set	2197
  6310  0892                     _NVMADRH	set	2194
  6311  0891                     _NVMADRL	set	2193
  6312  0916                     _PMD5	set	2326
  6313  0915                     _PMD4	set	2325
  6314  0914                     _PMD3	set	2324
  6315  0913                     _PMD2	set	2323
  6316  0912                     _PMD1	set	2322
  6317  0911                     _PMD0	set	2321
  6318  091E                     _OSCTUNE	set	2334
  6319  091F                     _OSCFRQ	set	2335
  6320  091D                     _OSCEN	set	2333
  6321  091B                     _OSCCON3	set	2331
  6322  0919                     _OSCCON1	set	2329
  6323  0E24                     _RXPPS	set	3620
  6324  0EA4                     _RC4PPS	set	3748
  6325                           
  6326                           ; #config settings
  6327  0000                     
  6328                           	psect	cinit
  6329  002A                     start_initialization:	
  6330  002A                     __initialization:	
  6331                           
  6332                           ; Initialize objects allocated to BANK0
  6333  002A  3189  2114  3180   	fcall	__pidataBANK0	;fetch initializer
  6334  002D  00E5               	movwf	__pdataBANK0& (0+127)
  6335                           
  6336                           ; Initialize objects allocated to BANK1
  6337  002E  30EE               	movlw	low __pidataBANK1
  6338  002F  0084               	movwf	4
  6339  0030  308B               	movlw	(high __pidataBANK1)| (0+128)
  6340  0031  0085               	movwf	5
  6341  0032  30CB               	movlw	low __pdataBANK1
  6342  0033  0086               	movwf	6
  6343  0034  3000               	movlw	high __pdataBANK1
  6344  0035  0087               	movwf	7
  6345  0036  3022               	movlw	34
  6346  0037  3189  2137  3180   	fcall	init_ram
  6347                           
  6348                           ; Clear objects allocated to BANK0
  6349  003A  3046               	movlw	low __pbssBANK0
  6350  003B  0084               	movwf	4
  6351  003C  3000               	movlw	high __pbssBANK0
  6352  003D  0085               	movwf	5
  6353  003E  301F               	movlw	31
  6354  003F  3189  2131  3180   	fcall	clear_ram0
  6355                           
  6356                           ; Clear objects allocated to BANK1
  6357  0042  30A0               	movlw	low __pbssBANK1
  6358  0043  0084               	movwf	4
  6359  0044  3000               	movlw	high __pbssBANK1
  6360  0045  0085               	movwf	5
  6361  0046  302B               	movlw	43
  6362  0047  3189  2131         	fcall	clear_ram0
  6363  0049                     end_of_initialization:	
  6364                           ;End of C runtime variable initialization code
  6365                           
  6366  0049                     __end_of__initialization:	
  6367  0049  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6368  004A  0020               	movlb	0
  6369  004B  3184  2C04         	ljmp	_main	;jump to C main() function
  6370                           
  6371                           	psect	bssBANK0
  6372  0046                     __pbssBANK0:	
  6373  0046                     _c1:	
  6374  0046                     	ds	2
  6375  0048                     _a2:	
  6376  0048                     	ds	2
  6377  004A                     _a1:	
  6378  004A                     	ds	2
  6379  004C                     _t1:	
  6380  004C                     	ds	2
  6381  004E                     _d2:	
  6382  004E                     	ds	2
  6383  0050                     _d1:	
  6384  0050                     	ds	2
  6385  0052                     _packet_noise:	
  6386  0052                     	ds	2
  6387  0054                     _packet_sample:	
  6388  0054                     	ds	2
  6389  0056                     _sentT:	
  6390  0056                     	ds	1
  6391  0057                     _sentV:	
  6392  0057                     	ds	1
  6393  0058                     _sentU:	
  6394  0058                     	ds	1
  6395  0059                     _isPressed:	
  6396  0059                     	ds	1
  6397  005A                     _toggle:	
  6398  005A                     	ds	1
  6399  005B                     _mainToggleState:	
  6400  005B                     	ds	1
  6401  005C                     _touchEdgeDetected:	
  6402  005C                     	ds	1
  6403  005D                     _wipeEnabled:	
  6404  005D                     	ds	1
  6405  005E                     _wipeTriggerFlag:	
  6406  005E                     	ds	1
  6407  005F                     _lowpowerActivated:	
  6408  005F                     	ds	1
  6409  0060                     _packet_counter:	
  6410  0060                     	ds	1
  6411  0061                     _currentScannSensor:	
  6412  0061                     	ds	1
  6413  0062                     _sensor_globalFlags:	
  6414  0062                     	ds	1
  6415  0063                     _mtouch_request_init:	
  6416  0063                     	ds	1
  6417  0064                     _mtouch_time_toScan:	
  6418  0064                     	ds	1
  6419                           
  6420                           	psect	dataBANK0
  6421  0065                     __pdataBANK0:	
  6422  0065                     _sample_period:	
  6423  0065                     	ds	1
  6424                           
  6425                           	psect	bssBANK1
  6426  00A0                     __pbssBANK1:	
  6427  00A0                     _pressStartTime:	
  6428  00A0                     	ds	4
  6429  00A4                     _millis_counter:	
  6430  00A4                     	ds	4
  6431  00A8                     _r2:	
  6432  00A8                     	ds	2
  6433  00AA                     _r1:	
  6434  00AA                     	ds	2
  6435  00AC                     _c2:	
  6436  00AC                     	ds	2
  6437  00AE                     _d:	
  6438  00AE                     	ds	2
  6439  00B0                     Sensor_Acq_ExecuteScan@last_b:	
  6440  00B0                     	ds	2
  6441  00B2                     Sensor_Acq_ExecuteScan@last_a:	
  6442  00B2                     	ds	2
  6443  00B4                     _sto:	
  6444  00B4                     	ds	2
  6445  00B6                     _received:	
  6446  00B6                     	ds	1
  6447  00B7                     _toggleState:	
  6448  00B7                     	ds	1
  6449  00B8                     _togir:	
  6450  00B8                     	ds	1
  6451  00B9                     _eusartRxLastError:	
  6452  00B9                     	ds	1
  6453  00BA                     _mtouch_button:	
  6454  00BA                     	ds	17
  6455                           
  6456                           	psect	dataBANK1
  6457  00CB                     __pdataBANK1:	
  6458  00CB                     _Button_StateMachine:	
  6459  00CB                     	ds	6
  6460  00D1                     _Sensor_scanB:	
  6461  00D1                     	ds	2
  6462  00D3                     _Sensor_scanA:	
  6463  00D3                     	ds	2
  6464  00D5                     _callback_sampled:	
  6465  00D5                     	ds	2
  6466  00D7                     _callback_notPressed:	
  6467  00D7                     	ds	2
  6468  00D9                     _callback_pressed:	
  6469  00D9                     	ds	2
  6470  00DB                     _controls:	
  6471  00DB                     	ds	9
  6472  00E4                     _mtouch_sensor:	
  6473  00E4                     	ds	9
  6474                           
  6475                           	psect	inittext
  6476  0937                     init_ram:	
  6477  0937  00FE               	movwf	126
  6478  0938                     initloop:	
  6479  0938  0012               	moviw fsr0++
  6480  0939  001E               	movwi fsr1++
  6481  093A  0BFE               	decfsz	126,f
  6482  093B  2938               	goto	initloop
  6483  093C  3400               	retlw	0
  6484                           
  6485                           	psect	clrtext
  6486  0931                     clear_ram0:	
  6487                           ;	Called with FSR0 containing the base address, and
  6488                           ;	WREG with the size to clear
  6489                           
  6490  0931  0064               	clrwdt	;clear the watchdog before getting into this loop
  6491  0932                     clrloop0:	
  6492  0932  0180               	clrf	0	;clear RAM location pointed to by FSR
  6493  0933  3101               	addfsr 0,1
  6494  0934  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6495  0935  2932               	goto	clrloop0	;have we reached the end yet?
  6496  0936  3400               	retlw	0	;all done for this memory range, return
  6497                           
  6498                           	psect	cstackBANK2
  6499  0126                     __pcstackBANK2:	
  6500  0126                     ??_MTOUCH_Service_Mainloop:	
  6501                           
  6502                           ; 1 bytes @ 0x0
  6503  0126                     	ds	1
  6504  0127                     ??_main:	
  6505                           
  6506                           ; 1 bytes @ 0x1
  6507  0127                     	ds	2
  6508  0129                     main@buttonPressed:	
  6509                           
  6510                           ; 1 bytes @ 0x3
  6511  0129                     	ds	1
  6512                           
  6513                           	psect	cstackBANK1
  6514  00EF                     __pcstackBANK1:	
  6515  00EF                     MTOUCH_Sensor_SampleAll@sensor:	
  6516                           
  6517                           ; 1 bytes @ 0x0
  6518  00EF                     	ds	1
  6519                           
  6520                           	psect	cstackCOMMON
  6521  0070                     __pcstackCOMMON:	
  6522  0070                     ?_MTOUCH_Sensor_Calibrate:	
  6523  0070                     ?_Button_Service:	
  6524                           ; 1 bytes @ 0x0
  6525                           
  6526  0070                     ?_MTOUCH_Sensor_wasSampled:	
  6527                           ; 1 bytes @ 0x0
  6528                           
  6529  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  6530                           ; 1 bytes @ 0x0
  6531                           
  6532  0070                     ?_Button_Reading_Update:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ?_Button_Deviation_Update:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_Button_Baseline_Initialize:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_Button_Baseline_Update:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ?_Button_Tick_helper:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_Button_Reading_Update_Helper:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ?_MTOUCH_Service_Mainloop:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_MTOUCH_Sensor_SampleAll:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_MTOUCH_needReburst:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_MTOUCH_Tick:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_MTOUCH_Sensor_Enable:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_Sensor_Sampled_Reset:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_Sensor_Service:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_Sensor_Acquisition:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ?_Sensor_isEnabled:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ?_Sensor_RawSample_Update:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     ?_Sensor_setSampled:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592  0070                     ?_Sensor_Acq_ExecutePacket:	
  6593                           ; 1 bytes @ 0x0
  6594                           
  6595  0070                     ?_Sensor_setActive:	
  6596                           ; 1 bytes @ 0x0
  6597                           
  6598  0070                     ?_Sensor_Scanfrequency_Evaluation:	
  6599                           ; 1 bytes @ 0x0
  6600                           
  6601  0070                     ?_Sensor_setInactive:	
  6602                           ; 1 bytes @ 0x0
  6603                           
  6604  0070                     ?_Sensor_setScanFunction:	
  6605                           ; 1 bytes @ 0x0
  6606                           
  6607  0070                     ?_Sensor_Acq_ExecuteScan:	
  6608                           ; 1 bytes @ 0x0
  6609                           
  6610  0070                     ?_TMR6_LoadPeriodRegister:	
  6611                           ; 1 bytes @ 0x0
  6612                           
  6613  0070                     ?_TMR6_StartTimer:	
  6614                           ; 1 bytes @ 0x0
  6615                           
  6616  0070                     ?_TMR6_StopTimer:	
  6617                           ; 1 bytes @ 0x0
  6618                           
  6619  0070                     ?_PMD_Initialize:	
  6620                           ; 1 bytes @ 0x0
  6621                           
  6622  0070                     ?_OSCILLATOR_Initialize:	
  6623                           ; 1 bytes @ 0x0
  6624                           
  6625  0070                     ?_WDT_Initialize:	
  6626                           ; 1 bytes @ 0x0
  6627                           
  6628  0070                     ?_TMR6_Initialize:	
  6629                           ; 1 bytes @ 0x0
  6630                           
  6631  0070                     ?_EUSART_Initialize:	
  6632                           ; 1 bytes @ 0x0
  6633                           
  6634  0070                     ?_decodeIRSignal:	
  6635                           ; 1 bytes @ 0x0
  6636                           
  6637  0070                     ?_TMR6_ISR:	
  6638                           ; 1 bytes @ 0x0
  6639                           
  6640  0070                     ?_TMR6_DefaultInterruptHandler:	
  6641                           ; 1 bytes @ 0x0
  6642                           
  6643  0070                     ??_TMR6_DefaultInterruptHandler:	
  6644                           ; 1 bytes @ 0x0
  6645                           
  6646  0070                     ?_handleUARTCommands:	
  6647                           ; 1 bytes @ 0x0
  6648                           
  6649  0070                     ?_ir_handler:	
  6650                           ; 1 bytes @ 0x0
  6651                           
  6652  0070                     ?_OnHold:	
  6653                           ; 1 bytes @ 0x0
  6654                           
  6655  0070                     ?_handleGeneralTouchControls:	
  6656                           ; 1 bytes @ 0x0
  6657                           
  6658  0070                     ?_MTOUCH_Button_Initialize:	
  6659                           ; 1 bytes @ 0x0
  6660                           
  6661  0070                     ?_MTOUCH_Button_InitializeAll:	
  6662                           ; 1 bytes @ 0x0
  6663                           
  6664  0070                     ?_MTOUCH_Button_ServiceAll:	
  6665                           ; 1 bytes @ 0x0
  6666                           
  6667  0070                     ?_MTOUCH_Button_Tick:	
  6668                           ; 1 bytes @ 0x0
  6669                           
  6670  0070                     ?_MTOUCH_Button_isPressed:	
  6671                           ; 1 bytes @ 0x0
  6672                           
  6673  0070                     ?_MTOUCH_CVD_ScanA_0:	
  6674                           ; 1 bytes @ 0x0
  6675                           
  6676  0070                     ??_MTOUCH_CVD_ScanA_0:	
  6677                           ; 1 bytes @ 0x0
  6678                           
  6679  0070                     ?_MTOUCH_CVD_ScanB_0:	
  6680                           ; 1 bytes @ 0x0
  6681                           
  6682  0070                     ??_MTOUCH_CVD_ScanB_0:	
  6683                           ; 1 bytes @ 0x0
  6684                           
  6685  0070                     ?_MTOUCH_Initialize:	
  6686                           ; 1 bytes @ 0x0
  6687                           
  6688  0070                     ?_MTOUCH_Sensor_Initialize:	
  6689                           ; 1 bytes @ 0x0
  6690                           
  6691  0070                     ?_PIN_MANAGER_Initialize:	
  6692                           ; 1 bytes @ 0x0
  6693                           
  6694  0070                     ?_SYSTEM_Initialize:	
  6695                           ; 1 bytes @ 0x0
  6696                           
  6697  0070                     ?_EUSART_is_rx_ready:	
  6698                           ; 1 bytes @ 0x0
  6699                           
  6700  0070                     ?_EUSART_Read:	
  6701                           ; 1 bytes @ 0x0
  6702                           
  6703  0070                     ?_EUSART_Write:	
  6704                           ; 1 bytes @ 0x0
  6705                           
  6706  0070                     ?_INTERRUPT_InterruptManager:	
  6707                           ; 1 bytes @ 0x0
  6708                           
  6709  0070                     ?_InitExternal_INT:	
  6710                           ; 1 bytes @ 0x0
  6711                           
  6712  0070                     ?_DATAEE_WriteByte:	
  6713                           ; 1 bytes @ 0x0
  6714                           
  6715  0070                     ?_main:	
  6716                           ; 1 bytes @ 0x0
  6717                           
  6718  0070                     ?_updateLight:	
  6719                           ; 1 bytes @ 0x0
  6720                           
  6721  0070                     ?_uartLight:	
  6722                           ; 1 bytes @ 0x0
  6723                           
  6724  0070                     ?i1_EUSART_Write:	
  6725                           ; 1 bytes @ 0x0
  6726                           
  6727  0070                     ??i1_EUSART_Write:	
  6728                           ; 1 bytes @ 0x0
  6729                           
  6730  0070                     ?i1_DATAEE_ReadByte:	
  6731                           ; 1 bytes @ 0x0
  6732                           
  6733  0070                     ?i1___bmul:	
  6734                           ; 1 bytes @ 0x0
  6735                           
  6736  0070                     ?___awdiv:	
  6737                           ; 1 bytes @ 0x0
  6738                           
  6739  0070                     ?i1_abs:	
  6740                           ; 2 bytes @ 0x0
  6741                           
  6742  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  6743                           ; 2 bytes @ 0x0
  6744                           
  6745  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  6746                           ; 1 bytes @ 0x0
  6747                           
  6748  0070                     i1EUSART_Write@txData:	
  6749                           ; 1 bytes @ 0x0
  6750                           
  6751  0070                     i1___bmul@multiplicand:	
  6752                           ; 1 bytes @ 0x0
  6753                           
  6754  0070                     DATAEE_WriteByte@bAdd:	
  6755                           ; 1 bytes @ 0x0
  6756                           
  6757  0070                     ___awdiv@divisor:	
  6758                           ; 2 bytes @ 0x0
  6759                           
  6760  0070                     i1DATAEE_ReadByte@bAdd:	
  6761                           ; 2 bytes @ 0x0
  6762                           
  6763  0070                     i1abs@a:	
  6764                           ; 2 bytes @ 0x0
  6765                           
  6766                           
  6767                           ; 2 bytes @ 0x0
  6768  0070                     	ds	1
  6769  0071                     ??i1___bmul:	
  6770                           
  6771                           ; 1 bytes @ 0x1
  6772  0071                     	ds	1
  6773  0072                     ??i1_DATAEE_ReadByte:	
  6774  0072                     ??i1_abs:	
  6775                           ; 1 bytes @ 0x2
  6776                           
  6777  0072                     DATAEE_WriteByte@bData:	
  6778                           ; 1 bytes @ 0x2
  6779                           
  6780  0072                     i1___bmul@multiplier:	
  6781                           ; 1 bytes @ 0x2
  6782                           
  6783  0072                     ___awdiv@dividend:	
  6784                           ; 1 bytes @ 0x2
  6785                           
  6786                           
  6787                           ; 2 bytes @ 0x2
  6788  0072                     	ds	1
  6789  0073                     ??_DATAEE_WriteByte:	
  6790  0073                     DATAEE_WriteByte@GIEBitValue:	
  6791                           ; 1 bytes @ 0x3
  6792                           
  6793  0073                     i1___bmul@product:	
  6794                           ; 1 bytes @ 0x3
  6795                           
  6796                           
  6797                           ; 1 bytes @ 0x3
  6798  0073                     	ds	1
  6799  0074                     ??_Sensor_Acq_ExecuteScan:	
  6800  0074                     ??___awdiv:	
  6801                           ; 1 bytes @ 0x4
  6802                           
  6803                           
  6804                           ; 1 bytes @ 0x4
  6805  0074                     	ds	1
  6806  0075                     ___awdiv@counter:	
  6807                           
  6808                           ; 1 bytes @ 0x5
  6809  0075                     	ds	1
  6810  0076                     ___awdiv@sign:	
  6811  0076                     Sensor_Acq_ExecuteScan@result:	
  6812                           ; 1 bytes @ 0x6
  6813                           
  6814                           
  6815                           ; 2 bytes @ 0x6
  6816  0076                     	ds	1
  6817  0077                     ___awdiv@quotient:	
  6818                           
  6819                           ; 2 bytes @ 0x7
  6820  0077                     	ds	1
  6821  0078                     ??_TMR6_ISR:	
  6822                           
  6823                           ; 1 bytes @ 0x8
  6824  0078                     	ds	1
  6825  0079                     ?___awmod:	
  6826  0079                     ___awmod@divisor:	
  6827                           ; 2 bytes @ 0x9
  6828                           
  6829                           
  6830                           ; 2 bytes @ 0x9
  6831  0079                     	ds	2
  6832  007B                     ___awmod@dividend:	
  6833                           
  6834                           ; 2 bytes @ 0xB
  6835  007B                     	ds	2
  6836  007D                     ??___awmod:	
  6837                           
  6838                           ; 1 bytes @ 0xD
  6839  007D                     	ds	1
  6840                           
  6841                           	psect	cstackBANK0
  6842  0020                     __pcstackBANK0:	
  6843  0020                     ___awmod@counter:	
  6844                           
  6845                           ; 1 bytes @ 0x0
  6846  0020                     	ds	1
  6847  0021                     ___awmod@sign:	
  6848                           
  6849                           ; 1 bytes @ 0x1
  6850  0021                     	ds	1
  6851  0022                     ??_decodeIRSignal:	
  6852                           
  6853                           ; 1 bytes @ 0x2
  6854  0022                     	ds	4
  6855  0026                     decodeIRSignal@address:	
  6856                           
  6857                           ; 1 bytes @ 0x6
  6858  0026                     	ds	1
  6859  0027                     decodeIRSignal@command:	
  6860                           
  6861                           ; 1 bytes @ 0x7
  6862  0027                     	ds	1
  6863  0028                     decodeIRSignal@i:	
  6864                           
  6865                           ; 1 bytes @ 0x8
  6866  0028                     	ds	1
  6867  0029                     ??_INTERRUPT_InterruptManager:	
  6868                           
  6869                           ; 1 bytes @ 0x9
  6870  0029                     	ds	1
  6871  002A                     ?_Button_DefaultCallback:	
  6872  002A                     ??_MTOUCH_Sensor_Calibrate:	
  6873                           ; 1 bytes @ 0xA
  6874                           
  6875  002A                     ??_MTOUCH_Sensor_isCalibrated:	
  6876                           ; 1 bytes @ 0xA
  6877                           
  6878  002A                     ??_Button_Deviation_Update:	
  6879                           ; 1 bytes @ 0xA
  6880                           
  6881  002A                     ??_Button_Baseline_Update:	
  6882                           ; 1 bytes @ 0xA
  6883                           
  6884  002A                     ??_Button_Tick_helper:	
  6885                           ; 1 bytes @ 0xA
  6886                           
  6887  002A                     ??_MTOUCH_Sensor_Scan_Initialize:	
  6888                           ; 1 bytes @ 0xA
  6889                           
  6890  002A                     ??_MTOUCH_needReburst:	
  6891                           ; 1 bytes @ 0xA
  6892                           
  6893  002A                     ?_Sensor_DefaultCallback:	
  6894                           ; 1 bytes @ 0xA
  6895                           
  6896  002A                     ??_Sensor_Sampled_Reset:	
  6897                           ; 1 bytes @ 0xA
  6898                           
  6899  002A                     ??_Sensor_isEnabled:	
  6900                           ; 1 bytes @ 0xA
  6901                           
  6902  002A                     ??_Sensor_RawSample_Update:	
  6903                           ; 1 bytes @ 0xA
  6904                           
  6905  002A                     ??_Sensor_setSampled:	
  6906                           ; 1 bytes @ 0xA
  6907                           
  6908  002A                     ??_Sensor_setActive:	
  6909                           ; 1 bytes @ 0xA
  6910                           
  6911  002A                     ??_Sensor_setInactive:	
  6912                           ; 1 bytes @ 0xA
  6913                           
  6914  002A                     ??_Sensor_setScanFunction:	
  6915                           ; 1 bytes @ 0xA
  6916                           
  6917  002A                     ?_TMR6_SetInterruptHandler:	
  6918                           ; 1 bytes @ 0xA
  6919                           
  6920  002A                     ??_TMR6_LoadPeriodRegister:	
  6921                           ; 1 bytes @ 0xA
  6922                           
  6923  002A                     ??_TMR6_StartTimer:	
  6924                           ; 1 bytes @ 0xA
  6925                           
  6926  002A                     ??_TMR6_StopTimer:	
  6927                           ; 1 bytes @ 0xA
  6928                           
  6929  002A                     ??_PMD_Initialize:	
  6930                           ; 1 bytes @ 0xA
  6931                           
  6932  002A                     ??_OSCILLATOR_Initialize:	
  6933                           ; 1 bytes @ 0xA
  6934                           
  6935  002A                     ??_WDT_Initialize:	
  6936                           ; 1 bytes @ 0xA
  6937                           
  6938  002A                     ?_EUSART_SetFramingErrorHandler:	
  6939                           ; 1 bytes @ 0xA
  6940                           
  6941  002A                     ?_EUSART_SetOverrunErrorHandler:	
  6942                           ; 1 bytes @ 0xA
  6943                           
  6944  002A                     ?_EUSART_SetErrorHandler:	
  6945                           ; 1 bytes @ 0xA
  6946                           
  6947  002A                     ??_MTOUCH_Button_Initialize:	
  6948                           ; 1 bytes @ 0xA
  6949                           
  6950  002A                     ??_MTOUCH_Button_isPressed:	
  6951                           ; 1 bytes @ 0xA
  6952                           
  6953  002A                     ??_PIN_MANAGER_Initialize:	
  6954                           ; 1 bytes @ 0xA
  6955                           
  6956  002A                     ??_EUSART_is_rx_ready:	
  6957                           ; 1 bytes @ 0xA
  6958                           
  6959  002A                     ??_EUSART_Read:	
  6960                           ; 1 bytes @ 0xA
  6961                           
  6962  002A                     ??_EUSART_Write:	
  6963                           ; 1 bytes @ 0xA
  6964                           
  6965  002A                     ??_InitExternal_INT:	
  6966                           ; 1 bytes @ 0xA
  6967                           
  6968  002A                     ?_DATAEE_ReadByte:	
  6969                           ; 1 bytes @ 0xA
  6970                           
  6971  002A                     ??_uartLight:	
  6972                           ; 1 bytes @ 0xA
  6973                           
  6974  002A                     ?___bmul:	
  6975                           ; 1 bytes @ 0xA
  6976                           
  6977  002A                     ?_abs:	
  6978                           ; 1 bytes @ 0xA
  6979                           
  6980  002A                     MTOUCH_Button_isPressed@name:	
  6981                           ; 2 bytes @ 0xA
  6982                           
  6983  002A                     Button_DefaultCallback@button:	
  6984                           ; 1 bytes @ 0xA
  6985                           
  6986  002A                     MTOUCH_needReburst@needReburst:	
  6987                           ; 1 bytes @ 0xA
  6988                           
  6989  002A                     Sensor_RawSample_Update@sensor:	
  6990                           ; 1 bytes @ 0xA
  6991                           
  6992  002A                     Sensor_DefaultCallback@sensor:	
  6993                           ; 1 bytes @ 0xA
  6994                           
  6995  002A                     Sensor_setScanFunction@sensor:	
  6996                           ; 1 bytes @ 0xA
  6997                           
  6998  002A                     Sensor_isEnabled@sensor:	
  6999                           ; 1 bytes @ 0xA
  7000                           
  7001  002A                     Sensor_setActive@sensor:	
  7002                           ; 1 bytes @ 0xA
  7003                           
  7004  002A                     Sensor_setInactive@sensor:	
  7005                           ; 1 bytes @ 0xA
  7006                           
  7007  002A                     Sensor_Sampled_Reset@sensor:	
  7008                           ; 1 bytes @ 0xA
  7009                           
  7010  002A                     Sensor_setSampled@sensor:	
  7011                           ; 1 bytes @ 0xA
  7012                           
  7013  002A                     EUSART_Write@txData:	
  7014                           ; 1 bytes @ 0xA
  7015                           
  7016  002A                     TMR6_LoadPeriodRegister@periodVal:	
  7017                           ; 1 bytes @ 0xA
  7018                           
  7019  002A                     uartLight@received:	
  7020                           ; 1 bytes @ 0xA
  7021                           
  7022  002A                     ___bmul@multiplicand:	
  7023                           ; 1 bytes @ 0xA
  7024                           
  7025  002A                     EUSART_SetFramingErrorHandler@interruptHandler:	
  7026                           ; 1 bytes @ 0xA
  7027                           
  7028  002A                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  7029                           ; 2 bytes @ 0xA
  7030                           
  7031  002A                     EUSART_SetErrorHandler@interruptHandler:	
  7032                           ; 2 bytes @ 0xA
  7033                           
  7034  002A                     TMR6_SetInterruptHandler@InterruptHandler:	
  7035                           ; 2 bytes @ 0xA
  7036                           
  7037  002A                     DATAEE_ReadByte@bAdd:	
  7038                           ; 2 bytes @ 0xA
  7039                           
  7040  002A                     abs@a:	
  7041                           ; 2 bytes @ 0xA
  7042                           
  7043                           
  7044                           ; 2 bytes @ 0xA
  7045  002A                     	ds	1
  7046  002B                     ??_Button_DefaultCallback:	
  7047  002B                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  7048                           ; 1 bytes @ 0xB
  7049                           
  7050  002B                     ??_Sensor_DefaultCallback:	
  7051                           ; 1 bytes @ 0xB
  7052                           
  7053  002B                     ??_OnHold:	
  7054                           ; 1 bytes @ 0xB
  7055                           
  7056  002B                     ??___bmul:	
  7057                           ; 1 bytes @ 0xB
  7058                           
  7059  002B                     MTOUCH_Button_Initialize@name:	
  7060                           ; 1 bytes @ 0xB
  7061                           
  7062                           
  7063                           ; 1 bytes @ 0xB
  7064  002B                     	ds	1
  7065  002C                     ??_Sensor_Acq_ExecutePacket:	
  7066  002C                     ??_abs:	
  7067                           ; 1 bytes @ 0xC
  7068                           
  7069  002C                     ??_TMR6_SetInterruptHandler:	
  7070                           ; 1 bytes @ 0xC
  7071                           
  7072  002C                     ??_TMR6_Initialize:	
  7073                           ; 1 bytes @ 0xC
  7074                           
  7075  002C                     ??_EUSART_Initialize:	
  7076                           ; 1 bytes @ 0xC
  7077                           
  7078  002C                     ??_EUSART_SetFramingErrorHandler:	
  7079                           ; 1 bytes @ 0xC
  7080                           
  7081  002C                     ??_EUSART_SetOverrunErrorHandler:	
  7082                           ; 1 bytes @ 0xC
  7083                           
  7084  002C                     ??_EUSART_SetErrorHandler:	
  7085                           ; 1 bytes @ 0xC
  7086                           
  7087  002C                     ??_DATAEE_ReadByte:	
  7088                           ; 1 bytes @ 0xC
  7089                           
  7090  002C                     MTOUCH_Button_Initialize@button:	
  7091                           ; 1 bytes @ 0xC
  7092                           
  7093  002C                     Button_Tick_helper@button:	
  7094                           ; 1 bytes @ 0xC
  7095                           
  7096  002C                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  7097                           ; 1 bytes @ 0xC
  7098                           
  7099  002C                     ___bmul@product:	
  7100                           ; 1 bytes @ 0xC
  7101                           
  7102                           
  7103                           ; 1 bytes @ 0xC
  7104  002C                     	ds	1
  7105  002D                     ??_MTOUCH_Tick:	
  7106  002D                     ??_MTOUCH_Button_InitializeAll:	
  7107                           ; 1 bytes @ 0xD
  7108                           
  7109  002D                     ??_MTOUCH_Button_Tick:	
  7110                           ; 1 bytes @ 0xD
  7111                           
  7112  002D                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  7113                           ; 1 bytes @ 0xD
  7114                           
  7115  002D                     ___bmul@multiplier:	
  7116                           ; 1 bytes @ 0xD
  7117                           
  7118                           
  7119                           ; 1 bytes @ 0xD
  7120  002D                     	ds	1
  7121  002E                     ??_MTOUCH_Sensor_wasSampled:	
  7122  002E                     ??_MTOUCH_Sensor_Enable:	
  7123                           ; 1 bytes @ 0xE
  7124                           
  7125  002E                     ?_setLightState:	
  7126                           ; 1 bytes @ 0xE
  7127                           
  7128  002E                     ?_MTOUCH_Sensor_RawSample_Get:	
  7129                           ; 1 bytes @ 0xE
  7130                           
  7131  002E                     MTOUCH_Button_InitializeAll@button:	
  7132                           ; 2 bytes @ 0xE
  7133                           
  7134  002E                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  7135                           ; 1 bytes @ 0xE
  7136                           
  7137  002E                     setLightState@state:	
  7138                           ; 1 bytes @ 0xE
  7139                           
  7140                           
  7141                           ; 1 bytes @ 0xE
  7142  002E                     	ds	1
  7143  002F                     ??_setLightState:	
  7144  002F                     Sensor_Acq_ExecutePacket@ADACT_temp:	
  7145                           ; 1 bytes @ 0xF
  7146                           
  7147  002F                     MTOUCH_Sensor_Enable@sensor:	
  7148                           ; 1 bytes @ 0xF
  7149                           
  7150  002F                     MTOUCH_Sensor_wasSampled@sensor:	
  7151                           ; 1 bytes @ 0xF
  7152                           
  7153  002F                     setLightState@touchID:	
  7154                           ; 1 bytes @ 0xF
  7155                           
  7156                           
  7157                           ; 1 bytes @ 0xF
  7158  002F                     	ds	1
  7159  0030                     ??_MTOUCH_Sensor_RawSample_Get:	
  7160  0030                     ??_handleUARTCommands:	
  7161                           ; 1 bytes @ 0x10
  7162                           
  7163  0030                     ??_MTOUCH_Sensor_Initialize:	
  7164                           ; 1 bytes @ 0x10
  7165                           
  7166  0030                     ??_updateLight:	
  7167                           ; 1 bytes @ 0x10
  7168                           
  7169  0030                     Button_Baseline_Update@button:	
  7170                           ; 1 bytes @ 0x10
  7171                           
  7172  0030                     Sensor_Acq_ExecutePacket@error:	
  7173                           ; 1 bytes @ 0x10
  7174                           
  7175                           
  7176                           ; 1 bytes @ 0x10
  7177  0030                     	ds	1
  7178  0031                     MTOUCH_Sensor_Initialize@sensor:	
  7179  0031                     Sensor_Acq_ExecutePacket@sensor:	
  7180                           ; 1 bytes @ 0x11
  7181                           
  7182  0031                     MTOUCH_Sensor_RawSample_Get@name:	
  7183                           ; 1 bytes @ 0x11
  7184                           
  7185                           
  7186                           ; 1 bytes @ 0x11
  7187  0031                     	ds	1
  7188  0032                     ??_Button_Baseline_Initialize:	
  7189  0032                     ??_Button_Reading_Update_Helper:	
  7190                           ; 1 bytes @ 0x12
  7191                           
  7192  0032                     ??_MTOUCH_Sensor_InitializeAll:	
  7193                           ; 1 bytes @ 0x12
  7194                           
  7195  0032                     ??_Sensor_Scanfrequency_Evaluation:	
  7196                           ; 1 bytes @ 0x12
  7197                           
  7198                           
  7199                           ; 1 bytes @ 0x12
  7200  0032                     	ds	1
  7201  0033                     MTOUCH_Sensor_InitializeAll@sensor:	
  7202  0033                     updateLight@i:	
  7203                           ; 1 bytes @ 0x13
  7204                           
  7205  0033                     OnHold@touch:	
  7206                           ; 1 bytes @ 0x13
  7207                           
  7208  0033                     handleUARTCommands@received:	
  7209                           ; 1 bytes @ 0x13
  7210                           
  7211                           
  7212                           ; 1 bytes @ 0x13
  7213  0033                     	ds	1
  7214  0034                     ?_processToggle:	
  7215  0034                     ??_MTOUCH_Initialize:	
  7216                           ; 1 bytes @ 0x14
  7217                           
  7218  0034                     ??_SYSTEM_Initialize:	
  7219                           ; 1 bytes @ 0x14
  7220                           
  7221  0034                     Button_Deviation_Update@button:	
  7222                           ; 1 bytes @ 0x14
  7223                           
  7224  0034                     Button_Reading_Update_Helper@button:	
  7225                           ; 1 bytes @ 0x14
  7226                           
  7227  0034                     Sensor_Scanfrequency_Evaluation@sensor:	
  7228                           ; 1 bytes @ 0x14
  7229                           
  7230  0034                     processToggle@index:	
  7231                           ; 1 bytes @ 0x14
  7232                           
  7233  0034                     handleUARTCommands@i:	
  7234                           ; 1 bytes @ 0x14
  7235                           
  7236  0034                     OnHold@heldTime:	
  7237                           ; 1 bytes @ 0x14
  7238                           
  7239                           
  7240                           ; 4 bytes @ 0x14
  7241  0034                     	ds	1
  7242  0035                     ??_Button_Reading_Update:	
  7243  0035                     ??_processToggle:	
  7244                           ; 1 bytes @ 0x15
  7245                           
  7246  0035                     Button_Reading_Update@button:	
  7247                           ; 1 bytes @ 0x15
  7248                           
  7249  0035                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  7250                           ; 1 bytes @ 0x15
  7251                           
  7252  0035                     Button_Deviation_Update@deviation:	
  7253                           ; 2 bytes @ 0x15
  7254                           
  7255                           
  7256                           ; 4 bytes @ 0x15
  7257  0035                     	ds	1
  7258  0036                     Button_Baseline_Initialize@button:	
  7259                           
  7260                           ; 1 bytes @ 0x16
  7261  0036                     	ds	1
  7262  0037                     ?_Button_State_Initializing:	
  7263  0037                     ?_Button_State_NotPressed:	
  7264                           ; 1 bytes @ 0x17
  7265                           
  7266  0037                     ?_Button_State_Pressed:	
  7267                           ; 1 bytes @ 0x17
  7268                           
  7269  0037                     Button_State_Initializing@button:	
  7270                           ; 1 bytes @ 0x17
  7271                           
  7272  0037                     Button_State_NotPressed@button:	
  7273                           ; 1 bytes @ 0x17
  7274                           
  7275  0037                     Button_State_Pressed@button:	
  7276                           ; 1 bytes @ 0x17
  7277                           
  7278  0037                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  7279                           ; 1 bytes @ 0x17
  7280                           
  7281  0037                     _processToggle$1636:	
  7282                           ; 2 bytes @ 0x17
  7283                           
  7284                           
  7285                           ; 2 bytes @ 0x17
  7286  0037                     	ds	1
  7287  0038                     ??_Button_State_Initializing:	
  7288  0038                     ??_Button_State_NotPressed:	
  7289                           ; 1 bytes @ 0x18
  7290                           
  7291  0038                     ??_Button_State_Pressed:	
  7292                           ; 1 bytes @ 0x18
  7293                           
  7294                           
  7295                           ; 1 bytes @ 0x18
  7296  0038                     	ds	1
  7297  0039                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  7298  0039                     processToggle@ctrl:	
  7299                           ; 1 bytes @ 0x19
  7300                           
  7301                           
  7302                           ; 1 bytes @ 0x19
  7303  0039                     	ds	1
  7304  003A                     ??_ir_handler:	
  7305  003A                     ??_handleGeneralTouchControls:	
  7306                           ; 1 bytes @ 0x1A
  7307                           
  7308  003A                     Sensor_Scanfrequency_Evaluation@retry:	
  7309                           ; 1 bytes @ 0x1A
  7310                           
  7311                           
  7312                           ; 1 bytes @ 0x1A
  7313  003A                     	ds	1
  7314  003B                     Sensor_Scanfrequency_Evaluation@i:	
  7315                           
  7316                           ; 1 bytes @ 0x1B
  7317  003B                     	ds	1
  7318  003C                     ??_Button_Service:	
  7319  003C                     ??_Sensor_Acquisition:	
  7320                           ; 1 bytes @ 0x1C
  7321                           
  7322  003C                     ir_handler@ctrl:	
  7323                           ; 1 bytes @ 0x1C
  7324                           
  7325  003C                     handleGeneralTouchControls@ctrl:	
  7326                           ; 1 bytes @ 0x1C
  7327                           
  7328                           
  7329                           ; 1 bytes @ 0x1C
  7330  003C                     	ds	1
  7331  003D                     Button_Service@name:	
  7332  003D                     ir_handler@i:	
  7333                           ; 1 bytes @ 0x1D
  7334                           
  7335  003D                     handleGeneralTouchControls@i:	
  7336                           ; 1 bytes @ 0x1D
  7337                           
  7338                           
  7339                           ; 1 bytes @ 0x1D
  7340  003D                     	ds	1
  7341  003E                     Button_Service@button:	
  7342  003E                     Sensor_Acquisition@retry:	
  7343                           ; 1 bytes @ 0x1E
  7344                           
  7345                           
  7346                           ; 1 bytes @ 0x1E
  7347  003E                     	ds	1
  7348  003F                     ??_MTOUCH_Button_ServiceAll:	
  7349  003F                     Sensor_Acquisition@sensor:	
  7350                           ; 1 bytes @ 0x1F
  7351                           
  7352                           
  7353                           ; 1 bytes @ 0x1F
  7354  003F                     	ds	1
  7355  0040                     ??_Sensor_Service:	
  7356  0040                     MTOUCH_Button_ServiceAll@button:	
  7357                           ; 1 bytes @ 0x20
  7358                           
  7359                           
  7360                           ; 1 bytes @ 0x20
  7361  0040                     	ds	2
  7362  0042                     Sensor_Service@name:	
  7363                           
  7364                           ; 1 bytes @ 0x22
  7365  0042                     	ds	1
  7366  0043                     Sensor_Service@error:	
  7367                           
  7368                           ; 1 bytes @ 0x23
  7369  0043                     	ds	1
  7370  0044                     Sensor_Service@sensor:	
  7371                           
  7372                           ; 1 bytes @ 0x24
  7373  0044                     	ds	1
  7374  0045                     ??_MTOUCH_Sensor_SampleAll:	
  7375                           
  7376                           ; 1 bytes @ 0x25
  7377  0045                     	ds	1
  7378                           
  7379                           	psect	maintext
  7380  0404                     __pmaintext:	
  7381 ;;
  7382 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  7383 ;;
  7384 ;; *************** function _main *****************
  7385 ;; Defined at:
  7386 ;;		line 62 in file "main.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;		None
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  buttonPresse    1    3[BANK2 ] unsigned char 
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      void 
  7393 ;; Registers used:
  7394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : B1F/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;Total ram usage:        3 bytes
  7405 ;; Hardware stack levels required when called:   11
  7406 ;; This function calls:
  7407 ;;		_DATAEE_ReadByte
  7408 ;;		_EUSART_Write
  7409 ;;		_InitExternal_INT
  7410 ;;		_MTOUCH_Button_isPressed
  7411 ;;		_MTOUCH_Service_Mainloop
  7412 ;;		_OnHold
  7413 ;;		_SYSTEM_Initialize
  7414 ;;		_TMR6_Initialize
  7415 ;;		_TMR6_StartTimer
  7416 ;;		_handleGeneralTouchControls
  7417 ;;		_handleUARTCommands
  7418 ;;		_ir_handler
  7419 ;; This function is called by:
  7420 ;;		Startup code after reset
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _main
  7426  0404                     _main:	
  7427                           
  7428                           ;main.c: 64: SYSTEM_Initialize();
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7432  0404  318A  22FF  3184   	fcall	_SYSTEM_Initialize
  7433                           
  7434                           ;main.c: 65: TMR6_Initialize();
  7435  0407  318A  2285  3184   	fcall	_TMR6_Initialize
  7436                           
  7437                           ;main.c: 66: TMR6_StartTimer();
  7438  040A  3189  2115  3184   	fcall	_TMR6_StartTimer
  7439                           
  7440                           ;main.c: 67: InitExternal_INT();
  7441  040D  3189  213D  3184   	fcall	_InitExternal_INT
  7442                           
  7443                           ;main.c: 69: (INTCONbits.GIE = 1);
  7444  0410  178B               	bsf	11,7	;volatile
  7445                           
  7446                           ;main.c: 70: (INTCONbits.PEIE = 1);
  7447  0411  170B               	bsf	11,6	;volatile
  7448                           
  7449                           ;main.c: 72: d1 = DATAEE_ReadByte(0x00);
  7450  0412  3000               	movlw	0
  7451  0413  0020               	movlb	0	; select bank0
  7452  0414  00AA               	movwf	DATAEE_ReadByte@bAdd
  7453  0415  00AB               	movwf	DATAEE_ReadByte@bAdd+1
  7454  0416  3189  21F2  3184   	fcall	_DATAEE_ReadByte
  7455  0419  0022               	movlb	2	; select bank2
  7456  041A  00A7               	movwf	??_main^(0+256)
  7457  041B  01A8               	clrf	(??_main^(0+256)+1)
  7458  041C  0827               	movf	??_main^(0+256),w
  7459  041D  0020               	movlb	0	; select bank0
  7460  041E  00D0               	movwf	_d1
  7461  041F  0022               	movlb	2	; select bank2
  7462  0420  0828               	movf	(??_main+1)^(0+256),w
  7463  0421  0020               	movlb	0	; select bank0
  7464  0422  00D1               	movwf	_d1+1
  7465                           
  7466                           ;main.c: 73: _delay((unsigned long)((650)*(32000000/4000.0)));
  7467  0423  301B               	movlw	27
  7468  0424  0022               	movlb	2	; select bank2
  7469  0425  00A8               	movwf	(??_main^(0+256)+1)
  7470  0426  3062               	movlw	98
  7471  0427  00A7               	movwf	??_main^(0+256)
  7472  0428  302B               	movlw	43
  7473  0429                     u5777:	
  7474  0429  0B89               	decfsz	9,f
  7475  042A  2C29               	goto	u5777
  7476  042B  0BA7               	decfsz	??_main^(0+256),f
  7477  042C  2C29               	goto	u5777
  7478  042D  0BA8               	decfsz	(??_main^(0+256)+1),f
  7479  042E  2C29               	goto	u5777
  7480                           
  7481                           ;main.c: 74: d2 = DATAEE_ReadByte(0x01);
  7482  042F  3001               	movlw	1
  7483  0430  0020               	movlb	0	; select bank0
  7484  0431  00AA               	movwf	DATAEE_ReadByte@bAdd
  7485  0432  3000               	movlw	0
  7486  0433  00AB               	movwf	DATAEE_ReadByte@bAdd+1
  7487  0434  3189  21F2  3184   	fcall	_DATAEE_ReadByte
  7488  0437  0022               	movlb	2	; select bank2
  7489  0438  00A7               	movwf	??_main^(0+256)
  7490  0439  01A8               	clrf	(??_main^(0+256)+1)
  7491  043A  0827               	movf	??_main^(0+256),w
  7492  043B  0020               	movlb	0	; select bank0
  7493  043C  00CE               	movwf	_d2
  7494  043D  0022               	movlb	2	; select bank2
  7495  043E  0828               	movf	(??_main+1)^(0+256),w
  7496  043F  0020               	movlb	0	; select bank0
  7497  0440  00CF               	movwf	_d2+1
  7498                           
  7499                           ;main.c: 75: _delay((unsigned long)((650)*(32000000/4000.0)));
  7500  0441  301B               	movlw	27
  7501  0442  0022               	movlb	2	; select bank2
  7502  0443  00A8               	movwf	(??_main^(0+256)+1)
  7503  0444  3062               	movlw	98
  7504  0445  00A7               	movwf	??_main^(0+256)
  7505  0446  302B               	movlw	43
  7506  0447                     u5787:	
  7507  0447  0B89               	decfsz	9,f
  7508  0448  2C47               	goto	u5787
  7509  0449  0BA7               	decfsz	??_main^(0+256),f
  7510  044A  2C47               	goto	u5787
  7511  044B  0BA8               	decfsz	(??_main^(0+256)+1),f
  7512  044C  2C47               	goto	u5787
  7513  044D  2C51               	goto	l5519
  7514  044E                     l5525:	
  7515                           
  7516                           ;main.c: 84: ir_handler();
  7517  044E  3181  21DA  3184   	fcall	_ir_handler
  7518  0451                     l5519:	
  7519                           ;main.c: 77: while (1)
  7520                           
  7521                           ;main.c: 85: continue;
  7522                           
  7523                           
  7524                           ;main.c: 78: {
  7525                           ;main.c: 79: MTOUCH_Service_Mainloop();
  7526  0451  318C  24A5  3184   	fcall	_MTOUCH_Service_Mainloop
  7527                           
  7528                           ;main.c: 80: handleUARTCommands();
  7529  0454  3186  2646  3184   	fcall	_handleUARTCommands
  7530                           
  7531                           ;main.c: 83: if (wipeTriggerFlag == 1) {
  7532  0457  0020               	movlb	0	; select bank0
  7533  0458  035E               	decf	_wipeTriggerFlag,w
  7534  0459  1903               	btfsc	3,2
  7535  045A  2C4E               	goto	l5525
  7536                           
  7537                           ;main.c: 86: }
  7538                           ;main.c: 89: bool buttonPressed = MTOUCH_Button_isPressed(T1);
  7539  045B  3000               	movlw	0
  7540  045C  318B  2314  3184   	fcall	_MTOUCH_Button_isPressed
  7541  045F  0022               	movlb	2	; select bank2
  7542  0460  00A7               	movwf	??_main^(0+256)
  7543  0461  0827               	movf	??_main^(0+256),w
  7544  0462  00A9               	movwf	main@buttonPressed^(0+256)
  7545                           
  7546                           ;main.c: 90: OnHold(buttonPressed);
  7547  0463  0829               	movf	main@buttonPressed^(0+256),w
  7548  0464  3183  2366  3184   	fcall	_OnHold
  7549                           
  7550                           ;main.c: 91: if (touchEdgeDetected == 1 && !buttonPressed) {
  7551  0467  0020               	movlb	0	; select bank0
  7552  0468  035C               	decf	_touchEdgeDetected,w
  7553  0469  1D03               	btfss	3,2
  7554  046A  2C8A               	goto	l5547
  7555  046B  0022               	movlb	2	; select bank2
  7556  046C  0829               	movf	main@buttonPressed^(0+256),w
  7557  046D  1D03               	btfss	3,2
  7558  046E  2C8A               	goto	l5547
  7559                           
  7560                           ;main.c: 92: touchEdgeDetected = 0;
  7561  046F  0020               	movlb	0	; select bank0
  7562  0470  01DC               	clrf	_touchEdgeDetected
  7563                           
  7564                           ;main.c: 93: mainToggleState = !mainToggleState;
  7565  0471  085B               	movf	_mainToggleState,w
  7566  0472  1D03               	btfss	3,2
  7567  0473  2C76               	goto	u5700
  7568  0474  3001               	movlw	1
  7569  0475  2C77               	goto	u5710
  7570  0476                     u5700:	
  7571  0476  3000               	movlw	0
  7572  0477                     u5710:	
  7573  0477  0022               	movlb	2	; select bank2
  7574  0478  00A7               	movwf	??_main^(0+256)
  7575  0479  0827               	movf	??_main^(0+256),w
  7576  047A  0020               	movlb	0	; select bank0
  7577  047B  00DB               	movwf	_mainToggleState
  7578                           
  7579                           ;main.c: 95: if (mainToggleState == 1) {
  7580  047C  035B               	decf	_mainToggleState,w
  7581  047D  1D03               	btfss	3,2
  7582  047E  2C84               	goto	l5543
  7583                           
  7584                           ;main.c: 96: EUSART_Write('y');
  7585  047F  3079               	movlw	121
  7586  0480  3189  216C  3184   	fcall	_EUSART_Write
  7587                           
  7588                           ;main.c: 97: } else {
  7589  0483  2C8A               	goto	l5547
  7590  0484                     l5543:	
  7591                           
  7592                           ;main.c: 98: EUSART_Write('z');
  7593  0484  307A               	movlw	122
  7594  0485  3189  216C  3184   	fcall	_EUSART_Write
  7595                           
  7596                           ;main.c: 99: do { LATCbits.LATC1 = 0; } while(0);
  7597  0488  0022               	movlb	2	; select bank2
  7598  0489  108E               	bcf	14,1	;volatile
  7599  048A                     l5547:	
  7600                           
  7601                           ;main.c: 100: }
  7602                           ;main.c: 101: }
  7603                           ;main.c: 105: handleGeneralTouchControls();
  7604  048A  318D  25D4  3184   	fcall	_handleGeneralTouchControls
  7605                           
  7606                           ;main.c: 106: ir_handler();
  7607  048D  3181  21DA  3184   	fcall	_ir_handler
  7608                           
  7609                           ;main.c: 108: _delay((unsigned long)((1)*(32000000/4000.0)));
  7610  0490  300B               	movlw	11
  7611  0491  0022               	movlb	2	; select bank2
  7612  0492  00A7               	movwf	??_main^(0+256)
  7613  0493  3062               	movlw	98
  7614  0494                     u5797:	
  7615  0494  0B89               	decfsz	9,f
  7616  0495  2C94               	goto	u5797
  7617  0496  0BA7               	decfsz	??_main^(0+256),f
  7618  0497  2C94               	goto	u5797
  7619  0498  0000               	nop
  7620  0499  2C51               	goto	l5519
  7621  049A                     __end_of_main:	
  7622                           
  7623                           	psect	text1
  7624  01DA                     __ptext1:	
  7625 ;; *************** function _ir_handler *****************
  7626 ;; Defined at:
  7627 ;;		line 76 in file "ir_handler.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  ctrl            1   28[BANK0 ] PTR struct .
  7632 ;;		 -> controls(9), 
  7633 ;;  i               1   29[BANK0 ] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;Total ram usage:        4 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    7
  7650 ;; This function calls:
  7651 ;;		_EUSART_Write
  7652 ;;		___bmul
  7653 ;;		_processToggle
  7654 ;; This function is called by:
  7655 ;;		_main
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _ir_handler
  7661  01DA                     _ir_handler:	
  7662                           
  7663                           ;ir_handler.c: 78: if (sto == 1) {
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _ir_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7667  01DA  0021               	movlb	1	; select bank1
  7668  01DB  0334               	decf	_sto^(0+128),w
  7669  01DC  0435               	iorwf	(_sto+1)^(0+128),w
  7670  01DD  1D03               	btfss	3,2
  7671  01DE  0008               	return
  7672                           
  7673                           ;ir_handler.c: 81: if (t1 == 0 && a1 == d1 && a2 == d2 && c1 == 0 && c2 == 8) {
  7674  01DF  0020               	movlb	0	; select bank0
  7675  01E0  084C               	movf	_t1,w
  7676  01E1  044D               	iorwf	_t1+1,w
  7677  01E2  1D03               	btfss	3,2
  7678  01E3  2A15               	goto	l5279
  7679  01E4  0851               	movf	_d1+1,w
  7680  01E5  064B               	xorwf	_a1+1,w
  7681  01E6  1D03               	skipz
  7682  01E7  29EA               	goto	u5045
  7683  01E8  0850               	movf	_d1,w
  7684  01E9  064A               	xorwf	_a1,w
  7685  01EA                     u5045:	
  7686  01EA  1D03               	skipz
  7687  01EB  2A15               	goto	l5279
  7688  01EC  084F               	movf	_d2+1,w
  7689  01ED  0649               	xorwf	_a2+1,w
  7690  01EE  1D03               	skipz
  7691  01EF  29F2               	goto	u5055
  7692  01F0  084E               	movf	_d2,w
  7693  01F1  0648               	xorwf	_a2,w
  7694  01F2                     u5055:	
  7695  01F2  1D03               	skipz
  7696  01F3  2A15               	goto	l5279
  7697  01F4  0846               	movf	_c1,w
  7698  01F5  0447               	iorwf	_c1+1,w
  7699  01F6  1D03               	btfss	3,2
  7700  01F7  2A15               	goto	l5279
  7701  01F8  3008               	movlw	8
  7702  01F9  0021               	movlb	1	; select bank1
  7703  01FA  062C               	xorwf	_c2^(0+128),w
  7704  01FB  042D               	iorwf	(_c2+1)^(0+128),w
  7705  01FC  1D03               	btfss	3,2
  7706  01FD  2A15               	goto	l5279
  7707                           
  7708                           ;ir_handler.c: 82: wipeEnabled = !wipeEnabled;
  7709  01FE  0020               	movlb	0	; select bank0
  7710  01FF  085D               	movf	_wipeEnabled,w
  7711  0200  1D03               	btfss	3,2
  7712  0201  2A04               	goto	u5080
  7713  0202  3001               	movlw	1
  7714  0203  2A05               	goto	u5090
  7715  0204                     u5080:	
  7716  0204  3000               	movlw	0
  7717  0205                     u5090:	
  7718  0205  00BA               	movwf	??_ir_handler
  7719  0206  083A               	movf	??_ir_handler,w
  7720  0207  00DD               	movwf	_wipeEnabled
  7721                           
  7722                           ;ir_handler.c: 83: wipeTriggerFlag = (wipeEnabled == 1) ? 1 : 0;
  7723  0208  035D               	decf	_wipeEnabled,w
  7724  0209  1D03               	btfss	3,2
  7725  020A  2A0D               	goto	u5100
  7726  020B  3001               	movlw	1
  7727  020C  2A0E               	goto	u5110
  7728  020D                     u5100:	
  7729  020D  3000               	movlw	0
  7730  020E                     u5110:	
  7731  020E  00BA               	movwf	??_ir_handler
  7732  020F  083A               	movf	??_ir_handler,w
  7733  0210  00DE               	movwf	_wipeTriggerFlag
  7734                           
  7735                           ;ir_handler.c: 84: sto = 0;
  7736  0211  0021               	movlb	1	; select bank1
  7737  0212  01B4               	clrf	_sto^(0+128)
  7738  0213  01B5               	clrf	(_sto+1)^(0+128)
  7739                           
  7740                           ;ir_handler.c: 85: return;
  7741  0214  0008               	return
  7742  0215                     l5279:	
  7743                           
  7744                           ;ir_handler.c: 86: }
  7745                           ;ir_handler.c: 87: if (t1 == 0 && a1 == d1 && a2 == d2 && c1 == 0 && c2 == 9) {
  7746  0215  0020               	movlb	0	; select bank0
  7747  0216  084C               	movf	_t1,w
  7748  0217  044D               	iorwf	_t1+1,w
  7749  0218  1D03               	btfss	3,2
  7750  0219  2A4F               	goto	l5301
  7751  021A  0851               	movf	_d1+1,w
  7752  021B  064B               	xorwf	_a1+1,w
  7753  021C  1D03               	skipz
  7754  021D  2A20               	goto	u5135
  7755  021E  0850               	movf	_d1,w
  7756  021F  064A               	xorwf	_a1,w
  7757  0220                     u5135:	
  7758  0220  1D03               	skipz
  7759  0221  2A4F               	goto	l5301
  7760  0222  084F               	movf	_d2+1,w
  7761  0223  0649               	xorwf	_a2+1,w
  7762  0224  1D03               	skipz
  7763  0225  2A28               	goto	u5145
  7764  0226  084E               	movf	_d2,w
  7765  0227  0648               	xorwf	_a2,w
  7766  0228                     u5145:	
  7767  0228  1D03               	skipz
  7768  0229  2A4F               	goto	l5301
  7769  022A  0846               	movf	_c1,w
  7770  022B  0447               	iorwf	_c1+1,w
  7771  022C  1D03               	btfss	3,2
  7772  022D  2A4F               	goto	l5301
  7773  022E  3009               	movlw	9
  7774  022F  0021               	movlb	1	; select bank1
  7775  0230  062C               	xorwf	_c2^(0+128),w
  7776  0231  042D               	iorwf	(_c2+1)^(0+128),w
  7777  0232  1D03               	btfss	3,2
  7778  0233  2A4F               	goto	l5301
  7779                           
  7780                           ;ir_handler.c: 88: mainToggleState = !mainToggleState;
  7781  0234  0020               	movlb	0	; select bank0
  7782  0235  085B               	movf	_mainToggleState,w
  7783  0236  1D03               	btfss	3,2
  7784  0237  2A3A               	goto	u5170
  7785  0238  3001               	movlw	1
  7786  0239  2A3B               	goto	u5180
  7787  023A                     u5170:	
  7788  023A  3000               	movlw	0
  7789  023B                     u5180:	
  7790  023B  00BA               	movwf	??_ir_handler
  7791  023C  083A               	movf	??_ir_handler,w
  7792  023D  00DB               	movwf	_mainToggleState
  7793                           
  7794                           ;ir_handler.c: 90: if (mainToggleState == 1) {
  7795  023E  035B               	decf	_mainToggleState,w
  7796  023F  1D03               	btfss	3,2
  7797  0240  2A46               	goto	l5293
  7798                           
  7799                           ;ir_handler.c: 91: EUSART_Write('y');
  7800  0241  3079               	movlw	121
  7801  0242  3189  216C  3181   	fcall	_EUSART_Write
  7802                           
  7803                           ;ir_handler.c: 92: } else {
  7804  0245  2A4B               	goto	l5297
  7805  0246                     l5293:	
  7806                           
  7807                           ;ir_handler.c: 93: EUSART_Write('z');
  7808  0246  307A               	movlw	122
  7809  0247  3189  216C         	fcall	_EUSART_Write
  7810                           
  7811                           ;ir_handler.c: 94: do { LATCbits.LATC1 = 0; } while(0);
  7812  0249  0022               	movlb	2	; select bank2
  7813  024A  108E               	bcf	14,1	;volatile
  7814  024B                     l5297:	
  7815                           
  7816                           ;ir_handler.c: 96: }
  7817                           ;ir_handler.c: 98: sto = 0;
  7818  024B  0021               	movlb	1	; select bank1
  7819  024C  01B4               	clrf	_sto^(0+128)
  7820  024D  01B5               	clrf	(_sto+1)^(0+128)
  7821                           
  7822                           ;ir_handler.c: 99: return;
  7823  024E  0008               	return
  7824  024F                     l5301:	
  7825                           
  7826                           ;ir_handler.c: 100: }
  7827                           ;ir_handler.c: 102: if (t1 == 0 && a1 == d1 && a2 == d2) {
  7828  024F  0020               	movlb	0	; select bank0
  7829  0250  084C               	movf	_t1,w
  7830  0251  044D               	iorwf	_t1+1,w
  7831  0252  1D03               	btfss	3,2
  7832  0253  2AB3               	goto	l5329
  7833  0254  0851               	movf	_d1+1,w
  7834  0255  064B               	xorwf	_a1+1,w
  7835  0256  1D03               	skipz
  7836  0257  2A5A               	goto	u5215
  7837  0258  0850               	movf	_d1,w
  7838  0259  064A               	xorwf	_a1,w
  7839  025A                     u5215:	
  7840  025A  1D03               	skipz
  7841  025B  2AB3               	goto	l5329
  7842  025C  084F               	movf	_d2+1,w
  7843  025D  0649               	xorwf	_a2+1,w
  7844  025E  1D03               	skipz
  7845  025F  2A62               	goto	u5225
  7846  0260  084E               	movf	_d2,w
  7847  0261  0648               	xorwf	_a2,w
  7848  0262                     u5225:	
  7849  0262  1D03               	skipz
  7850  0263  2AB3               	goto	l5329
  7851                           
  7852                           ;ir_handler.c: 103: for (uint8_t i = 0; i < 1; i++) {
  7853  0264  01BD               	clrf	ir_handler@i
  7854  0265  083D               	movf	ir_handler@i,w
  7855  0266  1D03               	btfss	3,2
  7856  0267  2AB3               	goto	l5329
  7857  0268                     l5313:	
  7858                           
  7859                           ;ir_handler.c: 104: TouchIRControl* ctrl = &controls[i];
  7860  0268  3009               	movlw	9
  7861  0269  00BA               	movwf	??_ir_handler
  7862  026A  083A               	movf	??_ir_handler,w
  7863  026B  00AA               	movwf	___bmul@multiplicand
  7864  026C  083D               	movf	ir_handler@i,w
  7865  026D  318A  224E  3181   	fcall	___bmul
  7866  0270  3EDB               	addlw	(low (_controls| 0))& (0+255)
  7867  0271  0020               	movlb	0	; select bank0
  7868  0272  00BB               	movwf	??_ir_handler+1
  7869  0273  083B               	movf	??_ir_handler+1,w
  7870  0274  00BC               	movwf	ir_handler@ctrl
  7871                           
  7872                           ;ir_handler.c: 105: if (c1 == ctrl->c1 && c2 == ctrl->c2 && !ctrl->pressedLast) {
  7873  0275  083C               	movf	ir_handler@ctrl,w
  7874  0276  3E05               	addlw	5
  7875  0277  0086               	movwf	6
  7876  0278  0187               	clrf	7
  7877  0279  3F40               	moviw [0]fsr1
  7878  027A  00BA               	movwf	??_ir_handler
  7879  027B  3F41               	moviw [1]fsr1
  7880  027C  00BB               	movwf	??_ir_handler+1
  7881  027D  0847               	movf	_c1+1,w
  7882  027E  063B               	xorwf	??_ir_handler+1,w
  7883  027F  1D03               	skipz
  7884  0280  2A83               	goto	u5245
  7885  0281  0846               	movf	_c1,w
  7886  0282  063A               	xorwf	??_ir_handler,w
  7887  0283                     u5245:	
  7888  0283  1D03               	skipz
  7889  0284  2AAB               	goto	l5327
  7890  0285  083C               	movf	ir_handler@ctrl,w
  7891  0286  3E07               	addlw	7
  7892  0287  0086               	movwf	6
  7893  0288  0187               	clrf	7
  7894  0289  3F40               	moviw [0]fsr1
  7895  028A  00BA               	movwf	??_ir_handler
  7896  028B  3F41               	moviw [1]fsr1
  7897  028C  00BB               	movwf	??_ir_handler+1
  7898  028D  0021               	movlb	1	; select bank1
  7899  028E  082D               	movf	(_c2+1)^(0+128),w
  7900  028F  0020               	movlb	0	; select bank0
  7901  0290  063B               	xorwf	??_ir_handler+1,w
  7902  0291  1D03               	skipz
  7903  0292  2A97               	goto	u5255
  7904  0293  0021               	movlb	1	; select bank1
  7905  0294  082C               	movf	_c2^(0+128),w
  7906  0295  0020               	movlb	0	; select bank0
  7907  0296  063A               	xorwf	??_ir_handler,w
  7908  0297                     u5255:	
  7909  0297  1D03               	skipz
  7910  0298  2AAB               	goto	l5327
  7911  0299  083C               	movf	ir_handler@ctrl,w
  7912  029A  3E04               	addlw	4
  7913  029B  0086               	movwf	6
  7914  029C  0187               	clrf	7
  7915  029D  0801               	movf	1,w
  7916  029E  1D03               	btfss	3,2
  7917  029F  2AAB               	goto	l5327
  7918                           
  7919                           ;ir_handler.c: 106: processToggle(ctrl, i);
  7920  02A0  083D               	movf	ir_handler@i,w
  7921  02A1  00BA               	movwf	??_ir_handler
  7922  02A2  083A               	movf	??_ir_handler,w
  7923  02A3  00B4               	movwf	processToggle@index
  7924  02A4  083C               	movf	ir_handler@ctrl,w
  7925  02A5  318D  2557         	fcall	_processToggle
  7926                           
  7927                           ;ir_handler.c: 107: sto = 0;
  7928  02A7  0021               	movlb	1	; select bank1
  7929  02A8  01B4               	clrf	_sto^(0+128)
  7930  02A9  01B5               	clrf	(_sto+1)^(0+128)
  7931                           
  7932                           ;ir_handler.c: 108: return;
  7933  02AA  0008               	return
  7934  02AB                     l5327:	
  7935  02AB  3001               	movlw	1
  7936  02AC  0020               	movlb	0	; select bank0
  7937  02AD  00BA               	movwf	??_ir_handler
  7938  02AE  083A               	movf	??_ir_handler,w
  7939  02AF  07BD               	addwf	ir_handler@i,f
  7940  02B0  083D               	movf	ir_handler@i,w
  7941  02B1  1903               	btfsc	3,2
  7942  02B2  2A68               	goto	l5313
  7943  02B3                     l5329:	
  7944                           
  7945                           ;ir_handler.c: 109: }
  7946                           ;ir_handler.c: 110: }
  7947                           ;ir_handler.c: 111: }
  7948                           ;ir_handler.c: 112: sto = 0;
  7949  02B3  0021               	movlb	1	; select bank1
  7950  02B4  01B4               	clrf	_sto^(0+128)
  7951  02B5  01B5               	clrf	(_sto+1)^(0+128)
  7952  02B6  0008               	return
  7953  02B7                     __end_of_ir_handler:	
  7954                           
  7955                           	psect	text2
  7956  0646                     __ptext2:	
  7957 ;; *************** function _handleUARTCommands *****************
  7958 ;; Defined at:
  7959 ;;		line 14 in file "uart_handler.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  i               1   20[BANK0 ] unsigned char 
  7964 ;;  received        1   19[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:        5 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    5
  7981 ;; This function calls:
  7982 ;;		_EUSART_Read
  7983 ;;		_EUSART_is_rx_ready
  7984 ;;		___bmul
  7985 ;;		_setLightState
  7986 ;;		_uartLight
  7987 ;; This function is called by:
  7988 ;;		_main
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _handleUARTCommands
  7994  0646                     _handleUARTCommands:	
  7995                           
  7996                           ;uart_handler.c: 16: if ((EUSART_is_rx_ready()))
  7997                           
  7998                           ;incstack = 0
  7999                           ; Regs used in _handleUARTCommands: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8000  0646  3189  2126  3186   	fcall	_EUSART_is_rx_ready
  8001  0649  3A00               	xorlw	0
  8002  064A  1903               	skipnz
  8003  064B  0008               	return
  8004                           
  8005                           ;uart_handler.c: 17: {
  8006                           ;uart_handler.c: 18: char received = EUSART_Read();
  8007  064C  3189  21CA  3186   	fcall	_EUSART_Read
  8008  064F  0020               	movlb	0	; select bank0
  8009  0650  00B0               	movwf	??_handleUARTCommands
  8010  0651  0830               	movf	??_handleUARTCommands,w
  8011  0652  00B3               	movwf	handleUARTCommands@received
  8012                           
  8013                           ;uart_handler.c: 20: for (uint8_t i = 0; i < 1; i++)
  8014  0653  01B4               	clrf	handleUARTCommands@i
  8015  0654                     L1:	
  8016  0654  0834               	movf	handleUARTCommands@i,w
  8017  0655  1D03               	btfss	3,2
  8018  0656  0008               	return
  8019                           
  8020                           ;uart_handler.c: 21: {
  8021                           ;uart_handler.c: 22: if (received == controls[i].uartOn || received == controls[i].uartO
      +                          ff) {
  8022  0657  3009               	movlw	9
  8023  0658  00B0               	movwf	??_handleUARTCommands
  8024  0659  0830               	movf	??_handleUARTCommands,w
  8025  065A  00AA               	movwf	___bmul@multiplicand
  8026  065B  0834               	movf	handleUARTCommands@i,w
  8027  065C  318A  224E  3186   	fcall	___bmul
  8028  065F  3E01               	addlw	1
  8029  0660  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8030  0661  0086               	movwf	6
  8031  0662  0187               	clrf	7
  8032  0663  0801               	movf	1,w
  8033  0664  0020               	movlb	0	; select bank0
  8034  0665  0633               	xorwf	handleUARTCommands@received,w
  8035  0666  1903               	skipnz
  8036  0667  2E79               	goto	l5253
  8037  0668  3009               	movlw	9
  8038  0669  00B0               	movwf	??_handleUARTCommands
  8039  066A  0830               	movf	??_handleUARTCommands,w
  8040  066B  00AA               	movwf	___bmul@multiplicand
  8041  066C  0834               	movf	handleUARTCommands@i,w
  8042  066D  318A  224E  3186   	fcall	___bmul
  8043  0670  3E02               	addlw	2
  8044  0671  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8045  0672  0086               	movwf	6
  8046  0673  0187               	clrf	7
  8047  0674  0801               	movf	1,w
  8048  0675  0020               	movlb	0	; select bank0
  8049  0676  0633               	xorwf	handleUARTCommands@received,w
  8050  0677  1D03               	skipz
  8051  0678  2EC2               	goto	l5259
  8052  0679                     l5253:	
  8053                           
  8054                           ;uart_handler.c: 23: uartLight(received);
  8055  0679  0833               	movf	handleUARTCommands@received,w
  8056  067A  318B  2390  3186   	fcall	_uartLight
  8057                           
  8058                           ;uart_handler.c: 24: controls[i].toggle = (received == controls[i].uartOn);
  8059  067D  3009               	movlw	9
  8060  067E  0020               	movlb	0	; select bank0
  8061  067F  00B0               	movwf	??_handleUARTCommands
  8062  0680  0830               	movf	??_handleUARTCommands,w
  8063  0681  00AA               	movwf	___bmul@multiplicand
  8064  0682  0834               	movf	handleUARTCommands@i,w
  8065  0683  318A  224E  3186   	fcall	___bmul
  8066  0686  3E01               	addlw	1
  8067  0687  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8068  0688  0086               	movwf	6
  8069  0689  0187               	clrf	7
  8070  068A  0801               	movf	1,w
  8071  068B  0020               	movlb	0	; select bank0
  8072  068C  0633               	xorwf	handleUARTCommands@received,w
  8073  068D  1D03               	btfss	3,2
  8074  068E  2E91               	goto	u4990
  8075  068F  3001               	movlw	1
  8076  0690  2E92               	goto	u5000
  8077  0691                     u4990:	
  8078  0691  3000               	movlw	0
  8079  0692                     u5000:	
  8080  0692  00B1               	movwf	??_handleUARTCommands+1
  8081  0693  3009               	movlw	9
  8082  0694  00B2               	movwf	??_handleUARTCommands+2
  8083  0695  0832               	movf	??_handleUARTCommands+2,w
  8084  0696  00AA               	movwf	___bmul@multiplicand
  8085  0697  0834               	movf	handleUARTCommands@i,w
  8086  0698  318A  224E  3186   	fcall	___bmul
  8087  069B  3E03               	addlw	3
  8088  069C  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8089  069D  0086               	movwf	6
  8090  069E  0187               	clrf	7
  8091  069F  0020               	movlb	0	; select bank0
  8092  06A0  0831               	movf	??_handleUARTCommands+1,w
  8093  06A1  0081               	movwf	1
  8094                           
  8095                           ;uart_handler.c: 25: setLightState(controls[i].touchID, controls[i].toggle);
  8096  06A2  3009               	movlw	9
  8097  06A3  00B0               	movwf	??_handleUARTCommands
  8098  06A4  0830               	movf	??_handleUARTCommands,w
  8099  06A5  00AA               	movwf	___bmul@multiplicand
  8100  06A6  0834               	movf	handleUARTCommands@i,w
  8101  06A7  318A  224E  3186   	fcall	___bmul
  8102  06AA  3E03               	addlw	3
  8103  06AB  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8104  06AC  0086               	movwf	6
  8105  06AD  0187               	clrf	7
  8106  06AE  0801               	movf	1,w
  8107  06AF  0020               	movlb	0	; select bank0
  8108  06B0  00B1               	movwf	??_handleUARTCommands+1
  8109  06B1  0831               	movf	??_handleUARTCommands+1,w
  8110  06B2  00AE               	movwf	setLightState@state
  8111  06B3  3009               	movlw	9
  8112  06B4  00B2               	movwf	??_handleUARTCommands+2
  8113  06B5  0832               	movf	??_handleUARTCommands+2,w
  8114  06B6  00AA               	movwf	___bmul@multiplicand
  8115  06B7  0834               	movf	handleUARTCommands@i,w
  8116  06B8  318A  224E  3186   	fcall	___bmul
  8117  06BB  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8118  06BC  0086               	movwf	6
  8119  06BD  0187               	clrf	7
  8120  06BE  0801               	movf	1,w
  8121  06BF  318A  2298         	fcall	_setLightState
  8122                           
  8123                           ;uart_handler.c: 27: break;
  8124  06C1  0008               	return
  8125  06C2                     l5259:	
  8126  06C2  3001               	movlw	1
  8127  06C3  0020               	movlb	0	; select bank0
  8128  06C4  00B0               	movwf	??_handleUARTCommands
  8129  06C5  0830               	movf	??_handleUARTCommands,w
  8130  06C6  07B4               	addwf	handleUARTCommands@i,f
  8131  06C7  2E54               	goto	L1
  8132  06C8                     __end_of_handleUARTCommands:	
  8133                           
  8134                           	psect	text3
  8135  0B90                     __ptext3:	
  8136 ;; *************** function _uartLight *****************
  8137 ;; Defined at:
  8138 ;;		line 26 in file "load_handler.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  received        1    wreg     unsigned char 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;  received        1   10[BANK0 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        1 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    4
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_handleUARTCommands
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _uartLight
  8168  0B90                     _uartLight:	
  8169                           
  8170                           ;incstack = 0
  8171                           ; Regs used in _uartLight: [wreg-fsr0h+status,2+status,0]
  8172                           ;uartLight@received stored from wreg
  8173  0B90  0020               	movlb	0	; select bank0
  8174  0B91  00AA               	movwf	uartLight@received
  8175                           
  8176                           ;load_handler.c: 27: switch (received) {
  8177  0B92  2B9C               	goto	l5163
  8178  0B93                     l1038:	
  8179                           ;load_handler.c: 28: case 'a': do { LATCbits.LATC1 = 1; } while(0); break;
  8180                           
  8181  0B93  0022               	movlb	2	; select bank2
  8182  0B94  148E               	bsf	14,1	;volatile
  8183  0B95  0008               	return
  8184  0B96                     l1042:	
  8185                           ;load_handler.c: 29: case 'b': do { LATCbits.LATC1 = 0; } while(0); break;
  8186                           
  8187  0B96  0022               	movlb	2	; select bank2
  8188  0B97  108E               	bcf	14,1	;volatile
  8189  0B98  0008               	return
  8190  0B99                     l1046:	
  8191                           ;load_handler.c: 37: case 'z':
  8192                           ;load_handler.c: 38: do { LATCbits.LATC1 = 0; } while(0);
  8193                           
  8194                           ;load_handler.c: 36: case 'y':
  8195                           
  8196  0B99  0022               	movlb	2	; select bank2
  8197  0B9A  108E               	bcf	14,1	;volatile
  8198                           
  8199                           ;load_handler.c: 41: }
  8200                           
  8201                           ;load_handler.c: 40: default: break;
  8202                           
  8203                           ;load_handler.c: 39: break;
  8204  0B9B  0008               	return
  8205  0B9C                     l5163:	
  8206  0B9C  0020               	movlb	0	; select bank0
  8207  0B9D  082A               	movf	uartLight@received,w
  8208                           
  8209                           ; Switch size 1, requested type "space"
  8210                           ; Number of cases is 4, Range of values is 97 to 122
  8211                           ; switch strategies available:
  8212                           ; Name         Instructions Cycles
  8213                           ; simple_byte           13     7 (average)
  8214                           ; direct_byte           61     9 (fixed)
  8215                           ; jumptable            263     9 (fixed)
  8216                           ;	Chosen strategy is simple_byte
  8217  0B9E  3A61               	xorlw	97	; case 97
  8218  0B9F  1903               	skipnz
  8219  0BA0  2B93               	goto	l1038
  8220  0BA1  3A03               	xorlw	3	; case 98
  8221  0BA2  1903               	skipnz
  8222  0BA3  2B96               	goto	l1042
  8223  0BA4  3A1B               	xorlw	27	; case 121
  8224  0BA5  1903               	skipnz
  8225  0BA6  2B99               	goto	l1046
  8226  0BA7  3A03               	xorlw	3	; case 122
  8227  0BA8  1903               	skipnz
  8228  0BA9  2B99               	goto	l1046
  8229  0BAA  2BAB               	goto	l1049
  8230  0BAB                     l1049:	
  8231  0BAB  0008               	return
  8232  0BAC                     __end_of_uartLight:	
  8233                           
  8234                           	psect	text4
  8235  0926                     __ptext4:	
  8236 ;; *************** function _EUSART_is_rx_ready *****************
  8237 ;; Defined at:
  8238 ;;		line 99 in file "mcc_generated_files/eusart.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;		None
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;		None
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  1    wreg      unsigned char 
  8245 ;; Registers used:
  8246 ;;		wreg, status,2, status,0
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;Total ram usage:        0 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    4
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		_handleUARTCommands
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           
  8267                           ;psect for function _EUSART_is_rx_ready
  8268  0926                     _EUSART_is_rx_ready:	
  8269                           
  8270                           ;eusart.c: 101: return (bool)(PIR1bits.RCIF);
  8271                           
  8272                           ;incstack = 0
  8273                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  8274  0926  0020               	movlb	0	; select bank0
  8275  0927  0E11               	swapf	17,w	;volatile
  8276  0928  0C89               	rrf	9,f
  8277  0929  3901               	andlw	1
  8278  092A  0008               	return
  8279  092B                     __end_of_EUSART_is_rx_ready:	
  8280                           
  8281                           	psect	text5
  8282  09CA                     __ptext5:	
  8283 ;; *************** function _EUSART_Read *****************
  8284 ;; Defined at:
  8285 ;;		line 113 in file "mcc_generated_files/eusart.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;		None
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;		None
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      unsigned char 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;Total ram usage:        0 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    4
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_handleUARTCommands
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _EUSART_Read
  8315  09CA                     _EUSART_Read:	
  8316  09CA                     l688:	
  8317                           ;eusart.c: 116: {
  8318                           
  8319                           ;eusart.c: 115: while(!PIR1bits.RCIF)
  8320                           
  8321                           ;incstack = 0
  8322                           ; Regs used in _EUSART_Read: [wreg+status,2]
  8323                           
  8324  09CA  0020               	movlb	0	; select bank0
  8325  09CB  1E91               	btfss	17,5	;volatile
  8326  09CC  29CA               	goto	l688
  8327                           
  8328                           ;eusart.c: 117: }
  8329                           ;eusart.c: 119: eusartRxLastError.status = 0;
  8330  09CD  0021               	movlb	1	; select bank1
  8331  09CE  01B9               	clrf	_eusartRxLastError^(0+128)	;volatile
  8332                           
  8333                           ;eusart.c: 121: if(1 == RC1STAbits.OERR)
  8334  09CF  0023               	movlb	3	; select bank3
  8335  09D0  1C9D               	btfss	29,1	;volatile
  8336  09D1  29D4               	goto	l5143
  8337                           
  8338                           ;eusart.c: 122: {
  8339                           ;eusart.c: 125: RC1STAbits.CREN = 0;
  8340  09D2  121D               	bcf	29,4	;volatile
  8341                           
  8342                           ;eusart.c: 126: RC1STAbits.CREN = 1;
  8343  09D3  161D               	bsf	29,4	;volatile
  8344  09D4                     l5143:	
  8345                           
  8346                           ;eusart.c: 127: }
  8347                           ;eusart.c: 129: return RC1REG;
  8348  09D4  0819               	movf	25,w	;volatile
  8349  09D5  0008               	return
  8350  09D6                     __end_of_EUSART_Read:	
  8351                           
  8352                           	psect	text6
  8353  0DD4                     __ptext6:	
  8354 ;; *************** function _handleGeneralTouchControls *****************
  8355 ;; Defined at:
  8356 ;;		line 67 in file "touch_handler.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;		None
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  ctrl            1   28[BANK0 ] PTR struct .
  8361 ;;		 -> controls(9), 
  8362 ;;  i               1   29[BANK0 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      void 
  8365 ;; Registers used:
  8366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;Total ram usage:        4 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:    7
  8379 ;; This function calls:
  8380 ;;		_MTOUCH_Button_isPressed
  8381 ;;		___bmul
  8382 ;;		_processToggle
  8383 ;; This function is called by:
  8384 ;;		_main
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function _handleGeneralTouchControls
  8390  0DD4                     _handleGeneralTouchControls:	
  8391                           
  8392                           ;touch_handler.c: 68: for (uint8_t i = 0; i < 1; i++) {
  8393                           
  8394                           ;incstack = 0
  8395                           ; Regs used in _handleGeneralTouchControls: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8396  0DD4  0020               	movlb	0	; select bank0
  8397  0DD5  01BD               	clrf	handleGeneralTouchControls@i
  8398  0DD6                     L2:	
  8399  0DD6  083D               	movf	handleGeneralTouchControls@i,w
  8400  0DD7  1D03               	btfss	3,2
  8401  0DD8  0008               	return
  8402                           
  8403                           ;touch_handler.c: 69: TouchIRControl* ctrl = &controls[i];
  8404  0DD9  3009               	movlw	9
  8405  0DDA  00BA               	movwf	??_handleGeneralTouchControls
  8406  0DDB  083A               	movf	??_handleGeneralTouchControls,w
  8407  0DDC  00AA               	movwf	___bmul@multiplicand
  8408  0DDD  083D               	movf	handleGeneralTouchControls@i,w
  8409  0DDE  318A  224E  318D   	fcall	___bmul
  8410  0DE1  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8411  0DE2  0020               	movlb	0	; select bank0
  8412  0DE3  00BB               	movwf	??_handleGeneralTouchControls+1
  8413  0DE4  083B               	movf	??_handleGeneralTouchControls+1,w
  8414  0DE5  00BC               	movwf	handleGeneralTouchControls@ctrl
  8415                           
  8416                           ;touch_handler.c: 71: if (!MTOUCH_Button_isPressed(ctrl->touchID) && isPressed==1) {
  8417  0DE6  083C               	movf	handleGeneralTouchControls@ctrl,w
  8418  0DE7  0086               	movwf	6
  8419  0DE8  0187               	clrf	7
  8420  0DE9  0801               	movf	1,w
  8421  0DEA  318B  2314  318D   	fcall	_MTOUCH_Button_isPressed
  8422  0DED  3A00               	xorlw	0
  8423  0DEE  1D03               	skipz
  8424  0DEF  2E0E               	goto	l5401
  8425  0DF0  0020               	movlb	0	; select bank0
  8426  0DF1  0359               	decf	_isPressed,w
  8427  0DF2  1D03               	btfss	3,2
  8428  0DF3  2E0E               	goto	l5401
  8429                           
  8430                           ;touch_handler.c: 72: isPressed = 0;
  8431  0DF4  01D9               	clrf	_isPressed
  8432                           
  8433                           ;touch_handler.c: 73: if (!ctrl->pressedLast && !sentU && !sentV && !sentT) {
  8434  0DF5  083C               	movf	handleGeneralTouchControls@ctrl,w
  8435  0DF6  3E04               	addlw	4
  8436  0DF7  0086               	movwf	6
  8437  0DF8  0187               	clrf	7
  8438  0DF9  0801               	movf	1,w
  8439  0DFA  1D03               	btfss	3,2
  8440  0DFB  2E14               	goto	l5403
  8441  0DFC  0858               	movf	_sentU,w
  8442  0DFD  1D03               	btfss	3,2
  8443  0DFE  2E14               	goto	l5403
  8444  0DFF  0857               	movf	_sentV,w
  8445  0E00  1D03               	btfss	3,2
  8446  0E01  2E14               	goto	l5403
  8447  0E02  0856               	movf	_sentT,w
  8448  0E03  1D03               	btfss	3,2
  8449  0E04  2E14               	goto	l5403
  8450                           
  8451                           ;touch_handler.c: 74: processToggle(ctrl, i);
  8452  0E05  083D               	movf	handleGeneralTouchControls@i,w
  8453  0E06  00BA               	movwf	??_handleGeneralTouchControls
  8454  0E07  083A               	movf	??_handleGeneralTouchControls,w
  8455  0E08  00B4               	movwf	processToggle@index
  8456  0E09  083C               	movf	handleGeneralTouchControls@ctrl,w
  8457  0E0A  318D  2557  318D   	fcall	_processToggle
  8458                           
  8459                           ;touch_handler.c: 75: }
  8460                           ;touch_handler.c: 76: } else {
  8461  0E0D  2E14               	goto	l5403
  8462  0E0E                     l5401:	
  8463                           
  8464                           ;touch_handler.c: 78: ctrl->pressedLast = 0;
  8465  0E0E  0020               	movlb	0	; select bank0
  8466  0E0F  083C               	movf	handleGeneralTouchControls@ctrl,w
  8467  0E10  3E04               	addlw	4
  8468  0E11  0086               	movwf	6
  8469  0E12  0187               	clrf	7
  8470  0E13  0181               	clrf	1
  8471  0E14                     l5403:	
  8472  0E14  3001               	movlw	1
  8473  0E15  0020               	movlb	0	; select bank0
  8474  0E16  00BA               	movwf	??_handleGeneralTouchControls
  8475  0E17  083A               	movf	??_handleGeneralTouchControls,w
  8476  0E18  07BD               	addwf	handleGeneralTouchControls@i,f
  8477  0E19  2DD6               	goto	L2
  8478  0E1A                     __end_of_handleGeneralTouchControls:	
  8479                           
  8480                           	psect	text7
  8481  0D57                     __ptext7:	
  8482 ;; *************** function _processToggle *****************
  8483 ;; Defined at:
  8484 ;;		line 58 in file "touch_handler.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  ctrl            1    wreg     PTR struct .
  8487 ;;		 -> controls(9), 
  8488 ;;  index           1   20[BANK0 ] unsigned char 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;  ctrl            1   25[BANK0 ] PTR struct .
  8491 ;;		 -> controls(9), 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8501 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;Total ram usage:        6 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    6
  8508 ;; This function calls:
  8509 ;;		_EUSART_Write
  8510 ;;		_updateLight
  8511 ;; This function is called by:
  8512 ;;		_ir_handler
  8513 ;;		_handleGeneralTouchControls
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           
  8518                           ;psect for function _processToggle
  8519  0D57                     _processToggle:	
  8520                           
  8521                           ;incstack = 0
  8522                           ; Regs used in _processToggle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8523                           ;processToggle@ctrl stored from wreg
  8524  0D57  0020               	movlb	0	; select bank0
  8525  0D58  00B9               	movwf	processToggle@ctrl
  8526                           
  8527                           ;touch_handler.c: 59: ctrl->toggle = !ctrl->toggle;
  8528  0D59  0839               	movf	processToggle@ctrl,w
  8529  0D5A  3E03               	addlw	3
  8530  0D5B  0086               	movwf	6
  8531  0D5C  0187               	clrf	7
  8532  0D5D  0801               	movf	1,w
  8533  0D5E  1D03               	btfss	3,2
  8534  0D5F  2D62               	goto	u4880
  8535  0D60  3001               	movlw	1
  8536  0D61  2D63               	goto	u4890
  8537  0D62                     u4880:	
  8538  0D62  3000               	movlw	0
  8539  0D63                     u4890:	
  8540  0D63  00B5               	movwf	??_processToggle
  8541  0D64  0839               	movf	processToggle@ctrl,w
  8542  0D65  3E03               	addlw	3
  8543  0D66  0086               	movwf	6
  8544  0D67  0187               	clrf	7
  8545  0D68  0835               	movf	??_processToggle,w
  8546  0D69  0081               	movwf	1
  8547                           
  8548                           ;touch_handler.c: 60: EUSART_Write(ctrl->toggle ? ctrl->uartOn : ctrl->uartOff);
  8549  0D6A  0839               	movf	processToggle@ctrl,w
  8550  0D6B  3E03               	addlw	3
  8551  0D6C  0086               	movwf	6
  8552  0D6D  0187               	clrf	7
  8553  0D6E  0801               	movf	1,w
  8554  0D6F  1D03               	btfss	3,2
  8555  0D70  2D74               	goto	l5151
  8556  0D71  0839               	movf	processToggle@ctrl,w
  8557  0D72  3E02               	addlw	2
  8558  0D73  2D75               	goto	L3
  8559  0D74                     l5151:	
  8560  0D74  0A39               	incf	processToggle@ctrl,w
  8561  0D75                     L3:	
  8562  0D75  0086               	movwf	6
  8563  0D76  0187               	clrf	7
  8564  0D77  0801               	movf	1,w
  8565  0D78  00B5               	movwf	??_processToggle
  8566  0D79  01B6               	clrf	??_processToggle+1
  8567  0D7A  0835               	movf	??_processToggle,w
  8568  0D7B  00B7               	movwf	_processToggle$1636
  8569  0D7C  0836               	movf	??_processToggle+1,w
  8570  0D7D  00B8               	movwf	_processToggle$1636+1
  8571  0D7E  0837               	movf	_processToggle$1636,w
  8572  0D7F  3189  216C  318D   	fcall	_EUSART_Write
  8573                           
  8574                           ;touch_handler.c: 61: updateLight(index);
  8575  0D82  0020               	movlb	0	; select bank0
  8576  0D83  0834               	movf	processToggle@index,w
  8577  0D84  318B  23CC         	fcall	_updateLight
  8578                           
  8579                           ;touch_handler.c: 62: ctrl->pressedLast = 1;
  8580  0D86  0020               	movlb	0	; select bank0
  8581  0D87  0839               	movf	processToggle@ctrl,w
  8582  0D88  3E04               	addlw	4
  8583  0D89  0086               	movwf	6
  8584  0D8A  0187               	clrf	7
  8585  0D8B  0181               	clrf	1
  8586  0D8C  0A81               	incf	1,f
  8587  0D8D  0008               	return
  8588  0D8E                     __end_of_processToggle:	
  8589                           
  8590                           	psect	text8
  8591  0BCC                     __ptext8:	
  8592 ;; *************** function _updateLight *****************
  8593 ;; Defined at:
  8594 ;;		line 21 in file "load_handler.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  i               1    wreg     unsigned char 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  i               1   19[BANK0 ] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      void 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        4 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    5
  8615 ;; This function calls:
  8616 ;;		___bmul
  8617 ;;		_setLightState
  8618 ;; This function is called by:
  8619 ;;		_processToggle
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _updateLight
  8625  0BCC                     _updateLight:	
  8626                           
  8627                           ;incstack = 0
  8628                           ; Regs used in _updateLight: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8629                           ;updateLight@i stored from wreg
  8630  0BCC  0020               	movlb	0	; select bank0
  8631  0BCD  00B3               	movwf	updateLight@i
  8632                           
  8633                           ;load_handler.c: 22: setLightState(controls[i].touchID, controls[i].toggle);
  8634  0BCE  3009               	movlw	9
  8635  0BCF  00B0               	movwf	??_updateLight
  8636  0BD0  0830               	movf	??_updateLight,w
  8637  0BD1  00AA               	movwf	___bmul@multiplicand
  8638  0BD2  0833               	movf	updateLight@i,w
  8639  0BD3  318A  224E  318B   	fcall	___bmul
  8640  0BD6  3E03               	addlw	3
  8641  0BD7  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8642  0BD8  0086               	movwf	6
  8643  0BD9  0187               	clrf	7
  8644  0BDA  0801               	movf	1,w
  8645  0BDB  0020               	movlb	0	; select bank0
  8646  0BDC  00B1               	movwf	??_updateLight+1
  8647  0BDD  0831               	movf	??_updateLight+1,w
  8648  0BDE  00AE               	movwf	setLightState@state
  8649  0BDF  3009               	movlw	9
  8650  0BE0  00B2               	movwf	??_updateLight+2
  8651  0BE1  0832               	movf	??_updateLight+2,w
  8652  0BE2  00AA               	movwf	___bmul@multiplicand
  8653  0BE3  0833               	movf	updateLight@i,w
  8654  0BE4  318A  224E  318B   	fcall	___bmul
  8655  0BE7  3EDB               	addlw	(low (_controls| 0))& (0+255)
  8656  0BE8  0086               	movwf	6
  8657  0BE9  0187               	clrf	7
  8658  0BEA  0801               	movf	1,w
  8659  0BEB  318A  2298         	fcall	_setLightState
  8660  0BED  0008               	return
  8661  0BEE                     __end_of_updateLight:	
  8662                           
  8663                           	psect	text9
  8664  0A98                     __ptext9:	
  8665 ;; *************** function _setLightState *****************
  8666 ;; Defined at:
  8667 ;;		line 10 in file "load_handler.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  touchID         1    wreg     unsigned char 
  8670 ;;  state           1   14[BANK0 ] unsigned char 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  touchID         1   15[BANK0 ] unsigned char 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:        2 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    4
  8689 ;; This function calls:
  8690 ;;		Nothing
  8691 ;; This function is called by:
  8692 ;;		_updateLight
  8693 ;;		_handleUARTCommands
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _setLightState
  8699  0A98                     _setLightState:	
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _setLightState: [wreg-fsr0h+status,2+status,0]
  8703                           ;setLightState@touchID stored from wreg
  8704  0A98  0020               	movlb	0	; select bank0
  8705  0A99  00AF               	movwf	setLightState@touchID
  8706                           
  8707                           ;load_handler.c: 11: switch (touchID) {
  8708  0A9A  2AA4               	goto	l4867
  8709  0A9B                     l4863:	
  8710                           ;load_handler.c: 12: case T1: if (state) do { LATCbits.LATC1 = 1; } while(0); else do { 
      +                          LATCbits.LATC1 = 0; } while(0); break;
  8711                           
  8712  0A9B  082E               	movf	setLightState@state,w
  8713  0A9C  1903               	btfsc	3,2
  8714  0A9D  2AA1               	goto	l1026
  8715  0A9E  0022               	movlb	2	; select bank2
  8716  0A9F  148E               	bsf	14,1	;volatile
  8717  0AA0  0008               	return
  8718  0AA1                     l1026:	
  8719  0AA1  0022               	movlb	2	; select bank2
  8720  0AA2  108E               	bcf	14,1	;volatile
  8721                           
  8722                           ;load_handler.c: 18: }
  8723                           
  8724                           ;load_handler.c: 17: default: break;
  8725  0AA3  0008               	return
  8726  0AA4                     l4867:	
  8727  0AA4  0020               	movlb	0	; select bank0
  8728  0AA5  082F               	movf	setLightState@touchID,w
  8729                           
  8730                           ; Switch size 1, requested type "space"
  8731                           ; Number of cases is 1, Range of values is 0 to 0
  8732                           ; switch strategies available:
  8733                           ; Name         Instructions Cycles
  8734                           ; simple_byte            4     3 (average)
  8735                           ; direct_byte            8     6 (fixed)
  8736                           ; jumptable            260     6 (fixed)
  8737                           ;	Chosen strategy is simple_byte
  8738  0AA6  3A00               	xorlw	0	; case 0
  8739  0AA7  1903               	skipnz
  8740  0AA8  2A9B               	goto	l4863
  8741  0AA9  2AAA               	goto	l1030
  8742  0AAA                     l1030:	
  8743  0AAA  0008               	return
  8744  0AAB                     __end_of_setLightState:	
  8745                           
  8746                           	psect	text10
  8747  0B14                     __ptext10:	
  8748 ;; *************** function _MTOUCH_Button_isPressed *****************
  8749 ;; Defined at:
  8750 ;;		line 357 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  name            1    wreg     enum E7986
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  name            1   10[BANK0 ] enum E7986
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      unsigned char 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;Total ram usage:        1 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    4
  8771 ;; This function calls:
  8772 ;;		Nothing
  8773 ;; This function is called by:
  8774 ;;		_main
  8775 ;;		_handleGeneralTouchControls
  8776 ;;		_MTOUCH_Button_Buttonmask_Get
  8777 ;;		_touch_example
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           
  8782                           ;psect for function _MTOUCH_Button_isPressed
  8783  0B14                     _MTOUCH_Button_isPressed:	
  8784                           
  8785                           ;incstack = 0
  8786                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  8787                           ;MTOUCH_Button_isPressed@name stored from wreg
  8788  0B14  0020               	movlb	0	; select bank0
  8789  0B15  00AA               	movwf	MTOUCH_Button_isPressed@name
  8790                           
  8791                           ;mtouch_button.c: 359: if(name < 1u)
  8792  0B16  082A               	movf	MTOUCH_Button_isPressed@name,w
  8793  0B17  1D03               	btfss	3,2
  8794  0B18  2B28               	goto	l4973
  8795                           
  8796                           ;mtouch_button.c: 360: return (bool)((mtouch_button[name].state == MTOUCH_BUTTON_STATE_p
      +                          ressed) ? 1 : 0);
  8797  0B19  0E2A               	swapf	MTOUCH_Button_isPressed@name,w
  8798  0B1A  39F0               	andlw	240
  8799  0B1B  072A               	addwf	MTOUCH_Button_isPressed@name,w
  8800  0B1C  3E02               	addlw	2
  8801  0B1D  3EBA               	addlw	(low (_mtouch_button| 0))& (0+255)
  8802  0B1E  0086               	movwf	6
  8803  0B1F  0187               	clrf	7
  8804  0B20  3002               	movlw	2
  8805  0B21  0601               	xorwf	1,w
  8806  0B22  1D03               	btfss	3,2
  8807  0B23  2B26               	goto	u4760
  8808  0B24  3001               	movlw	1
  8809  0B25  0008               	return
  8810  0B26                     u4760:	
  8811  0B26  3000               	movlw	0
  8812  0B27  0008               	return
  8813  0B28                     l4973:	
  8814                           
  8815                           ;mtouch_button.c: 361: else
  8816                           ;mtouch_button.c: 362: return 0;
  8817  0B28  3000               	movlw	0
  8818  0B29  0008               	return
  8819  0B2A                     __end_of_MTOUCH_Button_isPressed:	
  8820                           
  8821                           	psect	text11
  8822  0AFF                     __ptext11:	
  8823 ;; *************** function _SYSTEM_Initialize *****************
  8824 ;; Defined at:
  8825 ;;		line 50 in file "mcc_generated_files/mcc.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;Total ram usage:        0 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    9
  8846 ;; This function calls:
  8847 ;;		_EUSART_Initialize
  8848 ;;		_MTOUCH_Initialize
  8849 ;;		_OSCILLATOR_Initialize
  8850 ;;		_PIN_MANAGER_Initialize
  8851 ;;		_PMD_Initialize
  8852 ;;		_TMR6_Initialize
  8853 ;;		_WDT_Initialize
  8854 ;; This function is called by:
  8855 ;;		_main
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859                           
  8860                           ;psect for function _SYSTEM_Initialize
  8861  0AFF                     _SYSTEM_Initialize:	
  8862                           
  8863                           ;mcc.c: 53: PMD_Initialize();
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8867  0AFF  3189  2174  318A   	fcall	_PMD_Initialize
  8868                           
  8869                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  8870  0B02  318D  2528  318A   	fcall	_PIN_MANAGER_Initialize
  8871                           
  8872                           ;mcc.c: 55: OSCILLATOR_Initialize();
  8873  0B05  3189  21A9  318A   	fcall	_OSCILLATOR_Initialize
  8874                           
  8875                           ;mcc.c: 56: WDT_Initialize();
  8876  0B08  3187  27FC  318A   	fcall	_WDT_Initialize
  8877                           
  8878                           ;mcc.c: 57: TMR6_Initialize();
  8879  0B0B  318A  2285  318A   	fcall	_TMR6_Initialize
  8880                           
  8881                           ;mcc.c: 58: EUSART_Initialize();
  8882  0B0E  318C  2434  318A   	fcall	_EUSART_Initialize
  8883                           
  8884                           ;mcc.c: 59: MTOUCH_Initialize();
  8885  0B11  3189  21BE         	fcall	_MTOUCH_Initialize
  8886  0B13  0008               	return
  8887  0B14                     __end_of_SYSTEM_Initialize:	
  8888                           
  8889                           	psect	text12
  8890  07FC                     __ptext12:	
  8891 ;; *************** function _WDT_Initialize *****************
  8892 ;; Defined at:
  8893 ;;		line 76 in file "mcc_generated_files/mcc.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  1    wreg      void 
  8900 ;; Registers used:
  8901 ;;		wreg
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;Total ram usage:        0 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    4
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_SYSTEM_Initialize
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _WDT_Initialize
  8923  07FC                     _WDT_Initialize:	
  8924                           
  8925                           ;mcc.c: 79: WDTCON = 0x16;
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _WDT_Initialize: [wreg]
  8929  07FC  3016               	movlw	22
  8930  07FD  0021               	movlb	1	; select bank1
  8931  07FE  0097               	movwf	23	;volatile
  8932  07FF  0008               	return
  8933  0800                     __end_of_WDT_Initialize:	
  8934                           
  8935                           	psect	text13
  8936  0A85                     __ptext13:	
  8937 ;; *************** function _TMR6_Initialize *****************
  8938 ;; Defined at:
  8939 ;;		line 10 in file "mcc_generated_files/tmr6.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;		None
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;		None
  8944 ;; Return value:  Size  Location     Type
  8945 ;;                  1    wreg      void 
  8946 ;; Registers used:
  8947 ;;		wreg, status,2, status,0, pclath, cstack
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;Total ram usage:        0 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    5
  8960 ;; This function calls:
  8961 ;;		_TMR6_SetInterruptHandler
  8962 ;; This function is called by:
  8963 ;;		_SYSTEM_Initialize
  8964 ;;		_main
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function _TMR6_Initialize
  8970  0A85                     _TMR6_Initialize:	
  8971                           
  8972                           ;tmr6.c: 15: PR6 = 125;
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _TMR6_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8976  0A85  307D               	movlw	125
  8977  0A86  0028               	movlb	8	; select bank8
  8978  0A87  009D               	movwf	29	;volatile
  8979                           
  8980                           ;tmr6.c: 16: TMR6 = 0x00;
  8981  0A88  019C               	clrf	28	;volatile
  8982                           
  8983                           ;tmr6.c: 18: PIR2bits.TMR6IF = 0;
  8984  0A89  0020               	movlb	0	; select bank0
  8985  0A8A  1392               	bcf	18,7	;volatile
  8986                           
  8987                           ;tmr6.c: 19: PIE2bits.TMR6IE = 1;
  8988  0A8B  0021               	movlb	1	; select bank1
  8989  0A8C  1792               	bsf	18,7	;volatile
  8990                           
  8991                           ;tmr6.c: 25: T6CON = 0b00010010;
  8992  0A8D  3012               	movlw	18
  8993  0A8E  0028               	movlb	8	; select bank8
  8994  0A8F  009E               	movwf	30	;volatile
  8995                           
  8996                           ;tmr6.c: 28: TMR6_SetInterruptHandler(TMR6_DefaultInterruptHandler);
  8997  0A90  3010               	movlw	low _TMR6_DefaultInterruptHandler
  8998  0A91  0020               	movlb	0	; select bank0
  8999  0A92  00AA               	movwf	TMR6_SetInterruptHandler@InterruptHandler
  9000  0A93  3009               	movlw	high _TMR6_DefaultInterruptHandler
  9001  0A94  00AB               	movwf	TMR6_SetInterruptHandler@InterruptHandler+1
  9002  0A95  3189  2185         	fcall	_TMR6_SetInterruptHandler
  9003  0A97  0008               	return
  9004  0A98                     __end_of_TMR6_Initialize:	
  9005                           
  9006                           	psect	text14
  9007  0974                     __ptext14:	
  9008 ;; *************** function _PMD_Initialize *****************
  9009 ;; Defined at:
  9010 ;;		line 82 in file "mcc_generated_files/mcc.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;		None
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		status,2
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        0 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    4
  9031 ;; This function calls:
  9032 ;;		Nothing
  9033 ;; This function is called by:
  9034 ;;		_SYSTEM_Initialize
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           
  9039                           ;psect for function _PMD_Initialize
  9040  0974                     _PMD_Initialize:	
  9041                           
  9042                           ;mcc.c: 85: PMD0 = 0x00;
  9043                           
  9044                           ;incstack = 0
  9045                           ; Regs used in _PMD_Initialize: [status,2]
  9046  0974  0032               	movlb	18	; select bank18
  9047  0975  0191               	clrf	17	;volatile
  9048                           
  9049                           ;mcc.c: 87: PMD1 = 0x00;
  9050  0976  0192               	clrf	18	;volatile
  9051                           
  9052                           ;mcc.c: 89: PMD2 = 0x00;
  9053  0977  0193               	clrf	19	;volatile
  9054                           
  9055                           ;mcc.c: 91: PMD3 = 0x00;
  9056  0978  0194               	clrf	20	;volatile
  9057                           
  9058                           ;mcc.c: 93: PMD4 = 0x00;
  9059  0979  0195               	clrf	21	;volatile
  9060                           
  9061                           ;mcc.c: 95: PMD5 = 0x00;
  9062  097A  0196               	clrf	22	;volatile
  9063  097B  0008               	return
  9064  097C                     __end_of_PMD_Initialize:	
  9065                           
  9066                           	psect	text15
  9067  0D28                     __ptext15:	
  9068 ;; *************** function _PIN_MANAGER_Initialize *****************
  9069 ;; Defined at:
  9070 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      void 
  9077 ;; Registers used:
  9078 ;;		wreg, status,2
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;Total ram usage:        0 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    4
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		_SYSTEM_Initialize
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _PIN_MANAGER_Initialize
  9100  0D28                     _PIN_MANAGER_Initialize:	
  9101                           
  9102                           ;pin_manager.c: 60: LATA = 0x00;
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9106  0D28  0022               	movlb	2	; select bank2
  9107  0D29  018C               	clrf	12	;volatile
  9108                           
  9109                           ;pin_manager.c: 61: LATB = 0x00;
  9110  0D2A  018D               	clrf	13	;volatile
  9111                           
  9112                           ;pin_manager.c: 62: LATC = 0x00;
  9113  0D2B  018E               	clrf	14	;volatile
  9114                           
  9115                           ;pin_manager.c: 67: TRISA = 0x17;
  9116  0D2C  3017               	movlw	23
  9117  0D2D  0021               	movlb	1	; select bank1
  9118  0D2E  008C               	movwf	12	;volatile
  9119                           
  9120                           ;pin_manager.c: 68: TRISB = 0xF0;
  9121  0D2F  30F0               	movlw	240
  9122  0D30  008D               	movwf	13	;volatile
  9123                           
  9124                           ;pin_manager.c: 69: TRISC = 0xE9;
  9125  0D31  30E9               	movlw	233
  9126  0D32  008E               	movwf	14	;volatile
  9127                           
  9128                           ;pin_manager.c: 74: ANSELC = 0xDB;
  9129  0D33  30DB               	movlw	219
  9130  0D34  0023               	movlb	3	; select bank3
  9131  0D35  008E               	movwf	14	;volatile
  9132                           
  9133                           ;pin_manager.c: 75: ANSELB = 0xF0;
  9134  0D36  30F0               	movlw	240
  9135  0D37  008D               	movwf	13	;volatile
  9136                           
  9137                           ;pin_manager.c: 76: ANSELA = 0x13;
  9138  0D38  3013               	movlw	19
  9139  0D39  008C               	movwf	12	;volatile
  9140                           
  9141                           ;pin_manager.c: 81: WPUB = 0x00;
  9142  0D3A  0024               	movlb	4	; select bank4
  9143  0D3B  018D               	clrf	13	;volatile
  9144                           
  9145                           ;pin_manager.c: 82: WPUA = 0x00;
  9146  0D3C  018C               	clrf	12	;volatile
  9147                           
  9148                           ;pin_manager.c: 83: WPUC = 0x00;
  9149  0D3D  018E               	clrf	14	;volatile
  9150                           
  9151                           ;pin_manager.c: 88: ODCONA = 0x00;
  9152  0D3E  0025               	movlb	5	; select bank5
  9153  0D3F  018C               	clrf	12	;volatile
  9154                           
  9155                           ;pin_manager.c: 89: ODCONB = 0x00;
  9156  0D40  018D               	clrf	13	;volatile
  9157                           
  9158                           ;pin_manager.c: 90: ODCONC = 0x00;
  9159  0D41  018E               	clrf	14	;volatile
  9160                           
  9161                           ;pin_manager.c: 95: SLRCONA = 0x37;
  9162  0D42  3037               	movlw	55
  9163  0D43  0026               	movlb	6	; select bank6
  9164  0D44  008C               	movwf	12	;volatile
  9165                           
  9166                           ;pin_manager.c: 96: SLRCONB = 0xF0;
  9167  0D45  30F0               	movlw	240
  9168  0D46  008D               	movwf	13	;volatile
  9169                           
  9170                           ;pin_manager.c: 97: SLRCONC = 0xFF;
  9171  0D47  30FF               	movlw	255
  9172  0D48  008E               	movwf	14	;volatile
  9173                           
  9174                           ;pin_manager.c: 102: INLVLA = 0x3F;
  9175  0D49  303F               	movlw	63
  9176  0D4A  0027               	movlb	7	; select bank7
  9177  0D4B  008C               	movwf	12	;volatile
  9178                           
  9179                           ;pin_manager.c: 103: INLVLB = 0xF0;
  9180  0D4C  30F0               	movlw	240
  9181  0D4D  008D               	movwf	13	;volatile
  9182                           
  9183                           ;pin_manager.c: 104: INLVLC = 0xFF;
  9184  0D4E  30FF               	movlw	255
  9185  0D4F  008E               	movwf	14	;volatile
  9186                           
  9187                           ;pin_manager.c: 113: RXPPS = 0x15;
  9188  0D50  3015               	movlw	21
  9189  0D51  003C               	movlb	28	; select bank28
  9190  0D52  00A4               	movwf	36	;volatile
  9191                           
  9192                           ;pin_manager.c: 114: RC4PPS = 0x14;
  9193  0D53  3014               	movlw	20
  9194  0D54  003D               	movlb	29	; select bank29
  9195  0D55  00A4               	movwf	36	;volatile
  9196  0D56  0008               	return
  9197  0D57                     __end_of_PIN_MANAGER_Initialize:	
  9198                           
  9199                           	psect	text16
  9200  09A9                     __ptext16:	
  9201 ;; *************** function _OSCILLATOR_Initialize *****************
  9202 ;; Defined at:
  9203 ;;		line 62 in file "mcc_generated_files/mcc.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;		None
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  1    wreg      void 
  9210 ;; Registers used:
  9211 ;;		wreg, status,2
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        0 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    4
  9224 ;; This function calls:
  9225 ;;		Nothing
  9226 ;; This function is called by:
  9227 ;;		_SYSTEM_Initialize
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _OSCILLATOR_Initialize
  9233  09A9                     _OSCILLATOR_Initialize:	
  9234                           
  9235                           ;mcc.c: 65: OSCCON1 = 0x60;
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9239  09A9  3060               	movlw	96
  9240  09AA  0032               	movlb	18	; select bank18
  9241  09AB  0099               	movwf	25	;volatile
  9242                           
  9243                           ;mcc.c: 67: OSCCON3 = 0x00;
  9244  09AC  019B               	clrf	27	;volatile
  9245                           
  9246                           ;mcc.c: 69: OSCEN = 0x00;
  9247  09AD  019D               	clrf	29	;volatile
  9248                           
  9249                           ;mcc.c: 71: OSCFRQ = 0x07;
  9250  09AE  3007               	movlw	7
  9251  09AF  009F               	movwf	31	;volatile
  9252                           
  9253                           ;mcc.c: 73: OSCTUNE = 0x00;
  9254  09B0  019E               	clrf	30	;volatile
  9255  09B1  0008               	return
  9256  09B2                     __end_of_OSCILLATOR_Initialize:	
  9257                           
  9258                           	psect	text17
  9259  0C34                     __ptext17:	
  9260 ;; *************** function _EUSART_Initialize *****************
  9261 ;; Defined at:
  9262 ;;		line 66 in file "mcc_generated_files/eusart.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;		None
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;		None
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      void 
  9269 ;; Registers used:
  9270 ;;		wreg, status,2, status,0, pclath, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;Total ram usage:        0 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    5
  9283 ;; This function calls:
  9284 ;;		_EUSART_SetErrorHandler
  9285 ;;		_EUSART_SetFramingErrorHandler
  9286 ;;		_EUSART_SetOverrunErrorHandler
  9287 ;; This function is called by:
  9288 ;;		_SYSTEM_Initialize
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           
  9293                           ;psect for function _EUSART_Initialize
  9294  0C34                     _EUSART_Initialize:	
  9295                           
  9296                           ;eusart.c: 71: BAUD1CON = 0x08;
  9297                           
  9298                           ;incstack = 0
  9299                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9300  0C34  3008               	movlw	8
  9301  0C35  0023               	movlb	3	; select bank3
  9302  0C36  009F               	movwf	31	;volatile
  9303                           
  9304                           ;eusart.c: 74: RC1STA = 0x90;
  9305  0C37  3090               	movlw	144
  9306  0C38  009D               	movwf	29	;volatile
  9307                           
  9308                           ;eusart.c: 77: TX1STA = 0x24;
  9309  0C39  3024               	movlw	36
  9310  0C3A  009E               	movwf	30	;volatile
  9311                           
  9312                           ;eusart.c: 80: SP1BRGL = 0x40;
  9313  0C3B  3040               	movlw	64
  9314  0C3C  009B               	movwf	27	;volatile
  9315                           
  9316                           ;eusart.c: 83: SP1BRGH = 0x03;
  9317  0C3D  3003               	movlw	3
  9318  0C3E  009C               	movwf	28	;volatile
  9319                           
  9320                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  9321  0C3F  3000               	movlw	0
  9322  0C40  0020               	movlb	0	; select bank0
  9323  0C41  00AA               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  9324  0C42  3000               	movlw	0
  9325  0C43  00AB               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  9326  0C44  3189  2197  318C   	fcall	_EUSART_SetFramingErrorHandler
  9327                           
  9328                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  9329  0C47  3000               	movlw	0
  9330  0C48  0020               	movlb	0	; select bank0
  9331  0C49  00AA               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  9332  0C4A  3000               	movlw	0
  9333  0C4B  00AB               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  9334  0C4C  3189  21A0  318C   	fcall	_EUSART_SetOverrunErrorHandler
  9335                           
  9336                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  9337  0C4F  3000               	movlw	0
  9338  0C50  0020               	movlb	0	; select bank0
  9339  0C51  00AA               	movwf	EUSART_SetErrorHandler@interruptHandler
  9340  0C52  3000               	movlw	0
  9341  0C53  00AB               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  9342  0C54  3189  218E         	fcall	_EUSART_SetErrorHandler
  9343                           
  9344                           ;eusart.c: 90: eusartRxLastError.status = 0;
  9345  0C56  0021               	movlb	1	; select bank1
  9346  0C57  01B9               	clrf	_eusartRxLastError^(0+128)	;volatile
  9347  0C58  0008               	return
  9348  0C59                     __end_of_EUSART_Initialize:	
  9349                           
  9350                           	psect	text18
  9351  09A0                     __ptext18:	
  9352 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  9353 ;; Defined at:
  9354 ;;		line 161 in file "mcc_generated_files/eusart.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
  9357 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;Total ram usage:        2 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    4
  9376 ;; This function calls:
  9377 ;;		Nothing
  9378 ;; This function is called by:
  9379 ;;		_EUSART_Initialize
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function _EUSART_SetOverrunErrorHandler
  9385  09A0                     _EUSART_SetOverrunErrorHandler:	
  9386                           
  9387                           ;eusart.c: 162: EUSART_OverrunErrorHandler = interruptHandler;
  9388                           
  9389                           ;incstack = 0
  9390                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  9391  09A0  0020               	movlb	0	; select bank0
  9392  09A1  082B               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  9393  09A2  0022               	movlb	2	; select bank2
  9394  09A3  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  9395  09A4  0020               	movlb	0	; select bank0
  9396  09A5  082A               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  9397  09A6  0022               	movlb	2	; select bank2
  9398  09A7  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  9399  09A8  0008               	return
  9400  09A9                     __end_of_EUSART_SetOverrunErrorHandler:	
  9401                           
  9402                           	psect	text19
  9403  0997                     __ptext19:	
  9404 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  9405 ;; Defined at:
  9406 ;;		line 157 in file "mcc_generated_files/eusart.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
  9409 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      void 
  9414 ;; Registers used:
  9415 ;;		wreg
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        2 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    4
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_EUSART_Initialize
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _EUSART_SetFramingErrorHandler
  9437  0997                     _EUSART_SetFramingErrorHandler:	
  9438                           
  9439                           ;eusart.c: 158: EUSART_FramingErrorHandler = interruptHandler;
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  9443  0997  0020               	movlb	0	; select bank0
  9444  0998  082B               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  9445  0999  0022               	movlb	2	; select bank2
  9446  099A  00A5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  9447  099B  0020               	movlb	0	; select bank0
  9448  099C  082A               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  9449  099D  0022               	movlb	2	; select bank2
  9450  099E  00A4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  9451  099F  0008               	return
  9452  09A0                     __end_of_EUSART_SetFramingErrorHandler:	
  9453                           
  9454                           	psect	text20
  9455  098E                     __ptext20:	
  9456 ;; *************** function _EUSART_SetErrorHandler *****************
  9457 ;; Defined at:
  9458 ;;		line 165 in file "mcc_generated_files/eusart.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
  9461 ;;		 -> EUSART_DefaultErrorHandler(1), 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;		None
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  1    wreg      void 
  9466 ;; Registers used:
  9467 ;;		wreg
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;Total ram usage:        2 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    4
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_EUSART_Initialize
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _EUSART_SetErrorHandler
  9489  098E                     _EUSART_SetErrorHandler:	
  9490                           
  9491                           ;eusart.c: 166: EUSART_ErrorHandler = interruptHandler;
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  9495  098E  0020               	movlb	0	; select bank0
  9496  098F  082B               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  9497  0990  0022               	movlb	2	; select bank2
  9498  0991  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  9499  0992  0020               	movlb	0	; select bank0
  9500  0993  082A               	movf	EUSART_SetErrorHandler@interruptHandler,w
  9501  0994  0022               	movlb	2	; select bank2
  9502  0995  00A0               	movwf	_EUSART_ErrorHandler^(0+256)
  9503  0996  0008               	return
  9504  0997                     __end_of_EUSART_SetErrorHandler:	
  9505                           
  9506                           	psect	text21
  9507  0366                     __ptext21:	
  9508 ;; *************** function _OnHold *****************
  9509 ;; Defined at:
  9510 ;;		line 12 in file "touch_handler.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;  touch           1    wreg     unsigned char 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  touch           1   19[BANK0 ] unsigned char 
  9515 ;;  heldTime        4   20[BANK0 ] unsigned long 
  9516 ;; Return value:  Size  Location     Type
  9517 ;;                  1    wreg      void 
  9518 ;; Registers used:
  9519 ;;		wreg, status,2, status,0, pclath, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;Total ram usage:       13 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    5
  9532 ;; This function calls:
  9533 ;;		_EUSART_Write
  9534 ;; This function is called by:
  9535 ;;		_main
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function _OnHold
  9541  0366                     _OnHold:	
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _OnHold: [wreg+status,2+status,0+pclath+cstack]
  9545                           ;OnHold@touch stored from wreg
  9546  0366  0020               	movlb	0	; select bank0
  9547  0367  00B3               	movwf	OnHold@touch
  9548                           
  9549                           ;touch_handler.c: 14: if (touch && isPressed == 0)
  9550  0368  0833               	movf	OnHold@touch,w
  9551  0369  1903               	btfsc	3,2
  9552  036A  2B7D               	goto	l5345
  9553  036B  0859               	movf	_isPressed,w
  9554  036C  1D03               	btfss	3,2
  9555  036D  2B7D               	goto	l5345
  9556                           
  9557                           ;touch_handler.c: 15: {
  9558                           ;touch_handler.c: 16: isPressed = 1;
  9559  036E  01D9               	clrf	_isPressed
  9560  036F  0AD9               	incf	_isPressed,f
  9561                           
  9562                           ;touch_handler.c: 17: pressStartTime = millis_counter;
  9563  0370  0021               	movlb	1	; select bank1
  9564  0371  0827               	movf	(_millis_counter+3)^(0+128),w	;volatile
  9565  0372  00A3               	movwf	(_pressStartTime+3)^(0+128)
  9566  0373  0826               	movf	(_millis_counter+2)^(0+128),w	;volatile
  9567  0374  00A2               	movwf	(_pressStartTime+2)^(0+128)
  9568  0375  0825               	movf	(_millis_counter+1)^(0+128),w	;volatile
  9569  0376  00A1               	movwf	(_pressStartTime+1)^(0+128)
  9570  0377  0824               	movf	_millis_counter^(0+128),w	;volatile
  9571  0378  00A0               	movwf	_pressStartTime^(0+128)
  9572                           
  9573                           ;touch_handler.c: 18: sentU = 0;
  9574  0379  0020               	movlb	0	; select bank0
  9575  037A  01D8               	clrf	_sentU
  9576                           
  9577                           ;touch_handler.c: 19: sentV = 0;
  9578  037B  01D7               	clrf	_sentV
  9579                           
  9580                           ;touch_handler.c: 20: sentT = 0;
  9581  037C  01D6               	clrf	_sentT
  9582  037D                     l5345:	
  9583                           
  9584                           ;touch_handler.c: 21: }
  9585                           ;touch_handler.c: 23: if (touch && isPressed == 1)
  9586  037D  0833               	movf	OnHold@touch,w
  9587  037E  1903               	btfsc	3,2
  9588  037F  0008               	return
  9589  0380  0359               	decf	_isPressed,w
  9590  0381  1D03               	btfss	3,2
  9591  0382  0008               	return
  9592                           
  9593                           ;touch_handler.c: 24: {
  9594                           ;touch_handler.c: 25: uint32_t heldTime = millis_counter - pressStartTime;
  9595  0383  0021               	movlb	1	; select bank1
  9596  0384  0824               	movf	_millis_counter^(0+128),w	;volatile
  9597  0385  0020               	movlb	0	; select bank0
  9598  0386  00AB               	movwf	??_OnHold
  9599  0387  0021               	movlb	1	; select bank1
  9600  0388  0825               	movf	(_millis_counter+1)^(0+128),w	;volatile
  9601  0389  0020               	movlb	0	; select bank0
  9602  038A  00AC               	movwf	??_OnHold+1
  9603  038B  0021               	movlb	1	; select bank1
  9604  038C  0826               	movf	(_millis_counter+2)^(0+128),w	;volatile
  9605  038D  0020               	movlb	0	; select bank0
  9606  038E  00AD               	movwf	??_OnHold+2
  9607  038F  0021               	movlb	1	; select bank1
  9608  0390  0827               	movf	(_millis_counter+3)^(0+128),w	;volatile
  9609  0391  0020               	movlb	0	; select bank0
  9610  0392  00AE               	movwf	??_OnHold+3
  9611  0393  0021               	movlb	1	; select bank1
  9612  0394  0920               	comf	_pressStartTime^(0+128),w
  9613  0395  0020               	movlb	0	; select bank0
  9614  0396  00AF               	movwf	??_OnHold+4
  9615  0397  0021               	movlb	1	; select bank1
  9616  0398  0921               	comf	(_pressStartTime+1)^(0+128),w
  9617  0399  0020               	movlb	0	; select bank0
  9618  039A  00B0               	movwf	??_OnHold+5
  9619  039B  0021               	movlb	1	; select bank1
  9620  039C  0922               	comf	(_pressStartTime+2)^(0+128),w
  9621  039D  0020               	movlb	0	; select bank0
  9622  039E  00B1               	movwf	??_OnHold+6
  9623  039F  0021               	movlb	1	; select bank1
  9624  03A0  0923               	comf	(_pressStartTime+3)^(0+128),w
  9625  03A1  0020               	movlb	0	; select bank0
  9626  03A2  00B2               	movwf	??_OnHold+7
  9627  03A3  0AAF               	incf	??_OnHold+4,f
  9628  03A4  1903               	skipnz
  9629  03A5  0AB0               	incf	??_OnHold+5,f
  9630  03A6  1903               	skipnz
  9631  03A7  0AB1               	incf	??_OnHold+6,f
  9632  03A8  1903               	skipnz
  9633  03A9  0AB2               	incf	??_OnHold+7,f
  9634  03AA  082F               	movf	??_OnHold+4,w
  9635  03AB  07AB               	addwf	??_OnHold,f
  9636  03AC  0830               	movf	??_OnHold+5,w
  9637  03AD  3DAC               	addwfc	??_OnHold+1,f
  9638  03AE  0831               	movf	??_OnHold+6,w
  9639  03AF  3DAD               	addwfc	??_OnHold+2,f
  9640  03B0  0832               	movf	??_OnHold+7,w
  9641  03B1  3DAE               	addwfc	??_OnHold+3,f
  9642  03B2  082E               	movf	??_OnHold+3,w
  9643  03B3  00B7               	movwf	OnHold@heldTime+3
  9644  03B4  082D               	movf	??_OnHold+2,w
  9645  03B5  00B6               	movwf	OnHold@heldTime+2
  9646  03B6  082C               	movf	??_OnHold+1,w
  9647  03B7  00B5               	movwf	OnHold@heldTime+1
  9648  03B8  082B               	movf	??_OnHold,w
  9649  03B9  00B4               	movwf	OnHold@heldTime
  9650                           
  9651                           ;touch_handler.c: 27: if (!sentU && heldTime >= 20000UL)
  9652  03BA  0858               	movf	_sentU,w
  9653  03BB  1D03               	btfss	3,2
  9654  03BC  2BD5               	goto	l5359
  9655  03BD  0837               	movf	OnHold@heldTime+3,w
  9656  03BE  1D03               	btfss	3,2
  9657  03BF  2BC9               	goto	l5353
  9658  03C0  0836               	movf	OnHold@heldTime+2,w
  9659  03C1  1D03               	btfss	3,2
  9660  03C2  2BC9               	goto	l5353
  9661  03C3  3020               	movlw	32
  9662  03C4  0234               	subwf	OnHold@heldTime,w
  9663  03C5  304E               	movlw	78
  9664  03C6  3B35               	subwfb	OnHold@heldTime+1,w
  9665  03C7  1C03               	btfss	3,0
  9666  03C8  2BD5               	goto	l5359
  9667  03C9                     l5353:	
  9668                           
  9669                           ;touch_handler.c: 28: {
  9670                           ;touch_handler.c: 29: d = 1;
  9671  03C9  3001               	movlw	1
  9672  03CA  0021               	movlb	1	; select bank1
  9673  03CB  00AE               	movwf	_d^(0+128)
  9674  03CC  3000               	movlw	0
  9675  03CD  00AF               	movwf	(_d^(0+128)+1)
  9676                           
  9677                           ;touch_handler.c: 30: EUSART_Write('U');
  9678  03CE  3055               	movlw	85
  9679  03CF  3189  216C  3183   	fcall	_EUSART_Write
  9680                           
  9681                           ;touch_handler.c: 31: sentU = 1;
  9682  03D2  0020               	movlb	0	; select bank0
  9683  03D3  01D8               	clrf	_sentU
  9684  03D4  0AD8               	incf	_sentU,f
  9685  03D5                     l5359:	
  9686                           
  9687                           ;touch_handler.c: 33: }
  9688                           ;touch_handler.c: 35: if (!sentV && heldTime >= 30000UL)
  9689  03D5  0857               	movf	_sentV,w
  9690  03D6  1D03               	btfss	3,2
  9691  03D7  2BEE               	goto	l5369
  9692  03D8  0837               	movf	OnHold@heldTime+3,w
  9693  03D9  1D03               	btfss	3,2
  9694  03DA  2BE4               	goto	l5363
  9695  03DB  0836               	movf	OnHold@heldTime+2,w
  9696  03DC  1D03               	btfss	3,2
  9697  03DD  2BE4               	goto	l5363
  9698  03DE  3030               	movlw	48
  9699  03DF  0234               	subwf	OnHold@heldTime,w
  9700  03E0  3075               	movlw	117
  9701  03E1  3B35               	subwfb	OnHold@heldTime+1,w
  9702  03E2  1C03               	btfss	3,0
  9703  03E3  2BEE               	goto	l5369
  9704  03E4                     l5363:	
  9705                           
  9706                           ;touch_handler.c: 36: {
  9707                           ;touch_handler.c: 37: d = 0;
  9708  03E4  0021               	movlb	1	; select bank1
  9709  03E5  01AE               	clrf	_d^(0+128)
  9710  03E6  01AF               	clrf	(_d+1)^(0+128)
  9711                           
  9712                           ;touch_handler.c: 38: EUSART_Write('V');
  9713  03E7  3056               	movlw	86
  9714  03E8  3189  216C  3183   	fcall	_EUSART_Write
  9715                           
  9716                           ;touch_handler.c: 39: sentV = 1;
  9717  03EB  0020               	movlb	0	; select bank0
  9718  03EC  01D7               	clrf	_sentV
  9719  03ED  0AD7               	incf	_sentV,f
  9720  03EE                     l5369:	
  9721                           
  9722                           ;touch_handler.c: 41: }
  9723                           ;touch_handler.c: 43: if (!sentT && heldTime >= 50000UL)
  9724  03EE  0856               	movf	_sentT,w
  9725  03EF  1D03               	btfss	3,2
  9726  03F0  0008               	return
  9727  03F1  0837               	movf	OnHold@heldTime+3,w
  9728  03F2  1D03               	btfss	3,2
  9729  03F3  2BFD               	goto	l5373
  9730  03F4  0836               	movf	OnHold@heldTime+2,w
  9731  03F5  1D03               	btfss	3,2
  9732  03F6  2BFD               	goto	l5373
  9733  03F7  3050               	movlw	80
  9734  03F8  0234               	subwf	OnHold@heldTime,w
  9735  03F9  30C3               	movlw	195
  9736  03FA  3B35               	subwfb	OnHold@heldTime+1,w
  9737  03FB  1C03               	btfss	3,0
  9738  03FC  0008               	return
  9739  03FD                     l5373:	
  9740                           
  9741                           ;touch_handler.c: 44: {
  9742                           ;touch_handler.c: 45: EUSART_Write('T');
  9743  03FD  3054               	movlw	84
  9744  03FE  3189  216C         	fcall	_EUSART_Write
  9745                           
  9746                           ;touch_handler.c: 46: sentT = 1;
  9747  0400  0020               	movlb	0	; select bank0
  9748  0401  01D6               	clrf	_sentT
  9749  0402  0AD6               	incf	_sentT,f
  9750  0403  0008               	return
  9751  0404                     __end_of_OnHold:	
  9752                           
  9753                           	psect	text22
  9754  096C                     __ptext22:	
  9755 ;; *************** function _EUSART_Write *****************
  9756 ;; Defined at:
  9757 ;;		line 132 in file "mcc_generated_files/eusart.c"
  9758 ;; Parameters:    Size  Location     Type
  9759 ;;  txData          1    wreg     unsigned char 
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;  txData          1   10[BANK0 ] unsigned char 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  1    wreg      void 
  9764 ;; Registers used:
  9765 ;;		wreg
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;Total ram usage:        1 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    4
  9778 ;; This function calls:
  9779 ;;		Nothing
  9780 ;; This function is called by:
  9781 ;;		_main
  9782 ;;		_ir_handler
  9783 ;;		_OnHold
  9784 ;;		_processToggle
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           
  9789                           ;psect for function _EUSART_Write
  9790  096C                     _EUSART_Write:	
  9791                           
  9792                           ;incstack = 0
  9793                           ; Regs used in _EUSART_Write: [wreg]
  9794                           ;EUSART_Write@txData stored from wreg
  9795  096C  0020               	movlb	0	; select bank0
  9796  096D  00AA               	movwf	EUSART_Write@txData
  9797  096E                     l695:	
  9798                           ;eusart.c: 135: {
  9799                           
  9800                           ;eusart.c: 134: while(0 == PIR1bits.TXIF)
  9801                           
  9802  096E  1E11               	btfss	17,4	;volatile
  9803  096F  296E               	goto	l695
  9804                           
  9805                           ;eusart.c: 136: }
  9806                           ;eusart.c: 138: TX1REG = txData;
  9807  0970  082A               	movf	EUSART_Write@txData,w
  9808  0971  0023               	movlb	3	; select bank3
  9809  0972  009A               	movwf	26	;volatile
  9810  0973  0008               	return
  9811  0974                     __end_of_EUSART_Write:	
  9812                           
  9813                           	psect	text23
  9814  0CA5                     __ptext23:	
  9815 ;; *************** function _MTOUCH_Service_Mainloop *****************
  9816 ;; Defined at:
  9817 ;;		line 96 in file "mcc_generated_files/mtouch/mtouch.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      unsigned char 
  9824 ;; Registers used:
  9825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;Total ram usage:        1 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:   10
  9838 ;; This function calls:
  9839 ;;		_MTOUCH_Button_ServiceAll
  9840 ;;		_MTOUCH_Initialize
  9841 ;;		_MTOUCH_Sensor_SampleAll
  9842 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9843 ;;		_MTOUCH_Tick
  9844 ;;		_MTOUCH_needReburst
  9845 ;; This function is called by:
  9846 ;;		_main
  9847 ;;		_touch_example
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _MTOUCH_Service_Mainloop
  9853  0CA5                     _MTOUCH_Service_Mainloop:	
  9854                           
  9855                           ;mtouch.c: 99: if(mtouch_request_init)
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9859  0CA5  0020               	movlb	0	; select bank0
  9860  0CA6  0863               	movf	_mtouch_request_init,w
  9861  0CA7  1903               	btfsc	3,2
  9862  0CA8  2CAE               	goto	l5171
  9863                           
  9864                           ;mtouch.c: 100: {
  9865                           ;mtouch.c: 101: MTOUCH_Initialize();
  9866  0CA9  3189  21BE  318C   	fcall	_MTOUCH_Initialize
  9867                           
  9868                           ;mtouch.c: 102: mtouch_request_init = 0;
  9869  0CAC  0020               	movlb	0	; select bank0
  9870  0CAD  01E3               	clrf	_mtouch_request_init
  9871  0CAE                     l5171:	
  9872                           
  9873                           ;mtouch.c: 103: }
  9874                           ;mtouch.c: 106: mtouch_time_toScan = 1;
  9875  0CAE  01E4               	clrf	_mtouch_time_toScan
  9876  0CAF  0AE4               	incf	_mtouch_time_toScan,f
  9877                           
  9878                           ;mtouch.c: 108: if(mtouch_time_toScan)
  9879  0CB0  0864               	movf	_mtouch_time_toScan,w
  9880  0CB1  1903               	btfsc	3,2
  9881  0CB2  2CCD               	goto	l5195
  9882                           
  9883                           ;mtouch.c: 109: {
  9884                           ;mtouch.c: 110: if(MTOUCH_Sensor_SampleAll() == 0)
  9885  0CB3  318B  235B  318C   	fcall	_MTOUCH_Sensor_SampleAll
  9886  0CB6  3A00               	xorlw	0
  9887  0CB7  1D03               	skipz
  9888  0CB8  2CBB               	goto	l5181
  9889                           
  9890                           ;mtouch.c: 111: return 0;
  9891  0CB9  3000               	movlw	0
  9892  0CBA  0008               	return
  9893  0CBB                     l5181:	
  9894                           
  9895                           ;mtouch.c: 113: MTOUCH_Button_ServiceAll();
  9896  0CBB  318A  2210  318C   	fcall	_MTOUCH_Button_ServiceAll
  9897                           
  9898                           ;mtouch.c: 114: mtouch_time_toScan = MTOUCH_needReburst();
  9899  0CBE  3189  2122  318C   	fcall	_MTOUCH_needReburst
  9900  0CC1  0022               	movlb	2	; select bank2
  9901  0CC2  00A6               	movwf	??_MTOUCH_Service_Mainloop^(0+256)
  9902  0CC3  0826               	movf	??_MTOUCH_Service_Mainloop^(0+256),w
  9903  0CC4  0020               	movlb	0	; select bank0
  9904  0CC5  00E4               	movwf	_mtouch_time_toScan
  9905                           
  9906                           ;mtouch.c: 115: MTOUCH_Sensor_Sampled_ResetAll();
  9907  0CC6  318A  22D5  318C   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  9908                           
  9909                           ;mtouch.c: 116: MTOUCH_Tick();
  9910  0CC9  3189  211B         	fcall	_MTOUCH_Tick
  9911                           
  9912                           ;mtouch.c: 117: return 1;
  9913  0CCB  3001               	movlw	1
  9914                           
  9915                           ;mtouch.c: 118: }
  9916  0CCC  0008               	return
  9917  0CCD                     l5195:	
  9918                           
  9919                           ;mtouch.c: 119: else
  9920                           ;mtouch.c: 120: {
  9921                           ;mtouch.c: 121: return 0;
  9922  0CCD  3000               	movlw	0
  9923  0CCE  0008               	return
  9924  0CCF                     __end_of_MTOUCH_Service_Mainloop:	
  9925                           
  9926                           	psect	text24
  9927  0922                     __ptext24:	
  9928 ;; *************** function _MTOUCH_needReburst *****************
  9929 ;; Defined at:
  9930 ;;		line 140 in file "mcc_generated_files/mtouch/mtouch.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;		None
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;  needReburst     1   10[BANK0 ] unsigned char 
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      unsigned char 
  9937 ;; Registers used:
  9938 ;;		wreg, status,2
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;Total ram usage:        1 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    4
  9951 ;; This function calls:
  9952 ;;		Nothing
  9953 ;; This function is called by:
  9954 ;;		_MTOUCH_Service_Mainloop
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           
  9959                           ;psect for function _MTOUCH_needReburst
  9960  0922                     _MTOUCH_needReburst:	
  9961                           
  9962                           ;mtouch.c: 142: bool needReburst = 0;
  9963                           
  9964                           ;incstack = 0
  9965                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  9966  0922  0020               	movlb	0	; select bank0
  9967  0923  01AA               	clrf	MTOUCH_needReburst@needReburst
  9968                           
  9969                           ;mtouch.c: 144: return needReburst;
  9970  0924  082A               	movf	MTOUCH_needReburst@needReburst,w
  9971  0925  0008               	return
  9972  0926                     __end_of_MTOUCH_needReburst:	
  9973                           
  9974                           	psect	text25
  9975  091B                     __ptext25:	
  9976 ;; *************** function _MTOUCH_Tick *****************
  9977 ;; Defined at:
  9978 ;;		line 130 in file "mcc_generated_files/mtouch/mtouch.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;		None
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;		None
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;Total ram usage:        0 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; Hardware stack levels required when called:    6
  9999 ;; This function calls:
 10000 ;;		_MTOUCH_Button_Tick
 10001 ;; This function is called by:
 10002 ;;		_MTOUCH_Service_Mainloop
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function _MTOUCH_Tick
 10008  091B                     _MTOUCH_Tick:	
 10009                           
 10010                           ;mtouch.c: 132: MTOUCH_Button_Tick();
 10011                           
 10012                           ;incstack = 0
 10013                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10014  091B  3189  211E         	fcall	_MTOUCH_Button_Tick
 10015  091D  0008               	return
 10016  091E                     __end_of_MTOUCH_Tick:	
 10017                           
 10018                           	psect	text26
 10019  091E                     __ptext26:	
 10020 ;; *************** function _MTOUCH_Button_Tick *****************
 10021 ;; Defined at:
 10022 ;;		line 284 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    5
 10043 ;; This function calls:
 10044 ;;		_Button_Tick_helper
 10045 ;; This function is called by:
 10046 ;;		_MTOUCH_Tick
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           
 10051                           ;psect for function _MTOUCH_Button_Tick
 10052  091E                     _MTOUCH_Button_Tick:	
 10053                           
 10054                           ;mtouch_button.c: 286: Button_Tick_helper(&mtouch_button[0]);
 10055                           
 10056                           ;incstack = 0
 10057                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10058  091E  30BA               	movlw	(low (_mtouch_button| 0))& (0+255)
 10059  091F  318C  2410         	fcall	_Button_Tick_helper
 10060  0921  0008               	return
 10061  0922                     __end_of_MTOUCH_Button_Tick:	
 10062                           
 10063                           	psect	text27
 10064  0C10                     __ptext27:	
 10065 ;; *************** function _Button_Tick_helper *****************
 10066 ;; Defined at:
 10067 ;;		line 288 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;  button          1    wreg     PTR struct .
 10070 ;;		 -> mtouch_button(17), 
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;  button          1   12[BANK0 ] PTR struct .
 10073 ;;		 -> mtouch_button(17), 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;Total ram usage:        3 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    4
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_MTOUCH_Button_Tick
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           
 10098                           ;psect for function _Button_Tick_helper
 10099  0C10                     _Button_Tick_helper:	
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
 10103                           ;Button_Tick_helper@button stored from wreg
 10104  0C10  0020               	movlb	0	; select bank0
 10105  0C11  00AC               	movwf	Button_Tick_helper@button
 10106                           
 10107                           ;mtouch_button.c: 291: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
 10108  0C12  082C               	movf	Button_Tick_helper@button,w
 10109  0C13  3E02               	addlw	2
 10110  0C14  0086               	movwf	6
 10111  0C15  0187               	clrf	7
 10112  0C16  3002               	movlw	2
 10113  0C17  0601               	xorwf	1,w
 10114  0C18  1D03               	btfss	3,2
 10115  0C19  0008               	return
 10116                           
 10117                           ;mtouch_button.c: 292: {
 10118                           ;mtouch_button.c: 293: (button->counter)++;
 10119  0C1A  082C               	movf	Button_Tick_helper@button,w
 10120  0C1B  3E0A               	addlw	10
 10121  0C1C  0086               	movwf	6
 10122  0C1D  0187               	clrf	7
 10123  0C1E  3001               	movlw	1
 10124  0C1F  0781               	addwf	1,f
 10125  0C20  3141               	addfsr 1,1
 10126  0C21  1803               	skipnc
 10127  0C22  0A81               	incf	1,f
 10128                           
 10129                           ;mtouch_button.c: 294: if (button->counter == (mtouch_button_statecounter_t)0)
 10130  0C23  082C               	movf	Button_Tick_helper@button,w
 10131  0C24  3E0A               	addlw	10
 10132  0C25  0086               	movwf	6
 10133  0C26  0187               	clrf	7
 10134  0C27  0016               	moviw fsr1++
 10135  0C28  0401               	iorwf	1,w
 10136  0C29  1D03               	btfss	3,2
 10137  0C2A  0008               	return
 10138                           
 10139                           ;mtouch_button.c: 295: {
 10140                           ;mtouch_button.c: 296: button->counter = (mtouch_button_statecounter_t)0xFFFF;
 10141  0C2B  082C               	movf	Button_Tick_helper@button,w
 10142  0C2C  3E0A               	addlw	10
 10143  0C2D  0086               	movwf	6
 10144  0C2E  0187               	clrf	7
 10145  0C2F  30FF               	movlw	255
 10146  0C30  3FC0               	movwi [0]fsr1
 10147  0C31  30FF               	movlw	255
 10148  0C32  3FC1               	movwi [1]fsr1
 10149  0C33  0008               	return
 10150  0C34                     __end_of_Button_Tick_helper:	
 10151                           
 10152                           	psect	text28
 10153  0B5B                     __ptext28:	
 10154 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
 10155 ;; Defined at:
 10156 ;;		line 195 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;  sensor          1    0[BANK1 ] enum E8046
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      unsigned char 
 10163 ;; Registers used:
 10164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10173 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;Total ram usage:        2 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    9
 10177 ;; This function calls:
 10178 ;;		_Sensor_Service
 10179 ;; This function is called by:
 10180 ;;		_MTOUCH_Service_Mainloop
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _MTOUCH_Sensor_SampleAll
 10186  0B5B                     _MTOUCH_Sensor_SampleAll:	
 10187                           
 10188                           ;mtouch_sensor.c: 197: enum mtouch_sensor_names sensor;
 10189                           ;mtouch_sensor.c: 198: for (sensor = 0; sensor < (1u); sensor++)
 10190                           
 10191                           ;incstack = 0
 10192                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10193  0B5B  0021               	movlb	1	; select bank1
 10194  0B5C  01EF               	clrf	MTOUCH_Sensor_SampleAll@sensor^(0+128)
 10195  0B5D  086F               	movf	MTOUCH_Sensor_SampleAll@sensor^(0+128),w
 10196  0B5E  1D03               	btfss	3,2
 10197  0B5F  2B72               	goto	l4999
 10198  0B60                     l4991:	
 10199                           
 10200                           ;mtouch_sensor.c: 199: {
 10201                           ;mtouch_sensor.c: 200: if(Sensor_Service(sensor)!= MTOUCH_SENSOR_ERROR_none)
 10202  0B60  086F               	movf	MTOUCH_Sensor_SampleAll@sensor^(0+128),w
 10203  0B61  318E  2663  318B   	fcall	_Sensor_Service
 10204  0B64  3A00               	xorlw	0
 10205  0B65  1903               	skipnz
 10206  0B66  2B69               	goto	l4997
 10207                           
 10208                           ;mtouch_sensor.c: 201: return 0;
 10209  0B67  3000               	movlw	0
 10210  0B68  0008               	return
 10211  0B69                     l4997:	
 10212  0B69  3001               	movlw	1
 10213  0B6A  0020               	movlb	0	; select bank0
 10214  0B6B  00C5               	movwf	??_MTOUCH_Sensor_SampleAll
 10215  0B6C  0845               	movf	??_MTOUCH_Sensor_SampleAll,w
 10216  0B6D  0021               	movlb	1	; select bank1
 10217  0B6E  07EF               	addwf	MTOUCH_Sensor_SampleAll@sensor^(0+128),f
 10218  0B6F  086F               	movf	MTOUCH_Sensor_SampleAll@sensor^(0+128),w
 10219  0B70  1903               	btfsc	3,2
 10220  0B71  2B60               	goto	l4991
 10221  0B72                     l4999:	
 10222                           
 10223                           ;mtouch_sensor.c: 202: }
 10224                           ;mtouch_sensor.c: 203: return 1;
 10225  0B72  3001               	movlw	1
 10226  0B73  0008               	return
 10227  0B74                     __end_of_MTOUCH_Sensor_SampleAll:	
 10228                           
 10229                           	psect	text29
 10230  0E63                     __ptext29:	
 10231 ;; *************** function _Sensor_Service *****************
 10232 ;; Defined at:
 10233 ;;		line 241 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;  name            1    wreg     enum E8046
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  name            1   34[BANK0 ] enum E8046
 10238 ;;  sensor          1   36[BANK0 ] PTR struct .
 10239 ;;		 -> mtouch_sensor(9), 
 10240 ;;  error           1   35[BANK0 ] enum E8048
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      enum E8048
 10243 ;; Registers used:
 10244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/0
 10247 ;;		On exit  : 0/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;Total ram usage:        5 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    8
 10257 ;; This function calls:
 10258 ;;		_Sensor_Acquisition
 10259 ;;		_Sensor_DefaultCallback
 10260 ;;		_Sensor_RawSample_Update
 10261 ;;		_Sensor_isEnabled
 10262 ;;		_Sensor_setSampled
 10263 ;;		___bmul
 10264 ;; This function is called by:
 10265 ;;		_MTOUCH_Sensor_SampleAll
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           
 10270                           ;psect for function _Sensor_Service
 10271  0E63                     _Sensor_Service:	
 10272                           
 10273                           ;incstack = 0
 10274                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10275                           ;Sensor_Service@name stored from wreg
 10276  0E63  0020               	movlb	0	; select bank0
 10277  0E64  00C2               	movwf	Sensor_Service@name
 10278                           
 10279                           ;mtouch_sensor.c: 243: mtouch_sensor_t* sensor = &mtouch_sensor[name];
 10280  0E65  3009               	movlw	9
 10281  0E66  00C0               	movwf	??_Sensor_Service
 10282  0E67  0840               	movf	??_Sensor_Service,w
 10283  0E68  00AA               	movwf	___bmul@multiplicand
 10284  0E69  0842               	movf	Sensor_Service@name,w
 10285  0E6A  318A  224E  318E   	fcall	___bmul
 10286  0E6D  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 10287  0E6E  0020               	movlb	0	; select bank0
 10288  0E6F  00C1               	movwf	??_Sensor_Service+1
 10289  0E70  0841               	movf	??_Sensor_Service+1,w
 10290  0E71  00C4               	movwf	Sensor_Service@sensor
 10291                           
 10292                           ;mtouch_sensor.c: 244: enum mtouch_sensor_error error = Sensor_Acquisition(sensor);
 10293  0E72  0844               	movf	Sensor_Service@sensor,w
 10294  0E73  318E  26F8  318E   	fcall	_Sensor_Acquisition
 10295  0E76  0020               	movlb	0	; select bank0
 10296  0E77  00C0               	movwf	??_Sensor_Service
 10297  0E78  0840               	movf	??_Sensor_Service,w
 10298  0E79  00C3               	movwf	Sensor_Service@error
 10299                           
 10300                           ;mtouch_sensor.c: 247: switch(error)
 10301  0E7A  2E9B               	goto	l4935
 10302  0E7B                     l4925:	
 10303                           ;mtouch_sensor.c: 248: {
 10304                           ;mtouch_sensor.c: 249: case MTOUCH_SENSOR_ERROR_none:
 10305                           
 10306                           
 10307                           ;mtouch_sensor.c: 250: {
 10308                           ;mtouch_sensor.c: 251: if(Sensor_isEnabled(sensor))
 10309  0E7B  0844               	movf	Sensor_Service@sensor,w
 10310  0E7C  3189  21E4  318E   	fcall	_Sensor_isEnabled
 10311  0E7F  3A00               	xorlw	0
 10312  0E80  1903               	skipnz
 10313  0E81  2EAA               	goto	l4937
 10314                           
 10315                           ;mtouch_sensor.c: 252: {
 10316                           ;mtouch_sensor.c: 257: if(!lowpowerActivated)
 10317  0E82  0020               	movlb	0	; select bank0
 10318  0E83  085F               	movf	_lowpowerActivated,w
 10319  0E84  1D03               	btfss	3,2
 10320  0E85  2E8A               	goto	l379
 10321                           
 10322                           ;mtouch_sensor.c: 258: {
 10323                           ;mtouch_sensor.c: 259: Sensor_RawSample_Update(sensor);
 10324  0E86  0844               	movf	Sensor_Service@sensor,w
 10325  0E87  318B  232A  318E   	fcall	_Sensor_RawSample_Update
 10326  0E8A                     l379:	
 10327                           
 10328                           ;mtouch_sensor.c: 260: }
 10329                           ;mtouch_sensor.c: 261: Sensor_setSampled(sensor);
 10330  0E8A  0020               	movlb	0	; select bank0
 10331  0E8B  0844               	movf	Sensor_Service@sensor,w
 10332  0E8C  3189  2164  318E   	fcall	_Sensor_setSampled
 10333                           
 10334                           ;mtouch_sensor.c: 262: callback_sampled(name);
 10335  0E8F  0020               	movlb	0	; select bank0
 10336  0E90  0842               	movf	Sensor_Service@name,w
 10337  0E91  00C0               	movwf	??_Sensor_Service
 10338  0E92  0840               	movf	??_Sensor_Service,w
 10339  0E93  00AA               	movwf	Sensor_DefaultCallback@sensor
 10340  0E94  0021               	movlb	1	; select bank1
 10341  0E95  0856               	movf	(_callback_sampled+1)^(0+128),w
 10342  0E96  008A               	movwf	10
 10343  0E97  0855               	movf	_callback_sampled^(0+128),w
 10344  0E98  000A               	callw
 10345  0E99  318E               	pagesel	$
 10346                           
 10347                           ;mtouch_sensor.c: 272: }
 10348                           
 10349                           ;mtouch_sensor.c: 271: default: break;
 10350                           
 10351                           ;mtouch_sensor.c: 269: case MTOUCH_SENSOR_ERROR_invalid_calibrate: break;
 10352                           
 10353                           ;mtouch_sensor.c: 268: case MTOUCH_SENSOR_ERROR_interrupt_notEnabled: break;
 10354                           
 10355                           ;mtouch_sensor.c: 267: case MTOUCH_SENSOR_ERROR_invalid_index: break;
 10356                           
 10357                           ;mtouch_sensor.c: 263: }
 10358                           ;mtouch_sensor.c: 264: }
 10359                           ;mtouch_sensor.c: 265: break;
 10360  0E9A  2EAA               	goto	l4937
 10361  0E9B                     l4935:	
 10362  0E9B  0020               	movlb	0	; select bank0
 10363  0E9C  0843               	movf	Sensor_Service@error,w
 10364                           
 10365                           ; Switch size 1, requested type "space"
 10366                           ; Number of cases is 4, Range of values is 0 to 255
 10367                           ; switch strategies available:
 10368                           ; Name         Instructions Cycles
 10369                           ; simple_byte           13     7 (average)
 10370                           ; jumptable            260     6 (fixed)
 10371                           ;	Chosen strategy is simple_byte
 10372  0E9D  3A00               	xorlw	0	; case 0
 10373  0E9E  1903               	skipnz
 10374  0E9F  2E7B               	goto	l4925
 10375  0EA0  3AFD               	xorlw	253	; case 253
 10376  0EA1  1903               	skipnz
 10377  0EA2  2EAA               	goto	l4937
 10378  0EA3  3A03               	xorlw	3	; case 254
 10379  0EA4  1903               	skipnz
 10380  0EA5  2EAA               	goto	l4937
 10381  0EA6  3A01               	xorlw	1	; case 255
 10382  0EA7  1903               	skipnz
 10383  0EA8  2EAA               	goto	l4937
 10384  0EA9  2EAA               	goto	l4937
 10385  0EAA                     l4937:	
 10386                           
 10387                           ;mtouch_sensor.c: 274: return error;
 10388  0EAA  0020               	movlb	0	; select bank0
 10389  0EAB  0843               	movf	Sensor_Service@error,w
 10390  0EAC  0008               	return
 10391  0EAD                     __end_of_Sensor_Service:	
 10392                           
 10393                           	psect	text30
 10394  0964                     __ptext30:	
 10395 ;; *************** function _Sensor_setSampled *****************
 10396 ;; Defined at:
 10397 ;;		line 650 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;  sensor          1    wreg     PTR struct .
 10400 ;;		 -> mtouch_sensor(9), 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  sensor          1   10[BANK0 ] PTR struct .
 10403 ;;		 -> mtouch_sensor(9), 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;Total ram usage:        1 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    4
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_Sensor_Service
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           
 10428                           ;psect for function _Sensor_setSampled
 10429  0964                     _Sensor_setSampled:	
 10430                           
 10431                           ;incstack = 0
 10432                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10433                           ;Sensor_setSampled@sensor stored from wreg
 10434  0964  0020               	movlb	0	; select bank0
 10435  0965  00AA               	movwf	Sensor_setSampled@sensor
 10436                           
 10437                           ;mtouch_sensor.c: 652: sensor->sampled = 1;
 10438  0966  082A               	movf	Sensor_setSampled@sensor,w
 10439  0967  3E08               	addlw	8
 10440  0968  0086               	movwf	6
 10441  0969  0187               	clrf	7
 10442  096A  1481               	bsf	1,1
 10443  096B  0008               	return
 10444  096C                     __end_of_Sensor_setSampled:	
 10445                           
 10446                           	psect	text31
 10447  0B2A                     __ptext31:	
 10448 ;; *************** function _Sensor_RawSample_Update *****************
 10449 ;; Defined at:
 10450 ;;		line 511 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;  sensor          1    wreg     PTR struct .
 10453 ;;		 -> mtouch_sensor(9), 
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;  sensor          1   10[BANK0 ] PTR struct .
 10456 ;;		 -> mtouch_sensor(9), 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        1 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    4
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		_Sensor_Service
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           
 10481                           ;psect for function _Sensor_RawSample_Update
 10482  0B2A                     _Sensor_RawSample_Update:	
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10486                           ;Sensor_RawSample_Update@sensor stored from wreg
 10487  0B2A  0020               	movlb	0	; select bank0
 10488  0B2B  00AA               	movwf	Sensor_RawSample_Update@sensor
 10489                           
 10490                           ;mtouch_sensor.c: 513: if (INTCONbits.GIE == (uint8_t)1)
 10491  0B2C  1F8B               	btfss	11,7	;volatile
 10492  0B2D  2B39               	goto	l4857
 10493                           
 10494                           ;mtouch_sensor.c: 514: {
 10495                           ;mtouch_sensor.c: 515: INTCONbits.GIE = (uint8_t)0;
 10496  0B2E  138B               	bcf	11,7	;volatile
 10497                           
 10498                           ;mtouch_sensor.c: 516: sensor->rawSample = packet_sample;
 10499  0B2F  082A               	movf	Sensor_RawSample_Update@sensor,w
 10500  0B30  3E06               	addlw	6
 10501  0B31  0086               	movwf	6
 10502  0B32  0187               	clrf	7
 10503  0B33  0854               	movf	_packet_sample,w
 10504  0B34  3FC0               	movwi [0]fsr1
 10505  0B35  0855               	movf	_packet_sample+1,w
 10506  0B36  3FC1               	movwi [1]fsr1
 10507                           
 10508                           ;mtouch_sensor.c: 517: INTCONbits.GIE = (uint8_t)1;
 10509  0B37  178B               	bsf	11,7	;volatile
 10510                           
 10511                           ;mtouch_sensor.c: 518: }
 10512  0B38  0008               	return
 10513  0B39                     l4857:	
 10514                           
 10515                           ;mtouch_sensor.c: 519: else
 10516                           ;mtouch_sensor.c: 520: {
 10517                           ;mtouch_sensor.c: 521: sensor->rawSample = packet_sample;
 10518  0B39  082A               	movf	Sensor_RawSample_Update@sensor,w
 10519  0B3A  3E06               	addlw	6
 10520  0B3B  0086               	movwf	6
 10521  0B3C  0187               	clrf	7
 10522  0B3D  0854               	movf	_packet_sample,w
 10523  0B3E  3FC0               	movwi [0]fsr1
 10524  0B3F  0855               	movf	_packet_sample+1,w
 10525  0B40  3FC1               	movwi [1]fsr1
 10526  0B41  0008               	return
 10527  0B42                     __end_of_Sensor_RawSample_Update:	
 10528                           
 10529                           	psect	text32
 10530  0913                     __ptext32:	
 10531 ;; *************** function _Sensor_DefaultCallback *****************
 10532 ;; Defined at:
 10533 ;;		line 531 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  sensor          1   10[BANK0 ] enum E8046
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      void 
 10540 ;; Registers used:
 10541 ;;		None
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        1 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    4
 10554 ;; This function calls:
 10555 ;;		Nothing
 10556 ;; This function is called by:
 10557 ;;		_Sensor_Service
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _Sensor_DefaultCallback
 10563  0913                     _Sensor_DefaultCallback:	
 10564                           
 10565                           ;incstack = 0
 10566                           ; Regs used in _Sensor_DefaultCallback: []
 10567  0913  0008               	return
 10568  0914                     __end_of_Sensor_DefaultCallback:	
 10569                           
 10570                           	psect	text33
 10571  0EF8                     __ptext33:	
 10572 ;; *************** function _Sensor_Acquisition *****************
 10573 ;; Defined at:
 10574 ;;		line 288 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  sensor          1    wreg     PTR struct .
 10577 ;;		 -> mtouch_sensor(9), 
 10578 ;; Auto vars:     Size  Location     Type
 10579 ;;  sensor          1   31[BANK0 ] PTR struct .
 10580 ;;		 -> mtouch_sensor(9), 
 10581 ;;  retry           1   30[BANK0 ] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      enum E8048
 10584 ;; Registers used:
 10585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;Total ram usage:        4 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    7
 10598 ;; This function calls:
 10599 ;;		_Sensor_Acq_ExecutePacket
 10600 ;;		_Sensor_Scanfrequency_Evaluation
 10601 ;;		_Sensor_isEnabled
 10602 ;;		_Sensor_setActive
 10603 ;;		_Sensor_setInactive
 10604 ;;		_abs
 10605 ;; This function is called by:
 10606 ;;		_Sensor_Service
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           
 10611                           ;psect for function _Sensor_Acquisition
 10612  0EF8                     _Sensor_Acquisition:	
 10613                           
 10614                           ;incstack = 0
 10615                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10616                           ;Sensor_Acquisition@sensor stored from wreg
 10617  0EF8  0020               	movlb	0	; select bank0
 10618  0EF9  00BF               	movwf	Sensor_Acquisition@sensor
 10619                           
 10620                           ;mtouch_sensor.c: 291: uint8_t retry = (uint8_t)5u;
 10621  0EFA  3005               	movlw	5
 10622  0EFB  00BC               	movwf	??_Sensor_Acquisition
 10623  0EFC  083C               	movf	??_Sensor_Acquisition,w
 10624  0EFD  00BE               	movwf	Sensor_Acquisition@retry
 10625                           
 10626                           ;mtouch_sensor.c: 293: if(!Sensor_isEnabled(sensor))
 10627  0EFE  083F               	movf	Sensor_Acquisition@sensor,w
 10628  0EFF  3189  21E4  318E   	fcall	_Sensor_isEnabled
 10629  0F02  3A00               	xorlw	0
 10630  0F03  1D03               	skipz
 10631  0F04  2F0F               	goto	l4831
 10632                           
 10633                           ;mtouch_sensor.c: 294: return MTOUCH_SENSOR_ERROR_none;
 10634  0F05  3000               	movlw	0
 10635  0F06  0008               	return
 10636  0F07                     l4825:	
 10637                           ;mtouch_sensor.c: 296: while(Sensor_Acq_ExecutePacket(sensor))
 10638                           
 10639                           
 10640                           ;mtouch_sensor.c: 297: {
 10641                           ;mtouch_sensor.c: 298: retry--;
 10642  0F07  3001               	movlw	1
 10643  0F08  0020               	movlb	0	; select bank0
 10644  0F09  02BE               	subwf	Sensor_Acquisition@retry,f
 10645                           
 10646                           ;mtouch_sensor.c: 299: if(retry == 0)
 10647  0F0A  083E               	movf	Sensor_Acquisition@retry,w
 10648  0F0B  1D03               	btfss	3,2
 10649  0F0C  2F0F               	goto	l4831
 10650                           
 10651                           ;mtouch_sensor.c: 300: {
 10652                           ;mtouch_sensor.c: 301: return MTOUCH_SENSOR_ERROR_tooManyRetries;
 10653  0F0D  30FC               	movlw	252
 10654  0F0E  0008               	return
 10655  0F0F                     l4831:	
 10656  0F0F  0020               	movlb	0	; select bank0
 10657  0F10  083F               	movf	Sensor_Acquisition@sensor,w
 10658  0F11  3186  26C8  318E   	fcall	_Sensor_Acq_ExecutePacket
 10659  0F14  3A00               	xorlw	0
 10660  0F15  1D03               	skipz
 10661  0F16  2F07               	goto	l4825
 10662                           
 10663                           ;mtouch_sensor.c: 302: }
 10664                           ;mtouch_sensor.c: 303: }
 10665                           ;mtouch_sensor.c: 305: if((mtouch_sensor_packetsample_t)abs(packet_sample - sensor->rawS
      +                          ample) > 100u)
 10666  0F17  0020               	movlb	0	; select bank0
 10667  0F18  083F               	movf	Sensor_Acquisition@sensor,w
 10668  0F19  3E06               	addlw	6
 10669  0F1A  0086               	movwf	6
 10670  0F1B  0187               	clrf	7
 10671  0F1C  3F40               	moviw [0]fsr1
 10672  0F1D  00BC               	movwf	??_Sensor_Acquisition
 10673  0F1E  3F41               	moviw [1]fsr1
 10674  0F1F  00BD               	movwf	??_Sensor_Acquisition+1
 10675  0F20  09BC               	comf	??_Sensor_Acquisition,f
 10676  0F21  09BD               	comf	??_Sensor_Acquisition+1,f
 10677  0F22  0ABC               	incf	??_Sensor_Acquisition,f
 10678  0F23  1903               	skipnz
 10679  0F24  0ABD               	incf	??_Sensor_Acquisition+1,f
 10680  0F25  0854               	movf	_packet_sample,w
 10681  0F26  073C               	addwf	??_Sensor_Acquisition,w
 10682  0F27  00AA               	movwf	abs@a
 10683  0F28  0855               	movf	_packet_sample+1,w
 10684  0F29  3D3D               	addwfc	??_Sensor_Acquisition+1,w
 10685  0F2A  00AB               	movwf	abs@a+1
 10686  0F2B  318A  222E  318E   	fcall	_abs
 10687  0F2E  3000               	movlw	0
 10688  0F2F  0020               	movlb	0	; select bank0
 10689  0F30  022B               	subwf	?_abs+1,w
 10690  0F31  3065               	movlw	101
 10691  0F32  1903               	skipnz
 10692  0F33  022A               	subwf	?_abs,w
 10693  0F34  1C03               	skipc
 10694  0F35  2F3F               	goto	l4843
 10695                           
 10696                           ;mtouch_sensor.c: 306: {
 10697                           ;mtouch_sensor.c: 307: Sensor_setActive(sensor);
 10698  0F36  083F               	movf	Sensor_Acquisition@sensor,w
 10699  0F37  3189  2154  318E   	fcall	_Sensor_setActive
 10700                           
 10701                           ;mtouch_sensor.c: 308: return Sensor_Scanfrequency_Evaluation(sensor);
 10702  0F3A  0020               	movlb	0	; select bank0
 10703  0F3B  083F               	movf	Sensor_Acquisition@sensor,w
 10704  0F3C  318F  2796         	fcall	_Sensor_Scanfrequency_Evaluation
 10705  0F3E  0008               	return
 10706  0F3F                     l4843:	
 10707                           ;mtouch_sensor.c: 309: }
 10708                           
 10709                           
 10710                           ;mtouch_sensor.c: 310: else
 10711                           ;mtouch_sensor.c: 311: {
 10712                           ;mtouch_sensor.c: 312: Sensor_setInactive(sensor);
 10713  0F3F  0020               	movlb	0	; select bank0
 10714  0F40  083F               	movf	Sensor_Acquisition@sensor,w
 10715  0F41  3189  215C         	fcall	_Sensor_setInactive
 10716                           
 10717                           ;mtouch_sensor.c: 313: }
 10718                           ;mtouch_sensor.c: 315: return MTOUCH_SENSOR_ERROR_none;
 10719  0F43  3000               	movlw	0
 10720  0F44  0008               	return
 10721  0F45                     __end_of_Sensor_Acquisition:	
 10722                           
 10723                           	psect	text34
 10724  0A2E                     __ptext34:	
 10725 ;; *************** function _abs *****************
 10726 ;; Defined at:
 10727 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\abs.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;  a               2   10[BANK0 ] int 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  2   10[BANK0 ] int 
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, status,0
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;Total ram usage:        4 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    4
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_Sensor_Acquisition
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           
 10756                           ;psect for function _abs
 10757  0A2E                     _abs:	
 10758                           
 10759                           ;incstack = 0
 10760                           ; Regs used in _abs: [wreg+status,2+status,0]
 10761  0A2E  0020               	movlb	0	; select bank0
 10762  0A2F  1FAB               	btfss	abs@a+1,7
 10763  0A30  0008               	return
 10764  0A31  092A               	comf	abs@a,w
 10765  0A32  00AC               	movwf	??_abs
 10766  0A33  092B               	comf	abs@a+1,w
 10767  0A34  00AD               	movwf	??_abs+1
 10768  0A35  0AAC               	incf	??_abs,f
 10769  0A36  1903               	skipnz
 10770  0A37  0AAD               	incf	??_abs+1,f
 10771  0A38  082C               	movf	??_abs,w
 10772  0A39  00AA               	movwf	?_abs
 10773  0A3A  082D               	movf	??_abs+1,w
 10774  0A3B  00AB               	movwf	?_abs+1
 10775  0A3C  0008               	return
 10776  0A3D                     __end_of_abs:	
 10777                           
 10778                           	psect	text35
 10779  095C                     __ptext35:	
 10780 ;; *************** function _Sensor_setInactive *****************
 10781 ;; Defined at:
 10782 ;;		line 596 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  sensor          1    wreg     PTR struct .
 10785 ;;		 -> mtouch_sensor(9), 
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  sensor          1   10[BANK0 ] PTR struct .
 10788 ;;		 -> mtouch_sensor(9), 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;Total ram usage:        1 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    4
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_Sensor_Acquisition
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           
 10813                           ;psect for function _Sensor_setInactive
 10814  095C                     _Sensor_setInactive:	
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10818                           ;Sensor_setInactive@sensor stored from wreg
 10819  095C  0020               	movlb	0	; select bank0
 10820  095D  00AA               	movwf	Sensor_setInactive@sensor
 10821                           
 10822                           ;mtouch_sensor.c: 598: sensor->active = 0;
 10823  095E  082A               	movf	Sensor_setInactive@sensor,w
 10824  095F  3E08               	addlw	8
 10825  0960  0086               	movwf	6
 10826  0961  0187               	clrf	7
 10827  0962  1101               	bcf	1,2
 10828  0963  0008               	return
 10829  0964                     __end_of_Sensor_setInactive:	
 10830                           
 10831                           	psect	text36
 10832  0954                     __ptext36:	
 10833 ;; *************** function _Sensor_setActive *****************
 10834 ;; Defined at:
 10835 ;;		line 591 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;  sensor          1    wreg     PTR struct .
 10838 ;;		 -> mtouch_sensor(9), 
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;  sensor          1   10[BANK0 ] PTR struct .
 10841 ;;		 -> mtouch_sensor(9), 
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      void 
 10844 ;; Registers used:
 10845 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;Total ram usage:        1 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    4
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_Sensor_Acquisition
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _Sensor_setActive
 10867  0954                     _Sensor_setActive:	
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10871                           ;Sensor_setActive@sensor stored from wreg
 10872  0954  0020               	movlb	0	; select bank0
 10873  0955  00AA               	movwf	Sensor_setActive@sensor
 10874                           
 10875                           ;mtouch_sensor.c: 593: sensor->active = 1;
 10876  0956  082A               	movf	Sensor_setActive@sensor,w
 10877  0957  3E08               	addlw	8
 10878  0958  0086               	movwf	6
 10879  0959  0187               	clrf	7
 10880  095A  1501               	bsf	1,2
 10881  095B  0008               	return
 10882  095C                     __end_of_Sensor_setActive:	
 10883                           
 10884                           	psect	text37
 10885  09E4                     __ptext37:	
 10886 ;; *************** function _Sensor_isEnabled *****************
 10887 ;; Defined at:
 10888 ;;		line 576 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;  sensor          1    wreg     PTR struct .
 10891 ;;		 -> mtouch_sensor(9), 
 10892 ;; Auto vars:     Size  Location     Type
 10893 ;;  sensor          1   10[BANK0 ] PTR struct .
 10894 ;;		 -> mtouch_sensor(9), 
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      unsigned char 
 10897 ;; Registers used:
 10898 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;Total ram usage:        1 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; Hardware stack levels required when called:    4
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_Sensor_Service
 10915 ;;		_Sensor_Acquisition
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           
 10920                           ;psect for function _Sensor_isEnabled
 10921  09E4                     _Sensor_isEnabled:	
 10922                           
 10923                           ;incstack = 0
 10924                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10925                           ;Sensor_isEnabled@sensor stored from wreg
 10926  09E4  0020               	movlb	0	; select bank0
 10927  09E5  00AA               	movwf	Sensor_isEnabled@sensor
 10928                           
 10929                           ;mtouch_sensor.c: 578: if(sensor!=(0))
 10930  09E6  082A               	movf	Sensor_isEnabled@sensor,w
 10931  09E7  1903               	btfsc	3,2
 10932  09E8  29F0               	goto	l4671
 10933                           
 10934                           ;mtouch_sensor.c: 579: return (bool)sensor->enabled;
 10935  09E9  082A               	movf	Sensor_isEnabled@sensor,w
 10936  09EA  3E08               	addlw	8
 10937  09EB  0086               	movwf	6
 10938  09EC  0187               	clrf	7
 10939  09ED  0801               	movf	1,w
 10940  09EE  3901               	andlw	1
 10941  09EF  0008               	return
 10942  09F0                     l4671:	
 10943                           
 10944                           ;mtouch_sensor.c: 580: else
 10945                           ;mtouch_sensor.c: 581: return 0;
 10946  09F0  3000               	movlw	0
 10947  09F1  0008               	return
 10948  09F2                     __end_of_Sensor_isEnabled:	
 10949                           
 10950                           	psect	text38
 10951  0F96                     __ptext38:	
 10952 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
 10953 ;; Defined at:
 10954 ;;		line 444 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;  sensor          1    wreg     PTR struct .
 10957 ;;		 -> mtouch_sensor(9), 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  sensor          1   20[BANK0 ] PTR struct .
 10960 ;;		 -> mtouch_sensor(9), 
 10961 ;;  best_packet_    2   23[BANK0 ] unsigned int 
 10962 ;;  packet_noise    2   21[BANK0 ] unsigned int 
 10963 ;;  i               1   27[BANK0 ] unsigned char 
 10964 ;;  retry           1   26[BANK0 ] unsigned char 
 10965 ;;  best_sample_    1   25[BANK0 ] unsigned char 
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  1    wreg      enum E8048
 10968 ;; Registers used:
 10969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10970 ;; Tracked objects:
 10971 ;;		On entry : 0/0
 10972 ;;		On exit  : 0/0
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;Total ram usage:       10 bytes
 10980 ;; Hardware stack levels used:    1
 10981 ;; Hardware stack levels required when called:    6
 10982 ;; This function calls:
 10983 ;;		_Sensor_Acq_ExecutePacket
 10984 ;; This function is called by:
 10985 ;;		_Sensor_Acquisition
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           
 10990                           ;psect for function _Sensor_Scanfrequency_Evaluation
 10991  0F96                     _Sensor_Scanfrequency_Evaluation:	
 10992                           
 10993                           ;incstack = 0
 10994                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10995                           ;Sensor_Scanfrequency_Evaluation@sensor stored from wreg
 10996  0F96  0020               	movlb	0	; select bank0
 10997  0F97  00B4               	movwf	Sensor_Scanfrequency_Evaluation@sensor
 10998                           
 10999                           ;mtouch_sensor.c: 446: uint8_t i;
 11000                           ;mtouch_sensor.c: 447: const mtouch_sensor_sampleperiod_t frequency_hop[5] = {3,13,14,20
      +                          ,13};
 11001                           ;mtouch_sensor.c: 448: mtouch_sensor_packetnoise_t packet_noise_Max;
 11002                           ;mtouch_sensor.c: 449: mtouch_sensor_sampleperiod_t best_sample_period;
 11003                           ;mtouch_sensor.c: 450: mtouch_sensor_packetsample_t best_packet_sample;
 11004                           ;mtouch_sensor.c: 451: uint8_t retry;
 11005                           ;mtouch_sensor.c: 453: packet_noise_Max = packet_noise + (packet_noise>>2);
 11006  0F98  0853               	movf	_packet_noise+1,w
 11007  0F99  00B3               	movwf	??_Sensor_Scanfrequency_Evaluation+1
 11008  0F9A  0852               	movf	_packet_noise,w
 11009  0F9B  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11010  0F9C  36B3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
 11011  0F9D  0CB2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
 11012  0F9E  36B3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
 11013  0F9F  0CB2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
 11014  0FA0  0852               	movf	_packet_noise,w
 11015  0FA1  0732               	addwf	??_Sensor_Scanfrequency_Evaluation,w
 11016  0FA2  00B5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
 11017  0FA3  0853               	movf	_packet_noise+1,w
 11018  0FA4  3D33               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
 11019  0FA5  00B6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
 11020                           
 11021                           ;mtouch_sensor.c: 454: best_sample_period = sample_period;
 11022  0FA6  0865               	movf	_sample_period,w
 11023  0FA7  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11024  0FA8  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11025  0FA9  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
 11026                           
 11027                           ;mtouch_sensor.c: 455: best_packet_sample = packet_sample;
 11028  0FAA  0855               	movf	_packet_sample+1,w
 11029  0FAB  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
 11030  0FAC  0854               	movf	_packet_sample,w
 11031  0FAD  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
 11032                           
 11033                           ;mtouch_sensor.c: 458: for(i=(uint8_t)0;i<(uint8_t)5;i++)
 11034  0FAE  01BB               	clrf	Sensor_Scanfrequency_Evaluation@i
 11035  0FAF  3005               	movlw	5
 11036  0FB0  023B               	subwf	Sensor_Scanfrequency_Evaluation@i,w
 11037  0FB1  1803               	btfsc	3,0
 11038  0FB2  2FF6               	goto	l4721
 11039  0FB3                     l4695:	
 11040                           
 11041                           ;mtouch_sensor.c: 459: {
 11042                           ;mtouch_sensor.c: 460: sample_period += frequency_hop[i];
 11043  0FB3  083B               	movf	Sensor_Scanfrequency_Evaluation@i,w
 11044  0FB4  3E11               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
 11045  0FB5  0084               	movwf	4
 11046  0FB6  3090               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
 11047  0FB7  1803               	skipnc
 11048  0FB8  3E01               	addlw	1
 11049  0FB9  0085               	movwf	5
 11050  0FBA  0800               	movf	0,w	;code access
 11051  0FBB  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11052  0FBC  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11053  0FBD  07E5               	addwf	_sample_period,f
 11054                           
 11055                           ;mtouch_sensor.c: 466: else if(sample_period < ((mtouch_sensor_sampleperiod_t)200))
 11056                           
 11057                           ;mtouch_sensor.c: 465: }
 11058                           
 11059                           ;mtouch_sensor.c: 464: sample_period+=((mtouch_sensor_sampleperiod_t)200);
 11060                           
 11061                           ;mtouch_sensor.c: 462: {
 11062                           ;mtouch_sensor.c: 463: sample_period-=((mtouch_sensor_sampleperiod_t)255);
 11063                           
 11064                           ;mtouch_sensor.c: 461: if(sample_period > ((mtouch_sensor_sampleperiod_t)255))
 11065  0FBE  30C8               	movlw	200
 11066  0FBF  0265               	subwf	_sample_period,w
 11067  0FC0  1803               	skipnc
 11068  0FC1  2FC6               	goto	l4703
 11069                           
 11070                           ;mtouch_sensor.c: 467: {
 11071                           ;mtouch_sensor.c: 468: sample_period += ((mtouch_sensor_sampleperiod_t)200);
 11072  0FC2  30C8               	movlw	200
 11073  0FC3  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11074  0FC4  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11075  0FC5  07E5               	addwf	_sample_period,f
 11076  0FC6                     l4703:	
 11077                           
 11078                           ;mtouch_sensor.c: 469: }
 11079                           ;mtouch_sensor.c: 471: retry = (uint8_t)5u;
 11080  0FC6  3005               	movlw	5
 11081  0FC7  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11082  0FC8  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11083  0FC9  00BA               	movwf	Sensor_Scanfrequency_Evaluation@retry
 11084  0FCA                     l4711:	
 11085                           ;mtouch_sensor.c: 473: while(Sensor_Acq_ExecutePacket(sensor))
 11086                           
 11087  0FCA  0834               	movf	Sensor_Scanfrequency_Evaluation@sensor,w
 11088  0FCB  3186  26C8  318F   	fcall	_Sensor_Acq_ExecutePacket
 11089  0FCE  3A00               	xorlw	0
 11090  0FCF  1903               	btfsc	3,2
 11091  0FD0  2FD9               	goto	l4713
 11092                           
 11093                           ;mtouch_sensor.c: 474: {
 11094                           ;mtouch_sensor.c: 475: retry--;
 11095  0FD1  3001               	movlw	1
 11096  0FD2  0020               	movlb	0	; select bank0
 11097  0FD3  02BA               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
 11098                           
 11099                           ;mtouch_sensor.c: 476: if(retry == 0)
 11100  0FD4  083A               	movf	Sensor_Scanfrequency_Evaluation@retry,w
 11101  0FD5  1D03               	btfss	3,2
 11102  0FD6  2FCA               	goto	l4711
 11103                           
 11104                           ;mtouch_sensor.c: 477: {
 11105                           ;mtouch_sensor.c: 478: return MTOUCH_SENSOR_ERROR_tooManyRetries;
 11106  0FD7  30FC               	movlw	252
 11107  0FD8  0008               	return
 11108  0FD9                     l4713:	
 11109                           
 11110                           ;mtouch_sensor.c: 479: }
 11111                           ;mtouch_sensor.c: 480: }
 11112                           ;mtouch_sensor.c: 482: if(packet_noise_Max < packet_noise)
 11113  0FD9  0020               	movlb	0	; select bank0
 11114  0FDA  0853               	movf	_packet_noise+1,w
 11115  0FDB  0236               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
 11116  0FDC  1D03               	skipz
 11117  0FDD  2FE0               	goto	u4345
 11118  0FDE  0852               	movf	_packet_noise,w
 11119  0FDF  0235               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
 11120  0FE0                     u4345:	
 11121  0FE0  1803               	skipnc
 11122  0FE1  2FEE               	goto	l4717
 11123                           
 11124                           ;mtouch_sensor.c: 483: {
 11125                           ;mtouch_sensor.c: 484: packet_noise_Max = packet_noise;
 11126  0FE2  0853               	movf	_packet_noise+1,w
 11127  0FE3  00B6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
 11128  0FE4  0852               	movf	_packet_noise,w
 11129  0FE5  00B5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
 11130                           
 11131                           ;mtouch_sensor.c: 485: best_sample_period = sample_period;
 11132  0FE6  0865               	movf	_sample_period,w
 11133  0FE7  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11134  0FE8  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11135  0FE9  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
 11136                           
 11137                           ;mtouch_sensor.c: 486: best_packet_sample = packet_sample;
 11138  0FEA  0855               	movf	_packet_sample+1,w
 11139  0FEB  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
 11140  0FEC  0854               	movf	_packet_sample,w
 11141  0FED  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
 11142  0FEE                     l4717:	
 11143  0FEE  3001               	movlw	1
 11144  0FEF  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11145  0FF0  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11146  0FF1  07BB               	addwf	Sensor_Scanfrequency_Evaluation@i,f
 11147  0FF2  3005               	movlw	5
 11148  0FF3  023B               	subwf	Sensor_Scanfrequency_Evaluation@i,w
 11149  0FF4  1C03               	skipc
 11150  0FF5  2FB3               	goto	l4695
 11151  0FF6                     l4721:	
 11152                           
 11153                           ;mtouch_sensor.c: 487: }
 11154                           ;mtouch_sensor.c: 488: }
 11155                           ;mtouch_sensor.c: 490: sample_period = best_sample_period;
 11156  0FF6  0839               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
 11157  0FF7  00B2               	movwf	??_Sensor_Scanfrequency_Evaluation
 11158  0FF8  0832               	movf	??_Sensor_Scanfrequency_Evaluation,w
 11159  0FF9  00E5               	movwf	_sample_period
 11160                           
 11161                           ;mtouch_sensor.c: 491: packet_sample = best_packet_sample;
 11162  0FFA  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
 11163  0FFB  00D5               	movwf	_packet_sample+1
 11164  0FFC  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
 11165  0FFD  00D4               	movwf	_packet_sample
 11166                           
 11167                           ;mtouch_sensor.c: 493: return MTOUCH_SENSOR_ERROR_none;
 11168  0FFE  3000               	movlw	0
 11169  0FFF  0008               	return
 11170  1000                     __end_of_Sensor_Scanfrequency_Evaluation:	
 11171                           
 11172                           	psect	text39
 11173  06C8                     __ptext39:	
 11174 ;; *************** function _Sensor_Acq_ExecutePacket *****************
 11175 ;; Defined at:
 11176 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;  sensor          1    wreg     PTR struct .
 11179 ;;		 -> mtouch_sensor(9), 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  sensor          1   17[BANK0 ] PTR struct .
 11182 ;;		 -> mtouch_sensor(9), 
 11183 ;;  error           1   16[BANK0 ] enum E8048
 11184 ;;  ADACT_temp      1   15[BANK0 ] unsigned char 
 11185 ;;  ADCON1_temp     1   14[BANK0 ] unsigned char 
 11186 ;;  ADCON0_temp     1   13[BANK0 ] unsigned char 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      enum E8048
 11189 ;; Registers used:
 11190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;Total ram usage:        6 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    5
 11203 ;; This function calls:
 11204 ;;		_MTOUCH_Sensor_Scan_Initialize
 11205 ;;		_Sensor_setScanFunction
 11206 ;;		_TMR6_LoadPeriodRegister
 11207 ;;		_TMR6_SetInterruptHandler
 11208 ;;		_TMR6_StartTimer
 11209 ;;		_TMR6_StopTimer
 11210 ;; This function is called by:
 11211 ;;		_Sensor_Acquisition
 11212 ;;		_Sensor_Scanfrequency_Evaluation
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           
 11217                           ;psect for function _Sensor_Acq_ExecutePacket
 11218  06C8                     _Sensor_Acq_ExecutePacket:	
 11219                           
 11220                           ;incstack = 0
 11221                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11222                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
 11223  06C8  0020               	movlb	0	; select bank0
 11224  06C9  00B1               	movwf	Sensor_Acq_ExecutePacket@sensor
 11225                           
 11226                           ;mtouch_sensor.c: 327: if(!(INTCONbits.GIE & INTCONbits.PEIE))
 11227  06CA  0E0B               	swapf	11,w	;volatile
 11228  06CB  0C89               	rrf	9,f
 11229  06CC  0C89               	rrf	9,f
 11230  06CD  3901               	andlw	1
 11231  06CE  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11232  06CF  0D0B               	rlf	11,w	;volatile
 11233  06D0  0D0B               	rlf	11,w	;volatile
 11234  06D1  3901               	andlw	1
 11235  06D2  052C               	andwf	??_Sensor_Acq_ExecutePacket,w
 11236  06D3  1D03               	btfss	3,2
 11237  06D4  2ED7               	goto	l4577
 11238                           
 11239                           ;mtouch_sensor.c: 328: return MTOUCH_SENSOR_ERROR_interrupt_notEnabled;
 11240  06D5  30FE               	movlw	254
 11241  06D6  0008               	return
 11242  06D7                     l4577:	
 11243                           
 11244                           ;mtouch_sensor.c: 330: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
 11245  06D7  01B0               	clrf	Sensor_Acq_ExecutePacket@error
 11246                           
 11247                           ;mtouch_sensor.c: 331: uint8_t ADCON0_temp;
 11248                           ;mtouch_sensor.c: 332: uint8_t ADCON1_temp;
 11249                           ;mtouch_sensor.c: 333: uint8_t ADACT_temp;
 11250                           ;mtouch_sensor.c: 336: ADCON0_temp = ADCON0;
 11251  06D8  0021               	movlb	1	; select bank1
 11252  06D9  081D               	movf	29,w	;volatile
 11253  06DA  0020               	movlb	0	; select bank0
 11254  06DB  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11255  06DC  082C               	movf	??_Sensor_Acq_ExecutePacket,w
 11256  06DD  00AD               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
 11257                           
 11258                           ;mtouch_sensor.c: 337: ADCON1_temp = ADCON1;
 11259  06DE  0021               	movlb	1	; select bank1
 11260  06DF  081E               	movf	30,w	;volatile
 11261  06E0  0020               	movlb	0	; select bank0
 11262  06E1  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11263  06E2  082C               	movf	??_Sensor_Acq_ExecutePacket,w
 11264  06E3  00AE               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
 11265                           
 11266                           ;mtouch_sensor.c: 338: ADACT_temp = ADACT;
 11267  06E4  0021               	movlb	1	; select bank1
 11268  06E5  081F               	movf	31,w	;volatile
 11269  06E6  0020               	movlb	0	; select bank0
 11270  06E7  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11271  06E8  082C               	movf	??_Sensor_Acq_ExecutePacket,w
 11272  06E9  00AF               	movwf	Sensor_Acq_ExecutePacket@ADACT_temp
 11273                           
 11274                           ;mtouch_sensor.c: 339: MTOUCH_Sensor_Scan_Initialize();
 11275  06EA  3189  217C  3186   	fcall	_MTOUCH_Sensor_Scan_Initialize
 11276                           
 11277                           ;mtouch_sensor.c: 342: Sensor_setScanFunction(sensor);
 11278  06ED  0020               	movlb	0	; select bank0
 11279  06EE  0831               	movf	Sensor_Acq_ExecutePacket@sensor,w
 11280  06EF  318A  22EA  3186   	fcall	_Sensor_setScanFunction
 11281                           
 11282                           ;mtouch_sensor.c: 344: currentScannSensor = sensor->sensor_name;
 11283  06F2  0020               	movlb	0	; select bank0
 11284  06F3  0831               	movf	Sensor_Acq_ExecutePacket@sensor,w
 11285  06F4  0086               	movwf	6
 11286  06F5  0187               	clrf	7
 11287  06F6  0801               	movf	1,w
 11288  06F7  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11289  06F8  082C               	movf	??_Sensor_Acq_ExecutePacket,w
 11290  06F9  00E1               	movwf	_currentScannSensor
 11291                           
 11292                           ;mtouch_sensor.c: 345: packet_counter = sensor->oversampling;
 11293  06FA  0831               	movf	Sensor_Acq_ExecutePacket@sensor,w
 11294  06FB  0086               	movwf	6
 11295  06FC  0187               	clrf	7
 11296  06FD  3F45               	moviw [5]fsr1
 11297  06FE  00E0               	movwf	_packet_counter
 11298                           
 11299                           ;mtouch_sensor.c: 346: packet_sample = 0;
 11300  06FF  01D4               	clrf	_packet_sample
 11301  0700  01D5               	clrf	_packet_sample+1
 11302                           
 11303                           ;mtouch_sensor.c: 347: sensor_globalFlags.packet_done = 0;
 11304  0701  1062               	bcf	_sensor_globalFlags,0	;volatile
 11305                           
 11306                           ;mtouch_sensor.c: 348: packet_noise = 0;
 11307  0702  01D2               	clrf	_packet_noise
 11308  0703  01D3               	clrf	_packet_noise+1
 11309                           
 11310                           ;mtouch_sensor.c: 350: TMR6_SetInterruptHandler(Sensor_Acq_ExecuteScan);
 11311  0704  30B7               	movlw	low _Sensor_Acq_ExecuteScan
 11312  0705  00AA               	movwf	TMR6_SetInterruptHandler@InterruptHandler
 11313  0706  3002               	movlw	high _Sensor_Acq_ExecuteScan
 11314  0707  00AB               	movwf	TMR6_SetInterruptHandler@InterruptHandler+1
 11315  0708  3189  2185  3186   	fcall	_TMR6_SetInterruptHandler
 11316                           
 11317                           ;mtouch_sensor.c: 351: TMR6_LoadPeriodRegister(sample_period);
 11318  070B  0020               	movlb	0	; select bank0
 11319  070C  0865               	movf	_sample_period,w
 11320  070D  3189  212B  3186   	fcall	_TMR6_LoadPeriodRegister
 11321                           
 11322                           ;mtouch_sensor.c: 352: TMR6_StartTimer();
 11323  0710  3189  2115  3186   	fcall	_TMR6_StartTimer
 11324                           
 11325                           ;mtouch_sensor.c: 354: sensor_globalFlags.interrupted = 0;
 11326  0713  0020               	movlb	0	; select bank0
 11327  0714  10E2               	bcf	_sensor_globalFlags,1	;volatile
 11328  0715                     l405:	
 11329                           ;mtouch_sensor.c: 358: {
 11330                           ;mtouch_sensor.c: 359: while(PIR1bits.ADIF == 0)
 11331                           
 11332                           ;mtouch_sensor.c: 357: do
 11333                           
 11334  0715  1F11               	btfss	17,6	;volatile
 11335                           
 11336                           ;mtouch_sensor.c: 360: {
 11337                           ;mtouch_sensor.c: 361: if(sensor_globalFlags.packet_done == (uint8_t)1)
 11338  0716  1862               	btfsc	_sensor_globalFlags,0	;volatile
 11339  0717  2F19               	goto	l408
 11340  0718  2F15               	goto	l405
 11341  0719                     l408:	
 11342                           ;mtouch_sensor.c: 362: break;
 11343                           
 11344                           
 11345                           ;mtouch_sensor.c: 363: }
 11346                           ;mtouch_sensor.c: 364: PIR1bits.ADIF = 0;
 11347  0719  1311               	bcf	17,6	;volatile
 11348                           
 11349                           ;mtouch_sensor.c: 365: } while(sensor_globalFlags.packet_done == 0);
 11350  071A  1C62               	btfss	_sensor_globalFlags,0	;volatile
 11351  071B  2F15               	goto	l405
 11352                           
 11353                           ;mtouch_sensor.c: 368: TMR6_StopTimer();
 11354  071C  3189  2118  3186   	fcall	_TMR6_StopTimer
 11355                           
 11356                           ;mtouch_sensor.c: 369: ADCON0 = ADCON0_temp;
 11357  071F  0020               	movlb	0	; select bank0
 11358  0720  082D               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
 11359  0721  0021               	movlb	1	; select bank1
 11360  0722  009D               	movwf	29	;volatile
 11361                           
 11362                           ;mtouch_sensor.c: 370: ADCON1 = ADCON1_temp;
 11363  0723  0020               	movlb	0	; select bank0
 11364  0724  082E               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
 11365  0725  0021               	movlb	1	; select bank1
 11366  0726  009E               	movwf	30	;volatile
 11367                           
 11368                           ;mtouch_sensor.c: 371: ADACT = ADACT_temp;
 11369  0727  0020               	movlb	0	; select bank0
 11370  0728  082F               	movf	Sensor_Acq_ExecutePacket@ADACT_temp,w
 11371  0729  0021               	movlb	1	; select bank1
 11372  072A  009F               	movwf	31	;volatile
 11373                           
 11374                           ;mtouch_sensor.c: 373: if(sensor_globalFlags.interrupted)
 11375  072B  0020               	movlb	0	; select bank0
 11376  072C  1CE2               	btfss	_sensor_globalFlags,1	;volatile
 11377  072D  2F32               	goto	l410
 11378                           
 11379                           ;mtouch_sensor.c: 374: {
 11380                           ;mtouch_sensor.c: 375: error = MTOUCH_SENSOR_ERROR_interruptedScan;
 11381  072E  30FA               	movlw	250
 11382  072F  00AC               	movwf	??_Sensor_Acq_ExecutePacket
 11383  0730  082C               	movf	??_Sensor_Acq_ExecutePacket,w
 11384  0731  00B0               	movwf	Sensor_Acq_ExecutePacket@error
 11385  0732                     l410:	
 11386                           
 11387                           ;mtouch_sensor.c: 376: }
 11388                           ;mtouch_sensor.c: 378: return error;
 11389  0732  0830               	movf	Sensor_Acq_ExecutePacket@error,w
 11390  0733  0008               	return
 11391  0734                     __end_of_Sensor_Acq_ExecutePacket:	
 11392                           
 11393                           	psect	text40
 11394  0918                     __ptext40:	
 11395 ;; *************** function _TMR6_StopTimer *****************
 11396 ;; Defined at:
 11397 ;;		line 36 in file "mcc_generated_files/tmr6.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;		None
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;		None
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  1    wreg      void 
 11404 ;; Registers used:
 11405 ;;		None
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;Total ram usage:        0 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:    4
 11418 ;; This function calls:
 11419 ;;		Nothing
 11420 ;; This function is called by:
 11421 ;;		_Sensor_Acq_ExecutePacket
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function _TMR6_StopTimer
 11427  0918                     _TMR6_StopTimer:	
 11428                           
 11429                           ;tmr6.c: 38: T6CONbits.TMR6ON = 0;
 11430                           
 11431                           ;incstack = 0
 11432                           ; Regs used in _TMR6_StopTimer: []
 11433  0918  0028               	movlb	8	; select bank8
 11434  0919  111E               	bcf	30,2	;volatile
 11435  091A  0008               	return
 11436  091B                     __end_of_TMR6_StopTimer:	
 11437                           
 11438                           	psect	text41
 11439  0915                     __ptext41:	
 11440 ;; *************** function _TMR6_StartTimer *****************
 11441 ;; Defined at:
 11442 ;;		line 31 in file "mcc_generated_files/tmr6.c"
 11443 ;; Parameters:    Size  Location     Type
 11444 ;;		None
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;		None
 11447 ;; Return value:  Size  Location     Type
 11448 ;;                  1    wreg      void 
 11449 ;; Registers used:
 11450 ;;		None
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:        0 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    4
 11463 ;; This function calls:
 11464 ;;		Nothing
 11465 ;; This function is called by:
 11466 ;;		_Sensor_Acq_ExecutePacket
 11467 ;;		_main
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _TMR6_StartTimer
 11473  0915                     _TMR6_StartTimer:	
 11474                           
 11475                           ;tmr6.c: 33: T6CONbits.TMR6ON = 1;
 11476                           
 11477                           ;incstack = 0
 11478                           ; Regs used in _TMR6_StartTimer: []
 11479  0915  0028               	movlb	8	; select bank8
 11480  0916  151E               	bsf	30,2	;volatile
 11481  0917  0008               	return
 11482  0918                     __end_of_TMR6_StartTimer:	
 11483                           
 11484                           	psect	text42
 11485  0985                     __ptext42:	
 11486 ;; *************** function _TMR6_SetInterruptHandler *****************
 11487 ;; Defined at:
 11488 ;;		line 70 in file "mcc_generated_files/tmr6.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;  InterruptHan    2   10[BANK0 ] PTR FTN()void 
 11491 ;;		 -> TMR6_DefaultInterruptHandler(1), Sensor_Acq_ExecuteScan(1), 
 11492 ;; Auto vars:     Size  Location     Type
 11493 ;;		None
 11494 ;; Return value:  Size  Location     Type
 11495 ;;                  1    wreg      void 
 11496 ;; Registers used:
 11497 ;;		wreg
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11503 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;Total ram usage:        2 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    4
 11510 ;; This function calls:
 11511 ;;		Nothing
 11512 ;; This function is called by:
 11513 ;;		_Sensor_Acq_ExecutePacket
 11514 ;;		_TMR6_Initialize
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           
 11519                           ;psect for function _TMR6_SetInterruptHandler
 11520  0985                     _TMR6_SetInterruptHandler:	
 11521                           
 11522                           ;tmr6.c: 72: TMR6_InterruptHandler = InterruptHandler;
 11523                           
 11524                           ;incstack = 0
 11525                           ; Regs used in _TMR6_SetInterruptHandler: [wreg]
 11526  0985  0020               	movlb	0	; select bank0
 11527  0986  082B               	movf	TMR6_SetInterruptHandler@InterruptHandler+1,w
 11528  0987  0021               	movlb	1	; select bank1
 11529  0988  00EE               	movwf	(_TMR6_InterruptHandler+1)^(0+128)
 11530  0989  0020               	movlb	0	; select bank0
 11531  098A  082A               	movf	TMR6_SetInterruptHandler@InterruptHandler,w
 11532  098B  0021               	movlb	1	; select bank1
 11533  098C  00ED               	movwf	_TMR6_InterruptHandler^(0+128)
 11534  098D  0008               	return
 11535  098E                     __end_of_TMR6_SetInterruptHandler:	
 11536                           
 11537                           	psect	text43
 11538  092B                     __ptext43:	
 11539 ;; *************** function _TMR6_LoadPeriodRegister *****************
 11540 ;; Defined at:
 11541 ;;		line 51 in file "mcc_generated_files/tmr6.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  periodVal       1    wreg     unsigned char 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;  periodVal       1   10[BANK0 ] unsigned char 
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  1    wreg      void 
 11548 ;; Registers used:
 11549 ;;		wreg
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;Total ram usage:        1 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    4
 11562 ;; This function calls:
 11563 ;;		Nothing
 11564 ;; This function is called by:
 11565 ;;		_Sensor_Acq_ExecutePacket
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           
 11570                           ;psect for function _TMR6_LoadPeriodRegister
 11571  092B                     _TMR6_LoadPeriodRegister:	
 11572                           
 11573                           ;incstack = 0
 11574                           ; Regs used in _TMR6_LoadPeriodRegister: [wreg]
 11575                           ;TMR6_LoadPeriodRegister@periodVal stored from wreg
 11576  092B  0020               	movlb	0	; select bank0
 11577  092C  00AA               	movwf	TMR6_LoadPeriodRegister@periodVal
 11578                           
 11579                           ;tmr6.c: 53: PR6 = periodVal;
 11580  092D  082A               	movf	TMR6_LoadPeriodRegister@periodVal,w
 11581  092E  0028               	movlb	8	; select bank8
 11582  092F  009D               	movwf	29	;volatile
 11583  0930  0008               	return
 11584  0931                     __end_of_TMR6_LoadPeriodRegister:	
 11585                           
 11586                           	psect	text44
 11587  0AEA                     __ptext44:	
 11588 ;; *************** function _Sensor_setScanFunction *****************
 11589 ;; Defined at:
 11590 ;;		line 543 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11591 ;; Parameters:    Size  Location     Type
 11592 ;;  sensor          1    wreg     PTR struct .
 11593 ;;		 -> mtouch_sensor(9), 
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;  sensor          1   10[BANK0 ] PTR struct .
 11596 ;;		 -> mtouch_sensor(9), 
 11597 ;; Return value:  Size  Location     Type
 11598 ;;                  1    wreg      void 
 11599 ;; Registers used:
 11600 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;Total ram usage:        1 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    4
 11613 ;; This function calls:
 11614 ;;		Nothing
 11615 ;; This function is called by:
 11616 ;;		_Sensor_Acq_ExecutePacket
 11617 ;; This function uses a non-reentrant model
 11618 ;;
 11619                           
 11620                           
 11621                           ;psect for function _Sensor_setScanFunction
 11622  0AEA                     _Sensor_setScanFunction:	
 11623                           
 11624                           ;incstack = 0
 11625                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
 11626                           ;Sensor_setScanFunction@sensor stored from wreg
 11627  0AEA  0020               	movlb	0	; select bank0
 11628  0AEB  00AA               	movwf	Sensor_setScanFunction@sensor
 11629                           
 11630                           ;mtouch_sensor.c: 545: Sensor_scanA = sensor->scanA;
 11631  0AEC  0A2A               	incf	Sensor_setScanFunction@sensor,w
 11632  0AED  0086               	movwf	6
 11633  0AEE  0187               	clrf	7
 11634  0AEF  3F40               	moviw [0]fsr1
 11635  0AF0  0021               	movlb	1	; select bank1
 11636  0AF1  00D3               	movwf	_Sensor_scanA^(0+128)
 11637  0AF2  3F41               	moviw [1]fsr1
 11638  0AF3  00D4               	movwf	(_Sensor_scanA+1)^(0+128)
 11639                           
 11640                           ;mtouch_sensor.c: 546: Sensor_scanB = sensor->scanB;
 11641  0AF4  0020               	movlb	0	; select bank0
 11642  0AF5  082A               	movf	Sensor_setScanFunction@sensor,w
 11643  0AF6  3E03               	addlw	3
 11644  0AF7  0086               	movwf	6
 11645  0AF8  0187               	clrf	7
 11646  0AF9  3F40               	moviw [0]fsr1
 11647  0AFA  0021               	movlb	1	; select bank1
 11648  0AFB  00D1               	movwf	_Sensor_scanB^(0+128)
 11649  0AFC  3F41               	moviw [1]fsr1
 11650  0AFD  00D2               	movwf	(_Sensor_scanB+1)^(0+128)
 11651  0AFE  0008               	return
 11652  0AFF                     __end_of_Sensor_setScanFunction:	
 11653                           
 11654                           	psect	text45
 11655  09BE                     __ptext45:	
 11656 ;; *************** function _MTOUCH_Initialize *****************
 11657 ;; Defined at:
 11658 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;		None
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;		None
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;Total ram usage:        0 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    8
 11679 ;; This function calls:
 11680 ;;		_MTOUCH_Button_InitializeAll
 11681 ;;		_MTOUCH_Sensor_InitializeAll
 11682 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 11683 ;;		_MTOUCH_Sensor_Scan_Initialize
 11684 ;; This function is called by:
 11685 ;;		_MTOUCH_Service_Mainloop
 11686 ;;		_SYSTEM_Initialize
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function _MTOUCH_Initialize
 11692  09BE                     _MTOUCH_Initialize:	
 11693                           
 11694                           ;mtouch.c: 83: MTOUCH_Sensor_InitializeAll();
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11698  09BE  318A  221F  3189   	fcall	_MTOUCH_Sensor_InitializeAll
 11699                           
 11700                           ;mtouch.c: 84: MTOUCH_Button_InitializeAll();
 11701  09C1  318B  23AC  3189   	fcall	_MTOUCH_Button_InitializeAll
 11702                           
 11703                           ;mtouch.c: 85: MTOUCH_Sensor_Sampled_ResetAll();
 11704  09C4  318A  22D5  3189   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
 11705                           
 11706                           ;mtouch.c: 86: MTOUCH_Sensor_Scan_Initialize();
 11707  09C7  3189  217C         	fcall	_MTOUCH_Sensor_Scan_Initialize
 11708  09C9  0008               	return
 11709  09CA                     __end_of_MTOUCH_Initialize:	
 11710                           
 11711                           	psect	text46
 11712  097C                     __ptext46:	
 11713 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 11714 ;; Defined at:
 11715 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;		None
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      void 
 11722 ;; Registers used:
 11723 ;;		wreg, status,2, status,0
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        0 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    4
 11736 ;; This function calls:
 11737 ;;		Nothing
 11738 ;; This function is called by:
 11739 ;;		_MTOUCH_Initialize
 11740 ;;		_Sensor_Acq_ExecutePacket
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 11746  097C                     _MTOUCH_Sensor_Scan_Initialize:	
 11747                           
 11748                           ;mtouch_sensor.c: 180: T6CONbits.T6CKPS = 0x0;
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 11752  097C  30FC               	movlw	-4
 11753  097D  0028               	movlb	8	; select bank8
 11754  097E  059E               	andwf	30,f	;volatile
 11755                           
 11756                           ;mtouch_sensor.c: 182: ADCON0 = (uint8_t)0;
 11757  097F  0021               	movlb	1	; select bank1
 11758  0980  019D               	clrf	29	;volatile
 11759                           
 11760                           ;mtouch_sensor.c: 183: ADCON1 = (uint8_t)( 0x1<<7 | 0x2<<4 | 0x0 );
 11761  0981  30A0               	movlw	160
 11762  0982  009E               	movwf	30	;volatile
 11763                           
 11764                           ;mtouch_sensor.c: 184: ADACT = (uint8_t)0;
 11765  0983  019F               	clrf	31	;volatile
 11766  0984  0008               	return
 11767  0985                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 11768                           
 11769                           	psect	text47
 11770  0AD5                     __ptext47:	
 11771 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
 11772 ;; Defined at:
 11773 ;;		line 628 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  sensor          1   12[BANK0 ] PTR struct .
 11778 ;;		 -> mtouch_sensor(9), 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;                  1    wreg      void 
 11781 ;; Registers used:
 11782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;Total ram usage:        2 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    5
 11795 ;; This function calls:
 11796 ;;		_Sensor_Sampled_Reset
 11797 ;; This function is called by:
 11798 ;;		_MTOUCH_Initialize
 11799 ;;		_MTOUCH_Service_Mainloop
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           
 11804                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
 11805  0AD5                     _MTOUCH_Sensor_Sampled_ResetAll:	
 11806                           
 11807                           ;mtouch_sensor.c: 630: mtouch_sensor_t* sensor;
 11808                           ;mtouch_sensor.c: 631: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[(1u)-1];se
      +                          nsor++)
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11812  0AD5  30E4               	movlw	(low (_mtouch_sensor| 0))& (0+255)
 11813  0AD6  0020               	movlb	0	; select bank0
 11814  0AD7  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 11815  0AD8  082B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 11816  0AD9  00AC               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
 11817  0ADA                     L4:	
 11818  0ADA  30E4               	movlw	(low (_mtouch_sensor| 0))& (0+255)
 11819  0ADB  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 11820  0ADC  082C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 11821  0ADD  022B               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 11822  0ADE  1C03               	btfss	3,0
 11823  0ADF  0008               	return
 11824                           
 11825                           ;mtouch_sensor.c: 632: {
 11826                           ;mtouch_sensor.c: 633: Sensor_Sampled_Reset(sensor);
 11827  0AE0  082C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 11828  0AE1  3189  214C  318A   	fcall	_Sensor_Sampled_Reset
 11829  0AE4  3009               	movlw	9
 11830  0AE5  0020               	movlb	0	; select bank0
 11831  0AE6  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 11832  0AE7  082B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 11833  0AE8  07AC               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
 11834  0AE9  2ADA               	goto	L4
 11835  0AEA                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
 11836                           
 11837                           	psect	text48
 11838  0A1F                     __ptext48:	
 11839 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
 11840 ;; Defined at:
 11841 ;;		line 163 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;		None
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;  sensor          1   19[BANK0 ] enum E8046
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      void 
 11848 ;; Registers used:
 11849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;Total ram usage:        2 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    7
 11862 ;; This function calls:
 11863 ;;		_MTOUCH_Sensor_Initialize
 11864 ;; This function is called by:
 11865 ;;		_MTOUCH_Initialize
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           
 11870                           ;psect for function _MTOUCH_Sensor_InitializeAll
 11871  0A1F                     _MTOUCH_Sensor_InitializeAll:	
 11872                           
 11873                           ;mtouch_sensor.c: 165: enum mtouch_sensor_names sensor;
 11874                           ;mtouch_sensor.c: 166: for (sensor = 0; sensor < (1u); sensor++)
 11875                           
 11876                           ;incstack = 0
 11877                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11878  0A1F  0020               	movlb	0	; select bank0
 11879  0A20  01B3               	clrf	MTOUCH_Sensor_InitializeAll@sensor
 11880  0A21                     L5:	
 11881  0A21  0833               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
 11882  0A22  1D03               	btfss	3,2
 11883  0A23  0008               	return
 11884                           
 11885                           ;mtouch_sensor.c: 167: {
 11886                           ;mtouch_sensor.c: 168: MTOUCH_Sensor_Initialize(sensor);
 11887  0A24  0833               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
 11888  0A25  318A  2272  318A   	fcall	_MTOUCH_Sensor_Initialize
 11889  0A28  3001               	movlw	1
 11890  0A29  0020               	movlb	0	; select bank0
 11891  0A2A  00B2               	movwf	??_MTOUCH_Sensor_InitializeAll
 11892  0A2B  0832               	movf	??_MTOUCH_Sensor_InitializeAll,w
 11893  0A2C  07B3               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
 11894  0A2D  2A21               	goto	L5
 11895  0A2E                     __end_of_MTOUCH_Sensor_InitializeAll:	
 11896                           
 11897                           	psect	text49
 11898  0A72                     __ptext49:	
 11899 ;; *************** function _MTOUCH_Sensor_Initialize *****************
 11900 ;; Defined at:
 11901 ;;		line 149 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11902 ;; Parameters:    Size  Location     Type
 11903 ;;  sensor          1    wreg     enum E8046
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;  sensor          1   17[BANK0 ] enum E8046
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  1    wreg      enum E8048
 11908 ;; Registers used:
 11909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;Total ram usage:        2 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    6
 11922 ;; This function calls:
 11923 ;;		_MTOUCH_Sensor_Enable
 11924 ;;		_Sensor_Sampled_Reset
 11925 ;;		___bmul
 11926 ;; This function is called by:
 11927 ;;		_MTOUCH_Sensor_InitializeAll
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _MTOUCH_Sensor_Initialize
 11933  0A72                     _MTOUCH_Sensor_Initialize:	
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11937                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
 11938  0A72  0020               	movlb	0	; select bank0
 11939  0A73  00B1               	movwf	MTOUCH_Sensor_Initialize@sensor
 11940                           
 11941                           ;mtouch_sensor.c: 151: MTOUCH_Sensor_Enable(sensor);
 11942  0A74  0831               	movf	MTOUCH_Sensor_Initialize@sensor,w
 11943  0A75  318A  2260  318A   	fcall	_MTOUCH_Sensor_Enable
 11944                           
 11945                           ;mtouch_sensor.c: 152: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
 11946  0A78  3009               	movlw	9
 11947  0A79  0020               	movlb	0	; select bank0
 11948  0A7A  00B0               	movwf	??_MTOUCH_Sensor_Initialize
 11949  0A7B  0830               	movf	??_MTOUCH_Sensor_Initialize,w
 11950  0A7C  00AA               	movwf	___bmul@multiplicand
 11951  0A7D  0831               	movf	MTOUCH_Sensor_Initialize@sensor,w
 11952  0A7E  318A  224E  318A   	fcall	___bmul
 11953  0A81  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 11954  0A82  3189  214C         	fcall	_Sensor_Sampled_Reset
 11955  0A84  0008               	return
 11956  0A85                     __end_of_MTOUCH_Sensor_Initialize:	
 11957                           ;mtouch_sensor.c: 154: return MTOUCH_SENSOR_ERROR_none;
 11958                           ;	Return value of _MTOUCH_Sensor_Initialize is never used
 11959                           
 11960                           
 11961                           	psect	text50
 11962  094C                     __ptext50:	
 11963 ;; *************** function _Sensor_Sampled_Reset *****************
 11964 ;; Defined at:
 11965 ;;		line 645 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11966 ;; Parameters:    Size  Location     Type
 11967 ;;  sensor          1    wreg     PTR struct .
 11968 ;;		 -> mtouch_sensor(9), 
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  sensor          1   10[BANK0 ] PTR struct .
 11971 ;;		 -> mtouch_sensor(9), 
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  1    wreg      void 
 11974 ;; Registers used:
 11975 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11976 ;; Tracked objects:
 11977 ;;		On entry : 0/0
 11978 ;;		On exit  : 0/0
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;Total ram usage:        1 bytes
 11986 ;; Hardware stack levels used:    1
 11987 ;; Hardware stack levels required when called:    4
 11988 ;; This function calls:
 11989 ;;		Nothing
 11990 ;; This function is called by:
 11991 ;;		_MTOUCH_Sensor_Initialize
 11992 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           
 11997                           ;psect for function _Sensor_Sampled_Reset
 11998  094C                     _Sensor_Sampled_Reset:	
 11999                           
 12000                           ;incstack = 0
 12001                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 12002                           ;Sensor_Sampled_Reset@sensor stored from wreg
 12003  094C  0020               	movlb	0	; select bank0
 12004  094D  00AA               	movwf	Sensor_Sampled_Reset@sensor
 12005                           
 12006                           ;mtouch_sensor.c: 647: sensor->sampled = 0;
 12007  094E  082A               	movf	Sensor_Sampled_Reset@sensor,w
 12008  094F  3E08               	addlw	8
 12009  0950  0086               	movwf	6
 12010  0951  0187               	clrf	7
 12011  0952  1081               	bcf	1,1
 12012  0953  0008               	return
 12013  0954                     __end_of_Sensor_Sampled_Reset:	
 12014                           
 12015                           	psect	text51
 12016  0A60                     __ptext51:	
 12017 ;; *************** function _MTOUCH_Sensor_Enable *****************
 12018 ;; Defined at:
 12019 ;;		line 562 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12020 ;; Parameters:    Size  Location     Type
 12021 ;;  sensor          1    wreg     enum E8046
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;  sensor          1   15[BANK0 ] enum E8046
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  1    wreg      void 
 12026 ;; Registers used:
 12027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;Total ram usage:        2 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    5
 12040 ;; This function calls:
 12041 ;;		___bmul
 12042 ;; This function is called by:
 12043 ;;		_MTOUCH_Sensor_Initialize
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           
 12048                           ;psect for function _MTOUCH_Sensor_Enable
 12049  0A60                     _MTOUCH_Sensor_Enable:	
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12053                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
 12054  0A60  0020               	movlb	0	; select bank0
 12055  0A61  00AF               	movwf	MTOUCH_Sensor_Enable@sensor
 12056                           
 12057                           ;mtouch_sensor.c: 564: if(sensor < (1u))
 12058  0A62  082F               	movf	MTOUCH_Sensor_Enable@sensor,w
 12059  0A63  1D03               	btfss	3,2
 12060  0A64  0008               	return
 12061                           
 12062                           ;mtouch_sensor.c: 565: mtouch_sensor[sensor].enabled = 1;
 12063  0A65  3009               	movlw	9
 12064  0A66  00AE               	movwf	??_MTOUCH_Sensor_Enable
 12065  0A67  082E               	movf	??_MTOUCH_Sensor_Enable,w
 12066  0A68  00AA               	movwf	___bmul@multiplicand
 12067  0A69  082F               	movf	MTOUCH_Sensor_Enable@sensor,w
 12068  0A6A  318A  224E         	fcall	___bmul
 12069  0A6C  3E08               	addlw	8
 12070  0A6D  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 12071  0A6E  0086               	movwf	6
 12072  0A6F  0187               	clrf	7
 12073  0A70  1401               	bsf	1,0
 12074  0A71  0008               	return
 12075  0A72                     __end_of_MTOUCH_Sensor_Enable:	
 12076                           
 12077                           	psect	text52
 12078  0BAC                     __ptext52:	
 12079 ;; *************** function _MTOUCH_Button_InitializeAll *****************
 12080 ;; Defined at:
 12081 ;;		line 158 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;		None
 12084 ;; Auto vars:     Size  Location     Type
 12085 ;;  button          1   14[BANK0 ] enum E7986
 12086 ;; Return value:  Size  Location     Type
 12087 ;;                  1    wreg      void 
 12088 ;; Registers used:
 12089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12090 ;; Tracked objects:
 12091 ;;		On entry : 0/0
 12092 ;;		On exit  : 0/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;Total ram usage:        2 bytes
 12100 ;; Hardware stack levels used:    1
 12101 ;; Hardware stack levels required when called:    6
 12102 ;; This function calls:
 12103 ;;		_MTOUCH_Button_Initialize
 12104 ;; This function is called by:
 12105 ;;		_MTOUCH_Initialize
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           
 12110                           ;psect for function _MTOUCH_Button_InitializeAll
 12111  0BAC                     _MTOUCH_Button_InitializeAll:	
 12112                           
 12113                           ;mtouch_button.c: 160: enum mtouch_button_names button;
 12114                           ;mtouch_button.c: 162: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_b
      +                          utton_init));
 12115                           
 12116                           ;incstack = 0
 12117                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12118  0BAC  30BA               	movlw	low (_mtouch_button| 0)
 12119  0BAD  0086               	movwf	6
 12120  0BAE  0187               	clrf	7
 12121  0BAF  3000               	movlw	low (_mtouch_button_init| (0+32768))
 12122  0BB0  0084               	movwf	4
 12123  0BB1  3090               	movlw	high (_mtouch_button_init| (0+32768))
 12124  0BB2  0085               	movwf	5
 12125  0BB3  3011               	movlw	17
 12126  0BB4  0020               	movlb	0	; select bank0
 12127  0BB5  00AD               	movwf	??_MTOUCH_Button_InitializeAll
 12128  0BB6  082D               	movf	??_MTOUCH_Button_InitializeAll,w
 12129  0BB7  1903               	skipnz
 12130  0BB8  2BBD               	goto	l4871
 12131  0BB9                     u460m0:	
 12132  0BB9  0012               	moviw fsr0++
 12133  0BBA  001E               	movwi fsr1++
 12134  0BBB  0BAD               	decfsz	??_MTOUCH_Button_InitializeAll,f
 12135  0BBC  2BB9               	goto	u460m0
 12136  0BBD                     l4871:	
 12137                           
 12138                           ;mtouch_button.c: 164: for (button = 0; button < 1u; button++)
 12139  0BBD  0020               	movlb	0	; select bank0
 12140  0BBE  01AE               	clrf	MTOUCH_Button_InitializeAll@button
 12141  0BBF                     L6:	
 12142  0BBF  082E               	movf	MTOUCH_Button_InitializeAll@button,w
 12143  0BC0  1D03               	btfss	3,2
 12144  0BC1  0008               	return
 12145                           
 12146                           ;mtouch_button.c: 165: {
 12147                           ;mtouch_button.c: 166: MTOUCH_Button_Initialize(button);
 12148  0BC2  082E               	movf	MTOUCH_Button_InitializeAll@button,w
 12149  0BC3  318C  24FB  318B   	fcall	_MTOUCH_Button_Initialize
 12150  0BC6  3001               	movlw	1
 12151  0BC7  0020               	movlb	0	; select bank0
 12152  0BC8  00AD               	movwf	??_MTOUCH_Button_InitializeAll
 12153  0BC9  082D               	movf	??_MTOUCH_Button_InitializeAll,w
 12154  0BCA  07AE               	addwf	MTOUCH_Button_InitializeAll@button,f
 12155  0BCB  2BBF               	goto	L6
 12156  0BCC                     __end_of_MTOUCH_Button_InitializeAll:	
 12157                           
 12158                           	psect	text53
 12159  0A10                     __ptext53:	
 12160 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 12161 ;; Defined at:
 12162 ;;		line 176 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;		None
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  button          1   32[BANK0 ] enum E7986
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  1    wreg      void 
 12169 ;; Registers used:
 12170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;Total ram usage:        2 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    9
 12183 ;; This function calls:
 12184 ;;		_Button_Service
 12185 ;; This function is called by:
 12186 ;;		_MTOUCH_Service_Mainloop
 12187 ;; This function uses a non-reentrant model
 12188 ;;
 12189                           
 12190                           
 12191                           ;psect for function _MTOUCH_Button_ServiceAll
 12192  0A10                     _MTOUCH_Button_ServiceAll:	
 12193                           
 12194                           ;mtouch_button.c: 178: enum mtouch_button_names button;
 12195                           ;mtouch_button.c: 181: for (button = 0; button < 1u; button++)
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12199  0A10  0020               	movlb	0	; select bank0
 12200  0A11  01C0               	clrf	MTOUCH_Button_ServiceAll@button
 12201  0A12                     L7:	
 12202  0A12  0840               	movf	MTOUCH_Button_ServiceAll@button,w
 12203  0A13  1D03               	btfss	3,2
 12204  0A14  0008               	return
 12205                           
 12206                           ;mtouch_button.c: 182: {
 12207                           ;mtouch_button.c: 183: Button_Service(button);
 12208  0A15  0840               	movf	MTOUCH_Button_ServiceAll@button,w
 12209  0A16  318E  26AD  318A   	fcall	_Button_Service
 12210  0A19  3001               	movlw	1
 12211  0A1A  0020               	movlb	0	; select bank0
 12212  0A1B  00BF               	movwf	??_MTOUCH_Button_ServiceAll
 12213  0A1C  083F               	movf	??_MTOUCH_Button_ServiceAll,w
 12214  0A1D  07C0               	addwf	MTOUCH_Button_ServiceAll@button,f
 12215  0A1E  2A12               	goto	L7
 12216  0A1F                     __end_of_MTOUCH_Button_ServiceAll:	
 12217                           
 12218                           	psect	text54
 12219  0EAD                     __ptext54:	
 12220 ;; *************** function _Button_Service *****************
 12221 ;; Defined at:
 12222 ;;		line 187 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;  name            1    wreg     enum E7986
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  name            1   29[BANK0 ] enum E7986
 12227 ;;  button          1   30[BANK0 ] PTR struct .
 12228 ;;		 -> mtouch_button(17), 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  1    wreg      void 
 12231 ;; Registers used:
 12232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;Total ram usage:        3 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    8
 12245 ;; This function calls:
 12246 ;;		_Button_Deviation_Update
 12247 ;;		_Button_Reading_Update
 12248 ;;		_Button_State_Initializing
 12249 ;;		_Button_State_NotPressed
 12250 ;;		_Button_State_Pressed
 12251 ;;		_MTOUCH_Button_Initialize
 12252 ;;		_MTOUCH_Sensor_isCalibrated
 12253 ;;		_MTOUCH_Sensor_wasSampled
 12254 ;; This function is called by:
 12255 ;;		_MTOUCH_Button_ServiceAll
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           
 12260                           ;psect for function _Button_Service
 12261  0EAD                     _Button_Service:	
 12262                           
 12263                           ;incstack = 0
 12264                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12265                           ;Button_Service@name stored from wreg
 12266  0EAD  0020               	movlb	0	; select bank0
 12267  0EAE  00BD               	movwf	Button_Service@name
 12268                           
 12269                           ;mtouch_button.c: 189: mtouch_button_t* button = &mtouch_button[name];
 12270  0EAF  0E3D               	swapf	Button_Service@name,w
 12271  0EB0  39F0               	andlw	240
 12272  0EB1  073D               	addwf	Button_Service@name,w
 12273  0EB2  3EBA               	addlw	(low (_mtouch_button| 0))& (0+255)
 12274  0EB3  00BC               	movwf	??_Button_Service
 12275  0EB4  083C               	movf	??_Button_Service,w
 12276  0EB5  00BE               	movwf	Button_Service@button
 12277                           
 12278                           ;mtouch_button.c: 191: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
 12279  0EB6  0A3E               	incf	Button_Service@button,w
 12280  0EB7  0086               	movwf	6
 12281  0EB8  0187               	clrf	7
 12282  0EB9  0801               	movf	1,w
 12283  0EBA  318A  22C0  318E   	fcall	_MTOUCH_Sensor_wasSampled
 12284  0EBD  3A00               	xorlw	0
 12285  0EBE  1903               	skipnz
 12286  0EBF  0008               	return
 12287  0EC0  0020               	movlb	0	; select bank0
 12288  0EC1  0A3E               	incf	Button_Service@button,w
 12289  0EC2  0086               	movwf	6
 12290  0EC3  0187               	clrf	7
 12291  0EC4  0801               	movf	1,w
 12292  0EC5  3180  2002  318E   	fcall	_MTOUCH_Sensor_isCalibrated
 12293  0EC8  3A00               	xorlw	0
 12294  0EC9  1903               	skipnz
 12295  0ECA  0008               	return
 12296                           
 12297                           ;mtouch_button.c: 192: {
 12298                           ;mtouch_button.c: 193: Button_Reading_Update(button);
 12299  0ECB  0020               	movlb	0	; select bank0
 12300  0ECC  083E               	movf	Button_Service@button,w
 12301  0ECD  318A  2201  318E   	fcall	_Button_Reading_Update
 12302                           
 12303                           ;mtouch_button.c: 194: Button_Deviation_Update(button);
 12304  0ED0  0020               	movlb	0	; select bank0
 12305  0ED1  083E               	movf	Button_Service@button,w
 12306  0ED2  3185  2530  318E   	fcall	_Button_Deviation_Update
 12307                           
 12308                           ;mtouch_button.c: 196: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
 12309  0ED5  0020               	movlb	0	; select bank0
 12310  0ED6  083E               	movf	Button_Service@button,w
 12311  0ED7  3E02               	addlw	2
 12312  0ED8  0086               	movwf	6
 12313  0ED9  0187               	clrf	7
 12314  0EDA  3003               	movlw	3
 12315  0EDB  0201               	subwf	1,w
 12316  0EDC  1C03               	skipc
 12317  0EDD  2EE5               	goto	l4895
 12318                           
 12319                           ;mtouch_button.c: 197: {
 12320                           ;mtouch_button.c: 198: MTOUCH_Button_Initialize(button->name);
 12321  0EDE  083E               	movf	Button_Service@button,w
 12322  0EDF  0086               	movwf	6
 12323  0EE0  0187               	clrf	7
 12324  0EE1  0801               	movf	1,w
 12325  0EE2  318C  24FB  318E   	fcall	_MTOUCH_Button_Initialize
 12326  0EE5                     l4895:	
 12327                           
 12328                           ;mtouch_button.c: 199: }
 12329                           ;mtouch_button.c: 200: Button_StateMachine[(uint8_t)button->state](button);
 12330  0EE5  0020               	movlb	0	; select bank0
 12331  0EE6  083E               	movf	Button_Service@button,w
 12332  0EE7  00BC               	movwf	??_Button_Service
 12333  0EE8  083C               	movf	??_Button_Service,w
 12334  0EE9  00B7               	movwf	Button_State_Pressed@button
 12335  0EEA  083E               	movf	Button_Service@button,w
 12336  0EEB  3E02               	addlw	2
 12337  0EEC  0086               	movwf	6
 12338  0EED  0187               	clrf	7
 12339  0EEE  3501               	lslf	1,w
 12340  0EEF  3ECB               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 12341  0EF0  0086               	movwf	6
 12342  0EF1  0187               	clrf	7
 12343  0EF2  3F41               	moviw [1]fsr1
 12344  0EF3  008A               	movwf	10
 12345  0EF4  3F40               	moviw [0]fsr1
 12346  0EF5  000A               	callw
 12347  0EF6  318E               	pagesel	$
 12348  0EF7  0008               	return
 12349  0EF8                     __end_of_Button_Service:	
 12350                           
 12351                           	psect	text55
 12352  0AC0                     __ptext55:	
 12353 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 12354 ;; Defined at:
 12355 ;;		line 637 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12356 ;; Parameters:    Size  Location     Type
 12357 ;;  sensor          1    wreg     enum E8046
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;  sensor          1   15[BANK0 ] enum E8046
 12360 ;; Return value:  Size  Location     Type
 12361 ;;                  1    wreg      unsigned char 
 12362 ;; Registers used:
 12363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;Total ram usage:        2 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:    5
 12376 ;; This function calls:
 12377 ;;		___bmul
 12378 ;; This function is called by:
 12379 ;;		_Button_Service
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383                           
 12384                           ;psect for function _MTOUCH_Sensor_wasSampled
 12385  0AC0                     _MTOUCH_Sensor_wasSampled:	
 12386                           
 12387                           ;incstack = 0
 12388                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12389                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 12390  0AC0  0020               	movlb	0	; select bank0
 12391  0AC1  00AF               	movwf	MTOUCH_Sensor_wasSampled@sensor
 12392                           
 12393                           ;mtouch_sensor.c: 639: if(sensor < (1u))
 12394  0AC2  082F               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 12395  0AC3  1D03               	btfss	3,2
 12396  0AC4  2AD3               	goto	l4735
 12397                           
 12398                           ;mtouch_sensor.c: 640: return (bool)mtouch_sensor[sensor].sampled;
 12399  0AC5  3009               	movlw	9
 12400  0AC6  00AE               	movwf	??_MTOUCH_Sensor_wasSampled
 12401  0AC7  082E               	movf	??_MTOUCH_Sensor_wasSampled,w
 12402  0AC8  00AA               	movwf	___bmul@multiplicand
 12403  0AC9  082F               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 12404  0ACA  318A  224E         	fcall	___bmul
 12405  0ACC  3E08               	addlw	8
 12406  0ACD  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 12407  0ACE  0086               	movwf	6
 12408  0ACF  0187               	clrf	7
 12409  0AD0  0C01               	rrf	1,w
 12410  0AD1  3901               	andlw	1
 12411  0AD2  0008               	return
 12412  0AD3                     l4735:	
 12413                           
 12414                           ;mtouch_sensor.c: 641: else
 12415                           ;mtouch_sensor.c: 642: return 0;
 12416  0AD3  3000               	movlw	0
 12417  0AD4  0008               	return
 12418  0AD5                     __end_of_MTOUCH_Sensor_wasSampled:	
 12419                           
 12420                           	psect	text56
 12421  0002                     __ptext56:	
 12422 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 12423 ;; Defined at:
 12424 ;;		line 610 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;  sensor          1    wreg     enum E8046
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  sensor          1    0[COMMON] enum E8046
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      unsigned char 
 12431 ;; Registers used:
 12432 ;;		wreg
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;Total ram usage:        0 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    4
 12445 ;; This function calls:
 12446 ;;		Nothing
 12447 ;; This function is called by:
 12448 ;;		_Button_Service
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           
 12453                           ;psect for function _MTOUCH_Sensor_isCalibrated
 12454  0002                     _MTOUCH_Sensor_isCalibrated:	
 12455                           
 12456                           ;mtouch_sensor.c: 613: return 1;
 12457                           
 12458                           ;incstack = 0
 12459                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
 12460  0002  3001               	movlw	1
 12461  0003  0008               	return
 12462  0004                     __end_of_MTOUCH_Sensor_isCalibrated:	
 12463                           
 12464                           	psect	text57
 12465  049A                     __ptext57:	
 12466 ;; *************** function _Button_State_NotPressed *****************
 12467 ;; Defined at:
 12468 ;;		line 224 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  button          1   23[BANK0 ] PTR struct .
 12471 ;;		 -> mtouch_button(17), 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;Total ram usage:        3 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    6
 12490 ;; This function calls:
 12491 ;;		_Button_Baseline_Update
 12492 ;;		_Button_DefaultCallback
 12493 ;;		_MTOUCH_Button_Initialize
 12494 ;; This function is called by:
 12495 ;;		_Button_Service
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           
 12500                           ;psect for function _Button_State_NotPressed
 12501  049A                     _Button_State_NotPressed:	
 12502                           
 12503                           ;mtouch_button.c: 227: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
 12504                           
 12505                           ;incstack = 0
 12506                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12507  049A  0020               	movlb	0	; select bank0
 12508  049B  0837               	movf	Button_State_NotPressed@button,w
 12509  049C  3E09               	addlw	9
 12510  049D  0086               	movwf	6
 12511  049E  0187               	clrf	7
 12512  049F  0801               	movf	1,w
 12513  04A0  3A80               	xorlw	128
 12514  04A1  00B8               	movwf	??_Button_State_NotPressed
 12515  04A2  0837               	movf	Button_State_NotPressed@button,w
 12516  04A3  3E0E               	addlw	14
 12517  04A4  0086               	movwf	6
 12518  04A5  0187               	clrf	7
 12519  04A6  0301               	decf	1,w
 12520  04A7  3AFF               	xorlw	255
 12521  04A8  3A80               	xorlw	128
 12522  04A9  02B8               	subwf	??_Button_State_NotPressed,f
 12523  04AA  1803               	skipnc
 12524  04AB  2CD3               	goto	l4785
 12525                           
 12526                           ;mtouch_button.c: 228: {
 12527                           ;mtouch_button.c: 229: (button->counter)++;
 12528  04AC  0837               	movf	Button_State_NotPressed@button,w
 12529  04AD  3E0A               	addlw	10
 12530  04AE  0086               	movwf	6
 12531  04AF  0187               	clrf	7
 12532  04B0  3001               	movlw	1
 12533  04B1  0781               	addwf	1,f
 12534  04B2  3141               	addfsr 1,1
 12535  04B3  1803               	skipnc
 12536  04B4  0A81               	incf	1,f
 12537                           
 12538                           ;mtouch_button.c: 230: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64u))
 12539  04B5  0837               	movf	Button_State_NotPressed@button,w
 12540  04B6  3E0A               	addlw	10
 12541  04B7  0086               	movwf	6
 12542  04B8  0187               	clrf	7
 12543  04B9  3F40               	moviw [0]fsr1
 12544  04BA  00B8               	movwf	??_Button_State_NotPressed
 12545  04BB  3F41               	moviw [1]fsr1
 12546  04BC  00B9               	movwf	??_Button_State_NotPressed+1
 12547  04BD  3000               	movlw	0
 12548  04BE  0239               	subwf	??_Button_State_NotPressed+1,w
 12549  04BF  3041               	movlw	65
 12550  04C0  1903               	skipnz
 12551  04C1  0238               	subwf	??_Button_State_NotPressed,w
 12552  04C2  1C03               	skipc
 12553  04C3  2D10               	goto	l79
 12554                           
 12555                           ;mtouch_button.c: 231: {
 12556                           ;mtouch_button.c: 232: button->counter = (mtouch_button_statecounter_t)0;
 12557  04C4  0837               	movf	Button_State_NotPressed@button,w
 12558  04C5  3E0A               	addlw	10
 12559  04C6  0086               	movwf	6
 12560  04C7  0187               	clrf	7
 12561  04C8  3000               	movlw	0
 12562  04C9  3FC0               	movwi [0]fsr1
 12563  04CA  3FC1               	movwi [1]fsr1
 12564                           
 12565                           ;mtouch_button.c: 233: MTOUCH_Button_Initialize(button->name);
 12566  04CB  0837               	movf	Button_State_NotPressed@button,w
 12567  04CC  0086               	movwf	6
 12568  04CD  0187               	clrf	7
 12569  04CE  0801               	movf	1,w
 12570  04CF  318C  24FB  3184   	fcall	_MTOUCH_Button_Initialize
 12571                           
 12572                           ;mtouch_button.c: 234: }
 12573                           ;mtouch_button.c: 235: }
 12574  04D2  2D10               	goto	l79
 12575  04D3                     l4785:	
 12576                           
 12577                           ;mtouch_button.c: 237: else if ((button->deviation) > (button->threshold))
 12578  04D3  0020               	movlb	0	; select bank0
 12579  04D4  0837               	movf	Button_State_NotPressed@button,w
 12580  04D5  3E09               	addlw	9
 12581  04D6  0086               	movwf	6
 12582  04D7  0187               	clrf	7
 12583  04D8  0801               	movf	1,w
 12584  04D9  00B8               	movwf	??_Button_State_NotPressed
 12585  04DA  01B9               	clrf	??_Button_State_NotPressed+1
 12586  04DB  1BB8               	btfsc	??_Button_State_NotPressed,7
 12587  04DC  03B9               	decf	??_Button_State_NotPressed+1,f
 12588  04DD  0837               	movf	Button_State_NotPressed@button,w
 12589  04DE  3E0E               	addlw	14
 12590  04DF  0086               	movwf	6
 12591  04E0  0187               	clrf	7
 12592  04E1  0839               	movf	??_Button_State_NotPressed+1,w
 12593  04E2  3A80               	xorlw	128
 12594  04E3  3C80               	sublw	128
 12595  04E4  1D03               	skipz
 12596  04E5  2CE8               	goto	u4475
 12597  04E6  0838               	movf	??_Button_State_NotPressed,w
 12598  04E7  0201               	subwf	1,w
 12599  04E8                     u4475:	
 12600  04E8  1803               	skipnc
 12601  04E9  2D08               	goto	l4791
 12602                           
 12603                           ;mtouch_button.c: 238: {
 12604                           ;mtouch_button.c: 240: button->state = MTOUCH_BUTTON_STATE_pressed;
 12605  04EA  3002               	movlw	2
 12606  04EB  0020               	movlb	0	; select bank0
 12607  04EC  00B8               	movwf	??_Button_State_NotPressed
 12608  04ED  0837               	movf	Button_State_NotPressed@button,w
 12609  04EE  3E02               	addlw	2
 12610  04EF  0086               	movwf	6
 12611  04F0  0187               	clrf	7
 12612  04F1  0838               	movf	??_Button_State_NotPressed,w
 12613  04F2  0081               	movwf	1
 12614                           
 12615                           ;mtouch_button.c: 241: button->counter = (mtouch_button_statecounter_t)0;
 12616  04F3  0837               	movf	Button_State_NotPressed@button,w
 12617  04F4  3E0A               	addlw	10
 12618  04F5  0086               	movwf	6
 12619  04F6  0187               	clrf	7
 12620  04F7  3000               	movlw	0
 12621  04F8  3FC0               	movwi [0]fsr1
 12622  04F9  3FC1               	movwi [1]fsr1
 12623                           
 12624                           ;mtouch_button.c: 242: callback_pressed(button->name);
 12625  04FA  0837               	movf	Button_State_NotPressed@button,w
 12626  04FB  0086               	movwf	6
 12627  04FC  0187               	clrf	7
 12628  04FD  0801               	movf	1,w
 12629  04FE  00B8               	movwf	??_Button_State_NotPressed
 12630  04FF  0838               	movf	??_Button_State_NotPressed,w
 12631  0500  00AA               	movwf	Button_DefaultCallback@button
 12632  0501  0021               	movlb	1	; select bank1
 12633  0502  085A               	movf	(_callback_pressed+1)^(0+128),w
 12634  0503  008A               	movwf	10
 12635  0504  0859               	movf	_callback_pressed^(0+128),w
 12636  0505  000A               	callw
 12637  0506  3184               	pagesel	$
 12638                           
 12639                           ;mtouch_button.c: 243: }
 12640  0507  2D10               	goto	l79
 12641  0508                     l4791:	
 12642                           
 12643                           ;mtouch_button.c: 244: else
 12644                           ;mtouch_button.c: 245: {
 12645                           ;mtouch_button.c: 247: button->counter = (mtouch_button_statecounter_t)0;
 12646  0508  0020               	movlb	0	; select bank0
 12647  0509  0837               	movf	Button_State_NotPressed@button,w
 12648  050A  3E0A               	addlw	10
 12649  050B  0086               	movwf	6
 12650  050C  0187               	clrf	7
 12651  050D  3000               	movlw	0
 12652  050E  3FC0               	movwi [0]fsr1
 12653  050F  3FC1               	movwi [1]fsr1
 12654  0510                     l79:	
 12655                           
 12656                           ;mtouch_button.c: 248: }
 12657                           ;mtouch_button.c: 252: (button->baseline_count)++;
 12658  0510  0020               	movlb	0	; select bank0
 12659  0511  0837               	movf	Button_State_NotPressed@button,w
 12660  0512  3E0C               	addlw	12
 12661  0513  0086               	movwf	6
 12662  0514  0187               	clrf	7
 12663  0515  3001               	movlw	1
 12664  0516  0781               	addwf	1,f
 12665  0517  3141               	addfsr 1,1
 12666  0518  1803               	skipnc
 12667  0519  0A81               	incf	1,f
 12668                           
 12669                           ;mtouch_button.c: 253: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64u))
 12670  051A  0837               	movf	Button_State_NotPressed@button,w
 12671  051B  3E0C               	addlw	12
 12672  051C  0086               	movwf	6
 12673  051D  0187               	clrf	7
 12674  051E  0016               	moviw fsr1++
 12675  051F  3A40               	xorlw	64
 12676  0520  00B8               	movwf	??_Button_State_NotPressed
 12677  0521  0016               	moviw fsr1++
 12678  0522  04B8               	iorwf	??_Button_State_NotPressed,f
 12679  0523  1D03               	btfss	3,2
 12680  0524  0008               	return
 12681                           
 12682                           ;mtouch_button.c: 254: {
 12683                           ;mtouch_button.c: 255: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 12684  0525  0837               	movf	Button_State_NotPressed@button,w
 12685  0526  3E0C               	addlw	12
 12686  0527  0086               	movwf	6
 12687  0528  0187               	clrf	7
 12688  0529  3000               	movlw	0
 12689  052A  3FC0               	movwi [0]fsr1
 12690  052B  3FC1               	movwi [1]fsr1
 12691                           
 12692                           ;mtouch_button.c: 256: Button_Baseline_Update(button);
 12693  052C  0837               	movf	Button_State_NotPressed@button,w
 12694  052D  3185  25BE         	fcall	_Button_Baseline_Update
 12695  052F  0008               	return
 12696  0530                     __end_of_Button_State_NotPressed:	
 12697                           
 12698                           	psect	text58
 12699  07A0                     __ptext58:	
 12700 ;; *************** function _Button_State_Initializing *****************
 12701 ;; Defined at:
 12702 ;;		line 204 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12703 ;; Parameters:    Size  Location     Type
 12704 ;;  button          1   23[BANK0 ] PTR struct .
 12705 ;;		 -> mtouch_button(17), 
 12706 ;; Auto vars:     Size  Location     Type
 12707 ;;		None
 12708 ;; Return value:  Size  Location     Type
 12709 ;;                  1    wreg      void 
 12710 ;; Registers used:
 12711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12712 ;; Tracked objects:
 12713 ;;		On entry : 0/0
 12714 ;;		On exit  : 0/0
 12715 ;;		Unchanged: 0/0
 12716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12717 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;Total ram usage:        5 bytes
 12722 ;; Hardware stack levels used:    1
 12723 ;; Hardware stack levels required when called:    7
 12724 ;; This function calls:
 12725 ;;		_Button_Baseline_Initialize
 12726 ;;		_Button_Baseline_Update
 12727 ;; This function is called by:
 12728 ;;		_Button_Service
 12729 ;; This function uses a non-reentrant model
 12730 ;;
 12731                           
 12732                           
 12733                           ;psect for function _Button_State_Initializing
 12734  07A0                     _Button_State_Initializing:	
 12735                           
 12736                           ;mtouch_button.c: 207: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16u)/2)
 12737                           
 12738                           ;incstack = 0
 12739                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12740  07A0  0020               	movlb	0	; select bank0
 12741  07A1  0837               	movf	Button_State_Initializing@button,w
 12742  07A2  3E0A               	addlw	10
 12743  07A3  0086               	movwf	6
 12744  07A4  0187               	clrf	7
 12745  07A5  3F40               	moviw [0]fsr1
 12746  07A6  00B8               	movwf	??_Button_State_Initializing
 12747  07A7  3F41               	moviw [1]fsr1
 12748  07A8  00B9               	movwf	??_Button_State_Initializing+1
 12749  07A9  3000               	movlw	0
 12750  07AA  0239               	subwf	??_Button_State_Initializing+1,w
 12751  07AB  3009               	movlw	9
 12752  07AC  1903               	skipnz
 12753  07AD  0238               	subwf	??_Button_State_Initializing,w
 12754  07AE  1803               	skipnc
 12755  07AF  2FB5               	goto	l4769
 12756                           
 12757                           ;mtouch_button.c: 208: {
 12758                           ;mtouch_button.c: 209: Button_Baseline_Initialize(button);
 12759  07B0  0837               	movf	Button_State_Initializing@button,w
 12760  07B1  318C  24CF  3187   	fcall	_Button_Baseline_Initialize
 12761                           
 12762                           ;mtouch_button.c: 210: } else {
 12763  07B4  2FBA               	goto	l4771
 12764  07B5                     l4769:	
 12765                           
 12766                           ;mtouch_button.c: 211: Button_Baseline_Update(button);
 12767  07B5  0020               	movlb	0	; select bank0
 12768  07B6  0837               	movf	Button_State_Initializing@button,w
 12769  07B7  3185  25BE  3187   	fcall	_Button_Baseline_Update
 12770  07BA                     l4771:	
 12771                           
 12772                           ;mtouch_button.c: 212: }
 12773                           ;mtouch_button.c: 215: (button->counter)++;
 12774  07BA  0020               	movlb	0	; select bank0
 12775  07BB  0837               	movf	Button_State_Initializing@button,w
 12776  07BC  3E0A               	addlw	10
 12777  07BD  0086               	movwf	6
 12778  07BE  0187               	clrf	7
 12779  07BF  3001               	movlw	1
 12780  07C0  0781               	addwf	1,f
 12781  07C1  3141               	addfsr 1,1
 12782  07C2  1803               	skipnc
 12783  07C3  0A81               	incf	1,f
 12784                           
 12785                           ;mtouch_button.c: 216: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16u))
 12786  07C4  0837               	movf	Button_State_Initializing@button,w
 12787  07C5  3E0A               	addlw	10
 12788  07C6  0086               	movwf	6
 12789  07C7  0187               	clrf	7
 12790  07C8  3F40               	moviw [0]fsr1
 12791  07C9  00B8               	movwf	??_Button_State_Initializing
 12792  07CA  3F41               	moviw [1]fsr1
 12793  07CB  00B9               	movwf	??_Button_State_Initializing+1
 12794  07CC  3000               	movlw	0
 12795  07CD  0239               	subwf	??_Button_State_Initializing+1,w
 12796  07CE  3010               	movlw	16
 12797  07CF  1903               	skipnz
 12798  07D0  0238               	subwf	??_Button_State_Initializing,w
 12799  07D1  1C03               	skipc
 12800  07D2  0008               	return
 12801                           
 12802                           ;mtouch_button.c: 217: {
 12803                           ;mtouch_button.c: 218: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4u));
 12804  07D3  0837               	movf	Button_State_Initializing@button,w
 12805  07D4  3E05               	addlw	5
 12806  07D5  0086               	movwf	6
 12807  07D6  0187               	clrf	7
 12808  07D7  3F40               	moviw [0]fsr1
 12809  07D8  00B8               	movwf	??_Button_State_Initializing
 12810  07D9  3F41               	moviw [1]fsr1
 12811  07DA  00B9               	movwf	??_Button_State_Initializing+1
 12812  07DB  3F42               	moviw [2]fsr1
 12813  07DC  00BA               	movwf	??_Button_State_Initializing+2
 12814  07DD  3F43               	moviw [3]fsr1
 12815  07DE  00BB               	movwf	??_Button_State_Initializing+3
 12816  07DF  3004               	movlw	4
 12817  07E0                     u4445:	
 12818  07E0  36BB               	lsrf	??_Button_State_Initializing+3,f
 12819  07E1  0CBA               	rrf	??_Button_State_Initializing+2,f
 12820  07E2  0CB9               	rrf	??_Button_State_Initializing+1,f
 12821  07E3  0CB8               	rrf	??_Button_State_Initializing,f
 12822  07E4  0B89               	decfsz	9,f
 12823  07E5  2FE0               	goto	u4445
 12824  07E6  0837               	movf	Button_State_Initializing@button,w
 12825  07E7  3E03               	addlw	3
 12826  07E8  0086               	movwf	6
 12827  07E9  0187               	clrf	7
 12828  07EA  0838               	movf	??_Button_State_Initializing,w
 12829  07EB  3FC0               	movwi [0]fsr1
 12830  07EC  0839               	movf	??_Button_State_Initializing+1,w
 12831  07ED  3FC1               	movwi [1]fsr1
 12832                           
 12833                           ;mtouch_button.c: 219: button->state = MTOUCH_BUTTON_STATE_notPressed;
 12834  07EE  0837               	movf	Button_State_Initializing@button,w
 12835  07EF  3E02               	addlw	2
 12836  07F0  0086               	movwf	6
 12837  07F1  0187               	clrf	7
 12838  07F2  0181               	clrf	1
 12839  07F3  0A81               	incf	1,f
 12840                           
 12841                           ;mtouch_button.c: 220: button->counter = (mtouch_button_statecounter_t)0;
 12842  07F4  0837               	movf	Button_State_Initializing@button,w
 12843  07F5  3E0A               	addlw	10
 12844  07F6  0086               	movwf	6
 12845  07F7  0187               	clrf	7
 12846  07F8  3000               	movlw	0
 12847  07F9  3FC0               	movwi [0]fsr1
 12848  07FA  3FC1               	movwi [1]fsr1
 12849  07FB  0008               	return
 12850  07FC                     __end_of_Button_State_Initializing:	
 12851                           
 12852                           	psect	text59
 12853  0734                     __ptext59:	
 12854 ;; *************** function _Button_State_Pressed *****************
 12855 ;; Defined at:
 12856 ;;		line 260 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;  button          1   23[BANK0 ] PTR struct .
 12859 ;;		 -> mtouch_button(17), 
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;		None
 12862 ;; Return value:  Size  Location     Type
 12863 ;;                  1    wreg      void 
 12864 ;; Registers used:
 12865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;Total ram usage:        3 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:    6
 12878 ;; This function calls:
 12879 ;;		_Button_DefaultCallback
 12880 ;;		_MTOUCH_Button_Initialize
 12881 ;; This function is called by:
 12882 ;;		_Button_Service
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           
 12887                           ;psect for function _Button_State_Pressed
 12888  0734                     _Button_State_Pressed:	
 12889                           
 12890                           ;mtouch_button.c: 263: if ((button->counter) >= ((mtouch_button_statecounter_t)1000u))
 12891                           
 12892                           ;incstack = 0
 12893                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12894  0734  0020               	movlb	0	; select bank0
 12895  0735  0837               	movf	Button_State_Pressed@button,w
 12896  0736  3E0A               	addlw	10
 12897  0737  0086               	movwf	6
 12898  0738  0187               	clrf	7
 12899  0739  3F40               	moviw [0]fsr1
 12900  073A  00B8               	movwf	??_Button_State_Pressed
 12901  073B  3F41               	moviw [1]fsr1
 12902  073C  00B9               	movwf	??_Button_State_Pressed+1
 12903  073D  3003               	movlw	3
 12904  073E  0239               	subwf	??_Button_State_Pressed+1,w
 12905  073F  30E8               	movlw	232
 12906  0740  1903               	skipnz
 12907  0741  0238               	subwf	??_Button_State_Pressed,w
 12908  0742  1C03               	skipc
 12909  0743  2F5A               	goto	l4801
 12910                           
 12911                           ;mtouch_button.c: 264: {
 12912                           ;mtouch_button.c: 265: MTOUCH_Button_Initialize(button->name);
 12913  0744  0837               	movf	Button_State_Pressed@button,w
 12914  0745  0086               	movwf	6
 12915  0746  0187               	clrf	7
 12916  0747  0801               	movf	1,w
 12917  0748  318C  24FB  3187   	fcall	_MTOUCH_Button_Initialize
 12918                           
 12919                           ;mtouch_button.c: 266: callback_notPressed(button->name);
 12920  074B  0020               	movlb	0	; select bank0
 12921  074C  0837               	movf	Button_State_Pressed@button,w
 12922  074D  0086               	movwf	6
 12923  074E  0187               	clrf	7
 12924  074F  0801               	movf	1,w
 12925  0750  00B8               	movwf	??_Button_State_Pressed
 12926  0751  0838               	movf	??_Button_State_Pressed,w
 12927  0752  00AA               	movwf	Button_DefaultCallback@button
 12928  0753  0021               	movlb	1	; select bank1
 12929  0754  0858               	movf	(_callback_notPressed+1)^(0+128),w
 12930  0755  008A               	movwf	10
 12931  0756  0857               	movf	_callback_notPressed^(0+128),w
 12932  0757  000A               	callw
 12933  0758  3187               	pagesel	$
 12934                           
 12935                           ;mtouch_button.c: 267: }
 12936  0759  0008               	return
 12937  075A                     l4801:	
 12938                           
 12939                           ;mtouch_button.c: 270: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)-((button->threshold) >> button->hysteresis)))
 12940  075A  0020               	movlb	0	; select bank0
 12941  075B  0837               	movf	Button_State_Pressed@button,w
 12942  075C  3E09               	addlw	9
 12943  075D  0086               	movwf	6
 12944  075E  0187               	clrf	7
 12945  075F  0801               	movf	1,w
 12946  0760  3A80               	xorlw	128
 12947  0761  00B8               	movwf	??_Button_State_Pressed
 12948  0762  0837               	movf	Button_State_Pressed@button,w
 12949  0763  3E0E               	addlw	14
 12950  0764  0086               	movwf	6
 12951  0765  0187               	clrf	7
 12952  0766  0837               	movf	Button_State_Pressed@button,w
 12953  0767  3E0E               	addlw	14
 12954  0768  0084               	movwf	4
 12955  0769  0185               	clrf	5
 12956  076A  0800               	movf	0,w
 12957  076B  00B9               	movwf	??_Button_State_Pressed+1
 12958  076C  0837               	movf	Button_State_Pressed@button,w
 12959  076D  3E10               	addlw	16
 12960  076E  0084               	movwf	4
 12961  076F  0185               	clrf	5
 12962  0770  0A00               	incf	0,w
 12963  0771  2F73               	goto	u4504
 12964  0772                     u4505:	
 12965  0772  36B9               	lsrf	??_Button_State_Pressed+1,f
 12966  0773                     u4504:	
 12967  0773  0B89               	decfsz	9,f
 12968  0774  2F72               	goto	u4505
 12969  0775  0839               	movf	??_Button_State_Pressed+1,w
 12970  0776  3AFF               	xorlw	255
 12971  0777  3E01               	addlw	1
 12972  0778  0701               	addwf	1,w
 12973  0779  3A80               	xorlw	128
 12974  077A  02B8               	subwf	??_Button_State_Pressed,f
 12975  077B  1803               	skipnc
 12976  077C  0008               	return
 12977                           
 12978                           ;mtouch_button.c: 271: {
 12979                           ;mtouch_button.c: 272: button->state = MTOUCH_BUTTON_STATE_notPressed;
 12980  077D  0837               	movf	Button_State_Pressed@button,w
 12981  077E  3E02               	addlw	2
 12982  077F  0086               	movwf	6
 12983  0780  0187               	clrf	7
 12984  0781  0181               	clrf	1
 12985  0782  0A81               	incf	1,f
 12986                           
 12987                           ;mtouch_button.c: 273: button->counter = (mtouch_button_statecounter_t)0;
 12988  0783  0837               	movf	Button_State_Pressed@button,w
 12989  0784  3E0A               	addlw	10
 12990  0785  0086               	movwf	6
 12991  0786  0187               	clrf	7
 12992  0787  3000               	movlw	0
 12993  0788  3FC0               	movwi [0]fsr1
 12994  0789  3FC1               	movwi [1]fsr1
 12995                           
 12996                           ;mtouch_button.c: 274: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024u);
 12997  078A  0837               	movf	Button_State_Pressed@button,w
 12998  078B  3E0C               	addlw	12
 12999  078C  0086               	movwf	6
 13000  078D  0187               	clrf	7
 13001  078E  30FF               	movlw	255
 13002  078F  3FC0               	movwi [0]fsr1
 13003  0790  30FB               	movlw	251
 13004  0791  3FC1               	movwi [1]fsr1
 13005                           
 13006                           ;mtouch_button.c: 275: callback_notPressed(button->name);
 13007  0792  0837               	movf	Button_State_Pressed@button,w
 13008  0793  0086               	movwf	6
 13009  0794  0187               	clrf	7
 13010  0795  0801               	movf	1,w
 13011  0796  00B8               	movwf	??_Button_State_Pressed
 13012  0797  0838               	movf	??_Button_State_Pressed,w
 13013  0798  00AA               	movwf	Button_DefaultCallback@button
 13014  0799  0021               	movlb	1	; select bank1
 13015  079A  0858               	movf	(_callback_notPressed+1)^(0+128),w
 13016  079B  008A               	movwf	10
 13017  079C  0857               	movf	_callback_notPressed^(0+128),w
 13018  079D  000A               	callw
 13019  079E  3187               	pagesel	$
 13020  079F  0008               	return
 13021  07A0                     __end_of_Button_State_Pressed:	
 13022                           
 13023                           	psect	text60
 13024  0CFB                     __ptext60:	
 13025 ;; *************** function _MTOUCH_Button_Initialize *****************
 13026 ;; Defined at:
 13027 ;;		line 146 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;  name            1    wreg     enum E7986
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;  name            1   11[BANK0 ] enum E7986
 13032 ;;  button          1   12[BANK0 ] PTR struct .
 13033 ;;		 -> mtouch_button(17), 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      void 
 13036 ;; Registers used:
 13037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        3 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    5
 13050 ;; This function calls:
 13051 ;;		_MTOUCH_Sensor_Calibrate
 13052 ;; This function is called by:
 13053 ;;		_MTOUCH_Button_InitializeAll
 13054 ;;		_Button_Service
 13055 ;;		_Button_State_NotPressed
 13056 ;;		_Button_State_Pressed
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           
 13061                           ;psect for function _MTOUCH_Button_Initialize
 13062  0CFB                     _MTOUCH_Button_Initialize:	
 13063                           
 13064                           ;incstack = 0
 13065                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13066                           ;MTOUCH_Button_Initialize@name stored from wreg
 13067  0CFB  0020               	movlb	0	; select bank0
 13068  0CFC  00AB               	movwf	MTOUCH_Button_Initialize@name
 13069                           
 13070                           ;mtouch_button.c: 148: mtouch_button_t* button = &mtouch_button[name];
 13071  0CFD  0E2B               	swapf	MTOUCH_Button_Initialize@name,w
 13072  0CFE  39F0               	andlw	240
 13073  0CFF  072B               	addwf	MTOUCH_Button_Initialize@name,w
 13074  0D00  3EBA               	addlw	(low (_mtouch_button| 0))& (0+255)
 13075  0D01  00AA               	movwf	??_MTOUCH_Button_Initialize
 13076  0D02  082A               	movf	??_MTOUCH_Button_Initialize,w
 13077  0D03  00AC               	movwf	MTOUCH_Button_Initialize@button
 13078                           
 13079                           ;mtouch_button.c: 150: button->state = MTOUCH_BUTTON_STATE_initializing;
 13080  0D04  082C               	movf	MTOUCH_Button_Initialize@button,w
 13081  0D05  3E02               	addlw	2
 13082  0D06  0086               	movwf	6
 13083  0D07  0187               	clrf	7
 13084  0D08  0181               	clrf	1
 13085                           
 13086                           ;mtouch_button.c: 151: button->baseline = (mtouch_button_baseline_t)0;
 13087  0D09  082C               	movf	MTOUCH_Button_Initialize@button,w
 13088  0D0A  3E05               	addlw	5
 13089  0D0B  0086               	movwf	6
 13090  0D0C  0187               	clrf	7
 13091  0D0D  3000               	movlw	0
 13092  0D0E  3FC0               	movwi [0]fsr1
 13093  0D0F  3000               	movlw	0
 13094  0D10  3FC1               	movwi [1]fsr1
 13095  0D11  3FC2               	movwi [2]fsr1
 13096  0D12  3FC3               	movwi [3]fsr1
 13097                           
 13098                           ;mtouch_button.c: 152: button->counter = (mtouch_button_statecounter_t)0;
 13099  0D13  082C               	movf	MTOUCH_Button_Initialize@button,w
 13100  0D14  3E0A               	addlw	10
 13101  0D15  0086               	movwf	6
 13102  0D16  0187               	clrf	7
 13103  0D17  3000               	movlw	0
 13104  0D18  3FC0               	movwi [0]fsr1
 13105  0D19  3FC1               	movwi [1]fsr1
 13106                           
 13107                           ;mtouch_button.c: 153: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 13108  0D1A  082C               	movf	MTOUCH_Button_Initialize@button,w
 13109  0D1B  3E0C               	addlw	12
 13110  0D1C  0086               	movwf	6
 13111  0D1D  0187               	clrf	7
 13112  0D1E  3000               	movlw	0
 13113  0D1F  3FC0               	movwi [0]fsr1
 13114  0D20  3FC1               	movwi [1]fsr1
 13115                           
 13116                           ;mtouch_button.c: 155: MTOUCH_Sensor_Calibrate(button->sensor);
 13117  0D21  0A2C               	incf	MTOUCH_Button_Initialize@button,w
 13118  0D22  0086               	movwf	6
 13119  0D23  0187               	clrf	7
 13120  0D24  0801               	movf	1,w
 13121  0D25  3189  2112         	fcall	_MTOUCH_Sensor_Calibrate
 13122  0D27  0008               	return
 13123  0D28                     __end_of_MTOUCH_Button_Initialize:	
 13124                           
 13125                           	psect	text61
 13126  0912                     __ptext61:	
 13127 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 13128 ;; Defined at:
 13129 ;;		line 616 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  sensor          1    wreg     enum E8046
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  sensor          1    0[COMMON] enum E8046
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  1    wreg      void 
 13136 ;; Registers used:
 13137 ;;		wreg
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;Total ram usage:        0 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    4
 13150 ;; This function calls:
 13151 ;;		Nothing
 13152 ;; This function is called by:
 13153 ;;		_MTOUCH_Button_Initialize
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function _MTOUCH_Sensor_Calibrate
 13159  0912                     _MTOUCH_Sensor_Calibrate:	
 13160                           
 13161                           ;incstack = 0
 13162                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
 13163  0912  0008               	return
 13164  0913                     __end_of_MTOUCH_Sensor_Calibrate:	
 13165                           
 13166                           	psect	text62
 13167  0911                     __ptext62:	
 13168 ;; *************** function _Button_DefaultCallback *****************
 13169 ;; Defined at:
 13170 ;;		line 510 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  button          1   10[BANK0 ] enum E7986
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		None
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13184 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;Total ram usage:        1 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    4
 13191 ;; This function calls:
 13192 ;;		Nothing
 13193 ;; This function is called by:
 13194 ;;		_Button_State_NotPressed
 13195 ;;		_Button_State_Pressed
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           
 13200                           ;psect for function _Button_DefaultCallback
 13201  0911                     _Button_DefaultCallback:	
 13202                           
 13203                           ;incstack = 0
 13204                           ; Regs used in _Button_DefaultCallback: []
 13205  0911  0008               	return
 13206  0912                     __end_of_Button_DefaultCallback:	
 13207                           
 13208                           	psect	text63
 13209  05BE                     __ptext63:	
 13210 ;; *************** function _Button_Baseline_Update *****************
 13211 ;; Defined at:
 13212 ;;		line 464 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13213 ;; Parameters:    Size  Location     Type
 13214 ;;  button          1    wreg     PTR struct .
 13215 ;;		 -> mtouch_button(17), 
 13216 ;; Auto vars:     Size  Location     Type
 13217 ;;  button          1   16[BANK0 ] PTR struct .
 13218 ;;		 -> mtouch_button(17), 
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  1    wreg      void 
 13221 ;; Registers used:
 13222 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;Total ram usage:        7 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; Hardware stack levels required when called:    4
 13235 ;; This function calls:
 13236 ;;		Nothing
 13237 ;; This function is called by:
 13238 ;;		_Button_State_Initializing
 13239 ;;		_Button_State_NotPressed
 13240 ;; This function uses a non-reentrant model
 13241 ;;
 13242                           
 13243                           
 13244                           ;psect for function _Button_Baseline_Update
 13245  05BE                     _Button_Baseline_Update:	
 13246                           
 13247                           ;incstack = 0
 13248                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13249                           ;Button_Baseline_Update@button stored from wreg
 13250  05BE  0020               	movlb	0	; select bank0
 13251  05BF  00B0               	movwf	Button_Baseline_Update@button
 13252                           
 13253                           ;mtouch_button.c: 466: if (GIE == (uint8_t)1)
 13254  05C0  1F8B               	btfss	11,7	;volatile
 13255  05C1  2E05               	goto	l4647
 13256                           
 13257                           ;mtouch_button.c: 467: {
 13258                           ;mtouch_button.c: 468: GIE = (uint8_t)0;
 13259  05C2  138B               	bcf	11,7	;volatile
 13260                           
 13261                           ;mtouch_button.c: 469: button->baseline -= (button->baseline) >> ((uint8_t)4u);
 13262  05C3  0830               	movf	Button_Baseline_Update@button,w
 13263  05C4  3E05               	addlw	5
 13264  05C5  0086               	movwf	6
 13265  05C6  0187               	clrf	7
 13266  05C7  3F40               	moviw [0]fsr1
 13267  05C8  00AA               	movwf	??_Button_Baseline_Update
 13268  05C9  3F41               	moviw [1]fsr1
 13269  05CA  00AB               	movwf	??_Button_Baseline_Update+1
 13270  05CB  3F42               	moviw [2]fsr1
 13271  05CC  00AC               	movwf	??_Button_Baseline_Update+2
 13272  05CD  3F43               	moviw [3]fsr1
 13273  05CE  00AD               	movwf	??_Button_Baseline_Update+3
 13274  05CF  3004               	movlw	4
 13275  05D0                     u4245:	
 13276  05D0  36AD               	lsrf	??_Button_Baseline_Update+3,f
 13277  05D1  0CAC               	rrf	??_Button_Baseline_Update+2,f
 13278  05D2  0CAB               	rrf	??_Button_Baseline_Update+1,f
 13279  05D3  0CAA               	rrf	??_Button_Baseline_Update,f
 13280  05D4  0B89               	decfsz	9,f
 13281  05D5  2DD0               	goto	u4245
 13282  05D6  0830               	movf	Button_Baseline_Update@button,w
 13283  05D7  3E05               	addlw	5
 13284  05D8  0086               	movwf	6
 13285  05D9  0187               	clrf	7
 13286  05DA  082A               	movf	??_Button_Baseline_Update,w
 13287  05DB  0281               	subwf	1,f
 13288  05DC  3141               	addfsr 1,1
 13289  05DD  082B               	movf	??_Button_Baseline_Update+1,w
 13290  05DE  3B81               	subwfb	1,f
 13291  05DF  3141               	addfsr 1,1
 13292  05E0  082C               	movf	??_Button_Baseline_Update+2,w
 13293  05E1  3B81               	subwfb	1,f
 13294  05E2  3141               	addfsr 1,1
 13295  05E3  082D               	movf	??_Button_Baseline_Update+3,w
 13296  05E4  3B81               	subwfb	1,f
 13297  05E5  317D               	addfsr 1,-3
 13298                           
 13299                           ;mtouch_button.c: 470: button->baseline += button->reading;
 13300  05E6  0830               	movf	Button_Baseline_Update@button,w
 13301  05E7  3E03               	addlw	3
 13302  05E8  0086               	movwf	6
 13303  05E9  0187               	clrf	7
 13304  05EA  3F40               	moviw [0]fsr1
 13305  05EB  00AA               	movwf	??_Button_Baseline_Update
 13306  05EC  3F41               	moviw [1]fsr1
 13307  05ED  00AB               	movwf	??_Button_Baseline_Update+1
 13308  05EE  082A               	movf	??_Button_Baseline_Update,w
 13309  05EF  00AC               	movwf	??_Button_Baseline_Update+2
 13310  05F0  082B               	movf	??_Button_Baseline_Update+1,w
 13311  05F1  00AD               	movwf	??_Button_Baseline_Update+3
 13312  05F2  01AE               	clrf	??_Button_Baseline_Update+4
 13313  05F3  01AF               	clrf	??_Button_Baseline_Update+5
 13314  05F4  0830               	movf	Button_Baseline_Update@button,w
 13315  05F5  3E05               	addlw	5
 13316  05F6  0086               	movwf	6
 13317  05F7  0187               	clrf	7
 13318  05F8  082C               	movf	??_Button_Baseline_Update+2,w
 13319  05F9  0781               	addwf	1,f
 13320  05FA  3141               	addfsr 1,1
 13321  05FB  082D               	movf	??_Button_Baseline_Update+3,w
 13322  05FC  3D81               	addwfc	1,f
 13323  05FD  3141               	addfsr 1,1
 13324  05FE  082E               	movf	??_Button_Baseline_Update+4,w
 13325  05FF  3D81               	addwfc	1,f
 13326  0600  3141               	addfsr 1,1
 13327  0601  082F               	movf	??_Button_Baseline_Update+5,w
 13328  0602  3D81               	addwfc	1,f
 13329                           
 13330                           ;mtouch_button.c: 471: GIE = (uint8_t)1;
 13331  0603  178B               	bsf	11,7	;volatile
 13332                           
 13333                           ;mtouch_button.c: 472: }
 13334  0604  0008               	return
 13335  0605                     l4647:	
 13336                           
 13337                           ;mtouch_button.c: 473: else
 13338                           ;mtouch_button.c: 474: {
 13339                           ;mtouch_button.c: 475: button->baseline -= (button->baseline) >> ((uint8_t)4u);
 13340  0605  0830               	movf	Button_Baseline_Update@button,w
 13341  0606  3E05               	addlw	5
 13342  0607  0086               	movwf	6
 13343  0608  0187               	clrf	7
 13344  0609  3F40               	moviw [0]fsr1
 13345  060A  00AA               	movwf	??_Button_Baseline_Update
 13346  060B  3F41               	moviw [1]fsr1
 13347  060C  00AB               	movwf	??_Button_Baseline_Update+1
 13348  060D  3F42               	moviw [2]fsr1
 13349  060E  00AC               	movwf	??_Button_Baseline_Update+2
 13350  060F  3F43               	moviw [3]fsr1
 13351  0610  00AD               	movwf	??_Button_Baseline_Update+3
 13352  0611  3004               	movlw	4
 13353  0612                     u4255:	
 13354  0612  36AD               	lsrf	??_Button_Baseline_Update+3,f
 13355  0613  0CAC               	rrf	??_Button_Baseline_Update+2,f
 13356  0614  0CAB               	rrf	??_Button_Baseline_Update+1,f
 13357  0615  0CAA               	rrf	??_Button_Baseline_Update,f
 13358  0616  0B89               	decfsz	9,f
 13359  0617  2E12               	goto	u4255
 13360  0618  0830               	movf	Button_Baseline_Update@button,w
 13361  0619  3E05               	addlw	5
 13362  061A  0086               	movwf	6
 13363  061B  0187               	clrf	7
 13364  061C  082A               	movf	??_Button_Baseline_Update,w
 13365  061D  0281               	subwf	1,f
 13366  061E  3141               	addfsr 1,1
 13367  061F  082B               	movf	??_Button_Baseline_Update+1,w
 13368  0620  3B81               	subwfb	1,f
 13369  0621  3141               	addfsr 1,1
 13370  0622  082C               	movf	??_Button_Baseline_Update+2,w
 13371  0623  3B81               	subwfb	1,f
 13372  0624  3141               	addfsr 1,1
 13373  0625  082D               	movf	??_Button_Baseline_Update+3,w
 13374  0626  3B81               	subwfb	1,f
 13375  0627  317D               	addfsr 1,-3
 13376                           
 13377                           ;mtouch_button.c: 476: button->baseline += button->reading;
 13378  0628  0830               	movf	Button_Baseline_Update@button,w
 13379  0629  3E03               	addlw	3
 13380  062A  0086               	movwf	6
 13381  062B  0187               	clrf	7
 13382  062C  3F40               	moviw [0]fsr1
 13383  062D  00AA               	movwf	??_Button_Baseline_Update
 13384  062E  3F41               	moviw [1]fsr1
 13385  062F  00AB               	movwf	??_Button_Baseline_Update+1
 13386  0630  082A               	movf	??_Button_Baseline_Update,w
 13387  0631  00AC               	movwf	??_Button_Baseline_Update+2
 13388  0632  082B               	movf	??_Button_Baseline_Update+1,w
 13389  0633  00AD               	movwf	??_Button_Baseline_Update+3
 13390  0634  01AE               	clrf	??_Button_Baseline_Update+4
 13391  0635  01AF               	clrf	??_Button_Baseline_Update+5
 13392  0636  0830               	movf	Button_Baseline_Update@button,w
 13393  0637  3E05               	addlw	5
 13394  0638  0086               	movwf	6
 13395  0639  0187               	clrf	7
 13396  063A  082C               	movf	??_Button_Baseline_Update+2,w
 13397  063B  0781               	addwf	1,f
 13398  063C  3141               	addfsr 1,1
 13399  063D  082D               	movf	??_Button_Baseline_Update+3,w
 13400  063E  3D81               	addwfc	1,f
 13401  063F  3141               	addfsr 1,1
 13402  0640  082E               	movf	??_Button_Baseline_Update+4,w
 13403  0641  3D81               	addwfc	1,f
 13404  0642  3141               	addfsr 1,1
 13405  0643  082F               	movf	??_Button_Baseline_Update+5,w
 13406  0644  3D81               	addwfc	1,f
 13407  0645  0008               	return
 13408  0646                     __end_of_Button_Baseline_Update:	
 13409                           
 13410                           	psect	text64
 13411  0CCF                     __ptext64:	
 13412 ;; *************** function _Button_Baseline_Initialize *****************
 13413 ;; Defined at:
 13414 ;;		line 458 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;  button          1    wreg     PTR struct .
 13417 ;;		 -> mtouch_button(17), 
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;  button          1   22[BANK0 ] PTR struct .
 13420 ;;		 -> mtouch_button(17), 
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      void 
 13423 ;; Registers used:
 13424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;Total ram usage:        5 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    6
 13437 ;; This function calls:
 13438 ;;		_MTOUCH_Sensor_RawSample_Get
 13439 ;; This function is called by:
 13440 ;;		_Button_State_Initializing
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           
 13445                           ;psect for function _Button_Baseline_Initialize
 13446  0CCF                     _Button_Baseline_Initialize:	
 13447                           
 13448                           ;incstack = 0
 13449                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13450                           ;Button_Baseline_Initialize@button stored from wreg
 13451  0CCF  0020               	movlb	0	; select bank0
 13452  0CD0  00B6               	movwf	Button_Baseline_Initialize@button
 13453                           
 13454                           ;mtouch_button.c: 460: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 13455  0CD1  0A36               	incf	Button_Baseline_Initialize@button,w
 13456  0CD2  0086               	movwf	6
 13457  0CD3  0187               	clrf	7
 13458  0CD4  0801               	movf	1,w
 13459  0CD5  318B  2342  318C   	fcall	_MTOUCH_Sensor_RawSample_Get
 13460  0CD8  0020               	movlb	0	; select bank0
 13461  0CD9  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13462  0CDA  00B2               	movwf	??_Button_Baseline_Initialize
 13463  0CDB  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13464  0CDC  00B3               	movwf	??_Button_Baseline_Initialize+1
 13465  0CDD  01B4               	clrf	??_Button_Baseline_Initialize+2
 13466  0CDE  01B5               	clrf	??_Button_Baseline_Initialize+3
 13467  0CDF  0836               	movf	Button_Baseline_Initialize@button,w
 13468  0CE0  3E05               	addlw	5
 13469  0CE1  0086               	movwf	6
 13470  0CE2  0187               	clrf	7
 13471  0CE3  0832               	movf	??_Button_Baseline_Initialize,w
 13472  0CE4  3FC0               	movwi [0]fsr1
 13473  0CE5  0833               	movf	??_Button_Baseline_Initialize+1,w
 13474  0CE6  3FC1               	movwi [1]fsr1
 13475  0CE7  0834               	movf	??_Button_Baseline_Initialize+2,w
 13476  0CE8  3FC2               	movwi [2]fsr1
 13477  0CE9  0835               	movf	??_Button_Baseline_Initialize+3,w
 13478  0CEA  3FC3               	movwi [3]fsr1
 13479                           
 13480                           ;mtouch_button.c: 461: button->baseline <<= ((uint8_t)4u);
 13481  0CEB  0836               	movf	Button_Baseline_Initialize@button,w
 13482  0CEC  3E05               	addlw	5
 13483  0CED  0086               	movwf	6
 13484  0CEE  0187               	clrf	7
 13485  0CEF  3004               	movlw	4
 13486  0CF0                     u4225:	
 13487  0CF0  3581               	lslf	1,f
 13488  0CF1  3141               	addfsr 1,1
 13489  0CF2  0D81               	rlf	1,f
 13490  0CF3  3141               	addfsr 1,1
 13491  0CF4  0D81               	rlf	1,f
 13492  0CF5  3141               	addfsr 1,1
 13493  0CF6  0D81               	rlf	1,f
 13494  0CF7  317D               	addfsr 1,-3
 13495  0CF8  0B89               	decfsz	9,f
 13496  0CF9  2CF0               	goto	u4225
 13497  0CFA  0008               	return
 13498  0CFB                     __end_of_Button_Baseline_Initialize:	
 13499                           
 13500                           	psect	text65
 13501  0A01                     __ptext65:	
 13502 ;; *************** function _Button_Reading_Update *****************
 13503 ;; Defined at:
 13504 ;;		line 431 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13505 ;; Parameters:    Size  Location     Type
 13506 ;;  button          1    wreg     PTR struct .
 13507 ;;		 -> mtouch_button(17), 
 13508 ;; Auto vars:     Size  Location     Type
 13509 ;;  button          1   21[BANK0 ] PTR struct .
 13510 ;;		 -> mtouch_button(17), 
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  1    wreg      void 
 13513 ;; Registers used:
 13514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:        1 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; Hardware stack levels required when called:    7
 13527 ;; This function calls:
 13528 ;;		_Button_Reading_Update_Helper
 13529 ;; This function is called by:
 13530 ;;		_Button_Service
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _Button_Reading_Update
 13536  0A01                     _Button_Reading_Update:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13540                           ;Button_Reading_Update@button stored from wreg
 13541  0A01  0020               	movlb	0	; select bank0
 13542  0A02  00B5               	movwf	Button_Reading_Update@button
 13543                           
 13544                           ;mtouch_button.c: 433: if (GIE == (uint8_t) 1)
 13545  0A03  1F8B               	btfss	11,7	;volatile
 13546  0A04  2A0B               	goto	l4751
 13547                           
 13548                           ;mtouch_button.c: 434: {
 13549                           ;mtouch_button.c: 435: GIE = (uint8_t) 0;
 13550  0A05  138B               	bcf	11,7	;volatile
 13551                           
 13552                           ;mtouch_button.c: 436: Button_Reading_Update_Helper(button);
 13553  0A06  0835               	movf	Button_Reading_Update@button,w
 13554  0A07  318E  261A         	fcall	_Button_Reading_Update_Helper
 13555                           
 13556                           ;mtouch_button.c: 437: GIE = (uint8_t) 1;
 13557  0A09  178B               	bsf	11,7	;volatile
 13558                           
 13559                           ;mtouch_button.c: 438: }
 13560  0A0A  0008               	return
 13561  0A0B                     l4751:	
 13562                           
 13563                           ;mtouch_button.c: 439: else
 13564                           ;mtouch_button.c: 440: {
 13565                           ;mtouch_button.c: 441: Button_Reading_Update_Helper(button);
 13566  0A0B  0020               	movlb	0	; select bank0
 13567  0A0C  0835               	movf	Button_Reading_Update@button,w
 13568  0A0D  318E  261A         	fcall	_Button_Reading_Update_Helper
 13569  0A0F  0008               	return
 13570  0A10                     __end_of_Button_Reading_Update:	
 13571                           
 13572                           	psect	text66
 13573  0E1A                     __ptext66:	
 13574 ;; *************** function _Button_Reading_Update_Helper *****************
 13575 ;; Defined at:
 13576 ;;		line 445 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  button          1    wreg     PTR struct .
 13579 ;;		 -> mtouch_button(17), 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  button          1   20[BANK0 ] PTR struct .
 13582 ;;		 -> mtouch_button(17), 
 13583 ;; Return value:  Size  Location     Type
 13584 ;;                  1    wreg      void 
 13585 ;; Registers used:
 13586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13587 ;; Tracked objects:
 13588 ;;		On entry : 0/0
 13589 ;;		On exit  : 0/0
 13590 ;;		Unchanged: 0/0
 13591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;Total ram usage:        3 bytes
 13597 ;; Hardware stack levels used:    1
 13598 ;; Hardware stack levels required when called:    6
 13599 ;; This function calls:
 13600 ;;		_MTOUCH_Sensor_RawSample_Get
 13601 ;; This function is called by:
 13602 ;;		_Button_Reading_Update
 13603 ;; This function uses a non-reentrant model
 13604 ;;
 13605                           
 13606                           
 13607                           ;psect for function _Button_Reading_Update_Helper
 13608  0E1A                     _Button_Reading_Update_Helper:	
 13609                           
 13610                           ;incstack = 0
 13611                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13612                           ;Button_Reading_Update_Helper@button stored from wreg
 13613  0E1A  0020               	movlb	0	; select bank0
 13614  0E1B  00B4               	movwf	Button_Reading_Update_Helper@button
 13615                           
 13616                           ;mtouch_button.c: 447: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 13617  0E1C  0834               	movf	Button_Reading_Update_Helper@button,w
 13618  0E1D  3E02               	addlw	2
 13619  0E1E  0086               	movwf	6
 13620  0E1F  0187               	clrf	7
 13621  0E20  0801               	movf	1,w
 13622  0E21  1903               	btfsc	3,2
 13623  0E22  2E53               	goto	l4655
 13624                           
 13625                           ;mtouch_button.c: 448: {
 13626                           ;mtouch_button.c: 449: button->reading -= button->reading>>((uint8_t)2u);
 13627  0E23  0834               	movf	Button_Reading_Update_Helper@button,w
 13628  0E24  3E03               	addlw	3
 13629  0E25  0086               	movwf	6
 13630  0E26  0187               	clrf	7
 13631  0E27  3F40               	moviw [0]fsr1
 13632  0E28  00B2               	movwf	??_Button_Reading_Update_Helper
 13633  0E29  3F41               	moviw [1]fsr1
 13634  0E2A  00B3               	movwf	??_Button_Reading_Update_Helper+1
 13635  0E2B  36B3               	lsrf	??_Button_Reading_Update_Helper+1,f
 13636  0E2C  0CB2               	rrf	??_Button_Reading_Update_Helper,f
 13637  0E2D  36B3               	lsrf	??_Button_Reading_Update_Helper+1,f
 13638  0E2E  0CB2               	rrf	??_Button_Reading_Update_Helper,f
 13639  0E2F  0834               	movf	Button_Reading_Update_Helper@button,w
 13640  0E30  3E03               	addlw	3
 13641  0E31  0086               	movwf	6
 13642  0E32  0187               	clrf	7
 13643  0E33  0832               	movf	??_Button_Reading_Update_Helper,w
 13644  0E34  0281               	subwf	1,f
 13645  0E35  3141               	addfsr 1,1
 13646  0E36  0833               	movf	??_Button_Reading_Update_Helper+1,w
 13647  0E37  3B81               	subwfb	1,f
 13648  0E38  317F               	addfsr 1,-1
 13649                           
 13650                           ;mtouch_button.c: 450: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           ((uint8_t)2u);
 13651  0E39  0A34               	incf	Button_Reading_Update_Helper@button,w
 13652  0E3A  0086               	movwf	6
 13653  0E3B  0187               	clrf	7
 13654  0E3C  0801               	movf	1,w
 13655  0E3D  318B  2342         	fcall	_MTOUCH_Sensor_RawSample_Get
 13656  0E3F  0020               	movlb	0	; select bank0
 13657  0E40  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13658  0E41  00B2               	movwf	??_Button_Reading_Update_Helper
 13659  0E42  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13660  0E43  00B3               	movwf	??_Button_Reading_Update_Helper+1
 13661  0E44  36B3               	lsrf	??_Button_Reading_Update_Helper+1,f
 13662  0E45  0CB2               	rrf	??_Button_Reading_Update_Helper,f
 13663  0E46  36B3               	lsrf	??_Button_Reading_Update_Helper+1,f
 13664  0E47  0CB2               	rrf	??_Button_Reading_Update_Helper,f
 13665  0E48  0834               	movf	Button_Reading_Update_Helper@button,w
 13666  0E49  3E03               	addlw	3
 13667  0E4A  0086               	movwf	6
 13668  0E4B  0187               	clrf	7
 13669  0E4C  0832               	movf	??_Button_Reading_Update_Helper,w
 13670  0E4D  0781               	addwf	1,f
 13671  0E4E  3141               	addfsr 1,1
 13672  0E4F  0833               	movf	??_Button_Reading_Update_Helper+1,w
 13673  0E50  3D81               	addwfc	1,f
 13674  0E51  317F               	addfsr 1,-1
 13675                           
 13676                           ;mtouch_button.c: 451: }
 13677  0E52  0008               	return
 13678  0E53                     l4655:	
 13679                           
 13680                           ;mtouch_button.c: 452: else
 13681                           ;mtouch_button.c: 453: {
 13682                           ;mtouch_button.c: 454: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 13683  0E53  0A34               	incf	Button_Reading_Update_Helper@button,w
 13684  0E54  0086               	movwf	6
 13685  0E55  0187               	clrf	7
 13686  0E56  0801               	movf	1,w
 13687  0E57  318B  2342         	fcall	_MTOUCH_Sensor_RawSample_Get
 13688  0E59  0020               	movlb	0	; select bank0
 13689  0E5A  0834               	movf	Button_Reading_Update_Helper@button,w
 13690  0E5B  3E03               	addlw	3
 13691  0E5C  0086               	movwf	6
 13692  0E5D  0187               	clrf	7
 13693  0E5E  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13694  0E5F  3FC0               	movwi [0]fsr1
 13695  0E60  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13696  0E61  3FC1               	movwi [1]fsr1
 13697  0E62  0008               	return
 13698  0E63                     __end_of_Button_Reading_Update_Helper:	
 13699                           
 13700                           	psect	text67
 13701  0B42                     __ptext67:	
 13702 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 13703 ;; Defined at:
 13704 ;;		line 501 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;  name            1    wreg     enum E8046
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;  name            1   17[BANK0 ] enum E8046
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  2   14[BANK0 ] unsigned int 
 13711 ;; Registers used:
 13712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13718 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;Total ram usage:        4 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    5
 13725 ;; This function calls:
 13726 ;;		___bmul
 13727 ;; This function is called by:
 13728 ;;		_Button_Reading_Update_Helper
 13729 ;;		_Button_Baseline_Initialize
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           
 13734                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 13735  0B42                     _MTOUCH_Sensor_RawSample_Get:	
 13736                           
 13737                           ;incstack = 0
 13738                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13739                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 13740  0B42  0020               	movlb	0	; select bank0
 13741  0B43  00B1               	movwf	MTOUCH_Sensor_RawSample_Get@name
 13742                           
 13743                           ;mtouch_sensor.c: 503: if (name < (1u))
 13744  0B44  0831               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 13745  0B45  1D03               	btfss	3,2
 13746  0B46  2B58               	goto	l4567
 13747                           
 13748                           ;mtouch_sensor.c: 504: {
 13749                           ;mtouch_sensor.c: 505: return mtouch_sensor[name].rawSample;
 13750  0B47  3009               	movlw	9
 13751  0B48  00B0               	movwf	??_MTOUCH_Sensor_RawSample_Get
 13752  0B49  0830               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 13753  0B4A  00AA               	movwf	___bmul@multiplicand
 13754  0B4B  0831               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 13755  0B4C  318A  224E         	fcall	___bmul
 13756  0B4E  3E06               	addlw	6
 13757  0B4F  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 13758  0B50  0086               	movwf	6
 13759  0B51  0187               	clrf	7
 13760  0B52  3F40               	moviw [0]fsr1
 13761  0B53  0020               	movlb	0	; select bank0
 13762  0B54  00AE               	movwf	?_MTOUCH_Sensor_RawSample_Get
 13763  0B55  3F41               	moviw [1]fsr1
 13764  0B56  00AF               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 13765                           
 13766                           ;mtouch_sensor.c: 506: }
 13767  0B57  0008               	return
 13768  0B58                     l4567:	
 13769                           
 13770                           ;mtouch_sensor.c: 507: else
 13771                           ;mtouch_sensor.c: 508: return (mtouch_sensor_sample_t)0;
 13772  0B58  01AE               	clrf	?_MTOUCH_Sensor_RawSample_Get
 13773  0B59  01AF               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 13774  0B5A  0008               	return
 13775  0B5B                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 13776                           
 13777                           	psect	text68
 13778  0A4E                     __ptext68:	
 13779 ;; *************** function ___bmul *****************
 13780 ;; Defined at:
 13781 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul8.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;  multiplier      1    wreg     unsigned char 
 13784 ;;  multiplicand    1   10[BANK0 ] unsigned char 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  multiplier      1   13[BANK0 ] unsigned char 
 13787 ;;  product         1   12[BANK0 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      unsigned char 
 13790 ;; Registers used:
 13791 ;;		wreg, status,2, status,0
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        4 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    4
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_MTOUCH_Sensor_Initialize
 13808 ;;		_Sensor_Service
 13809 ;;		_Sensor_Acq_ExecuteScan
 13810 ;;		_MTOUCH_Sensor_RawSample_Get
 13811 ;;		_MTOUCH_Sensor_Enable
 13812 ;;		_MTOUCH_Sensor_wasSampled
 13813 ;;		_MTOUCH_Sensor_isAnySensorActive
 13814 ;;		_MTOUCH_Sensor_Disable
 13815 ;;		_MTOUCH_Sensor_isEnabled
 13816 ;;		_MTOUCH_Sensor_isActive
 13817 ;;		_MTOUCH_Sensor_Oversampling_Get
 13818 ;;		_MTOUCH_Sensor_Oversampling_Set
 13819 ;;		_handleGeneralTouchControls
 13820 ;;		_ir_handler
 13821 ;;		_updateLight
 13822 ;;		_handleUARTCommands
 13823 ;; This function uses a non-reentrant model
 13824 ;;
 13825                           
 13826                           
 13827                           ;psect for function ___bmul
 13828  0A4E                     ___bmul:	
 13829                           
 13830                           ;incstack = 0
 13831                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13832                           ;___bmul@multiplier stored from wreg
 13833  0A4E  0020               	movlb	0	; select bank0
 13834  0A4F  00AD               	movwf	___bmul@multiplier
 13835  0A50  01AC               	clrf	___bmul@product
 13836  0A51                     l4547:	
 13837  0A51  1C2D               	btfss	___bmul@multiplier,0
 13838  0A52  2A57               	goto	l4551
 13839  0A53  082A               	movf	___bmul@multiplicand,w
 13840  0A54  00AB               	movwf	??___bmul
 13841  0A55  082B               	movf	??___bmul,w
 13842  0A56  07AC               	addwf	___bmul@product,f
 13843  0A57                     l4551:	
 13844  0A57  1003               	clrc
 13845  0A58  0DAA               	rlf	___bmul@multiplicand,f
 13846  0A59  1003               	clrc
 13847  0A5A  0CAD               	rrf	___bmul@multiplier,f
 13848  0A5B  082D               	movf	___bmul@multiplier,w
 13849  0A5C  1D03               	btfss	3,2
 13850  0A5D  2A51               	goto	l4547
 13851  0A5E  082C               	movf	___bmul@product,w
 13852  0A5F  0008               	return
 13853  0A60                     __end_of___bmul:	
 13854                           
 13855                           	psect	text69
 13856  0530                     __ptext69:	
 13857 ;; *************** function _Button_Deviation_Update *****************
 13858 ;; Defined at:
 13859 ;;		line 382 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;  button          1    wreg     PTR struct .
 13862 ;;		 -> mtouch_button(17), 
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;  button          1   20[BANK0 ] PTR struct .
 13865 ;;		 -> mtouch_button(17), 
 13866 ;;  deviation       4   21[BANK0 ] long 
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      void 
 13869 ;; Registers used:
 13870 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;Total ram usage:       15 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    4
 13883 ;; This function calls:
 13884 ;;		Nothing
 13885 ;; This function is called by:
 13886 ;;		_Button_Service
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890                           
 13891                           ;psect for function _Button_Deviation_Update
 13892  0530                     _Button_Deviation_Update:	
 13893                           
 13894                           ;incstack = 0
 13895                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13896                           ;Button_Deviation_Update@button stored from wreg
 13897  0530  0020               	movlb	0	; select bank0
 13898  0531  00B4               	movwf	Button_Deviation_Update@button
 13899                           
 13900                           ;mtouch_button.c: 384: int32_t deviation;
 13901                           ;mtouch_button.c: 386: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 13902  0532  0834               	movf	Button_Deviation_Update@button,w
 13903  0533  3E05               	addlw	5
 13904  0534  0086               	movwf	6
 13905  0535  0187               	clrf	7
 13906  0536  3F40               	moviw [0]fsr1
 13907  0537  00AA               	movwf	??_Button_Deviation_Update
 13908  0538  3F41               	moviw [1]fsr1
 13909  0539  00AB               	movwf	??_Button_Deviation_Update+1
 13910  053A  3F42               	moviw [2]fsr1
 13911  053B  00AC               	movwf	??_Button_Deviation_Update+2
 13912  053C  3F43               	moviw [3]fsr1
 13913  053D  00AD               	movwf	??_Button_Deviation_Update+3
 13914  053E  3004               	movlw	4
 13915  053F                     u4385:	
 13916  053F  36AD               	lsrf	??_Button_Deviation_Update+3,f
 13917  0540  0CAC               	rrf	??_Button_Deviation_Update+2,f
 13918  0541  0CAB               	rrf	??_Button_Deviation_Update+1,f
 13919  0542  0CAA               	rrf	??_Button_Deviation_Update,f
 13920  0543  0B89               	decfsz	9,f
 13921  0544  2D3F               	goto	u4385
 13922  0545  09AA               	comf	??_Button_Deviation_Update,f
 13923  0546  09AB               	comf	??_Button_Deviation_Update+1,f
 13924  0547  09AC               	comf	??_Button_Deviation_Update+2,f
 13925  0548  09AD               	comf	??_Button_Deviation_Update+3,f
 13926  0549  0AAA               	incf	??_Button_Deviation_Update,f
 13927  054A  1903               	skipnz
 13928  054B  0AAB               	incf	??_Button_Deviation_Update+1,f
 13929  054C  1903               	skipnz
 13930  054D  0AAC               	incf	??_Button_Deviation_Update+2,f
 13931  054E  1903               	skipnz
 13932  054F  0AAD               	incf	??_Button_Deviation_Update+3,f
 13933  0550  0834               	movf	Button_Deviation_Update@button,w
 13934  0551  3E03               	addlw	3
 13935  0552  0086               	movwf	6
 13936  0553  0187               	clrf	7
 13937  0554  3F40               	moviw [0]fsr1
 13938  0555  00AE               	movwf	??_Button_Deviation_Update+4
 13939  0556  3F41               	moviw [1]fsr1
 13940  0557  00AF               	movwf	??_Button_Deviation_Update+5
 13941  0558  082E               	movf	??_Button_Deviation_Update+4,w
 13942  0559  00B0               	movwf	??_Button_Deviation_Update+6
 13943  055A  082F               	movf	??_Button_Deviation_Update+5,w
 13944  055B  00B1               	movwf	??_Button_Deviation_Update+7
 13945  055C  01B2               	clrf	??_Button_Deviation_Update+8
 13946  055D  01B3               	clrf	??_Button_Deviation_Update+9
 13947  055E  0830               	movf	??_Button_Deviation_Update+6,w
 13948  055F  07AA               	addwf	??_Button_Deviation_Update,f
 13949  0560  0831               	movf	??_Button_Deviation_Update+7,w
 13950  0561  3DAB               	addwfc	??_Button_Deviation_Update+1,f
 13951  0562  0832               	movf	??_Button_Deviation_Update+8,w
 13952  0563  3DAC               	addwfc	??_Button_Deviation_Update+2,f
 13953  0564  0833               	movf	??_Button_Deviation_Update+9,w
 13954  0565  3DAD               	addwfc	??_Button_Deviation_Update+3,f
 13955  0566  082D               	movf	??_Button_Deviation_Update+3,w
 13956  0567  00B8               	movwf	Button_Deviation_Update@deviation+3
 13957  0568  082C               	movf	??_Button_Deviation_Update+2,w
 13958  0569  00B7               	movwf	Button_Deviation_Update@deviation+2
 13959  056A  082B               	movf	??_Button_Deviation_Update+1,w
 13960  056B  00B6               	movwf	Button_Deviation_Update@deviation+1
 13961  056C  082A               	movf	??_Button_Deviation_Update,w
 13962  056D  00B5               	movwf	Button_Deviation_Update@deviation
 13963                           
 13964                           ;mtouch_button.c: 389: deviation = deviation >> (button->scaling);
 13965  056E  0835               	movf	Button_Deviation_Update@deviation,w
 13966  056F  00AA               	movwf	??_Button_Deviation_Update
 13967  0570  0836               	movf	Button_Deviation_Update@deviation+1,w
 13968  0571  00AB               	movwf	??_Button_Deviation_Update+1
 13969  0572  0837               	movf	Button_Deviation_Update@deviation+2,w
 13970  0573  00AC               	movwf	??_Button_Deviation_Update+2
 13971  0574  0838               	movf	Button_Deviation_Update@deviation+3,w
 13972  0575  00AD               	movwf	??_Button_Deviation_Update+3
 13973  0576  0834               	movf	Button_Deviation_Update@button,w
 13974  0577  3E0F               	addlw	15
 13975  0578  0086               	movwf	6
 13976  0579  0187               	clrf	7
 13977  057A  0A01               	incf	1,w
 13978  057B  2D80               	goto	u4390
 13979  057C                     u4395:	
 13980  057C  37AD               	asrf	??_Button_Deviation_Update+3,f
 13981  057D  0CAC               	rrf	??_Button_Deviation_Update+2,f
 13982  057E  0CAB               	rrf	??_Button_Deviation_Update+1,f
 13983  057F  0CAA               	rrf	??_Button_Deviation_Update,f
 13984  0580                     u4390:	
 13985  0580  0B89               	decfsz	9,f
 13986  0581  2D7C               	goto	u4395
 13987  0582  082D               	movf	??_Button_Deviation_Update+3,w
 13988  0583  00B8               	movwf	Button_Deviation_Update@deviation+3
 13989  0584  082C               	movf	??_Button_Deviation_Update+2,w
 13990  0585  00B7               	movwf	Button_Deviation_Update@deviation+2
 13991  0586  082B               	movf	??_Button_Deviation_Update+1,w
 13992  0587  00B6               	movwf	Button_Deviation_Update@deviation+1
 13993  0588  082A               	movf	??_Button_Deviation_Update,w
 13994  0589  00B5               	movwf	Button_Deviation_Update@deviation
 13995                           
 13996                           ;mtouch_button.c: 392: if (deviation > ((127)))
 13997  058A  1BB8               	btfsc	Button_Deviation_Update@deviation+3,7
 13998  058B  2DA1               	goto	l4759
 13999  058C  0838               	movf	Button_Deviation_Update@deviation+3,w
 14000  058D  1D03               	btfss	3,2
 14001  058E  2D99               	goto	l4757
 14002  058F  0837               	movf	Button_Deviation_Update@deviation+2,w
 14003  0590  1D03               	btfss	3,2
 14004  0591  2D99               	goto	l4757
 14005  0592  0836               	movf	Button_Deviation_Update@deviation+1,w
 14006  0593  1D03               	btfss	3,2
 14007  0594  2D99               	goto	l4757
 14008  0595  3080               	movlw	128
 14009  0596  0235               	subwf	Button_Deviation_Update@deviation,w
 14010  0597  1C03               	btfss	3,0
 14011  0598  2DA1               	goto	l4759
 14012  0599                     l4757:	
 14013                           
 14014                           ;mtouch_button.c: 393: {
 14015                           ;mtouch_button.c: 394: deviation = ((127));
 14016  0599  3000               	movlw	0
 14017  059A  00B8               	movwf	Button_Deviation_Update@deviation+3
 14018  059B  3000               	movlw	0
 14019  059C  00B7               	movwf	Button_Deviation_Update@deviation+2
 14020  059D  3000               	movlw	0
 14021  059E  00B6               	movwf	Button_Deviation_Update@deviation+1
 14022  059F  307F               	movlw	127
 14023  05A0  00B5               	movwf	Button_Deviation_Update@deviation
 14024  05A1                     l4759:	
 14025                           
 14026                           ;mtouch_button.c: 395: }
 14027                           ;mtouch_button.c: 396: if (deviation < ((-128)))
 14028  05A1  1FB8               	btfss	Button_Deviation_Update@deviation+3,7
 14029  05A2  2DB5               	goto	l4763
 14030  05A3  3080               	movlw	128
 14031  05A4  0235               	subwf	Button_Deviation_Update@deviation,w
 14032  05A5  30FF               	movlw	255
 14033  05A6  3B36               	subwfb	Button_Deviation_Update@deviation+1,w
 14034  05A7  30FF               	movlw	255
 14035  05A8  3B37               	subwfb	Button_Deviation_Update@deviation+2,w
 14036  05A9  30FF               	movlw	255
 14037  05AA  3B38               	subwfb	Button_Deviation_Update@deviation+3,w
 14038  05AB  1803               	btfsc	3,0
 14039  05AC  2DB5               	goto	l4763
 14040                           
 14041                           ;mtouch_button.c: 397: {
 14042                           ;mtouch_button.c: 398: deviation = ((-128));
 14043  05AD  30FF               	movlw	255
 14044  05AE  00B8               	movwf	Button_Deviation_Update@deviation+3
 14045  05AF  30FF               	movlw	255
 14046  05B0  00B7               	movwf	Button_Deviation_Update@deviation+2
 14047  05B1  30FF               	movlw	255
 14048  05B2  00B6               	movwf	Button_Deviation_Update@deviation+1
 14049  05B3  3080               	movlw	128
 14050  05B4  00B5               	movwf	Button_Deviation_Update@deviation
 14051  05B5                     l4763:	
 14052                           
 14053                           ;mtouch_button.c: 399: }
 14054                           ;mtouch_button.c: 401: button->deviation = (mtouch_button_deviation_t)deviation;
 14055  05B5  0835               	movf	Button_Deviation_Update@deviation,w
 14056  05B6  00AA               	movwf	??_Button_Deviation_Update
 14057  05B7  0834               	movf	Button_Deviation_Update@button,w
 14058  05B8  3E09               	addlw	9
 14059  05B9  0086               	movwf	6
 14060  05BA  0187               	clrf	7
 14061  05BB  082A               	movf	??_Button_Deviation_Update,w
 14062  05BC  0081               	movwf	1
 14063  05BD  0008               	return
 14064  05BE                     __end_of_Button_Deviation_Update:	
 14065                           
 14066                           	psect	text70
 14067  093D                     __ptext70:	
 14068 ;; *************** function _InitExternal_INT *****************
 14069 ;; Defined at:
 14070 ;;		line 82 in file "mcc_generated_files/interrupt_manager.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;		None
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;		None
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		None
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:        0 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    4
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_main
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _InitExternal_INT
 14100  093D                     _InitExternal_INT:	
 14101                           
 14102                           ;interrupt_manager.c: 84: INTCONbits.INTEDG = 0;
 14103                           
 14104                           ;incstack = 0
 14105                           ; Regs used in _InitExternal_INT: []
 14106  093D  100B               	bcf	11,0	;volatile
 14107                           
 14108                           ;interrupt_manager.c: 85: PIR0bits.INTF = 0;
 14109  093E  0020               	movlb	0	; select bank0
 14110  093F  1010               	bcf	16,0	;volatile
 14111                           
 14112                           ;interrupt_manager.c: 86: PIE0bits.INTE = 1;
 14113  0940  0021               	movlb	1	; select bank1
 14114  0941  1410               	bsf	16,0	;volatile
 14115                           
 14116                           ;interrupt_manager.c: 87: INTCONbits.GIE = 1;
 14117  0942  178B               	bsf	11,7	;volatile
 14118  0943  0008               	return
 14119  0944                     __end_of_InitExternal_INT:	
 14120                           
 14121                           	psect	text71
 14122  09F2                     __ptext71:	
 14123 ;; *************** function _DATAEE_ReadByte *****************
 14124 ;; Defined at:
 14125 ;;		line 202 in file "mcc_generated_files/memory.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  bAdd            2   10[BANK0 ] unsigned int 
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;		None
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      unsigned char 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14139 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;Total ram usage:        2 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    4
 14146 ;; This function calls:
 14147 ;;		Nothing
 14148 ;; This function is called by:
 14149 ;;		_main
 14150 ;; This function uses a non-reentrant model
 14151 ;;
 14152                           
 14153                           
 14154                           ;psect for function _DATAEE_ReadByte
 14155  09F2                     _DATAEE_ReadByte:	
 14156                           
 14157                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 14158                           
 14159                           ;incstack = 0
 14160                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 14161  09F2  0020               	movlb	0	; select bank0
 14162  09F3  082B               	movf	DATAEE_ReadByte@bAdd+1,w
 14163  09F4  0031               	movlb	17	; select bank17
 14164  09F5  0092               	movwf	18	;volatile
 14165                           
 14166                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 14167  09F6  0020               	movlb	0	; select bank0
 14168  09F7  082A               	movf	DATAEE_ReadByte@bAdd,w
 14169  09F8  0031               	movlb	17	; select bank17
 14170  09F9  0091               	movwf	17	;volatile
 14171                           
 14172                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 14173  09FA  1715               	bsf	21,6	;volsfr
 14174                           
 14175                           ;memory.c: 207: NVMCON1bits.RD = 1;
 14176  09FB  1415               	bsf	21,0	;volsfr
 14177                           
 14178                           ;memory.c: 208: __nop();
 14179  09FC  0000               	nop
 14180                           
 14181                           ;memory.c: 209: __nop();
 14182  09FD  0000               	nop
 14183                           
 14184                           ;memory.c: 211: return (NVMDATL);
 14185  09FE  0031               	movlb	17	; select bank17
 14186  09FF  0813               	movf	19,w	;volatile
 14187  0A00  0008               	return
 14188  0A01                     __end_of_DATAEE_ReadByte:	
 14189                           
 14190                           	psect	intentry
 14191  0004                     __pintentry:	
 14192 ;; *************** function _INTERRUPT_InterruptManager *****************
 14193 ;; Defined at:
 14194 ;;		line 53 in file "mcc_generated_files/interrupt_manager.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;		None
 14197 ;; Auto vars:     Size  Location     Type
 14198 ;;		None
 14199 ;; Return value:  Size  Location     Type
 14200 ;;                  1    wreg      void 
 14201 ;; Registers used:
 14202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14203 ;; Tracked objects:
 14204 ;;		On entry : 0/0
 14205 ;;		On exit  : 0/0
 14206 ;;		Unchanged: 0/0
 14207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;Total ram usage:        1 bytes
 14213 ;; Hardware stack levels used:    1
 14214 ;; Hardware stack levels required when called:    3
 14215 ;; This function calls:
 14216 ;;		_TMR6_ISR
 14217 ;;		_decodeIRSignal
 14218 ;; This function is called by:
 14219 ;;		Interrupt level 1
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223  0004                     _INTERRUPT_InterruptManager:	
 14224                           
 14225                           ;incstack = 0
 14226  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14227                           
 14228                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14229  0005  3180               	pagesel	$
 14230  0006  0020               	movlb	0	; select bank0
 14231  0007  087F               	movf	127,w
 14232  0008  00A9               	movwf	??_INTERRUPT_InterruptManager
 14233                           
 14234                           ;interrupt_manager.c: 57: if(INTCONbits.PEIE == 1)
 14235  0009  1F0B               	btfss	11,6	;volatile
 14236  000A  2823               	goto	i1l747
 14237                           
 14238                           ;interrupt_manager.c: 58: {
 14239                           ;interrupt_manager.c: 59: if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 14240  000B  0021               	movlb	1	; select bank1
 14241  000C  1C10               	btfss	16,0	;volatile
 14242  000D  281B               	goto	i1l5493
 14243  000E  0020               	movlb	0	; select bank0
 14244  000F  1C10               	btfss	16,0	;volatile
 14245  0010  281B               	goto	i1l5493
 14246                           
 14247                           ;interrupt_manager.c: 60: {
 14248                           ;interrupt_manager.c: 61: if (!sto)
 14249  0011  0021               	movlb	1	; select bank1
 14250  0012  0834               	movf	_sto^(0+128),w
 14251  0013  0435               	iorwf	(_sto+1)^(0+128),w
 14252  0014  1D03               	btfss	3,2
 14253  0015  2819               	goto	i1l5491
 14254                           
 14255                           ;interrupt_manager.c: 62: {
 14256                           ;interrupt_manager.c: 63: decodeIRSignal();
 14257  0016  3180  204D  3180   	fcall	_decodeIRSignal
 14258  0019                     i1l5491:	
 14259                           
 14260                           ;interrupt_manager.c: 64: }
 14261                           ;interrupt_manager.c: 65: PIR0bits.INTF = 0;
 14262  0019  0020               	movlb	0	; select bank0
 14263  001A  1010               	bcf	16,0	;volatile
 14264  001B                     i1l5493:	
 14265                           
 14266                           ;interrupt_manager.c: 66: }
 14267                           ;interrupt_manager.c: 67: if(PIE2bits.TMR6IE == 1 && PIR2bits.TMR6IF == 1)
 14268  001B  0021               	movlb	1	; select bank1
 14269  001C  1F92               	btfss	18,7	;volatile
 14270  001D  2823               	goto	i1l747
 14271  001E  0020               	movlb	0	; select bank0
 14272  001F  1F92               	btfss	18,7	;volatile
 14273  0020  2823               	goto	i1l747
 14274                           
 14275                           ;interrupt_manager.c: 68: {
 14276                           ;interrupt_manager.c: 69: TMR6_ISR();
 14277  0021  318A  22AB         	fcall	_TMR6_ISR
 14278  0023                     i1l747:	
 14279                           ;interrupt_manager.c: 76: else
 14280                           ;interrupt_manager.c: 77: {
 14281                           
 14282                           ;interrupt_manager.c: 74: }
 14283                           ;interrupt_manager.c: 75: }
 14284                           
 14285                           ;interrupt_manager.c: 71: else
 14286                           ;interrupt_manager.c: 72: {
 14287                           
 14288                           ;interrupt_manager.c: 70: }
 14289                           
 14290  0023  0020               	movlb	0	; select bank0
 14291  0024  0829               	movf	??_INTERRUPT_InterruptManager,w
 14292  0025  00FF               	movwf	127
 14293  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14294  0027  0009               	retfie
 14295  0028                     __end_of_INTERRUPT_InterruptManager:	
 14296                           
 14297                           	psect	text73
 14298  004D                     __ptext73:	
 14299 ;; *************** function _decodeIRSignal *****************
 14300 ;; Defined at:
 14301 ;;		line 16 in file "ir_handler.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;		None
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;  i               1    8[BANK0 ] unsigned char 
 14306 ;;  command         1    7[BANK0 ] unsigned char 
 14307 ;;  address         1    6[BANK0 ] unsigned char 
 14308 ;; Return value:  Size  Location     Type
 14309 ;;                  1    wreg      void 
 14310 ;; Registers used:
 14311 ;;		wreg, status,2, status,0, pclath, cstack
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:        7 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; Hardware stack levels required when called:    1
 14324 ;; This function calls:
 14325 ;;		_DATAEE_WriteByte
 14326 ;;		___awdiv
 14327 ;;		___awmod
 14328 ;;		i1_DATAEE_ReadByte
 14329 ;;		i1_EUSART_Write
 14330 ;; This function is called by:
 14331 ;;		_INTERRUPT_InterruptManager
 14332 ;; This function uses a non-reentrant model
 14333 ;;
 14334                           
 14335                           
 14336                           ;psect for function _decodeIRSignal
 14337  004D                     _decodeIRSignal:	
 14338                           
 14339                           ;ir_handler.c: 17: uint8_t i;
 14340                           ;ir_handler.c: 18: uint8_t address = 0;
 14341                           
 14342                           ;incstack = 0
 14343                           ; Regs used in _decodeIRSignal: [wreg+status,2+status,0+pclath+cstack]
 14344  004D  0020               	movlb	0	; select bank0
 14345  004E  01A6               	clrf	decodeIRSignal@address
 14346                           
 14347                           ;ir_handler.c: 19: uint8_t command = 0;
 14348  004F  01A7               	clrf	decodeIRSignal@command
 14349                           
 14350                           ;ir_handler.c: 21: _delay((unsigned long)((445)*(32000000/4000000.0)));
 14351  0050  3005               	movlw	5
 14352  0051  0020               	movlb	0	; select bank0
 14353  0052  00A2               	movwf	??_decodeIRSignal
 14354  0053  309E               	movlw	158
 14355  0054                     u580_27:	
 14356  0054  0B89               	decfsz	9,f
 14357  0055  2854               	goto	u580_27
 14358  0056  0BA2               	decfsz	??_decodeIRSignal,f
 14359  0057  2854               	goto	u580_27
 14360  0058  0000               	nop
 14361                           
 14362                           ;ir_handler.c: 22: if (!PORTAbits.RA2)
 14363  0059  0020               	movlb	0	; select bank0
 14364  005A  190C               	btfsc	12,2	;volatile
 14365  005B  0008               	return
 14366                           
 14367                           ;ir_handler.c: 23: _delay((unsigned long)((889)*(32000000/4000000.0)));
 14368  005C  300A               	movlw	10
 14369  005D  0020               	movlb	0	; select bank0
 14370  005E  00A2               	movwf	??_decodeIRSignal
 14371  005F  303B               	movlw	59
 14372  0060                     u581_27:	
 14373  0060  0B89               	decfsz	9,f
 14374  0061  2860               	goto	u581_27
 14375  0062  0BA2               	decfsz	??_decodeIRSignal,f
 14376  0063  2860               	goto	u581_27
 14377                           
 14378                           ;ir_handler.c: 26: if (PORTAbits.RA2)
 14379                           
 14380                           ;ir_handler.c: 24: else return;
 14381  0064  0020               	movlb	0	; select bank0
 14382  0065  1D0C               	btfss	12,2	;volatile
 14383  0066  0008               	return
 14384                           
 14385                           ;ir_handler.c: 27: _delay((unsigned long)((889)*(32000000/4000000.0)));
 14386  0067  300A               	movlw	10
 14387  0068  0020               	movlb	0	; select bank0
 14388  0069  00A2               	movwf	??_decodeIRSignal
 14389  006A  303B               	movlw	59
 14390  006B                     u582_27:	
 14391  006B  0B89               	decfsz	9,f
 14392  006C  286B               	goto	u582_27
 14393  006D  0BA2               	decfsz	??_decodeIRSignal,f
 14394  006E  286B               	goto	u582_27
 14395                           
 14396                           ;ir_handler.c: 30: if (!PORTAbits.RA2)
 14397                           
 14398                           ;ir_handler.c: 28: else return;
 14399  006F  0020               	movlb	0	; select bank0
 14400  0070  190C               	btfsc	12,2	;volatile
 14401  0071  0008               	return
 14402                           
 14403                           ;ir_handler.c: 31: _delay((unsigned long)((1778)*(32000000/4000000.0)));
 14404  0072  3013               	movlw	19
 14405  0073  0020               	movlb	0	; select bank0
 14406  0074  00A2               	movwf	??_decodeIRSignal
 14407  0075  3077               	movlw	119
 14408  0076                     u583_27:	
 14409  0076  0B89               	decfsz	9,f
 14410  0077  2876               	goto	u583_27
 14411  0078  0BA2               	decfsz	??_decodeIRSignal,f
 14412  0079  2876               	goto	u583_27
 14413  007A  3200               	nop2
 14414                           
 14415                           ;ir_handler.c: 34: for (i = 0; i < 12; i++) {
 14416                           
 14417                           ;ir_handler.c: 32: else return;
 14418  007B  0020               	movlb	0	; select bank0
 14419  007C  01A8               	clrf	decodeIRSignal@i
 14420  007D  300C               	movlw	12
 14421  007E  0228               	subwf	decodeIRSignal@i,w
 14422  007F  1803               	btfsc	3,0
 14423  0080  28E3               	goto	i1l4037
 14424  0081                     i1l4017:	
 14425                           
 14426                           ;ir_handler.c: 35: if (i == 0) {
 14427  0081  0828               	movf	decodeIRSignal@i,w
 14428  0082  1D03               	btfss	3,2
 14429  0083  288C               	goto	i1l4021
 14430                           
 14431                           ;ir_handler.c: 36: toggle = !PORTAbits.RA2;
 14432  0084  1003               	clrc
 14433  0085  1D0C               	btfss	12,2	;volatile
 14434  0086  1403               	setc
 14435  0087  3000               	movlw	0
 14436  0088  1803               	btfsc	3,0
 14437  0089  3001               	movlw	1
 14438  008A  00DA               	movwf	_toggle
 14439                           
 14440                           ;ir_handler.c: 37: } else {
 14441  008B  28D1               	goto	i1l4033
 14442  008C                     i1l4021:	
 14443                           
 14444                           ;ir_handler.c: 38: if (i < 6) {
 14445  008C  3006               	movlw	6
 14446  008D  0228               	subwf	decodeIRSignal@i,w
 14447  008E  1803               	skipnc
 14448  008F  28B1               	goto	i1l965
 14449                           
 14450                           ;ir_handler.c: 39: if (PORTAbits.RA2)
 14451  0090  1D0C               	btfss	12,2	;volatile
 14452  0091  28A2               	goto	i1l4027
 14453                           
 14454                           ;ir_handler.c: 40: address &= ~(1U << (5 - i));
 14455  0092  3001               	movlw	1
 14456  0093  00A2               	movwf	??_decodeIRSignal
 14457  0094  0328               	decf	decodeIRSignal@i,w
 14458  0095  3AFF               	xorlw	255
 14459  0096  3E05               	addlw	5
 14460  0097  0A89               	incf	9,f
 14461  0098  289A               	goto	u316_24
 14462  0099                     u316_25:	
 14463  0099  35A2               	lslf	??_decodeIRSignal,f
 14464  009A                     u316_24:	
 14465  009A  0B89               	decfsz	9,f
 14466  009B  2899               	goto	u316_25
 14467  009C  0822               	movf	??_decodeIRSignal,w
 14468  009D  3AFF               	xorlw	255
 14469  009E  00A3               	movwf	??_decodeIRSignal+1
 14470  009F  0823               	movf	??_decodeIRSignal+1,w
 14471  00A0  05A6               	andwf	decodeIRSignal@address,f
 14472  00A1  28D1               	goto	i1l4033
 14473  00A2                     i1l4027:	
 14474                           
 14475                           ;ir_handler.c: 41: else
 14476                           ;ir_handler.c: 42: address |= (1U << (5 - i));
 14477  00A2  3001               	movlw	1
 14478  00A3  00A2               	movwf	??_decodeIRSignal
 14479  00A4  0328               	decf	decodeIRSignal@i,w
 14480  00A5  3AFF               	xorlw	255
 14481  00A6  3E05               	addlw	5
 14482  00A7  0A89               	incf	9,f
 14483  00A8  28AA               	goto	u317_24
 14484  00A9                     u317_25:	
 14485  00A9  35A2               	lslf	??_decodeIRSignal,f
 14486  00AA                     u317_24:	
 14487  00AA  0B89               	decfsz	9,f
 14488  00AB  28A9               	goto	u317_25
 14489  00AC  0822               	movf	??_decodeIRSignal,w
 14490  00AD  00A3               	movwf	??_decodeIRSignal+1
 14491  00AE  0823               	movf	??_decodeIRSignal+1,w
 14492  00AF  04A6               	iorwf	decodeIRSignal@address,f
 14493                           
 14494                           ;ir_handler.c: 43: } else {
 14495  00B0  28D1               	goto	i1l4033
 14496  00B1                     i1l965:	
 14497                           
 14498                           ;ir_handler.c: 44: if (PORTAbits.RA2)
 14499  00B1  1D0C               	btfss	12,2	;volatile
 14500  00B2  28C3               	goto	i1l4031
 14501                           
 14502                           ;ir_handler.c: 45: command &= ~(1U << (11 - i));
 14503  00B3  3001               	movlw	1
 14504  00B4  00A2               	movwf	??_decodeIRSignal
 14505  00B5  0328               	decf	decodeIRSignal@i,w
 14506  00B6  3AFF               	xorlw	255
 14507  00B7  3E0B               	addlw	11
 14508  00B8  0A89               	incf	9,f
 14509  00B9  28BB               	goto	u319_24
 14510  00BA                     u319_25:	
 14511  00BA  35A2               	lslf	??_decodeIRSignal,f
 14512  00BB                     u319_24:	
 14513  00BB  0B89               	decfsz	9,f
 14514  00BC  28BA               	goto	u319_25
 14515  00BD  0822               	movf	??_decodeIRSignal,w
 14516  00BE  3AFF               	xorlw	255
 14517  00BF  00A3               	movwf	??_decodeIRSignal+1
 14518  00C0  0823               	movf	??_decodeIRSignal+1,w
 14519  00C1  05A7               	andwf	decodeIRSignal@command,f
 14520  00C2  28D1               	goto	i1l4033
 14521  00C3                     i1l4031:	
 14522                           
 14523                           ;ir_handler.c: 46: else
 14524                           ;ir_handler.c: 47: command |= (1U << (11 - i));
 14525  00C3  3001               	movlw	1
 14526  00C4  00A2               	movwf	??_decodeIRSignal
 14527  00C5  0328               	decf	decodeIRSignal@i,w
 14528  00C6  3AFF               	xorlw	255
 14529  00C7  3E0B               	addlw	11
 14530  00C8  0A89               	incf	9,f
 14531  00C9  28CB               	goto	u320_24
 14532  00CA                     u320_25:	
 14533  00CA  35A2               	lslf	??_decodeIRSignal,f
 14534  00CB                     u320_24:	
 14535  00CB  0B89               	decfsz	9,f
 14536  00CC  28CA               	goto	u320_25
 14537  00CD  0822               	movf	??_decodeIRSignal,w
 14538  00CE  00A3               	movwf	??_decodeIRSignal+1
 14539  00CF  0823               	movf	??_decodeIRSignal+1,w
 14540  00D0  04A7               	iorwf	decodeIRSignal@command,f
 14541  00D1                     i1l4033:	
 14542                           
 14543                           ;ir_handler.c: 48: }
 14544                           ;ir_handler.c: 49: }
 14545                           ;ir_handler.c: 50: _delay((unsigned long)((1778)*(32000000/4000000.0)));
 14546  00D1  3013               	movlw	19
 14547  00D2  0020               	movlb	0	; select bank0
 14548  00D3  00A2               	movwf	??_decodeIRSignal
 14549  00D4  3077               	movlw	119
 14550  00D5                     u584_27:	
 14551  00D5  0B89               	decfsz	9,f
 14552  00D6  28D5               	goto	u584_27
 14553  00D7  0BA2               	decfsz	??_decodeIRSignal,f
 14554  00D8  28D5               	goto	u584_27
 14555  00D9  3200               	nop2
 14556  00DA  3001               	movlw	1
 14557  00DB  0020               	movlb	0	; select bank0
 14558  00DC  00A2               	movwf	??_decodeIRSignal
 14559  00DD  0822               	movf	??_decodeIRSignal,w
 14560  00DE  07A8               	addwf	decodeIRSignal@i,f
 14561  00DF  300C               	movlw	12
 14562  00E0  0228               	subwf	decodeIRSignal@i,w
 14563  00E1  1C03               	skipc
 14564  00E2  2881               	goto	i1l4017
 14565  00E3                     i1l4037:	
 14566                           
 14567                           ;ir_handler.c: 51: }
 14568                           ;ir_handler.c: 53: t1 = toggle;
 14569  00E3  085A               	movf	_toggle,w
 14570  00E4  00A2               	movwf	??_decodeIRSignal
 14571  00E5  01A3               	clrf	??_decodeIRSignal+1
 14572  00E6  0822               	movf	??_decodeIRSignal,w
 14573  00E7  00CC               	movwf	_t1
 14574  00E8  0823               	movf	??_decodeIRSignal+1,w
 14575  00E9  00CD               	movwf	_t1+1
 14576                           
 14577                           ;ir_handler.c: 54: a1 = (uint8_t)((address / 10) % 10);
 14578  00EA  300A               	movlw	10
 14579  00EB  00F9               	movwf	___awmod@divisor
 14580  00EC  3000               	movlw	0
 14581  00ED  00FA               	movwf	___awmod@divisor+1
 14582  00EE  300A               	movlw	10
 14583  00EF  00F0               	movwf	___awdiv@divisor
 14584  00F0  3000               	movlw	0
 14585  00F1  00F1               	movwf	___awdiv@divisor+1
 14586  00F2  0826               	movf	decodeIRSignal@address,w
 14587  00F3  00A2               	movwf	??_decodeIRSignal
 14588  00F4  01A3               	clrf	??_decodeIRSignal+1
 14589  00F5  0822               	movf	??_decodeIRSignal,w
 14590  00F6  00F2               	movwf	___awdiv@dividend
 14591  00F7  0823               	movf	??_decodeIRSignal+1,w
 14592  00F8  00F3               	movwf	___awdiv@dividend+1
 14593  00F9  318F  2745  3180   	fcall	___awdiv
 14594  00FC  0871               	movf	?___awdiv+1,w
 14595  00FD  00FC               	movwf	___awmod@dividend+1
 14596  00FE  0870               	movf	?___awdiv,w
 14597  00FF  00FB               	movwf	___awmod@dividend
 14598  0100  318D  258E  3180   	fcall	___awmod
 14599  0103  0879               	movf	?___awmod,w
 14600  0104  0020               	movlb	0	; select bank0
 14601  0105  00A4               	movwf	??_decodeIRSignal+2
 14602  0106  01A5               	clrf	??_decodeIRSignal+3
 14603  0107  0824               	movf	??_decodeIRSignal+2,w
 14604  0108  00CA               	movwf	_a1
 14605  0109  0825               	movf	??_decodeIRSignal+3,w
 14606  010A  00CB               	movwf	_a1+1
 14607                           
 14608                           ;ir_handler.c: 55: a2 = (uint8_t)(address % 10);
 14609  010B  300A               	movlw	10
 14610  010C  00F9               	movwf	___awmod@divisor
 14611  010D  3000               	movlw	0
 14612  010E  00FA               	movwf	___awmod@divisor+1
 14613  010F  0826               	movf	decodeIRSignal@address,w
 14614  0110  00A2               	movwf	??_decodeIRSignal
 14615  0111  01A3               	clrf	??_decodeIRSignal+1
 14616  0112  0822               	movf	??_decodeIRSignal,w
 14617  0113  00FB               	movwf	___awmod@dividend
 14618  0114  0823               	movf	??_decodeIRSignal+1,w
 14619  0115  00FC               	movwf	___awmod@dividend+1
 14620  0116  318D  258E  3180   	fcall	___awmod
 14621  0119  0879               	movf	?___awmod,w
 14622  011A  0020               	movlb	0	; select bank0
 14623  011B  00A4               	movwf	??_decodeIRSignal+2
 14624  011C  01A5               	clrf	??_decodeIRSignal+3
 14625  011D  0824               	movf	??_decodeIRSignal+2,w
 14626  011E  00C8               	movwf	_a2
 14627  011F  0825               	movf	??_decodeIRSignal+3,w
 14628  0120  00C9               	movwf	_a2+1
 14629                           
 14630                           ;ir_handler.c: 56: c1 = (uint8_t)((command / 10) % 10);
 14631  0121  300A               	movlw	10
 14632  0122  00F9               	movwf	___awmod@divisor
 14633  0123  3000               	movlw	0
 14634  0124  00FA               	movwf	___awmod@divisor+1
 14635  0125  300A               	movlw	10
 14636  0126  00F0               	movwf	___awdiv@divisor
 14637  0127  3000               	movlw	0
 14638  0128  00F1               	movwf	___awdiv@divisor+1
 14639  0129  0827               	movf	decodeIRSignal@command,w
 14640  012A  00A2               	movwf	??_decodeIRSignal
 14641  012B  01A3               	clrf	??_decodeIRSignal+1
 14642  012C  0822               	movf	??_decodeIRSignal,w
 14643  012D  00F2               	movwf	___awdiv@dividend
 14644  012E  0823               	movf	??_decodeIRSignal+1,w
 14645  012F  00F3               	movwf	___awdiv@dividend+1
 14646  0130  318F  2745  3180   	fcall	___awdiv
 14647  0133  0871               	movf	?___awdiv+1,w
 14648  0134  00FC               	movwf	___awmod@dividend+1
 14649  0135  0870               	movf	?___awdiv,w
 14650  0136  00FB               	movwf	___awmod@dividend
 14651  0137  318D  258E  3180   	fcall	___awmod
 14652  013A  0879               	movf	?___awmod,w
 14653  013B  0020               	movlb	0	; select bank0
 14654  013C  00A4               	movwf	??_decodeIRSignal+2
 14655  013D  01A5               	clrf	??_decodeIRSignal+3
 14656  013E  0824               	movf	??_decodeIRSignal+2,w
 14657  013F  00C6               	movwf	_c1
 14658  0140  0825               	movf	??_decodeIRSignal+3,w
 14659  0141  00C7               	movwf	_c1+1
 14660                           
 14661                           ;ir_handler.c: 57: c2 = (uint8_t)(command % 10);
 14662  0142  300A               	movlw	10
 14663  0143  00F9               	movwf	___awmod@divisor
 14664  0144  3000               	movlw	0
 14665  0145  00FA               	movwf	___awmod@divisor+1
 14666  0146  0827               	movf	decodeIRSignal@command,w
 14667  0147  00A2               	movwf	??_decodeIRSignal
 14668  0148  01A3               	clrf	??_decodeIRSignal+1
 14669  0149  0822               	movf	??_decodeIRSignal,w
 14670  014A  00FB               	movwf	___awmod@dividend
 14671  014B  0823               	movf	??_decodeIRSignal+1,w
 14672  014C  00FC               	movwf	___awmod@dividend+1
 14673  014D  318D  258E  3180   	fcall	___awmod
 14674  0150  0879               	movf	?___awmod,w
 14675  0151  0020               	movlb	0	; select bank0
 14676  0152  00A4               	movwf	??_decodeIRSignal+2
 14677  0153  01A5               	clrf	??_decodeIRSignal+3
 14678  0154  0824               	movf	??_decodeIRSignal+2,w
 14679  0155  0021               	movlb	1	; select bank1
 14680  0156  00AC               	movwf	_c2^(0+128)
 14681  0157  0020               	movlb	0	; select bank0
 14682  0158  0825               	movf	??_decodeIRSignal+3,w
 14683  0159  0021               	movlb	1	; select bank1
 14684  015A  00AD               	movwf	(_c2+1)^(0+128)
 14685                           
 14686                           ;ir_handler.c: 58: sto = 1;
 14687  015B  3001               	movlw	1
 14688  015C  00B4               	movwf	_sto^(0+128)
 14689  015D  3000               	movlw	0
 14690  015E  00B5               	movwf	(_sto^(0+128)+1)
 14691                           
 14692                           ;ir_handler.c: 60: if (d == 1) {
 14693  015F  032E               	decf	_d^(0+128),w
 14694  0160  042F               	iorwf	(_d+1)^(0+128),w
 14695  0161  1D03               	btfss	3,2
 14696  0162  0008               	return
 14697                           
 14698                           ;ir_handler.c: 61: d = 0;
 14699  0163  01AE               	clrf	_d^(0+128)
 14700  0164  01AF               	clrf	(_d+1)^(0+128)
 14701                           
 14702                           ;ir_handler.c: 62: DATAEE_WriteByte(0x00, a1);
 14703  0165  3000               	movlw	0
 14704  0166  00F0               	movwf	DATAEE_WriteByte@bAdd
 14705  0167  00F1               	movwf	DATAEE_WriteByte@bAdd+1
 14706  0168  0020               	movlb	0	; select bank0
 14707  0169  084A               	movf	_a1,w
 14708  016A  00A2               	movwf	??_decodeIRSignal
 14709  016B  0822               	movf	??_decodeIRSignal,w
 14710  016C  00F2               	movwf	DATAEE_WriteByte@bData
 14711  016D  318B  2374  3180   	fcall	_DATAEE_WriteByte
 14712                           
 14713                           ;ir_handler.c: 63: _delay((unsigned long)((750)*(32000000/4000.0)));
 14714  0170  301F               	movlw	31
 14715  0171  0020               	movlb	0	; select bank0
 14716  0172  00A3               	movwf	??_decodeIRSignal+1
 14717  0173  3071               	movlw	113
 14718  0174  00A2               	movwf	??_decodeIRSignal
 14719  0175  301E               	movlw	30
 14720  0176                     u585_27:	
 14721  0176  0B89               	decfsz	9,f
 14722  0177  2976               	goto	u585_27
 14723  0178  0BA2               	decfsz	??_decodeIRSignal,f
 14724  0179  2976               	goto	u585_27
 14725  017A  0BA3               	decfsz	??_decodeIRSignal+1,f
 14726  017B  2976               	goto	u585_27
 14727  017C  0000               	nop
 14728                           
 14729                           ;ir_handler.c: 64: DATAEE_WriteByte(0x01, a2);
 14730  017D  3001               	movlw	1
 14731  017E  00F0               	movwf	DATAEE_WriteByte@bAdd
 14732  017F  3000               	movlw	0
 14733  0180  00F1               	movwf	DATAEE_WriteByte@bAdd+1
 14734  0181  0020               	movlb	0	; select bank0
 14735  0182  0848               	movf	_a2,w
 14736  0183  00A2               	movwf	??_decodeIRSignal
 14737  0184  0822               	movf	??_decodeIRSignal,w
 14738  0185  00F2               	movwf	DATAEE_WriteByte@bData
 14739  0186  318B  2374  3180   	fcall	_DATAEE_WriteByte
 14740                           
 14741                           ;ir_handler.c: 65: _delay((unsigned long)((750)*(32000000/4000.0)));
 14742  0189  301F               	movlw	31
 14743  018A  0020               	movlb	0	; select bank0
 14744  018B  00A3               	movwf	??_decodeIRSignal+1
 14745  018C  3071               	movlw	113
 14746  018D  00A2               	movwf	??_decodeIRSignal
 14747  018E  301E               	movlw	30
 14748  018F                     u586_27:	
 14749  018F  0B89               	decfsz	9,f
 14750  0190  298F               	goto	u586_27
 14751  0191  0BA2               	decfsz	??_decodeIRSignal,f
 14752  0192  298F               	goto	u586_27
 14753  0193  0BA3               	decfsz	??_decodeIRSignal+1,f
 14754  0194  298F               	goto	u586_27
 14755  0195  0000               	nop
 14756                           
 14757                           ;ir_handler.c: 66: d1 = DATAEE_ReadByte(0x00);
 14758  0196  3000               	movlw	0
 14759  0197  00F0               	movwf	i1DATAEE_ReadByte@bAdd
 14760  0198  00F1               	movwf	i1DATAEE_ReadByte@bAdd+1
 14761  0199  3189  21B2  3180   	fcall	i1_DATAEE_ReadByte
 14762  019C  0020               	movlb	0	; select bank0
 14763  019D  00A2               	movwf	??_decodeIRSignal
 14764  019E  01A3               	clrf	??_decodeIRSignal+1
 14765  019F  0822               	movf	??_decodeIRSignal,w
 14766  01A0  00D0               	movwf	_d1
 14767  01A1  0823               	movf	??_decodeIRSignal+1,w
 14768  01A2  00D1               	movwf	_d1+1
 14769                           
 14770                           ;ir_handler.c: 67: _delay((unsigned long)((650)*(32000000/4000.0)));
 14771  01A3  301B               	movlw	27
 14772  01A4  0020               	movlb	0	; select bank0
 14773  01A5  00A3               	movwf	??_decodeIRSignal+1
 14774  01A6  3062               	movlw	98
 14775  01A7  00A2               	movwf	??_decodeIRSignal
 14776  01A8  302B               	movlw	43
 14777  01A9                     u587_27:	
 14778  01A9  0B89               	decfsz	9,f
 14779  01AA  29A9               	goto	u587_27
 14780  01AB  0BA2               	decfsz	??_decodeIRSignal,f
 14781  01AC  29A9               	goto	u587_27
 14782  01AD  0BA3               	decfsz	??_decodeIRSignal+1,f
 14783  01AE  29A9               	goto	u587_27
 14784                           
 14785                           ;ir_handler.c: 68: d2 = DATAEE_ReadByte(0x01);
 14786  01AF  3001               	movlw	1
 14787  01B0  00F0               	movwf	i1DATAEE_ReadByte@bAdd
 14788  01B1  3000               	movlw	0
 14789  01B2  00F1               	movwf	i1DATAEE_ReadByte@bAdd+1
 14790  01B3  3189  21B2  3180   	fcall	i1_DATAEE_ReadByte
 14791  01B6  0020               	movlb	0	; select bank0
 14792  01B7  00A2               	movwf	??_decodeIRSignal
 14793  01B8  01A3               	clrf	??_decodeIRSignal+1
 14794  01B9  0822               	movf	??_decodeIRSignal,w
 14795  01BA  00CE               	movwf	_d2
 14796  01BB  0823               	movf	??_decodeIRSignal+1,w
 14797  01BC  00CF               	movwf	_d2+1
 14798                           
 14799                           ;ir_handler.c: 69: _delay((unsigned long)((650)*(32000000/4000.0)));
 14800  01BD  301B               	movlw	27
 14801  01BE  0020               	movlb	0	; select bank0
 14802  01BF  00A3               	movwf	??_decodeIRSignal+1
 14803  01C0  3062               	movlw	98
 14804  01C1  00A2               	movwf	??_decodeIRSignal
 14805  01C2  302B               	movlw	43
 14806  01C3                     u588_27:	
 14807  01C3  0B89               	decfsz	9,f
 14808  01C4  29C3               	goto	u588_27
 14809  01C5  0BA2               	decfsz	??_decodeIRSignal,f
 14810  01C6  29C3               	goto	u588_27
 14811  01C7  0BA3               	decfsz	??_decodeIRSignal+1,f
 14812  01C8  29C3               	goto	u588_27
 14813                           
 14814                           ;ir_handler.c: 70: EUSART_Write('V');
 14815  01C9  3056               	movlw	86
 14816  01CA  3189  2144  3180   	fcall	i1_EUSART_Write
 14817                           
 14818                           ;ir_handler.c: 71: _delay((unsigned long)((650)*(32000000/4000.0)));
 14819  01CD  301B               	movlw	27
 14820  01CE  0020               	movlb	0	; select bank0
 14821  01CF  00A3               	movwf	??_decodeIRSignal+1
 14822  01D0  3062               	movlw	98
 14823  01D1  00A2               	movwf	??_decodeIRSignal
 14824  01D2  302B               	movlw	43
 14825  01D3                     u589_27:	
 14826  01D3  0B89               	decfsz	9,f
 14827  01D4  29D3               	goto	u589_27
 14828  01D5  0BA2               	decfsz	??_decodeIRSignal,f
 14829  01D6  29D3               	goto	u589_27
 14830  01D7  0BA3               	decfsz	??_decodeIRSignal+1,f
 14831  01D8  29D3               	goto	u589_27
 14832  01D9  0008               	return
 14833  01DA                     __end_of_decodeIRSignal:	
 14834                           
 14835                           	psect	text74
 14836  0944                     __ptext74:	
 14837 ;; *************** function i1_EUSART_Write *****************
 14838 ;; Defined at:
 14839 ;;		line 132 in file "mcc_generated_files/eusart.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  txData          1    wreg     unsigned char 
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;  txData          1    0[COMMON] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  1    wreg      void 
 14846 ;; Registers used:
 14847 ;;		wreg
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;Total ram usage:        1 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; This function calls:
 14860 ;;		Nothing
 14861 ;; This function is called by:
 14862 ;;		_decodeIRSignal
 14863 ;; This function uses a non-reentrant model
 14864 ;;
 14865                           
 14866                           
 14867                           ;psect for function i1_EUSART_Write
 14868  0944                     i1_EUSART_Write:	
 14869                           
 14870                           ;incstack = 0
 14871                           ; Regs used in i1_EUSART_Write: [wreg]
 14872                           ;i1EUSART_Write@txData stored from wreg
 14873  0944  00F0               	movwf	i1EUSART_Write@txData
 14874  0945                     i1l695:	
 14875                           ;eusart.c: 135: {
 14876                           
 14877                           ;eusart.c: 134: while(0 == PIR1bits.TXIF)
 14878                           
 14879  0945  0020               	movlb	0	; select bank0
 14880  0946  1E11               	btfss	17,4	;volatile
 14881  0947  2945               	goto	i1l695
 14882                           
 14883                           ;eusart.c: 136: }
 14884                           ;eusart.c: 138: TX1REG = txData;
 14885  0948  0870               	movf	i1EUSART_Write@txData,w
 14886  0949  0023               	movlb	3	; select bank3
 14887  094A  009A               	movwf	26	;volatile
 14888  094B  0008               	return
 14889  094C                     __end_ofi1_EUSART_Write:	
 14890                           
 14891                           	psect	text75
 14892  09B2                     __ptext75:	
 14893 ;; *************** function i1_DATAEE_ReadByte *****************
 14894 ;; Defined at:
 14895 ;;		line 202 in file "mcc_generated_files/memory.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;  bAdd            2    0[COMMON] unsigned int 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;		None
 14900 ;; Return value:  Size  Location     Type
 14901 ;;                  1    wreg      unsigned char 
 14902 ;; Registers used:
 14903 ;;		wreg, status,2
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:        2 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; This function calls:
 14916 ;;		Nothing
 14917 ;; This function is called by:
 14918 ;;		_decodeIRSignal
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           
 14923                           ;psect for function i1_DATAEE_ReadByte
 14924  09B2                     i1_DATAEE_ReadByte:	
 14925                           
 14926                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 14927                           
 14928                           ;incstack = 0
 14929                           ; Regs used in i1_DATAEE_ReadByte: [wreg+status,2]
 14930  09B2  0871               	movf	i1DATAEE_ReadByte@bAdd+1,w
 14931  09B3  0031               	movlb	17	; select bank17
 14932  09B4  0092               	movwf	18	;volatile
 14933                           
 14934                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 14935  09B5  0870               	movf	i1DATAEE_ReadByte@bAdd,w
 14936  09B6  0091               	movwf	17	;volatile
 14937                           
 14938                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 14939  09B7  1715               	bsf	21,6	;volsfr
 14940                           
 14941                           ;memory.c: 207: NVMCON1bits.RD = 1;
 14942  09B8  1415               	bsf	21,0	;volsfr
 14943                           
 14944                           ;memory.c: 208: __nop();
 14945  09B9  0000               	nop
 14946                           
 14947                           ;memory.c: 209: __nop();
 14948  09BA  0000               	nop
 14949                           
 14950                           ;memory.c: 211: return (NVMDATL);
 14951  09BB  0031               	movlb	17	; select bank17
 14952  09BC  0813               	movf	19,w	;volatile
 14953  09BD  0008               	return
 14954  09BE                     __end_ofi1_DATAEE_ReadByte:	
 14955                           
 14956                           	psect	text76
 14957  0D8E                     __ptext76:	
 14958 ;; *************** function ___awmod *****************
 14959 ;; Defined at:
 14960 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 14961 ;; Parameters:    Size  Location     Type
 14962 ;;  divisor         2    9[COMMON] int 
 14963 ;;  dividend        2   11[COMMON] int 
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;  sign            1    1[BANK0 ] unsigned char 
 14966 ;;  counter         1    0[BANK0 ] unsigned char 
 14967 ;; Return value:  Size  Location     Type
 14968 ;;                  2    9[COMMON] int 
 14969 ;; Registers used:
 14970 ;;		wreg, status,2, status,0
 14971 ;; Tracked objects:
 14972 ;;		On entry : 0/0
 14973 ;;		On exit  : 0/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;Total ram usage:        7 bytes
 14981 ;; Hardware stack levels used:    1
 14982 ;; This function calls:
 14983 ;;		Nothing
 14984 ;; This function is called by:
 14985 ;;		_decodeIRSignal
 14986 ;; This function uses a non-reentrant model
 14987 ;;
 14988                           
 14989                           
 14990                           ;psect for function ___awmod
 14991  0D8E                     ___awmod:	
 14992                           
 14993                           ;incstack = 0
 14994                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14995  0D8E  0020               	movlb	0	; select bank0
 14996  0D8F  01A1               	clrf	___awmod@sign
 14997  0D90  1FFC               	btfss	___awmod@dividend+1,7
 14998  0D91  2D99               	goto	i1l3901
 14999  0D92  09FB               	comf	___awmod@dividend,f
 15000  0D93  09FC               	comf	___awmod@dividend+1,f
 15001  0D94  0AFB               	incf	___awmod@dividend,f
 15002  0D95  1903               	skipnz
 15003  0D96  0AFC               	incf	___awmod@dividend+1,f
 15004  0D97  01A1               	clrf	___awmod@sign
 15005  0D98  0AA1               	incf	___awmod@sign,f
 15006  0D99                     i1l3901:	
 15007  0D99  1FFA               	btfss	___awmod@divisor+1,7
 15008  0D9A  2DA0               	goto	i1l3905
 15009  0D9B  09F9               	comf	___awmod@divisor,f
 15010  0D9C  09FA               	comf	___awmod@divisor+1,f
 15011  0D9D  0AF9               	incf	___awmod@divisor,f
 15012  0D9E  1903               	skipnz
 15013  0D9F  0AFA               	incf	___awmod@divisor+1,f
 15014  0DA0                     i1l3905:	
 15015  0DA0  0879               	movf	___awmod@divisor,w
 15016  0DA1  047A               	iorwf	___awmod@divisor+1,w
 15017  0DA2  1903               	btfsc	3,2
 15018  0DA3  2DC7               	goto	i1l3923
 15019  0DA4  01A0               	clrf	___awmod@counter
 15020  0DA5  0AA0               	incf	___awmod@counter,f
 15021  0DA6                     i1l3913:	
 15022  0DA6  1BFA               	btfsc	___awmod@divisor+1,7
 15023  0DA7  2DB2               	goto	i1l3915
 15024  0DA8  3001               	movlw	1
 15025  0DA9                     u299_25:	
 15026  0DA9  35F9               	lslf	___awmod@divisor,f
 15027  0DAA  0DFA               	rlf	___awmod@divisor+1,f
 15028  0DAB  0B89               	decfsz	9,f
 15029  0DAC  2DA9               	goto	u299_25
 15030  0DAD  3001               	movlw	1
 15031  0DAE  00FD               	movwf	??___awmod
 15032  0DAF  087D               	movf	??___awmod,w
 15033  0DB0  07A0               	addwf	___awmod@counter,f
 15034  0DB1  2DA6               	goto	i1l3913
 15035  0DB2                     i1l3915:	
 15036  0DB2  087A               	movf	___awmod@divisor+1,w
 15037  0DB3  027C               	subwf	___awmod@dividend+1,w
 15038  0DB4  1D03               	skipz
 15039  0DB5  2DB8               	goto	u301_25
 15040  0DB6  0879               	movf	___awmod@divisor,w
 15041  0DB7  027B               	subwf	___awmod@dividend,w
 15042  0DB8                     u301_25:	
 15043  0DB8  1C03               	skipc
 15044  0DB9  2DBE               	goto	i1l3919
 15045  0DBA  0879               	movf	___awmod@divisor,w
 15046  0DBB  02FB               	subwf	___awmod@dividend,f
 15047  0DBC  087A               	movf	___awmod@divisor+1,w
 15048  0DBD  3BFC               	subwfb	___awmod@dividend+1,f
 15049  0DBE                     i1l3919:	
 15050  0DBE  3001               	movlw	1
 15051  0DBF                     u302_25:	
 15052  0DBF  36FA               	lsrf	___awmod@divisor+1,f
 15053  0DC0  0CF9               	rrf	___awmod@divisor,f
 15054  0DC1  0B89               	decfsz	9,f
 15055  0DC2  2DBF               	goto	u302_25
 15056  0DC3  3001               	movlw	1
 15057  0DC4  02A0               	subwf	___awmod@counter,f
 15058  0DC5  1D03               	btfss	3,2
 15059  0DC6  2DB2               	goto	i1l3915
 15060  0DC7                     i1l3923:	
 15061  0DC7  0821               	movf	___awmod@sign,w
 15062  0DC8  1903               	btfsc	3,2
 15063  0DC9  2DCF               	goto	i1l3927
 15064  0DCA  09FB               	comf	___awmod@dividend,f
 15065  0DCB  09FC               	comf	___awmod@dividend+1,f
 15066  0DCC  0AFB               	incf	___awmod@dividend,f
 15067  0DCD  1903               	skipnz
 15068  0DCE  0AFC               	incf	___awmod@dividend+1,f
 15069  0DCF                     i1l3927:	
 15070  0DCF  087C               	movf	___awmod@dividend+1,w
 15071  0DD0  00FA               	movwf	?___awmod+1
 15072  0DD1  087B               	movf	___awmod@dividend,w
 15073  0DD2  00F9               	movwf	?___awmod
 15074  0DD3  0008               	return
 15075  0DD4                     __end_of___awmod:	
 15076                           
 15077                           	psect	text77
 15078  0F45                     __ptext77:	
 15079 ;; *************** function ___awdiv *****************
 15080 ;; Defined at:
 15081 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 15082 ;; Parameters:    Size  Location     Type
 15083 ;;  divisor         2    0[COMMON] int 
 15084 ;;  dividend        2    2[COMMON] int 
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;  quotient        2    7[COMMON] int 
 15087 ;;  sign            1    6[COMMON] unsigned char 
 15088 ;;  counter         1    5[COMMON] unsigned char 
 15089 ;; Return value:  Size  Location     Type
 15090 ;;                  2    0[COMMON] int 
 15091 ;; Registers used:
 15092 ;;		wreg, status,2, status,0
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;Total ram usage:        9 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; This function calls:
 15105 ;;		Nothing
 15106 ;; This function is called by:
 15107 ;;		_decodeIRSignal
 15108 ;; This function uses a non-reentrant model
 15109 ;;
 15110                           
 15111                           
 15112                           ;psect for function ___awdiv
 15113  0F45                     ___awdiv:	
 15114                           
 15115                           ;incstack = 0
 15116                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15117  0F45  01F6               	clrf	___awdiv@sign
 15118  0F46  1FF1               	btfss	___awdiv@divisor+1,7
 15119  0F47  2F4F               	goto	i1l3857
 15120  0F48  09F0               	comf	___awdiv@divisor,f
 15121  0F49  09F1               	comf	___awdiv@divisor+1,f
 15122  0F4A  0AF0               	incf	___awdiv@divisor,f
 15123  0F4B  1903               	skipnz
 15124  0F4C  0AF1               	incf	___awdiv@divisor+1,f
 15125  0F4D  01F6               	clrf	___awdiv@sign
 15126  0F4E  0AF6               	incf	___awdiv@sign,f
 15127  0F4F                     i1l3857:	
 15128  0F4F  1FF3               	btfss	___awdiv@dividend+1,7
 15129  0F50  2F5A               	goto	i1l3863
 15130  0F51  09F2               	comf	___awdiv@dividend,f
 15131  0F52  09F3               	comf	___awdiv@dividend+1,f
 15132  0F53  0AF2               	incf	___awdiv@dividend,f
 15133  0F54  1903               	skipnz
 15134  0F55  0AF3               	incf	___awdiv@dividend+1,f
 15135  0F56  3001               	movlw	1
 15136  0F57  00F4               	movwf	??___awdiv
 15137  0F58  0874               	movf	??___awdiv,w
 15138  0F59  06F6               	xorwf	___awdiv@sign,f
 15139  0F5A                     i1l3863:	
 15140  0F5A  01F7               	clrf	___awdiv@quotient
 15141  0F5B  01F8               	clrf	___awdiv@quotient+1
 15142  0F5C  0870               	movf	___awdiv@divisor,w
 15143  0F5D  0471               	iorwf	___awdiv@divisor+1,w
 15144  0F5E  1903               	btfsc	3,2
 15145  0F5F  2F89               	goto	i1l3885
 15146  0F60  01F5               	clrf	___awdiv@counter
 15147  0F61  0AF5               	incf	___awdiv@counter,f
 15148  0F62                     i1l3873:	
 15149  0F62  1BF1               	btfsc	___awdiv@divisor+1,7
 15150  0F63  2F6E               	goto	i1l3875
 15151  0F64  3001               	movlw	1
 15152  0F65                     u289_25:	
 15153  0F65  35F0               	lslf	___awdiv@divisor,f
 15154  0F66  0DF1               	rlf	___awdiv@divisor+1,f
 15155  0F67  0B89               	decfsz	9,f
 15156  0F68  2F65               	goto	u289_25
 15157  0F69  3001               	movlw	1
 15158  0F6A  00F4               	movwf	??___awdiv
 15159  0F6B  0874               	movf	??___awdiv,w
 15160  0F6C  07F5               	addwf	___awdiv@counter,f
 15161  0F6D  2F62               	goto	i1l3873
 15162  0F6E                     i1l3875:	
 15163  0F6E  3001               	movlw	1
 15164  0F6F                     u291_25:	
 15165  0F6F  35F7               	lslf	___awdiv@quotient,f
 15166  0F70  0DF8               	rlf	___awdiv@quotient+1,f
 15167  0F71  0B89               	decfsz	9,f
 15168  0F72  2F6F               	goto	u291_25
 15169  0F73  0871               	movf	___awdiv@divisor+1,w
 15170  0F74  0273               	subwf	___awdiv@dividend+1,w
 15171  0F75  1D03               	skipz
 15172  0F76  2F79               	goto	u292_25
 15173  0F77  0870               	movf	___awdiv@divisor,w
 15174  0F78  0272               	subwf	___awdiv@dividend,w
 15175  0F79                     u292_25:	
 15176  0F79  1C03               	skipc
 15177  0F7A  2F80               	goto	i1l3881
 15178  0F7B  0870               	movf	___awdiv@divisor,w
 15179  0F7C  02F2               	subwf	___awdiv@dividend,f
 15180  0F7D  0871               	movf	___awdiv@divisor+1,w
 15181  0F7E  3BF3               	subwfb	___awdiv@dividend+1,f
 15182  0F7F  1477               	bsf	___awdiv@quotient,0
 15183  0F80                     i1l3881:	
 15184  0F80  3001               	movlw	1
 15185  0F81                     u293_25:	
 15186  0F81  36F1               	lsrf	___awdiv@divisor+1,f
 15187  0F82  0CF0               	rrf	___awdiv@divisor,f
 15188  0F83  0B89               	decfsz	9,f
 15189  0F84  2F81               	goto	u293_25
 15190  0F85  3001               	movlw	1
 15191  0F86  02F5               	subwf	___awdiv@counter,f
 15192  0F87  1D03               	btfss	3,2
 15193  0F88  2F6E               	goto	i1l3875
 15194  0F89                     i1l3885:	
 15195  0F89  0876               	movf	___awdiv@sign,w
 15196  0F8A  1903               	btfsc	3,2
 15197  0F8B  2F91               	goto	i1l3889
 15198  0F8C  09F7               	comf	___awdiv@quotient,f
 15199  0F8D  09F8               	comf	___awdiv@quotient+1,f
 15200  0F8E  0AF7               	incf	___awdiv@quotient,f
 15201  0F8F  1903               	skipnz
 15202  0F90  0AF8               	incf	___awdiv@quotient+1,f
 15203  0F91                     i1l3889:	
 15204  0F91  0878               	movf	___awdiv@quotient+1,w
 15205  0F92  00F1               	movwf	?___awdiv+1
 15206  0F93  0877               	movf	___awdiv@quotient,w
 15207  0F94  00F0               	movwf	?___awdiv
 15208  0F95  0008               	return
 15209  0F96                     __end_of___awdiv:	
 15210                           
 15211                           	psect	text78
 15212  0B74                     __ptext78:	
 15213 ;; *************** function _DATAEE_WriteByte *****************
 15214 ;; Defined at:
 15215 ;;		line 180 in file "mcc_generated_files/memory.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;  bAdd            2    0[COMMON] unsigned int 
 15218 ;;  bData           1    2[COMMON] unsigned char 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;  GIEBitValue     1    3[COMMON] unsigned char 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      void 
 15223 ;; Registers used:
 15224 ;;		wreg, status,2, status,0
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15230 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;Total ram usage:        4 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; This function calls:
 15237 ;;		Nothing
 15238 ;; This function is called by:
 15239 ;;		_decodeIRSignal
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           
 15244                           ;psect for function _DATAEE_WriteByte
 15245  0B74                     _DATAEE_WriteByte:	
 15246                           
 15247                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 15248                           
 15249                           ;incstack = 0
 15250                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 15251  0B74  3000               	movlw	0
 15252  0B75  1B8B               	btfsc	11,7	;volatile
 15253  0B76  3001               	movlw	1
 15254  0B77  00F3               	movwf	DATAEE_WriteByte@GIEBitValue
 15255                           
 15256                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 15257  0B78  0871               	movf	DATAEE_WriteByte@bAdd+1,w
 15258  0B79  0031               	movlb	17	; select bank17
 15259  0B7A  0092               	movwf	18	;volatile
 15260                           
 15261                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 15262  0B7B  0870               	movf	DATAEE_WriteByte@bAdd,w
 15263  0B7C  0091               	movwf	17	;volatile
 15264                           
 15265                           ;memory.c: 186: NVMDATL = bData;
 15266  0B7D  0872               	movf	DATAEE_WriteByte@bData,w
 15267  0B7E  0093               	movwf	19	;volatile
 15268                           
 15269                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 15270  0B7F  1715               	bsf	21,6	;volsfr
 15271                           
 15272                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 15273  0B80  1515               	bsf	21,2	;volsfr
 15274                           
 15275                           ;memory.c: 189: INTCONbits.GIE = 0;
 15276  0B81  138B               	bcf	11,7	;volatile
 15277                           
 15278                           ;memory.c: 190: NVMCON2 = 0x55;
 15279  0B82  3055               	movlw	85
 15280  0B83  0096               	movwf	22	;volsfr
 15281                           
 15282                           ;memory.c: 191: NVMCON2 = 0xAA;
 15283  0B84  30AA               	movlw	170
 15284  0B85  0096               	movwf	22	;volsfr
 15285                           
 15286                           ;memory.c: 192: NVMCON1bits.WR = 1;
 15287  0B86  1495               	bsf	21,1	;volsfr
 15288  0B87                     i1l839:	
 15289                           ;memory.c: 195: {
 15290                           
 15291                           ;memory.c: 194: while (NVMCON1bits.WR)
 15292                           
 15293  0B87  1895               	btfsc	21,1	;volsfr
 15294  0B88  2B87               	goto	i1l839
 15295                           
 15296                           ;memory.c: 196: }
 15297                           ;memory.c: 198: NVMCON1bits.WREN = 0;
 15298  0B89  1115               	bcf	21,2	;volsfr
 15299                           
 15300                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 15301  0B8A  0C73               	rrf	DATAEE_WriteByte@GIEBitValue,w
 15302  0B8B  1C03               	skipc
 15303  0B8C  138B               	bcf	11,7	;volatile
 15304  0B8D  1803               	skipnc
 15305  0B8E  178B               	bsf	11,7	;volatile
 15306  0B8F  0008               	return
 15307  0B90                     __end_of_DATAEE_WriteByte:	
 15308                           
 15309                           	psect	text79
 15310  0AAB                     __ptext79:	
 15311 ;; *************** function _TMR6_ISR *****************
 15312 ;; Defined at:
 15313 ;;		line 56 in file "mcc_generated_files/tmr6.c"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;		None
 15316 ;; Auto vars:     Size  Location     Type
 15317 ;;		None
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      void 
 15320 ;; Registers used:
 15321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;Total ram usage:        0 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    2
 15334 ;; This function calls:
 15335 ;;		Absolute function
 15336 ;;		_Sensor_Acq_ExecuteScan
 15337 ;;		_TMR6_DefaultInterruptHandler
 15338 ;; This function is called by:
 15339 ;;		_INTERRUPT_InterruptManager
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           
 15344                           ;psect for function _TMR6_ISR
 15345  0AAB                     _TMR6_ISR:	
 15346                           
 15347                           ;tmr6.c: 59: PIR2bits.TMR6IF = 0;
 15348                           
 15349                           ;incstack = 0
 15350                           ; Regs used in _TMR6_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15351  0AAB  0020               	movlb	0	; select bank0
 15352  0AAC  1392               	bcf	18,7	;volatile
 15353                           
 15354                           ;tmr6.c: 62: millis_counter++;
 15355  0AAD  3001               	movlw	1
 15356  0AAE  0021               	movlb	1	; select bank1
 15357  0AAF  07A4               	addwf	_millis_counter^(0+128),f	;volatile
 15358  0AB0  3000               	movlw	0
 15359  0AB1  3DA5               	addwfc	(_millis_counter+1)^(0+128),f	;volatile
 15360  0AB2  3000               	movlw	0
 15361  0AB3  3DA6               	addwfc	(_millis_counter+2)^(0+128),f	;volatile
 15362  0AB4  3000               	movlw	0
 15363  0AB5  3DA7               	addwfc	(_millis_counter+3)^(0+128),f	;volatile
 15364                           
 15365                           ;tmr6.c: 64: if (TMR6_InterruptHandler)
 15366  0AB6  086D               	movf	_TMR6_InterruptHandler^(0+128),w
 15367  0AB7  046E               	iorwf	(_TMR6_InterruptHandler+1)^(0+128),w
 15368  0AB8  1903               	btfsc	3,2
 15369  0AB9  0008               	return
 15370                           
 15371                           ;tmr6.c: 65: {
 15372                           ;tmr6.c: 66: TMR6_InterruptHandler();
 15373  0ABA  086E               	movf	(_TMR6_InterruptHandler+1)^(0+128),w
 15374  0ABB  008A               	movwf	10
 15375  0ABC  086D               	movf	_TMR6_InterruptHandler^(0+128),w
 15376  0ABD  000A               	callw
 15377  0ABE  318A               	pagesel	$
 15378  0ABF  0008               	return
 15379  0AC0                     __end_of_TMR6_ISR:	
 15380                           
 15381                           	psect	text80
 15382  02B7                     __ptext80:	
 15383 ;; *************** function _Sensor_Acq_ExecuteScan *****************
 15384 ;; Defined at:
 15385 ;;		line 392 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15386 ;; Parameters:    Size  Location     Type
 15387 ;;		None
 15388 ;; Auto vars:     Size  Location     Type
 15389 ;;  result          2    6[COMMON] unsigned int 
 15390 ;; Return value:  Size  Location     Type
 15391 ;;                  1    wreg      void 
 15392 ;; Registers used:
 15393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;Total ram usage:        4 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    1
 15406 ;; This function calls:
 15407 ;;		_MTOUCH_CVD_ScanA_0
 15408 ;;		_MTOUCH_CVD_ScanB_0
 15409 ;;		i1___bmul
 15410 ;;		i1_abs
 15411 ;; This function is called by:
 15412 ;;		_Sensor_Acq_ExecutePacket
 15413 ;;		_TMR6_ISR
 15414 ;; This function uses a non-reentrant model
 15415 ;;
 15416                           
 15417                           
 15418                           ;psect for function _Sensor_Acq_ExecuteScan
 15419  02B7                     _Sensor_Acq_ExecuteScan:	
 15420  02B7                     i1l413:	
 15421                           ;mtouch_sensor.c: 394: while(ADCON0bits.ADGO);
 15422                           
 15423                           ;incstack = 0
 15424                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15425                           
 15426  02B7  0021               	movlb	1	; select bank1
 15427  02B8  189D               	btfsc	29,1	;volatile
 15428  02B9  2AB7               	goto	i1l413
 15429                           
 15430                           ;mtouch_sensor.c: 396: mtouch_sensor_adcsample_t result = ADRES;
 15431  02BA  081C               	movf	28,w	;volatile
 15432  02BB  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
 15433  02BC  081B               	movf	27,w	;volatile
 15434  02BD  00F6               	movwf	Sensor_Acq_ExecuteScan@result
 15435                           
 15436                           ;mtouch_sensor.c: 397: static mtouch_sensor_adcsample_t last_a,last_b;
 15437                           ;mtouch_sensor.c: 399: if(sensor_globalFlags.packet_done)
 15438  02BE  0020               	movlb	0	; select bank0
 15439  02BF  1862               	btfsc	_sensor_globalFlags,0	;volatile
 15440  02C0  0008               	return
 15441                           
 15442                           ;mtouch_sensor.c: 402: if (packet_counter != (uint8_t)0)
 15443                           
 15444                           ;mtouch_sensor.c: 400: return;
 15445  02C1  0860               	movf	_packet_counter,w
 15446  02C2  1D03               	btfss	3,2
 15447  02C3  2AD3               	goto	i1l5029
 15448  02C4  2B4B               	goto	i1l5049
 15449  02C5                     i1l5023:	
 15450                           ;mtouch_sensor.c: 406: {
 15451                           ;mtouch_sensor.c: 407: case 0: Sensor_scanA();break;
 15452                           
 15453                           ;mtouch_sensor.c: 403: {
 15454                           ;mtouch_sensor.c: 405: switch(packet_counter & 0x01)
 15455                           
 15456  02C5  0021               	movlb	1	; select bank1
 15457  02C6  0854               	movf	(_Sensor_scanA+1)^(0+128),w
 15458  02C7  008A               	movwf	10
 15459  02C8  0853               	movf	_Sensor_scanA^(0+128),w
 15460  02C9  000A               	callw
 15461  02CA  3182               	pagesel	$
 15462  02CB  2AEC               	goto	i1l5031
 15463  02CC                     i1l5025:	
 15464                           ;mtouch_sensor.c: 408: case 1: Sensor_scanB();break;
 15465                           
 15466  02CC  0021               	movlb	1	; select bank1
 15467  02CD  0852               	movf	(_Sensor_scanB+1)^(0+128),w
 15468  02CE  008A               	movwf	10
 15469  02CF  0851               	movf	_Sensor_scanB^(0+128),w
 15470  02D0  000A               	callw
 15471  02D1  3182               	pagesel	$
 15472                           
 15473                           ;mtouch_sensor.c: 410: }
 15474                           
 15475                           ;mtouch_sensor.c: 409: default: break;
 15476  02D2  2AEC               	goto	i1l5031
 15477  02D3                     i1l5029:	
 15478  02D3  0020               	movlb	0	; select bank0
 15479  02D4  0860               	movf	_packet_counter,w
 15480  02D5  3901               	andlw	1
 15481  02D6  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15482  02D7  01F5               	clrf	??_Sensor_Acq_ExecuteScan+1
 15483                           
 15484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15485                           ; Switch size 1, requested type "time"
 15486                           ; Number of cases is 1, Range of values is 0 to 0
 15487                           ; switch strategies available:
 15488                           ; Name         Instructions Cycles
 15489                           ; direct_byte            8     6 (fixed)
 15490                           ; simple_byte            4     3 (average)
 15491                           ; jumptable            260     6 (fixed)
 15492                           ;	Chosen strategy is direct_byte
 15493  02D8  0875               	movf	??_Sensor_Acq_ExecuteScan+1,w
 15494  02D9  0084               	movwf	4
 15495  02DA  3001               	movlw	1
 15496  02DB  0204               	subwf	4,w
 15497  02DC  1803               	skipnc
 15498  02DD  2AEC               	goto	i1l5031
 15499  02DE  3188               	movlp	high i1S5629
 15500  02DF  3504               	lslf	4,w
 15501  02E0  3E04               	addlw	low i1S5629
 15502  02E1  0082               	movwf	2
 15503  02E2                     i1l5627:	
 15504                           
 15505                           ; Switch size 1, requested type "time"
 15506                           ; Number of cases is 2, Range of values is 0 to 1
 15507                           ; switch strategies available:
 15508                           ; Name         Instructions Cycles
 15509                           ; direct_byte           10     6 (fixed)
 15510                           ; simple_byte            7     4 (average)
 15511                           ; jumptable            260     6 (fixed)
 15512                           ;	Chosen strategy is direct_byte
 15513  02E2  0874               	movf	??_Sensor_Acq_ExecuteScan,w
 15514  02E3  0084               	movwf	4
 15515  02E4  3002               	movlw	2
 15516  02E5  0204               	subwf	4,w
 15517  02E6  1803               	skipnc
 15518  02E7  2AEC               	goto	i1l5031
 15519  02E8  3188               	movlp	high i1S5631
 15520  02E9  3504               	lslf	4,w
 15521  02EA  3E00               	addlw	low i1S5631
 15522  02EB  0082               	movwf	2
 15523  02EC                     i1l5031:	
 15524                           
 15525                           ;mtouch_sensor.c: 412: if(packet_counter!=mtouch_sensor[currentScannSensor].oversampling
      +                          )
 15526  02EC  3009               	movlw	9
 15527  02ED  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15528  02EE  0874               	movf	??_Sensor_Acq_ExecuteScan,w
 15529  02EF  00F0               	movwf	i1___bmul@multiplicand
 15530  02F0  0020               	movlb	0	; select bank0
 15531  02F1  0861               	movf	_currentScannSensor,w
 15532  02F2  318A  223D  3182   	fcall	i1___bmul
 15533  02F5  3E05               	addlw	5
 15534  02F6  3EE4               	addlw	(low (_mtouch_sensor| 0))& (0+255)
 15535  02F7  0086               	movwf	6
 15536  02F8  0187               	clrf	7
 15537  02F9  0801               	movf	1,w
 15538  02FA  0020               	movlb	0	; select bank0
 15539  02FB  0660               	xorwf	_packet_counter,w
 15540  02FC  1903               	skipnz
 15541  02FD  2B48               	goto	i1l5047
 15542                           
 15543                           ;mtouch_sensor.c: 413: {
 15544                           ;mtouch_sensor.c: 414: if(packet_counter & 0x01)
 15545  02FE  1C60               	btfss	_packet_counter,0
 15546  02FF  2B29               	goto	i1l5041
 15547                           
 15548                           ;mtouch_sensor.c: 415: {
 15549                           ;mtouch_sensor.c: 416: result = ((mtouch_sensor_adcsample_t)1024u) - result;
 15550  0300  0976               	comf	Sensor_Acq_ExecuteScan@result,w
 15551  0301  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15552  0302  0977               	comf	Sensor_Acq_ExecuteScan@result+1,w
 15553  0303  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
 15554  0304  0AF4               	incf	??_Sensor_Acq_ExecuteScan,f
 15555  0305  1903               	skipnz
 15556  0306  0AF5               	incf	??_Sensor_Acq_ExecuteScan+1,f
 15557  0307  0874               	movf	??_Sensor_Acq_ExecuteScan,w
 15558  0308  3E00               	addlw	0
 15559  0309  00F6               	movwf	Sensor_Acq_ExecuteScan@result
 15560  030A  3004               	movlw	4
 15561  030B  3D75               	addwfc	??_Sensor_Acq_ExecuteScan+1,w
 15562  030C  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
 15563                           
 15564                           ;mtouch_sensor.c: 417: packet_noise += (mtouch_sensor_packetsample_t)abs(last_a-result);
 15565  030D  0976               	comf	Sensor_Acq_ExecuteScan@result,w
 15566  030E  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15567  030F  0977               	comf	Sensor_Acq_ExecuteScan@result+1,w
 15568  0310  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
 15569  0311  0AF4               	incf	??_Sensor_Acq_ExecuteScan,f
 15570  0312  1903               	skipnz
 15571  0313  0AF5               	incf	??_Sensor_Acq_ExecuteScan+1,f
 15572  0314  0021               	movlb	1	; select bank1
 15573  0315  0832               	movf	Sensor_Acq_ExecuteScan@last_a^(0+128),w
 15574  0316  0774               	addwf	??_Sensor_Acq_ExecuteScan,w
 15575  0317  00F0               	movwf	i1abs@a
 15576  0318  0833               	movf	(Sensor_Acq_ExecuteScan@last_a+1)^(0+128),w
 15577  0319  3D75               	addwfc	??_Sensor_Acq_ExecuteScan+1,w
 15578  031A  00F1               	movwf	i1abs@a+1
 15579  031B  3189  21D6  3182   	fcall	i1_abs
 15580  031E  0870               	movf	?i1_abs,w
 15581  031F  0020               	movlb	0	; select bank0
 15582  0320  07D2               	addwf	_packet_noise,f
 15583  0321  0871               	movf	?i1_abs+1,w
 15584  0322  3DD3               	addwfc	_packet_noise+1,f
 15585                           
 15586                           ;mtouch_sensor.c: 418: last_a = result;
 15587  0323  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 15588  0324  0021               	movlb	1	; select bank1
 15589  0325  00B3               	movwf	(Sensor_Acq_ExecuteScan@last_a+1)^(0+128)
 15590  0326  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 15591  0327  00B2               	movwf	Sensor_Acq_ExecuteScan@last_a^(0+128)
 15592                           
 15593                           ;mtouch_sensor.c: 419: }
 15594  0328  2B43               	goto	i1l5045
 15595  0329                     i1l5041:	
 15596                           
 15597                           ;mtouch_sensor.c: 420: else
 15598                           ;mtouch_sensor.c: 421: {
 15599                           ;mtouch_sensor.c: 422: packet_noise += (mtouch_sensor_packetsample_t)abs(last_b-result);
 15600  0329  0976               	comf	Sensor_Acq_ExecuteScan@result,w
 15601  032A  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15602  032B  0977               	comf	Sensor_Acq_ExecuteScan@result+1,w
 15603  032C  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
 15604  032D  0AF4               	incf	??_Sensor_Acq_ExecuteScan,f
 15605  032E  1903               	skipnz
 15606  032F  0AF5               	incf	??_Sensor_Acq_ExecuteScan+1,f
 15607  0330  0021               	movlb	1	; select bank1
 15608  0331  0830               	movf	Sensor_Acq_ExecuteScan@last_b^(0+128),w
 15609  0332  0774               	addwf	??_Sensor_Acq_ExecuteScan,w
 15610  0333  00F0               	movwf	i1abs@a
 15611  0334  0831               	movf	(Sensor_Acq_ExecuteScan@last_b+1)^(0+128),w
 15612  0335  3D75               	addwfc	??_Sensor_Acq_ExecuteScan+1,w
 15613  0336  00F1               	movwf	i1abs@a+1
 15614  0337  3189  21D6         	fcall	i1_abs
 15615  0339  0870               	movf	?i1_abs,w
 15616  033A  0020               	movlb	0	; select bank0
 15617  033B  07D2               	addwf	_packet_noise,f
 15618  033C  0871               	movf	?i1_abs+1,w
 15619  033D  3DD3               	addwfc	_packet_noise+1,f
 15620                           
 15621                           ;mtouch_sensor.c: 423: last_b = result;
 15622  033E  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 15623  033F  0021               	movlb	1	; select bank1
 15624  0340  00B1               	movwf	(Sensor_Acq_ExecuteScan@last_b+1)^(0+128)
 15625  0341  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 15626  0342  00B0               	movwf	Sensor_Acq_ExecuteScan@last_b^(0+128)
 15627  0343                     i1l5045:	
 15628                           
 15629                           ;mtouch_sensor.c: 424: }
 15630                           ;mtouch_sensor.c: 425: packet_sample += result;
 15631  0343  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 15632  0344  0020               	movlb	0	; select bank0
 15633  0345  07D4               	addwf	_packet_sample,f
 15634  0346  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 15635  0347  3DD5               	addwfc	_packet_sample+1,f
 15636  0348                     i1l5047:	
 15637                           
 15638                           ;mtouch_sensor.c: 426: }
 15639                           ;mtouch_sensor.c: 427: packet_counter--;
 15640  0348  3001               	movlw	1
 15641  0349  02E0               	subwf	_packet_counter,f
 15642                           
 15643                           ;mtouch_sensor.c: 428: }
 15644  034A  0008               	return
 15645  034B                     i1l5049:	
 15646                           
 15647                           ;mtouch_sensor.c: 429: else
 15648                           ;mtouch_sensor.c: 430: {
 15649                           ;mtouch_sensor.c: 431: packet_sample += result;
 15650  034B  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 15651  034C  07D4               	addwf	_packet_sample,f
 15652  034D  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 15653  034E  3DD5               	addwfc	_packet_sample+1,f
 15654                           
 15655                           ;mtouch_sensor.c: 432: packet_noise += (mtouch_sensor_packetsample_t)abs(last_b-result);
 15656  034F  0976               	comf	Sensor_Acq_ExecuteScan@result,w
 15657  0350  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 15658  0351  0977               	comf	Sensor_Acq_ExecuteScan@result+1,w
 15659  0352  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
 15660  0353  0AF4               	incf	??_Sensor_Acq_ExecuteScan,f
 15661  0354  1903               	skipnz
 15662  0355  0AF5               	incf	??_Sensor_Acq_ExecuteScan+1,f
 15663  0356  0021               	movlb	1	; select bank1
 15664  0357  0830               	movf	Sensor_Acq_ExecuteScan@last_b^(0+128),w
 15665  0358  0774               	addwf	??_Sensor_Acq_ExecuteScan,w
 15666  0359  00F0               	movwf	i1abs@a
 15667  035A  0831               	movf	(Sensor_Acq_ExecuteScan@last_b+1)^(0+128),w
 15668  035B  3D75               	addwfc	??_Sensor_Acq_ExecuteScan+1,w
 15669  035C  00F1               	movwf	i1abs@a+1
 15670  035D  3189  21D6         	fcall	i1_abs
 15671  035F  0870               	movf	?i1_abs,w
 15672  0360  0020               	movlb	0	; select bank0
 15673  0361  07D2               	addwf	_packet_noise,f
 15674  0362  0871               	movf	?i1_abs+1,w
 15675  0363  3DD3               	addwfc	_packet_noise+1,f
 15676                           
 15677                           ;mtouch_sensor.c: 433: sensor_globalFlags.packet_done = (uint8_t)1;
 15678  0364  1462               	bsf	_sensor_globalFlags,0	;volatile
 15679  0365  0008               	return
 15680  0366                     __end_of_Sensor_Acq_ExecuteScan:	
 15681                           
 15682                           	psect	swtext1
 15683  0804                     __pswtext1:	
 15684  0804                     i1S5629:	
 15685  0804  3182  2AE2         	ljmp	i1l5627
 15686                           
 15687                           	psect	swtext2
 15688  0800                     __pswtext2:	
 15689  0800                     i1S5631:	
 15690  0800  3182  2AC5         	ljmp	i1l5023
 15691  0802  3182  2ACC         	ljmp	i1l5025
 15692                           
 15693                           	psect	text81
 15694  0910                     __ptext81:	
 15695 ;; *************** function _TMR6_DefaultInterruptHandler *****************
 15696 ;; Defined at:
 15697 ;;		line 75 in file "mcc_generated_files/tmr6.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;		None
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;		None
 15702 ;; Return value:  Size  Location     Type
 15703 ;;                  1    wreg      void 
 15704 ;; Registers used:
 15705 ;;		None
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        0 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; This function calls:
 15718 ;;		Nothing
 15719 ;; This function is called by:
 15720 ;;		_TMR6_Initialize
 15721 ;;		_TMR6_ISR
 15722 ;; This function uses a non-reentrant model
 15723 ;;
 15724                           
 15725                           
 15726                           ;psect for function _TMR6_DefaultInterruptHandler
 15727  0910                     _TMR6_DefaultInterruptHandler:	
 15728                           
 15729                           ;incstack = 0
 15730                           ; Regs used in _TMR6_DefaultInterruptHandler: []
 15731  0910  0008               	return
 15732  0911                     __end_of_TMR6_DefaultInterruptHandler:	
 15733                           
 15734                           	psect	text82
 15735  09D6                     __ptext82:	
 15736 ;; *************** function i1_abs *****************
 15737 ;; Defined at:
 15738 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\abs.c"
 15739 ;; Parameters:    Size  Location     Type
 15740 ;;  a               2    0[COMMON] int 
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;		None
 15743 ;; Return value:  Size  Location     Type
 15744 ;;                  2    0[COMMON] int 
 15745 ;; Registers used:
 15746 ;;		wreg, status,2, status,0
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;Total ram usage:        4 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; This function calls:
 15759 ;;		Nothing
 15760 ;; This function is called by:
 15761 ;;		_Sensor_Acq_ExecuteScan
 15762 ;; This function uses a non-reentrant model
 15763 ;;
 15764                           
 15765                           
 15766                           ;psect for function i1_abs
 15767  09D6                     i1_abs:	
 15768                           
 15769                           ;incstack = 0
 15770                           ; Regs used in i1_abs: [wreg+status,2+status,0]
 15771  09D6  1FF1               	btfss	i1abs@a+1,7
 15772  09D7  0008               	return
 15773  09D8  0970               	comf	i1abs@a,w
 15774  09D9  00F2               	movwf	??i1_abs
 15775  09DA  0971               	comf	i1abs@a+1,w
 15776  09DB  00F3               	movwf	??i1_abs+1
 15777  09DC  0AF2               	incf	??i1_abs,f
 15778  09DD  1903               	skipnz
 15779  09DE  0AF3               	incf	??i1_abs+1,f
 15780  09DF  0872               	movf	??i1_abs,w
 15781  09E0  00F0               	movwf	?i1_abs
 15782  09E1  0873               	movf	??i1_abs+1,w
 15783  09E2  00F1               	movwf	?i1_abs+1
 15784  09E3  0008               	return
 15785  09E4                     __end_ofi1_abs:	
 15786                           
 15787                           	psect	text83
 15788  0A3D                     __ptext83:	
 15789 ;; *************** function i1___bmul *****************
 15790 ;; Defined at:
 15791 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul8.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;  multiplier      1    wreg     unsigned char 
 15794 ;;  multiplicand    1    0[COMMON] unsigned char 
 15795 ;; Auto vars:     Size  Location     Type
 15796 ;;  multiplier      1    2[COMMON] unsigned char 
 15797 ;;  __bmul          1    3[COMMON] unsigned char 
 15798 ;; Return value:  Size  Location     Type
 15799 ;;                  1    wreg      unsigned char 
 15800 ;; Registers used:
 15801 ;;		wreg, status,2, status,0
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15807 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;Total ram usage:        4 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; This function calls:
 15814 ;;		Nothing
 15815 ;; This function is called by:
 15816 ;;		_Sensor_Acq_ExecuteScan
 15817 ;; This function uses a non-reentrant model
 15818 ;;
 15819                           
 15820                           
 15821                           ;psect for function i1___bmul
 15822  0A3D                     i1___bmul:	
 15823                           
 15824                           ;incstack = 0
 15825                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 15826                           ;i1___bmul@multiplier stored from wreg
 15827  0A3D  00F2               	movwf	i1___bmul@multiplier
 15828  0A3E  01F3               	clrf	i1___bmul@product
 15829  0A3F                     i1l3605:	
 15830  0A3F  1C72               	btfss	i1___bmul@multiplier,0
 15831  0A40  2A45               	goto	i1l3609
 15832  0A41  0870               	movf	i1___bmul@multiplicand,w
 15833  0A42  00F1               	movwf	??i1___bmul
 15834  0A43  0871               	movf	??i1___bmul,w
 15835  0A44  07F3               	addwf	i1___bmul@product,f
 15836  0A45                     i1l3609:	
 15837  0A45  1003               	clrc
 15838  0A46  0DF0               	rlf	i1___bmul@multiplicand,f
 15839  0A47  1003               	clrc
 15840  0A48  0CF2               	rrf	i1___bmul@multiplier,f
 15841  0A49  0872               	movf	i1___bmul@multiplier,w
 15842  0A4A  1D03               	btfss	3,2
 15843  0A4B  2A3F               	goto	i1l3605
 15844  0A4C  0873               	movf	i1___bmul@product,w
 15845  0A4D  0008               	return
 15846  0A4E                     __end_ofi1___bmul:	
 15847                           
 15848                           	psect	text84
 15849  0C7F                     __ptext84:	
 15850 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
 15851 ;; Defined at:
 15852 ;;		line 119 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;		None
 15855 ;; Auto vars:     Size  Location     Type
 15856 ;;		None
 15857 ;; Return value:  Size  Location     Type
 15858 ;;                  1    wreg      void 
 15859 ;; Registers used:
 15860 ;;		wreg
 15861 ;; Tracked objects:
 15862 ;;		On entry : 0/0
 15863 ;;		On exit  : 0/0
 15864 ;;		Unchanged: 0/0
 15865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15870 ;;Total ram usage:        0 bytes
 15871 ;; Hardware stack levels used:    1
 15872 ;; This function calls:
 15873 ;;		Nothing
 15874 ;; This function is called by:
 15875 ;;		_Sensor_Acq_ExecuteScan
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           
 15880                           ;psect for function _MTOUCH_CVD_ScanB_0
 15881  0C7F                     _MTOUCH_CVD_ScanB_0:	
 15882                           
 15883                           ;incstack = 0
 15884                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
 15885  0C7F  0022               	banksel	270	;# 
 15886  0C80  110E               	bcf	14,2	;# 
 15887  0C81  0021               	banksel	157	;# 
 15888  0C82  3049               	movlw	73	;# 
 15889  0C83  009D               	movwf	29	;# 
 15890                           
 15891                           ;mtouch_sensor_scan.c: 131: _delay(16u);
 15892  0C84  3005               	movlw	5
 15893  0C85                     u590_27:	
 15894  0C85  0B89               	decfsz	9,f
 15895  0C86  2C85               	goto	u590_27
 15896  0C87  0000               	nop
 15897  0C88  3071               	movlw	113	;# 
 15898  0C89  009D               	movwf	29	;# 
 15899  0C8A  0022               	banksel	270	;# 
 15900  0C8B  150E               	bsf	14,2	;# 
 15901  0C8C  0021               	banksel	157	;# 
 15902  0C8D  308E               	movlw	142	;# 
 15903  0C8E  0084               	movwf	4	;# 
 15904  0C8F  3000               	movlw	0	;# 
 15905  0C90  0085               	movwf	5	;# 
 15906  0C91  300C               	movlw	12	;# 
 15907  0C92  0086               	movwf	6	;# 
 15908  0C93  3001               	movlw	1	;# 
 15909  0C94  0087               	movwf	7	;# 
 15910  0C95  3049               	movlw	73	;# 
 15911  0C96  1500               	bsf	0,2	;# 
 15912                           
 15913                           ;mtouch_sensor_scan.c: 155: _delay(0u);
 15914  0C97  009D               	movwf	29	;# 
 15915  0C98  1281               	bcf	1,5	;# 
 15916                           
 15917                           ;mtouch_sensor_scan.c: 162: _delay(8u);
 15918  0C99  3200               	nop2	;2 cycle nop
 15919  0C9A  3200               	nop2	;2 cycle nop
 15920  0C9B  3200               	nop2	;2 cycle nop
 15921  0C9C  3200               	nop2	;2 cycle nop
 15922  0C9D  0021               	banksel	157	;# 
 15923  0C9E  149D               	bsf	29,1	;# 
 15924                           
 15925                           ;mtouch_sensor_scan.c: 169: _delay(3u);
 15926  0C9F  3200               	nop2	;2 cycle nop
 15927  0CA0  0000               	nop
 15928  0CA1  0022               	banksel	270	;# 
 15929  0CA2  110E               	bcf	14,2	;# 
 15930  0CA3  1100               	bcf	0,2	;# 
 15931  0CA4  0008               	return
 15932  0CA5                     __end_of_MTOUCH_CVD_ScanB_0:	
 15933                           
 15934                           	psect	text85
 15935  0C59                     __ptext85:	
 15936 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
 15937 ;; Defined at:
 15938 ;;		line 50 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 15939 ;; Parameters:    Size  Location     Type
 15940 ;;		None
 15941 ;; Auto vars:     Size  Location     Type
 15942 ;;		None
 15943 ;; Return value:  Size  Location     Type
 15944 ;;                  1    wreg      void 
 15945 ;; Registers used:
 15946 ;;		wreg
 15947 ;; Tracked objects:
 15948 ;;		On entry : 0/0
 15949 ;;		On exit  : 0/0
 15950 ;;		Unchanged: 0/0
 15951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;Total ram usage:        0 bytes
 15957 ;; Hardware stack levels used:    1
 15958 ;; This function calls:
 15959 ;;		Nothing
 15960 ;; This function is called by:
 15961 ;;		_Sensor_Acq_ExecuteScan
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function _MTOUCH_CVD_ScanA_0
 15967  0C59                     _MTOUCH_CVD_ScanA_0:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
 15971  0C59  0022               	banksel	270	;# 
 15972  0C5A  150E               	bsf	14,2	;# 
 15973  0C5B  0021               	banksel	157	;# 
 15974  0C5C  3049               	movlw	73	;# 
 15975  0C5D  009D               	movwf	29	;# 
 15976                           
 15977                           ;mtouch_sensor_scan.c: 62: _delay(16u);
 15978  0C5E  3005               	movlw	5
 15979  0C5F                     u591_27:	
 15980  0C5F  0B89               	decfsz	9,f
 15981  0C60  2C5F               	goto	u591_27
 15982  0C61  0000               	nop
 15983  0C62  3071               	movlw	113	;# 
 15984  0C63  009D               	movwf	29	;# 
 15985  0C64  0022               	banksel	270	;# 
 15986  0C65  110E               	bcf	14,2	;# 
 15987  0C66  0021               	banksel	157	;# 
 15988  0C67  308E               	movlw	142	;# 
 15989  0C68  0084               	movwf	4	;# 
 15990  0C69  3000               	movlw	0	;# 
 15991  0C6A  0085               	movwf	5	;# 
 15992  0C6B  300C               	movlw	12	;# 
 15993  0C6C  0086               	movwf	6	;# 
 15994  0C6D  3001               	movlw	1	;# 
 15995  0C6E  0087               	movwf	7	;# 
 15996  0C6F  3049               	movlw	73	;# 
 15997  0C70  1500               	bsf	0,2	;# 
 15998                           
 15999                           ;mtouch_sensor_scan.c: 86: _delay(0u);
 16000  0C71  009D               	movwf	29	;# 
 16001  0C72  1681               	bsf	1,5	;# 
 16002                           
 16003                           ;mtouch_sensor_scan.c: 92: _delay(8u);
 16004  0C73  3200               	nop2	;2 cycle nop
 16005  0C74  3200               	nop2	;2 cycle nop
 16006  0C75  3200               	nop2	;2 cycle nop
 16007  0C76  3200               	nop2	;2 cycle nop
 16008  0C77  0021               	banksel	157	;# 
 16009  0C78  149D               	bsf	29,1	;# 
 16010                           
 16011                           ;mtouch_sensor_scan.c: 99: _delay(3u);
 16012  0C79  3200               	nop2	;2 cycle nop
 16013  0C7A  0000               	nop
 16014  0C7B  0022               	banksel	270	;# 
 16015  0C7C  150E               	bsf	14,2	;# 
 16016  0C7D  1100               	bcf	0,2	;# 
 16017  0C7E  0008               	return
 16018  0C7F                     __end_of_MTOUCH_CVD_ScanA_0:	
 16019  007E                     btemp	set	126	;btemp
 16020  007E                     int$flags	set	126
 16021  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    22
    Data        35
    BSS         74
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     38      70
    BANK1            80      1      80
    BANK2            80      4      10
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sensor_Scanfrequency_Evaluation@sensor.scanB	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Scanfrequency_Evaluation@sensor.scanA	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanA_0(), 

    Button_Service$2249$0	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Service$2249	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 17
		 -> mtouch_button_init(CODE[17]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    handleGeneralTouchControls@ctrl	PTR struct . size(1) Largest target is 9
		 -> controls(BANK1[9]), 

    processToggle@ctrl	PTR struct . size(1) Largest target is 9
		 -> controls(BANK1[9]), 

    ir_handler@ctrl	PTR struct . size(1) Largest target is 9
		 -> controls(BANK1[9]), 

    TMR6_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR6_DefaultInterruptHandler(), Sensor_Acq_ExecuteScan(), 

    TMR6_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR6_DefaultInterruptHandler(), Sensor_Acq_ExecuteScan(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Scanfrequency_Evaluation@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    S454$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S454$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E8046,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_Service@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 17
		 -> mtouch_button(BANK1[17]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E7986,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E7986,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _decodeIRSignal->___awmod
    ___awmod->___awdiv
    _TMR6_ISR->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->i1___bmul
    _Sensor_Acq_ExecuteScan->i1_abs

Critical Paths under _main in BANK0

    _ir_handler->_processToggle
    _handleUARTCommands->_setLightState
    _handleGeneralTouchControls->_processToggle
    _processToggle->_updateLight
    _updateLight->_setLightState
    _setLightState->___bmul
    _TMR6_Initialize->_TMR6_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _OnHold->_EUSART_Write
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_TMR6_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_decodeIRSignal
    _decodeIRSignal->___awmod

Critical Paths under _main in BANK1

    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_MTOUCH_Service_Mainloop

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   21453
                                              1 BANK2      3     3      0
                    _DATAEE_ReadByte
                       _EUSART_Write
                   _InitExternal_INT
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                             _OnHold
                  _SYSTEM_Initialize
                    _TMR6_Initialize
                    _TMR6_StartTimer
         _handleGeneralTouchControls
                 _handleUARTCommands
                         _ir_handler
 ---------------------------------------------------------------------------------
 (1) _ir_handler                                           4     4      0    2367
                                             26 BANK0      4     4      0
                       _EUSART_Write
                             ___bmul
                      _processToggle
 ---------------------------------------------------------------------------------
 (1) _handleUARTCommands                                   5     5      0    1223
                                             16 BANK0      5     5      0
                        _EUSART_Read
                 _EUSART_is_rx_ready
                             ___bmul
                      _setLightState
                          _uartLight
 ---------------------------------------------------------------------------------
 (2) _uartLight                                            1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGeneralTouchControls                           4     4      0    2398
                                             26 BANK0      4     4      0
            _MTOUCH_Button_isPressed
                             ___bmul
                      _processToggle
 ---------------------------------------------------------------------------------
 (2) _processToggle                                        6     5      1    1510
                                             20 BANK0      6     5      1
                       _EUSART_Write
                        _updateLight
 ---------------------------------------------------------------------------------
 (3) _updateLight                                          4     4      0     873
                                             16 BANK0      4     4      0
                             ___bmul
                      _setLightState
 ---------------------------------------------------------------------------------
 (4) _setLightState                                        2     1      1     242
                                             14 BANK0      2     1      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_isPressed                              1     1      0      62
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2528
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR6_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR6_Initialize                                      0     0      0     211
           _TMR6_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     363
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _OnHold                                              13    13      0     189
                                             11 BANK0     13    13      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   12027
                                              0 BANK2      1     1      0
           _MTOUCH_Button_ServiceAll
                  _MTOUCH_Initialize
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     160
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     160
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     160
                                             10 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0    3763
                                             37 BANK0      1     1      0
                                              0 BANK1      1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       5     5      0    3664
                                             32 BANK0      5     5      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      67
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      98
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      65
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     4      0    2477
                                             28 BANK0      4     4      0
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     348
                                             10 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      67
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      67
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     1     1      0     134
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     10    10      0     958
                                             18 BANK0     10    10      0
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                             6     6      0     644
                                             12 BANK0      6     6      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
            _TMR6_LoadPeriodRegister
           _TMR6_SetInterruptHandler
                    _TMR6_StartTimer
                     _TMR6_StopTimer
 ---------------------------------------------------------------------------------
 (7) _TMR6_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR6_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR6_SetInterruptHandler                             2     0      2     211
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR6_LoadPeriodRegister                              1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_setScanFunction                               1     1      0      98
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1954
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                             11 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    1464
                                             18 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1365
                                             16 BANK0      2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     631
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     288
                                             13 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    5914
                                             31 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       3     3      0    5815
                                             28 BANK0      3     3      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     631
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1     790
                                             23 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1220
                                             23 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     189
                                             10 BANK0      3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     195
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1389
                                             23 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     340
                                             10 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     770
                                             18 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1018
                                             21 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     920
                                             18 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     631
                                             14 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     569
                                             10 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                             10 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _InitExternal_INT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      2     0      2     352
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0    2776
                                              9 BANK0      1     1      0
                           _TMR6_ISR
                     _decodeIRSignal
 ---------------------------------------------------------------------------------
 (9) _decodeIRSignal                                       7     7      0    2291
                                              2 BANK0      7     7      0
                   _DATAEE_WriteByte
                            ___awdiv
                            ___awmod
                  i1_DATAEE_ReadByte
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (10) i1_EUSART_Write                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_DATAEE_ReadByte                                   2     0      2      96
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             7     3      4     904
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (10) _DATAEE_WriteByte                                    4     1      3     393
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (9) _TMR6_ISR                                             0     0      0     485
                   Absolute function *
             _Sensor_Acq_ExecuteScan *
       _TMR6_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR6_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Sensor_Acq_ExecuteScan                              4     4      0     485
                                              4 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanB_0 *
                           i1___bmul
                              i1_abs
 ---------------------------------------------------------------------------------
 (11) i1_abs                                               4     2      2     144
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _EUSART_Write
   _InitExternal_INT
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
             _TMR6_LoadPeriodRegister
             _TMR6_SetInterruptHandler
             _TMR6_StartTimer
             _TMR6_StopTimer
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_setScanFunction
               _TMR6_LoadPeriodRegister
               _TMR6_SetInterruptHandler
               _TMR6_StartTimer
               _TMR6_StopTimer
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback *
         _Sensor_RawSample_Update *
         _Sensor_isEnabled *
         _Sensor_setSampled *
         ___bmul *
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _OnHold
     _EUSART_Write
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR6_Initialize
       _TMR6_SetInterruptHandler
     _WDT_Initialize
   _TMR6_Initialize
     _TMR6_SetInterruptHandler
   _TMR6_StartTimer
   _handleGeneralTouchControls
     _MTOUCH_Button_isPressed
     ___bmul
     _processToggle
       _EUSART_Write
       _updateLight
         ___bmul
         _setLightState
           ___bmul (ARG)
   _handleUARTCommands
     _EUSART_Read
     _EUSART_is_rx_ready
     ___bmul
     _setLightState
       ___bmul (ARG)
     _uartLight
   _ir_handler
     _EUSART_Write
     ___bmul
     _processToggle
       _EUSART_Write
       _updateLight
         ___bmul
         _setLightState
           ___bmul (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _TMR6_ISR
     Absolute function(Fake) *
     _Sensor_Acq_ExecuteScan *
       _MTOUCH_CVD_ScanA_0 *
       _MTOUCH_CVD_ScanB_0 *
       i1___bmul *
       i1_abs *
     _TMR6_DefaultInterruptHandler *
   _decodeIRSignal
     _DATAEE_WriteByte
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     i1_DATAEE_ReadByte
     i1_EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     26      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4       A       9       12.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      AE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      AE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Jul 28 00:29:20 2025

                                    ??i1_EUSART_Write 0070                          ?_MTOUCH_Sensor_RawSample_Get 002E  
                                                   _d 00AE                                                     pc 0002  
                                      ___bmul@product 002C                                           __CFG_CP$OFF 0000  
                              _Sensor_setScanFunction 0AEA                                                    l79 0510  
                                                  _a1 004A                                                    _a2 0048  
                                                  _c1 0046                                                    _c2 00AC  
                                                  _d1 0050                                                    _d2 004E  
                     __size_of_Sensor_Acq_ExecuteScan 00AF                                          ___awdiv@sign 0076  
                                                  _r1 00AA                                                    _r2 00A8  
                                                  _t1 004C                                     ??_TMR6_StartTimer 002A  
                          __end_of_Sensor_setInactive 0964                                __end_of_decodeIRSignal 01DA  
                                    ??_TMR6_StopTimer 002A                                                   LATA 010C  
                                         __CFG_LVP$ON 0000                                                   LATC 010E  
                                                 l410 0732                           __size_of_handleUARTCommands 0082  
                                                 l405 0715                                                   l408 0719  
                                                 l379 0E8A                                                   l695 096E  
                                                 l688 09CA                                                   _GIE 005F  
                                        __CFG_CPD$OFF 0000                                                   _PR6 041D  
                                                 _abs 0A2E                        ?_EUSART_SetFramingErrorHandler 002A  
                                                 _sto 00B4                               __size_of_PMD_Initialize 0008  
                                        ___awmod@sign 0021                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 002B                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0019                     __size_of_MTOUCH_Sensor_Initialize 0013  
                           ?_MTOUCH_Sensor_Initialize 0070                                          ?_EUSART_Read 0070  
                                                INDF0 0000                                                  INDF1 0001  
                                                FSR0H 0005                                                  FSR1H 0007  
                                                FSR0L 0004                                                  FSR1L 0006  
                                  _MTOUCH_CVD_ScanA_0 0C59                                    _MTOUCH_CVD_ScanB_0 0C7F  
                                   main@buttonPressed 0129                                                  l1030 0AAA  
                                                l1026 0AA1                                                  l1042 0B96  
                                                ?_abs 002A                                                  l1046 0B99  
                                                l1038 0B93                                                  l1049 0BAB  
                                                l5301 024F                                                  l5151 0D74  
                                                l5143 09D4                                                  l5401 0E0E  
                                                l5313 0268                                                  l5171 0CAE  
                                                l5403 0E14                                                  l5163 0B9C  
                                                l5181 0CBB                                                  l5253 0679  
                                                l4551 0A57                                                  l4711 0FCA  
                                                l4703 0FC6                                                  l5327 02AB  
                                                l4801 075A                                                  l4713 0FD9  
                                                l4721 0FF6                                                  l5353 03C9  
                                                l5345 037D                                                  l5329 02B3  
                                                l4547 0A51                                                  l5195 0CCD  
                                                l5363 03E4                                                  l5259 06C2  
                                                l4717 0FEE                                                  l5373 03FD  
                                                l5293 0246                                                  l5525 044E  
                                                l4567 0B58                                                  l4655 0E53  
                                                l4751 0A0B                                                  l4647 0605  
                                                l4735 0AD3                                                  l4671 09F0  
                                                l4831 0F0F                                                  l5359 03D5  
                                                l5279 0215                                                  l5543 0484  
                                                l5519 0451                                                  l4577 06D7  
                                                l4825 0F07                                                  l5369 03EE  
                                                l5297 024B                                                  l4763 05B5  
                                                l4771 07BA                                                  l4843 0F3F  
                                                l5547 048A                                                  l4757 0599  
                                                l4925 0E7B                                                  TRISC 008E  
                                                l4759 05A1                                                  l4791 0508  
                                                l4871 0BBD                                                  l4695 0FB3  
                                                l4935 0E9B                                                  l4863 0A9B  
                                                l4769 07B5                                                  l4785 04D3  
                                                l4857 0B39                                                  l4937 0EAA  
                                                l4867 0AA4                                                  l4973 0B28  
                                                l4895 0EE5                                                  l4991 0B60  
                                         OnHold@touch 0033                                                  l4997 0B69  
                                                l4999 0B72                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u5000 0692  
                                                u5100 020D                                                  u5110 020E  
                                                u4225 0CF0                                                  u4245 05D0  
                                                u5045 01EA                                                  u4255 0612  
                                                u5215 025A                                                  u5135 0220  
                                                u5055 01F2                                                  u4504 0773  
                                                u5080 0204                                                  u4505 0772  
                                                u4345 0FE0                                                  u5225 0262  
                                                u5145 0228                                                  u5170 023A  
                                                u5090 0205                                                  u5180 023B  
                                                _PMD0 0911                                                  u4445 07E0  
                                                u5245 0283                                                  _PMD1 0912  
                                                u4390 0580                                                  _PMD2 0913  
                                                u5255 0297                                                  _PMD3 0914  
                                                _PMD4 0915                                                  u4385 053F  
                                                _PMD5 0916                                                  u4395 057C  
                                                u4475 04E8                                                  u5700 0476  
                                                u5710 0477                                                  u4760 0B26  
                                                u4880 0D62                                                  u4890 0D63  
                                                u4990 0691                                                  u5777 0429  
                                                u5787 0447                                                  u5797 0494  
                          Button_State_Pressed@button 0037                                                  _TMR6 041C  
                                                _WPUA 020C                                                  _WPUB 020D  
                                                _WPUC 020E                     __size_of_Sensor_Acq_ExecutePacket 006C  
                           ?_Sensor_Acq_ExecutePacket 0070                                          __CFG_WRT$OFF 0000  
                                       __CFG_FCMEN$ON 0000                                    _MTOUCH_needReburst 0922  
                                                abs@a 002A                                                  _main 0404  
                __size_of_MTOUCH_Button_InitializeAll 0020                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                  __size_of_MTOUCH_Sensor_InitializeAll 000F  
                                                btemp 007E                                 i1DATAEE_ReadByte@bAdd 0070  
                                 ?_MTOUCH_CVD_ScanA_0 0070                                   ?_MTOUCH_CVD_ScanB_0 0070  
                                       __CFG_BOREN$ON 0000                                         __CFG_BORV$LOW 0000  
                                                start 0028                                         __CFG_CSWEN$ON 0000  
                                   ___bmul@multiplier 002D                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                                     ?_InitExternal_INT 0070  
                                               ADCON0 009D  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1016  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1011                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 0016                         __size_of_Button_State_Pressed 006C  
                                               ??_abs 002C                             __size_of_DATAEE_WriteByte 001C  
                         ?_Button_Baseline_Initialize 0070                                    ??_InitExternal_INT 002A  
                       ??_MTOUCH_Sensor_RawSample_Get 0030                         Sensor_RawSample_Update@sensor 002A  
                           __size_of_Sensor_isEnabled 000E                                         ?_EUSART_Write 0070  
                                     ?_decodeIRSignal 0070                        __size_of_OSCILLATOR_Initialize 0009  
                       __end_of_OSCILLATOR_Initialize 09B2     Sensor_Scanfrequency_Evaluation@best_packet_sample 0037  
                                               _ADACT 009F                                                 ?_main 0070  
                                     __end_of___awdiv 0F96                                                 _ADRES 009B  
                                       __CFG_WDTE$OFF 0000                                       __end_of___awmod 0DD4  
                                ??_MTOUCH_CVD_ScanA_0 0070                                  ??_MTOUCH_CVD_ScanB_0 0070  
                                     ___awdiv@divisor 0070                                                 _T6CON 041E  
                                      __CFG_DEBUG$OFF 0000                               __size_of_Button_Service 004B  
                                               i1l413 02B7                                                 i1l747 0023  
                                               i1l839 0B87                                                 i1l695 0945  
                                               i1l965 00B1                                       ___awdiv@counter 0075  
                               __end_of_setLightState 0AAB                                                 _OSCEN 091D  
                                               u460m0 0BB9                            handleUARTCommands@received 0033  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 i1_abs 09D6  
                                               _RXPPS 0E24                       __size_of_Button_DefaultCallback 0001  
                   __size_of_TMR6_SetInterruptHandler 0009                                  ??_MTOUCH_needReburst 002A  
                           ?_TMR6_SetInterruptHandler 002A                                      __end_of_TMR6_ISR 0AC0  
                                     _DATAEE_ReadByte 09F2                       __size_of_Sensor_DefaultCallback 0001  
                             __size_of_Sensor_Service 004A                 __end_of_MTOUCH_Sensor_Scan_Initialize 0985  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0009                         _MTOUCH_Sensor_Scan_Initialize 097C  
                                      _WDT_Initialize 07FC                               Sensor_setSampled@sensor 002A  
                                     ??_processToggle 0035                             ??_TMR6_LoadPeriodRegister 002A  
                                               _sentT 0056                                                 _sentU 0058  
                                               _sentV 0057                                                 _togir 00B8  
                              _Sensor_Acq_ExecuteScan 02B7                      __size_of_Button_State_NotPressed 0096  
                                    __end_ofi1___bmul 0A4E                                                 pclath 000A  
                                _Sensor_Sampled_Reset 094C                                                 status 0003  
                                               wtemp0 007E                                     uartLight@received 002A  
                                        updateLight@i 0033                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 002A                        ??_TMR6_DefaultInterruptHandler 0070  
                                     __initialization 002A                                          __end_of_main 049A  
                                      ??_EUSART_Write 002A                           ?_INTERRUPT_InterruptManager 0070  
                    __end_of_MTOUCH_Button_Initialize 0D28                                                ??_main 0127  
                             _MTOUCH_Sensor_Calibrate 0912                                           ir_handler@i 003D  
                             ??_Button_Reading_Update 0035                                                ?i1_abs 0070  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 002C                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 0800                                       _TMR6_Initialize 0A85  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0030  
                   _EUSART_DefaultFramingErrorHandler 0000                                                _ADCON0 009D  
                                              _ADCON1 009E                            _EUSART_OverrunErrorHandler 0122  
                __size_of_MTOUCH_Sensor_RawSample_Get 0019                                                i1S5631 0800  
                                              i1S5629 0804                                      ___awdiv@dividend 0072  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELC 018E                                    __CFG_RSTOSC$HFINT1 0000  
                                     _wipeTriggerFlag 005E                   __size_of_handleGeneralTouchControls 0046  
                          __end_of_EUSART_is_rx_ready 092B                                                _RC1REG 0199  
                                              _RC1STA 019D                                                _RC4PPS 0EA4  
                                              _ODCONA 028C                                                _ODCONB 028D  
                                              _ODCONC 028E                                                i1l4021 008C  
                                              i1l4031 00C3                                                i1l4033 00D1  
                                              i1l4017 0081                                                i1l4027 00A2  
                                              i1l4037 00E3                                                i1l5031 02EC  
                                              i1l5023 02C5                                                i1l5041 0329  
                                              i1l5025 02CC                                                i1l3605 0A3F  
                                              i1l5045 0343                                                i1l5029 02D3  
                                              i1l5047 0348                                                i1l3609 0A45  
                                              i1l5049 034B                                                i1l3901 0D99  
                                              i1l3913 0DA6                                                i1l3905 0DA0  
                                              i1l3915 0DB2                                                i1l3923 0DC7  
                                              i1l3863 0F5A                                                i1l3927 0DCF  
                                              i1l3919 0DBE                                                i1l3881 0F80  
                                              i1l3873 0F62                                                i1l3857 0F4F  
                                              i1l5627 02E2                                                i1l3875 0F6E  
                                              i1l5491 0019                                                i1l3885 0F89  
                                              u301_25 0DB8                                                i1l5493 001B  
                                              i1l3889 0F91                                                u302_25 0DBF  
                                              _INLVLA 038C                                                _INLVLB 038D  
                               ?_Sensor_Sampled_Reset 0070                                                _INLVLC 038E  
                                              u320_24 00CB                                                u320_25 00CA  
                                              u316_24 009A                                                u316_25 0099  
                                              u317_24 00AA                                                u317_25 00A9  
                                              u319_24 00BB                                                u319_25 00BA  
                                              u291_25 0F6F                                                u292_25 0F79  
                                              u293_25 0F81                                                u289_25 0F65  
                                              u299_25 0DA9                                                _OSCFRQ 091F  
                                              u580_27 0054                                                u581_27 0060  
                                              u590_27 0C85                                                u582_27 006B  
                                              u591_27 0C5F                                                u583_27 0076  
                                              u584_27 00D5                                                u585_27 0176  
                                              u586_27 018F                                                u587_27 01A9  
                                              u588_27 01C3                                                u589_27 01D3  
                                     _mainToggleState 005B                                                _TX1REG 019A  
                                              _WDTCON 0097                                                _TX1STA 019E  
                   MTOUCH_Button_InitializeAll@button 002E                                                i1abs@a 0070  
                      ??_Button_Reading_Update_Helper 0032                                _Button_DefaultCallback 0911  
                     __end_of_MTOUCH_Service_Mainloop 0CCF                                        __CFG_PWRTE$OFF 0000  
                                              _OnHold 0366                                _Sensor_DefaultCallback 0913  
                                       _packet_sample 0054                                                ___bmul 0A4E  
                        Sensor_DefaultCallback@sensor 002A                                             ??___awdiv 0074  
                                      __CFG_STVREN$ON 0000                                             ??___awmod 007D  
                                    ___awdiv@quotient 0077                                       ___awmod@divisor 0079  
                    __end_of_MTOUCH_Button_ServiceAll 0A1F                                       ___awmod@counter 0020  
                                              _toggle 005A                               __end_of_DATAEE_ReadByte 0A01  
                                      _PMD_Initialize 0974                               _MTOUCH_Sensor_SampleAll 0B5B  
                        Button_DefaultCallback@button 002A                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0F45  
                             ?_Button_Baseline_Update 0070              TMR6_SetInterruptHandler@InterruptHandler 002A  
                     MTOUCH_Sensor_RawSample_Get@name 0031                                  __size_of_EUSART_Read 000C  
                                   _SYSTEM_Initialize 0AFF                               __end_of__initialization 0049  
                 __size_of_Button_Baseline_Initialize 002C                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
               Sensor_Scanfrequency_Evaluation@sensor 0034                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00CB                                       _TMR6_StartTimer 0915  
                          __end_of_Button_Tick_helper 0C34                         MTOUCH_Sensor_Calibrate@sensor 0070  
                                        ?_updateLight 0070                                   ___bmul@multiplicand 002A  
                                       __end_ofi1_abs 09E4                               ?_Sensor_setScanFunction 0070  
                                      ir_handler@ctrl 003C                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0B14                                          __pidataBANK0 0914  
                                        __pidataBANK1 0BEE                                   ??_SYSTEM_Initialize 0034  
                          __end_of_MTOUCH_Button_Tick 0922                                             ?_TMR6_ISR 0070  
                                    _DATAEE_WriteByte 0B74                      __end_of_MTOUCH_Sensor_Initialize 0A85  
                           ??_MTOUCH_Sensor_Calibrate 002A                                      _Sensor_isEnabled 09E4  
                             __end_of_TMR6_Initialize 0A98                       __end_of_Button_Deviation_Update 05BE  
                              __end_of_PMD_Initialize 097C                                             ?i1___bmul 0070  
                            Sensor_setInactive@sensor 002A                                        _Button_Service 0EAD  
                    __end_of_Sensor_Acq_ExecutePacket 0734                            ?_Button_State_Initializing 0037  
                                Button_Service@button 003E                                               ??i1_abs 0072  
                      __end_of_Button_Baseline_Update 0646                                  Sensor_Service@sensor 0044  
                            _MTOUCH_Button_Initialize 0CFB                       ??_EUSART_SetOverrunErrorHandler 002C  
                                      _Sensor_Service 0E63                                      i1___bmul@product 0073  
                             _Button_State_NotPressed 049A                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 095C                                        OnHold@heldTime 0034  
                           __end_of_SYSTEM_Initialize 0B14                                     _lowpowerActivated 005F  
                    MTOUCH_Sensor_isCalibrated@sensor 0070                                ??_Sensor_Sampled_Reset 002A  
                                          __pbssBANK0 0046                                            __pbssBANK1 00A0  
                                __end_of_EUSART_Write 0974                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 0954                                    Sensor_Service@name 0042  
                          __end_of_mtouch_button_init 1011                    __end_of_handleGeneralTouchControls 0E1A  
                          _handleGeneralTouchControls 0DD4                        __end_of_Sensor_setScanFunction 0AFF  
                                             ?_OnHold 0070                                      ??_decodeIRSignal 0022  
                                          __pmaintext 0404                                               ?___bmul 002A  
                                     __CFG_PPS1WAY$ON 0000                      __end_of_TMR6_SetInterruptHandler 098E  
                                          ??_TMR6_ISR 0078                        MTOUCH_Sensor_wasSampled@sensor 002F  
                                          __pintentry 0004                                __end_of_Button_Service 0EF8  
                          __end_of_handleUARTCommands 06C8                   __end_of_MTOUCH_Button_InitializeAll 0BCC  
                         _MTOUCH_Button_InitializeAll 0BAC                   __end_of_MTOUCH_Sensor_InitializeAll 0A2E  
                         _MTOUCH_Sensor_InitializeAll 0A1F                             ??_MTOUCH_Sensor_SampleAll 0045  
                                          ??i1___bmul 0071                                       ?_PMD_Initialize 0070  
                                  __size_of_uartLight 001C                       __end_of_Sensor_RawSample_Update 0B42  
                                ??_Sensor_setInactive 002A                     __size_of_MTOUCH_Sensor_wasSampled 0015  
                                    ?_DATAEE_ReadByte 002A                             ?_MTOUCH_Sensor_wasSampled 0070  
                                  _processToggle$1636 0037                     __end_of_Button_State_Initializing 07FC  
                              __end_of_Sensor_Service 0EAD                                               _SP1BRGH 019C  
                                             _SP1BRGL 019B                              _MTOUCH_Button_ServiceAll 0A10  
                             ?_Sensor_Acq_ExecuteScan 0070                                               _OSCCON1 0919  
                                             _OSCCON3 091B                             __size_of_InitExternal_INT 0007  
                       MTOUCH_Sensor_SampleAll@sensor 00EF                                               _NVMADRH 0892  
                                             _NVMADRL 0891                                               _NVMDATH 0894  
                                             _OSCTUNE 091E                                               _NVMDATL 0893  
                    __size_of_MTOUCH_Service_Mainloop 002A                                               _NVMCON2 0896  
                                             _SLRCONA 030C                                               _SLRCONB 030D  
                                             _SLRCONC 030E                          __end_of_Button_State_Pressed 07A0  
                            ??_EUSART_SetErrorHandler 002C                               __end_of_TMR6_StartTimer 0918  
                    Button_Baseline_Initialize@button 0036                                  __size_of_MTOUCH_Tick 0003  
                                DATAEE_WriteByte@bAdd 0070                             ??_MTOUCH_Button_isPressed 002A  
                                     __size_of_OnHold 009E                                            _ir_handler 01DA  
                                      _packet_counter 0060                               Sensor_Acquisition@retry 003E  
                                  processToggle@index 0034                                       __size_of___bmul 0012  
                                             ___awdiv 0F45                                               ___awmod 0D8E  
                      MTOUCH_Button_Initialize@button 002C                                       ?_Button_Service 0070  
                                    ?_TMR6_Initialize 0070                                               __ptext1 01DA  
                                             __ptext2 0646                                               __ptext3 0B90  
                                             __ptext4 0926                                               __ptext5 09CA  
                                             __ptext6 0DD4                                               __ptext7 0D57  
                                             __ptext8 0BCC                                               __ptext9 0A98  
                         Button_Reading_Update@button 0035                           __size_of_MTOUCH_CVD_ScanA_0 0026  
                         __size_of_MTOUCH_CVD_ScanB_0 0026                              _MTOUCH_Sensor_Initialize 0A72  
                      __end_of_Sensor_Acq_ExecuteScan 0366                                 _OSCILLATOR_Initialize 09A9  
                                        __size_of_abs 000F                               __size_ofi1_EUSART_Write 0008  
                           ??_Button_State_NotPressed 0038                                       ?_Sensor_Service 0070  
                                    ___awmod@dividend 007B                              ??_PIN_MANAGER_Initialize 002A  
                                 i1___bmul@multiplier 0072                        __size_of_Button_Reading_Update 000F  
                         __size_of_MTOUCH_needReburst 0004                                             _T6CONbits 041E  
                       __end_of_Button_Reading_Update 0A10                     MTOUCH_Sensor_InitializeAll@sensor 0033  
                            _Sensor_Acq_ExecutePacket 06C8                                      _callback_sampled 00D5  
                             __size_of_TMR6_StopTimer 0003                            __size_of_SYSTEM_Initialize 0015  
                                             clrloop0 0932                                      _callback_pressed 00D9  
                      MTOUCH_Sensor_Initialize@sensor 0031                                  end_of_initialization 0049  
                               __end_of_processToggle 0D8E                               ?_Button_DefaultCallback 002A  
               __end_of_EUSART_SetOverrunErrorHandler 09A9                __size_of_EUSART_SetOverrunErrorHandler 0009  
                       _EUSART_SetOverrunErrorHandler 09A0                                               init_ram 0937  
                                             initloop 0938                                     __end_of_uartLight 0BAC  
                             ?_Sensor_DefaultCallback 002A                      __size_of_Button_Deviation_Update 008E  
                                   _EUSART_Initialize 0C34                          ??_MTOUCH_Sensor_isCalibrated 002A  
                              __size_of_setLightState 0013                                    ?_EUSART_Initialize 0070  
                                   _touchEdgeDetected 005C                   __end_of_MTOUCH_Sensor_RawSample_Get 0B5B  
                         _MTOUCH_Sensor_RawSample_Get 0B42                                    _EUSART_is_rx_ready 0926  
                                __size_of_updateLight 0022                                   _mtouch_request_init 0063  
                                 ??_EUSART_Initialize 002C                                      ??_WDT_Initialize 002A  
                                           _PORTAbits 000C                                   ?_EUSART_is_rx_ready 0070  
                            _TMR6_SetInterruptHandler 0985                                Sensor_setActive@sensor 002A  
                            ?_TMR6_LoadPeriodRegister 0070     Sensor_Scanfrequency_Evaluation@best_sample_period 0039  
                                setLightState@touchID 002F                         Button_Deviation_Update@button 0034  
                               __size_of_EUSART_Write 0008                            MTOUCH_Sensor_Enable@sensor 002F  
                                 _callback_notPressed 00D7                                      __CFG_FEXTOSC$OFF 0000  
                 __size_of_MTOUCH_Sensor_isCalibrated 0002                        __end_of_Button_DefaultCallback 0912  
                     __size_of_EUSART_SetErrorHandler 0009                                      ?_TMR6_StartTimer 0070  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0035                              __end_of_DATAEE_WriteByte 0B90  
                                  _sensor_globalFlags 0062                          Sensor_Acq_ExecuteScan@last_a 00B2  
                        Sensor_Acq_ExecuteScan@last_b 00B0                              __end_of_Sensor_isEnabled 09F2  
                      __end_of_Sensor_DefaultCallback 0914                             __end_of_EUSART_Initialize 0C59  
                                ??_EUSART_is_rx_ready 002A                          Sensor_Acq_ExecuteScan@result 0076  
                    __size_of_Sensor_RawSample_Update 0018                                    _Sensor_Acquisition 0EF8  
                                         ?_ir_handler 0070                                        __end_of_OnHold 0404  
                        ??_handleGeneralTouchControls 003A                                  _Button_State_Pressed 0734  
                                      __end_of___bmul 0A60                            _EUSART_DefaultErrorHandler 0000  
                                 ?_Sensor_Acquisition 0070                            ??_MTOUCH_Button_Initialize 002A  
                     ??_MTOUCH_Sensor_Scan_Initialize 002A                                          _EUSART_Write 096C  
                                   __size_of_TMR6_ISR 0015                         Sensor_Acq_ExecutePacket@error 0030  
                                  _Button_Tick_helper 0C10                                ?_OSCILLATOR_Initialize 0070  
                            __end_of_Sensor_setActive 095C                           ??_Button_State_Initializing 0038  
                                   __size_ofi1___bmul 0011                                         _setLightState 0A98  
                                 start_initialization 002A                               _MTOUCH_Service_Mainloop 0CA5  
                                    _InitExternal_INT 093D                       __size_of_PIN_MANAGER_Initialize 002F  
                                  _MTOUCH_Button_Tick 091E                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 0A3D                                         ??_EUSART_Read 002A  
                                ??_Sensor_Acquisition 003C                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 0037                                   DATAEE_ReadByte@bAdd 002A  
                         ?_handleGeneralTouchControls 0070                                              ??_OnHold 002B  
                      ?_EUSART_SetOverrunErrorHandler 002A                      __end_of_MTOUCH_Sensor_wasSampled 0AD5  
                                    __CFG_LPBOREN$OFF 0000                                  ??_Button_Tick_helper 002A  
                        __end_of_MTOUCH_Sensor_Enable 0A72                                          _packet_noise 0052  
                          _EUSART_FramingErrorHandler 0124                                              ??___bmul 002B  
                                    ??_PMD_Initialize 002A                                 ?_Button_State_Pressed 0037  
                              _EUSART_SetErrorHandler 098E                            ??_MTOUCH_Button_ServiceAll 003F  
                                         __pdataBANK0 0065                                           __pdataBANK1 00CB  
                        ??_Button_Baseline_Initialize 0032                                         _sample_period 0065  
                     __end_of_TMR6_LoadPeriodRegister 0931                                  ??_MTOUCH_Button_Tick 002D  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 002A  
                                      i1_EUSART_Write 0944                                    setLightState@state 002E  
                                      ?_setLightState 002E                    Sensor_Acq_ExecutePacket@ADACT_temp 002F  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00EF                                         __pcstackBANK2 0126  
                                 __size_of_ir_handler 00DD                                        _TMR6_StopTimer 0918  
                                  _handleUARTCommands 0646                        MTOUCH_Button_ServiceAll@button 0040  
                                 Sensor_Service@error 0043                         __size_of_Sensor_Sampled_Reset 0008  
                          __size_of_EUSART_Initialize 0025                               _Button_Deviation_Update 0530  
                                 ?_handleUARTCommands 0070                                   __end_of_EUSART_Read 09D6  
                           _Button_State_Initializing 07A0                    __end_of_MTOUCH_Sensor_isCalibrated 0004  
                          _MTOUCH_Sensor_isCalibrated 0002                                 _TMR6_InterruptHandler 00ED  
                                           __pnvBANK1 00ED                                             __pnvBANK2 0120  
                                   _Sensor_setSampled 0964                                _PIN_MANAGER_Initialize 0D28  
                                    ??_Button_Service 003C                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 0034  
                          ??_MTOUCH_Sensor_Initialize 0030                                              ?___awdiv 0070  
                                            ?___awmod 0079                                      ??_Sensor_Service 0040  
                              __end_ofi1_EUSART_Write 094C                            ??_Sensor_Acq_ExecutePacket 002C  
                        ??_INTERRUPT_InterruptManager 0029                                   ??_Sensor_setSampled 002A  
                                           __pswtext1 0804                                             __pswtext2 0800  
                           ??_MTOUCH_Service_Mainloop 0126                                  ??_handleUARTCommands 0030  
                         __size_of_Sensor_setInactive 0008                                              _BAUD1CON 019F  
                                           _isPressed 0059                                 decodeIRSignal@address 0026  
                                   i1_DATAEE_ReadByte 09B2                                __end_of_TMR6_StopTimer 091B  
                                      __size_ofi1_abs 000E                        Sensor_Acq_ExecutePacket@sensor 0031  
                                       ??_MTOUCH_Tick 002D                                 decodeIRSignal@command 0027  
                                   processToggle@ctrl 0039                                    ?i1_DATAEE_ReadByte 0070  
                            __size_of_DATAEE_ReadByte 000F                                  i1EUSART_Write@txData 0070  
                                 ??i1_DATAEE_ReadByte 0072                             __end_of_Sensor_setSampled 096C  
              EUSART_SetErrorHandler@interruptHandler 002A                                              _LATCbits 010E  
                                  _currentScannSensor 0061                               _Sensor_RawSample_Update 0B2A  
                                           clear_ram0 0931                                              _PIE0bits 0090  
                                            _PIE2bits 0092                                     _eusartRxLastError 00B9  
                               i1___bmul@multiplicand 0070                   __size_of_INTERRUPT_InterruptManager 0024  
                                            _PIR0bits 0010                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 002C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0038                                             _uartLight 0B90  
                          ??_TMR6_SetInterruptHandler 002C                __end_of_MTOUCH_Sensor_Sampled_ResetAll 0AEA  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015                        _MTOUCH_Sensor_Sampled_ResetAll 0AD5  
                            ?_MTOUCH_Sensor_SampleAll 0070                     _EUSART_DefaultOverrunErrorHandler 0000  
                                            _TMR6_ISR 0AAB                              _MTOUCH_Sensor_wasSampled 0AC0  
                                  _mtouch_time_toScan 0064                            __end_of_MTOUCH_CVD_ScanA_0 0C7F  
                          __end_of_MTOUCH_CVD_ScanB_0 0CA5                              ??_Button_Baseline_Update 002A  
                                     ?i1_EUSART_Write 0070                                              i1___bmul 0A3D  
                                     ??_setLightState 002F                                            _ADCON0bits 009D  
                           __end_ofi1_DATAEE_ReadByte 09BE                            __end_of_MTOUCH_needReburst 0926  
                             __size_of_decodeIRSignal 018D                           handleGeneralTouchControls@i 003D  
                                     ?_TMR6_StopTimer 0070                                 DATAEE_WriteByte@bData 0072  
                            __size_of_TMR6_Initialize 0013                                        _pressStartTime 00A0  
                                _MTOUCH_Sensor_Enable 0A60                                           _EUSART_Read 09CA  
                            Button_Tick_helper@button 002C                             ??_Button_Deviation_Update 002A  
                               _Button_Reading_Update 0A01                              ??_Sensor_setScanFunction 002A  
                                   ?_DATAEE_WriteByte 0070                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                   __end_of_MTOUCH_Tick 091E  
                                   _MTOUCH_Initialize 09BE                                    ??_DATAEE_WriteByte 0073  
                     __end_of_MTOUCH_Sensor_Calibrate 0913                      __size_of_TMR6_LoadPeriodRegister 0006  
                                  ??_Sensor_isEnabled 002A                                         ??_updateLight 0030  
                                  ?_MTOUCH_Initialize 0070                                          ??_ir_handler 003A  
                            __end_of_InitExternal_INT 0944                                            ?_uartLight 0070  
                             ??_OSCILLATOR_Initialize 002A                    __end_of_Button_Baseline_Initialize 0CFB  
                          _Button_Baseline_Initialize 0CCF                              Sensor_Acquisition@sensor 003F  
                                 _EUSART_ErrorHandler 0120                                   ??_MTOUCH_Initialize 0034  
                                    __size_of___awdiv 0051                                      __size_of___awmod 0046  
                            ?_Button_State_NotPressed 0037                                __size_of_processToggle 0037  
                                  Button_Service@name 003D                                     ?_Sensor_setActive 0070  
                                        _Sensor_scanA 00D3                                          _Sensor_scanB 00D1  
                Sensor_Scanfrequency_Evaluation@retry 003A                                    ??_Sensor_setActive 002A  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 0B14  
                                            __ptext11 0AFF                                              __ptext20 098E  
                                            __ptext12 07FC                                              __ptext21 0366  
                                            __ptext13 0A85                                              __ptext30 0964  
                                            __ptext22 096C                                              __ptext14 0974  
                                            __ptext31 0B2A                                              __ptext23 0CA5  
                                            __ptext15 0D28                                              __ptext40 0918  
                                            __ptext32 0913                                              __ptext24 0922  
                                            __ptext16 09A9                                              __ptext41 0915  
                                            __ptext33 0EF8                                              __ptext25 091B  
                                            __ptext17 0C34                                              __ptext50 094C  
                                            __ptext42 0985                                              __ptext34 0A2E  
                                            __ptext26 091E                                              __ptext18 09A0  
                                            __ptext51 0A60                                              __ptext43 092B  
                                            __ptext35 095C                                              __ptext27 0C10  
                                            __ptext19 0997                                              __ptext60 0CFB  
                                            __ptext52 0BAC                                              __ptext44 0AEA  
                                            __ptext36 0954                                              __ptext28 0B5B  
                                            __ptext61 0912                                              __ptext53 0A10  
                                            __ptext45 09BE                                              __ptext37 09E4  
                                            __ptext29 0E63                                              __ptext70 093D  
                                            __ptext62 0911                                              __ptext54 0EAD  
                                            __ptext46 097C                                              __ptext38 0F96  
                                            __ptext71 09F2                                              __ptext63 05BE  
                                            __ptext55 0AC0                                              __ptext47 0AD5  
                                            __ptext39 06C8                                              __ptext80 02B7  
                                            __ptext64 0CCF                                              __ptext56 0002  
                                            __ptext48 0A1F                                              __ptext81 0910  
                                            __ptext73 004D                                              __ptext65 0A01  
                                            __ptext57 049A                                              __ptext49 0A72  
                                            __ptext82 09D6                                              __ptext74 0944  
                                            __ptext66 0E1A                                              __ptext58 07A0  
                                            __ptext83 0A3D                                              __ptext75 09B2  
                                            __ptext67 0B42                                              __ptext59 0734  
                                            __ptext84 0C7F                                              __ptext76 0D8E  
                                            __ptext68 0A4E                                              __ptext85 0C59  
                                            __ptext77 0F45                                              __ptext69 0530  
                                            __ptext78 0B74                                              __ptext79 0AAB  
                                 handleUARTCommands@i 0034                                    __end_of_ir_handler 02B7  
                           __end_of_MTOUCH_Initialize 09CA                           DATAEE_WriteByte@GIEBitValue 0073  
                           ??_Sensor_RawSample_Update 002A                                              _controls 00DB  
                 Sensor_Acq_ExecutePacket@ADCON0_temp 002D                   Sensor_Acq_ExecutePacket@ADCON1_temp 002E  
                          __size_of_Sensor_setSampled 0008                      TMR6_LoadPeriodRegister@periodVal 002A  
                         __size_of_EUSART_is_rx_ready 0005                                         __size_of_main 0096  
                      handleGeneralTouchControls@ctrl 003C                                              _received 00B6  
                     __end_of_MTOUCH_Sensor_SampleAll 0B74                      Sensor_Scanfrequency_Evaluation@i 003B  
                                   ??_DATAEE_ReadByte 002C                               ?_EUSART_SetErrorHandler 002A  
                            __size_of_TMR6_StartTimer 0003                         MTOUCH_needReburst@needReburst 002A  
                                          _RC1STAbits 019D         EUSART_SetOverrunErrorHandler@interruptHandler 002A  
                        Sensor_setScanFunction@sensor 002A                                              int$flags 007E  
                            ??_Sensor_Acq_ExecuteScan 0074                    __size_of_Button_State_Initializing 005C  
                  __end_of_INTERRUPT_InterruptManager 0028                            _INTERRUPT_InterruptManager 0004  
                                 __end_of_updateLight 0BEE                 __end_of_EUSART_SetFramingErrorHandler 09A0  
              __size_of_EUSART_SetFramingErrorHandler 0009                         _EUSART_SetFramingErrorHandler 0997  
                     __size_of_Button_Baseline_Update 0088                                        _millis_counter 00A4  
                        ?_MTOUCH_Button_InitializeAll 0070                            __size_ofi1_DATAEE_ReadByte 000C  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                         _mtouch_button 00BA  
                                          _INTCONbits 000B                                           _NVMCON1bits 0895  
                                       _mtouch_sensor 00E4                       __end_of_MTOUCH_Button_isPressed 0B2A  
                                     decodeIRSignal@i 0028                                           _MTOUCH_Tick 091B  
                              ?_Button_Reading_Update 0070                  __end_of_TMR6_DefaultInterruptHandler 0911  
               __size_of_TMR6_DefaultInterruptHandler 0001                          _TMR6_DefaultInterruptHandler 0910  
                    Button_Deviation_Update@deviation 0035                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 002B                     __size_of_MTOUCH_Button_Initialize 002D  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 004D                       __size_of_Sensor_setScanFunction 0015  
                                       _processToggle 0D57               __end_of_Sensor_Scanfrequency_Evaluation 1000  
            __size_of_Sensor_Scanfrequency_Evaluation 006A                     ??_Sensor_Scanfrequency_Evaluation 0032  
                    ?_Sensor_Scanfrequency_Evaluation 0070                       _Sensor_Scanfrequency_Evaluation 0F96  
                             ?_PIN_MANAGER_Initialize 0070                                     ??_TMR6_Initialize 002C  
                      __end_of_EUSART_SetErrorHandler 0997                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                                           ??_uartLight 002A  
                         __size_of_Button_Tick_helper 0024                       __end_of_Button_State_NotPressed 0530  
       EUSART_SetFramingErrorHandler@interruptHandler 002A                          __end_of_Sensor_Sampled_Reset 0954  
                         __size_of_MTOUCH_Button_Tick 0004                                         __pstringtext1 1011  
                                       __pstringtext2 1000                                        _decodeIRSignal 004D  
                       ??_MTOUCH_Button_InitializeAll 002D                              ??_Button_DefaultCallback 002B  
                       ??_MTOUCH_Sensor_InitializeAll 0032                      __size_of_MTOUCH_Sensor_Calibrate 0001  
                              ??_MTOUCH_Sensor_Enable 002E                              ??_Sensor_DefaultCallback 002B  
                __end_of_Button_Reading_Update_Helper 0E63                 __size_of_Button_Reading_Update_Helper 0049  
                        _Button_Reading_Update_Helper 0E1A                                            _TX1STAbits 019E  
                   __size_of_MTOUCH_Button_ServiceAll 000F                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0037                                    EUSART_Write@txData 002A  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 0D57  
                                      ?_processToggle 0034                         ?_TMR6_DefaultInterruptHandler 0070  
                              _Button_Baseline_Update 05BE                               _TMR6_LoadPeriodRegister 092B  
                         MTOUCH_Button_isPressed@name 002A                                           _wipeEnabled 005D  
                          ??_MTOUCH_Sensor_wasSampled 002E                                           _toggleState 00B7  
                                         _updateLight 0BCC  
