

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Jul 27 17:29:16 2025

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	swtext1,local,class=CONST,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	intentry,global,class=CODE,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	psect	text81,local,class=CODE,merge=1,delta=2
   111                           	psect	text82,local,class=CODE,merge=1,delta=2
   112                           	psect	text83,local,class=CODE,merge=1,delta=2
   113                           	psect	text84,local,class=CODE,merge=1,delta=2,group=2
   114                           	psect	text85,local,class=CODE,merge=1,delta=2
   115                           	psect	text86,local,class=CODE,merge=1,delta=2
   116                           	psect	text87,local,class=CODE,merge=1,delta=2
   117                           	psect	text88,local,class=CODE,merge=1,delta=2
   118                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text90,local,class=CODE,merge=1,delta=2
   120                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text92,local,class=CODE,merge=1,delta=2
   122                           	psect	swtext2,local,class=CONST,delta=2
   123                           	psect	text93,local,class=CODE,merge=1,delta=2
   124                           	psect	text94,local,class=CODE,merge=1,delta=2
   125                           	psect	text95,local,class=CODE,merge=1,delta=2
   126                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text97,local,class=CODE,merge=1,delta=2
   128                           	psect	text98,local,class=CODE,merge=1,delta=2
   129                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text100,local,class=CODE,merge=1,delta=2
   131                           	psect	text101,local,class=CODE,merge=1,delta=2
   132                           	dabs	1,0x620,48
   133                           	dabs	1,0x5CB,37
   134                           	dabs	1,0x239B,0,_mtouch_button
   135                           	dabs	1,0x7E,2
   136  0000                     
   137                           ; Version 1.43
   138                           ; Generated 25/07/2017 GMT
   139                           ; 
   140                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   141                           ; All rights reserved.
   142                           ; 
   143                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   144                           ; 
   145                           ; Redistribution and use in source and binary forms, with or without modification, are
   146                           ; permitted provided that the following conditions are met:
   147                           ; 
   148                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   149                           ;        conditions and the following disclaimer.
   150                           ; 
   151                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   152                           ;        of conditions and the following disclaimer in the documentation and/or other
   153                           ;        materials provided with the distribution.
   154                           ; 
   155                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   156                           ;        software without specific prior written permission.
   157                           ; 
   158                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   159                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   160                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   161                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   162                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   163                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   164                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   165                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   166                           ; 
   167                           ; 
   168                           ; Code-generator required, PIC16F18855 Definitions
   169                           ; 
   170                           ; SFR Addresses
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000D                     	;# 
   185  000E                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  001C                     	;# 
   194  001C                     	;# 
   195  001D                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  008C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  008E                     	;# 
   204  008F                     	;# 
   205  0090                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0110                     	;# 
   226  0110                     	;# 
   227  0111                     	;# 
   228  0112                     	;# 
   229  0112                     	;# 
   230  0113                     	;# 
   231  0114                     	;# 
   232  0114                     	;# 
   233  0115                     	;# 
   234  0116                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  0119                     	;# 
   238  0119                     	;# 
   239  0119                     	;# 
   240  011A                     	;# 
   241  011A                     	;# 
   242  011A                     	;# 
   243  011B                     	;# 
   244  011B                     	;# 
   245  011B                     	;# 
   246  011B                     	;# 
   247  011B                     	;# 
   248  011C                     	;# 
   249  011C                     	;# 
   250  011C                     	;# 
   251  011D                     	;# 
   252  011D                     	;# 
   253  011D                     	;# 
   254  011E                     	;# 
   255  011E                     	;# 
   256  011E                     	;# 
   257  011F                     	;# 
   258  011F                     	;# 
   259  011F                     	;# 
   260  011F                     	;# 
   261  011F                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  018E                     	;# 
   265  018F                     	;# 
   266  0190                     	;# 
   267  0191                     	;# 
   268  0192                     	;# 
   269  0196                     	;# 
   270  0197                     	;# 
   271  0198                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019C                     	;# 
   276  020C                     	;# 
   277  020C                     	;# 
   278  020D                     	;# 
   279  020E                     	;# 
   280  020F                     	;# 
   281  020F                     	;# 
   282  0210                     	;# 
   283  0210                     	;# 
   284  0211                     	;# 
   285  0211                     	;# 
   286  0212                     	;# 
   287  0212                     	;# 
   288  0213                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0216                     	;# 
   293  0216                     	;# 
   294  0217                     	;# 
   295  0217                     	;# 
   296  0218                     	;# 
   297  0218                     	;# 
   298  0219                     	;# 
   299  021A                     	;# 
   300  021B                     	;# 
   301  021B                     	;# 
   302  021C                     	;# 
   303  021C                     	;# 
   304  021D                     	;# 
   305  021D                     	;# 
   306  021E                     	;# 
   307  021F                     	;# 
   308  028C                     	;# 
   309  028C                     	;# 
   310  028D                     	;# 
   311  028D                     	;# 
   312  028E                     	;# 
   313  028F                     	;# 
   314  0290                     	;# 
   315  0290                     	;# 
   316  0291                     	;# 
   317  0292                     	;# 
   318  0292                     	;# 
   319  0293                     	;# 
   320  0293                     	;# 
   321  0294                     	;# 
   322  0295                     	;# 
   323  0296                     	;# 
   324  0296                     	;# 
   325  0297                     	;# 
   326  0298                     	;# 
   327  0298                     	;# 
   328  0299                     	;# 
   329  0299                     	;# 
   330  029A                     	;# 
   331  029B                     	;# 
   332  029C                     	;# 
   333  029C                     	;# 
   334  029D                     	;# 
   335  030C                     	;# 
   336  030C                     	;# 
   337  030D                     	;# 
   338  030E                     	;# 
   339  030F                     	;# 
   340  0310                     	;# 
   341  0310                     	;# 
   342  0311                     	;# 
   343  0312                     	;# 
   344  0313                     	;# 
   345  0314                     	;# 
   346  0314                     	;# 
   347  0315                     	;# 
   348  0316                     	;# 
   349  0317                     	;# 
   350  0318                     	;# 
   351  0318                     	;# 
   352  0319                     	;# 
   353  031A                     	;# 
   354  031B                     	;# 
   355  031C                     	;# 
   356  031C                     	;# 
   357  031D                     	;# 
   358  031E                     	;# 
   359  031F                     	;# 
   360  038C                     	;# 
   361  038D                     	;# 
   362  038E                     	;# 
   363  0390                     	;# 
   364  0391                     	;# 
   365  0392                     	;# 
   366  040C                     	;# 
   367  040D                     	;# 
   368  040E                     	;# 
   369  040F                     	;# 
   370  0410                     	;# 
   371  0411                     	;# 
   372  0416                     	;# 
   373  0416                     	;# 
   374  0417                     	;# 
   375  0418                     	;# 
   376  0418                     	;# 
   377  0419                     	;# 
   378  041A                     	;# 
   379  041A                     	;# 
   380  041B                     	;# 
   381  041C                     	;# 
   382  041C                     	;# 
   383  041D                     	;# 
   384  041E                     	;# 
   385  041F                     	;# 
   386  048C                     	;# 
   387  048C                     	;# 
   388  048D                     	;# 
   389  048E                     	;# 
   390  048F                     	;# 
   391  048F                     	;# 
   392  0490                     	;# 
   393  0491                     	;# 
   394  0492                     	;# 
   395  0492                     	;# 
   396  0493                     	;# 
   397  0494                     	;# 
   398  0495                     	;# 
   399  0495                     	;# 
   400  0496                     	;# 
   401  0497                     	;# 
   402  0498                     	;# 
   403  0499                     	;# 
   404  049A                     	;# 
   405  049B                     	;# 
   406  049C                     	;# 
   407  049D                     	;# 
   408  050C                     	;# 
   409  050C                     	;# 
   410  050D                     	;# 
   411  050E                     	;# 
   412  050F                     	;# 
   413  050F                     	;# 
   414  0510                     	;# 
   415  0511                     	;# 
   416  0512                     	;# 
   417  0512                     	;# 
   418  0513                     	;# 
   419  0514                     	;# 
   420  0515                     	;# 
   421  0515                     	;# 
   422  0516                     	;# 
   423  0517                     	;# 
   424  0518                     	;# 
   425  0519                     	;# 
   426  051A                     	;# 
   427  051B                     	;# 
   428  051C                     	;# 
   429  051D                     	;# 
   430  058C                     	;# 
   431  058C                     	;# 
   432  058D                     	;# 
   433  058E                     	;# 
   434  058F                     	;# 
   435  058F                     	;# 
   436  0590                     	;# 
   437  0591                     	;# 
   438  0592                     	;# 
   439  0593                     	;# 
   440  060C                     	;# 
   441  060D                     	;# 
   442  060E                     	;# 
   443  060F                     	;# 
   444  0610                     	;# 
   445  0611                     	;# 
   446  0612                     	;# 
   447  0613                     	;# 
   448  0614                     	;# 
   449  0616                     	;# 
   450  0617                     	;# 
   451  0618                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061D                     	;# 
   457  061E                     	;# 
   458  068C                     	;# 
   459  068D                     	;# 
   460  068E                     	;# 
   461  068F                     	;# 
   462  0690                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  070C                     	;# 
   468  070D                     	;# 
   469  070E                     	;# 
   470  070F                     	;# 
   471  0710                     	;# 
   472  0711                     	;# 
   473  0712                     	;# 
   474  0713                     	;# 
   475  0714                     	;# 
   476  0716                     	;# 
   477  0717                     	;# 
   478  0718                     	;# 
   479  0719                     	;# 
   480  071A                     	;# 
   481  071B                     	;# 
   482  071C                     	;# 
   483  071D                     	;# 
   484  071E                     	;# 
   485  0796                     	;# 
   486  0797                     	;# 
   487  0798                     	;# 
   488  0799                     	;# 
   489  079A                     	;# 
   490  079B                     	;# 
   491  080C                     	;# 
   492  080D                     	;# 
   493  080E                     	;# 
   494  080F                     	;# 
   495  0810                     	;# 
   496  0811                     	;# 
   497  0812                     	;# 
   498  0813                     	;# 
   499  0814                     	;# 
   500  081A                     	;# 
   501  081B                     	;# 
   502  081C                     	;# 
   503  081D                     	;# 
   504  081E                     	;# 
   505  081F                     	;# 
   506  088C                     	;# 
   507  088D                     	;# 
   508  088E                     	;# 
   509  088F                     	;# 
   510  0890                     	;# 
   511  0891                     	;# 
   512  0892                     	;# 
   513  0893                     	;# 
   514  0895                     	;# 
   515  0896                     	;# 
   516  0897                     	;# 
   517  0898                     	;# 
   518  0899                     	;# 
   519  089A                     	;# 
   520  089B                     	;# 
   521  090C                     	;# 
   522  090E                     	;# 
   523  090F                     	;# 
   524  091F                     	;# 
   525  091F                     	;# 
   526  098F                     	;# 
   527  098F                     	;# 
   528  0990                     	;# 
   529  0991                     	;# 
   530  0992                     	;# 
   531  0993                     	;# 
   532  0994                     	;# 
   533  0995                     	;# 
   534  0996                     	;# 
   535  0997                     	;# 
   536  0E0F                     	;# 
   537  0E10                     	;# 
   538  0E11                     	;# 
   539  0E12                     	;# 
   540  0E13                     	;# 
   541  0E14                     	;# 
   542  0E15                     	;# 
   543  0E16                     	;# 
   544  0E17                     	;# 
   545  0E18                     	;# 
   546  0E19                     	;# 
   547  0E1A                     	;# 
   548  0E1B                     	;# 
   549  0E1C                     	;# 
   550  0E1D                     	;# 
   551  0E1E                     	;# 
   552  0E1F                     	;# 
   553  0E20                     	;# 
   554  0E21                     	;# 
   555  0E22                     	;# 
   556  0E23                     	;# 
   557  0E24                     	;# 
   558  0E25                     	;# 
   559  0E26                     	;# 
   560  0E27                     	;# 
   561  0E28                     	;# 
   562  0E29                     	;# 
   563  0E2A                     	;# 
   564  0E2B                     	;# 
   565  0E2C                     	;# 
   566  0E2D                     	;# 
   567  0E2E                     	;# 
   568  0E2F                     	;# 
   569  0E30                     	;# 
   570  0E31                     	;# 
   571  0E32                     	;# 
   572  0E33                     	;# 
   573  0E34                     	;# 
   574  0E35                     	;# 
   575  0E36                     	;# 
   576  0E37                     	;# 
   577  0E8F                     	;# 
   578  0E90                     	;# 
   579  0E91                     	;# 
   580  0E92                     	;# 
   581  0E93                     	;# 
   582  0E94                     	;# 
   583  0E95                     	;# 
   584  0E96                     	;# 
   585  0E97                     	;# 
   586  0E9C                     	;# 
   587  0E9D                     	;# 
   588  0E9E                     	;# 
   589  0EA1                     	;# 
   590  0EA2                     	;# 
   591  0EA3                     	;# 
   592  0EA4                     	;# 
   593  0EA5                     	;# 
   594  0EA9                     	;# 
   595  0EAA                     	;# 
   596  0EAB                     	;# 
   597  0EAC                     	;# 
   598  0EB1                     	;# 
   599  0EB2                     	;# 
   600  0EB3                     	;# 
   601  0EB8                     	;# 
   602  0EB9                     	;# 
   603  0EBA                     	;# 
   604  0EBB                     	;# 
   605  0EBC                     	;# 
   606  0EBD                     	;# 
   607  0EBE                     	;# 
   608  0EC3                     	;# 
   609  0EC5                     	;# 
   610  0EC6                     	;# 
   611  0EC7                     	;# 
   612  0EC8                     	;# 
   613  0EC9                     	;# 
   614  0ECA                     	;# 
   615  0ECB                     	;# 
   616  0ECC                     	;# 
   617  0F10                     	;# 
   618  0F11                     	;# 
   619  0F12                     	;# 
   620  0F13                     	;# 
   621  0F14                     	;# 
   622  0F15                     	;# 
   623  0F16                     	;# 
   624  0F17                     	;# 
   625  0F18                     	;# 
   626  0F19                     	;# 
   627  0F1A                     	;# 
   628  0F1B                     	;# 
   629  0F1C                     	;# 
   630  0F1D                     	;# 
   631  0F1E                     	;# 
   632  0F1F                     	;# 
   633  0F20                     	;# 
   634  0F21                     	;# 
   635  0F22                     	;# 
   636  0F23                     	;# 
   637  0F24                     	;# 
   638  0F25                     	;# 
   639  0F26                     	;# 
   640  0F27                     	;# 
   641  0F38                     	;# 
   642  0F39                     	;# 
   643  0F3A                     	;# 
   644  0F3B                     	;# 
   645  0F3C                     	;# 
   646  0F3D                     	;# 
   647  0F3E                     	;# 
   648  0F3F                     	;# 
   649  0F40                     	;# 
   650  0F41                     	;# 
   651  0F43                     	;# 
   652  0F44                     	;# 
   653  0F45                     	;# 
   654  0F46                     	;# 
   655  0F47                     	;# 
   656  0F48                     	;# 
   657  0F49                     	;# 
   658  0F4A                     	;# 
   659  0F4B                     	;# 
   660  0F4C                     	;# 
   661  0F4E                     	;# 
   662  0F4F                     	;# 
   663  0F50                     	;# 
   664  0F51                     	;# 
   665  0F52                     	;# 
   666  0F53                     	;# 
   667  0F54                     	;# 
   668  0F55                     	;# 
   669  0F56                     	;# 
   670  0F57                     	;# 
   671  0F65                     	;# 
   672  0F68                     	;# 
   673  0F69                     	;# 
   674  0F6A                     	;# 
   675  0F6B                     	;# 
   676  0FE4                     	;# 
   677  0FE5                     	;# 
   678  0FE6                     	;# 
   679  0FE7                     	;# 
   680  0FE8                     	;# 
   681  0FE9                     	;# 
   682  0FEA                     	;# 
   683  0FEB                     	;# 
   684  0FED                     	;# 
   685  0FEE                     	;# 
   686  0FEF                     	;# 
   687  0000                     	;# 
   688  0001                     	;# 
   689  0002                     	;# 
   690  0003                     	;# 
   691  0004                     	;# 
   692  0005                     	;# 
   693  0006                     	;# 
   694  0007                     	;# 
   695  0008                     	;# 
   696  0009                     	;# 
   697  000A                     	;# 
   698  000B                     	;# 
   699  000C                     	;# 
   700  000D                     	;# 
   701  000E                     	;# 
   702  0010                     	;# 
   703  0011                     	;# 
   704  0012                     	;# 
   705  0013                     	;# 
   706  0016                     	;# 
   707  0017                     	;# 
   708  0018                     	;# 
   709  001C                     	;# 
   710  001C                     	;# 
   711  001D                     	;# 
   712  001D                     	;# 
   713  001E                     	;# 
   714  001F                     	;# 
   715  008C                     	;# 
   716  008C                     	;# 
   717  008D                     	;# 
   718  008E                     	;# 
   719  008E                     	;# 
   720  008F                     	;# 
   721  0090                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0093                     	;# 
   725  0094                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0098                     	;# 
   730  0099                     	;# 
   731  009A                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  010E                     	;# 
   740  010F                     	;# 
   741  0110                     	;# 
   742  0110                     	;# 
   743  0111                     	;# 
   744  0112                     	;# 
   745  0112                     	;# 
   746  0113                     	;# 
   747  0114                     	;# 
   748  0114                     	;# 
   749  0115                     	;# 
   750  0116                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0119                     	;# 
   754  0119                     	;# 
   755  0119                     	;# 
   756  011A                     	;# 
   757  011A                     	;# 
   758  011A                     	;# 
   759  011B                     	;# 
   760  011B                     	;# 
   761  011B                     	;# 
   762  011B                     	;# 
   763  011B                     	;# 
   764  011C                     	;# 
   765  011C                     	;# 
   766  011C                     	;# 
   767  011D                     	;# 
   768  011D                     	;# 
   769  011D                     	;# 
   770  011E                     	;# 
   771  011E                     	;# 
   772  011E                     	;# 
   773  011F                     	;# 
   774  011F                     	;# 
   775  011F                     	;# 
   776  011F                     	;# 
   777  011F                     	;# 
   778  018C                     	;# 
   779  018D                     	;# 
   780  018E                     	;# 
   781  018F                     	;# 
   782  0190                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0196                     	;# 
   786  0197                     	;# 
   787  0198                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019C                     	;# 
   792  020C                     	;# 
   793  020C                     	;# 
   794  020D                     	;# 
   795  020E                     	;# 
   796  020F                     	;# 
   797  020F                     	;# 
   798  0210                     	;# 
   799  0210                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0214                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0218                     	;# 
   813  0218                     	;# 
   814  0219                     	;# 
   815  021A                     	;# 
   816  021B                     	;# 
   817  021B                     	;# 
   818  021C                     	;# 
   819  021C                     	;# 
   820  021D                     	;# 
   821  021D                     	;# 
   822  021E                     	;# 
   823  021F                     	;# 
   824  028C                     	;# 
   825  028C                     	;# 
   826  028D                     	;# 
   827  028D                     	;# 
   828  028E                     	;# 
   829  028F                     	;# 
   830  0290                     	;# 
   831  0290                     	;# 
   832  0291                     	;# 
   833  0292                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0293                     	;# 
   837  0294                     	;# 
   838  0295                     	;# 
   839  0296                     	;# 
   840  0296                     	;# 
   841  0297                     	;# 
   842  0298                     	;# 
   843  0298                     	;# 
   844  0299                     	;# 
   845  0299                     	;# 
   846  029A                     	;# 
   847  029B                     	;# 
   848  029C                     	;# 
   849  029C                     	;# 
   850  029D                     	;# 
   851  030C                     	;# 
   852  030C                     	;# 
   853  030D                     	;# 
   854  030E                     	;# 
   855  030F                     	;# 
   856  0310                     	;# 
   857  0310                     	;# 
   858  0311                     	;# 
   859  0312                     	;# 
   860  0313                     	;# 
   861  0314                     	;# 
   862  0314                     	;# 
   863  0315                     	;# 
   864  0316                     	;# 
   865  0317                     	;# 
   866  0318                     	;# 
   867  0318                     	;# 
   868  0319                     	;# 
   869  031A                     	;# 
   870  031B                     	;# 
   871  031C                     	;# 
   872  031C                     	;# 
   873  031D                     	;# 
   874  031E                     	;# 
   875  031F                     	;# 
   876  038C                     	;# 
   877  038D                     	;# 
   878  038E                     	;# 
   879  0390                     	;# 
   880  0391                     	;# 
   881  0392                     	;# 
   882  040C                     	;# 
   883  040D                     	;# 
   884  040E                     	;# 
   885  040F                     	;# 
   886  0410                     	;# 
   887  0411                     	;# 
   888  0416                     	;# 
   889  0416                     	;# 
   890  0417                     	;# 
   891  0418                     	;# 
   892  0418                     	;# 
   893  0419                     	;# 
   894  041A                     	;# 
   895  041A                     	;# 
   896  041B                     	;# 
   897  041C                     	;# 
   898  041C                     	;# 
   899  041D                     	;# 
   900  041E                     	;# 
   901  041F                     	;# 
   902  048C                     	;# 
   903  048C                     	;# 
   904  048D                     	;# 
   905  048E                     	;# 
   906  048F                     	;# 
   907  048F                     	;# 
   908  0490                     	;# 
   909  0491                     	;# 
   910  0492                     	;# 
   911  0492                     	;# 
   912  0493                     	;# 
   913  0494                     	;# 
   914  0495                     	;# 
   915  0495                     	;# 
   916  0496                     	;# 
   917  0497                     	;# 
   918  0498                     	;# 
   919  0499                     	;# 
   920  049A                     	;# 
   921  049B                     	;# 
   922  049C                     	;# 
   923  049D                     	;# 
   924  050C                     	;# 
   925  050C                     	;# 
   926  050D                     	;# 
   927  050E                     	;# 
   928  050F                     	;# 
   929  050F                     	;# 
   930  0510                     	;# 
   931  0511                     	;# 
   932  0512                     	;# 
   933  0512                     	;# 
   934  0513                     	;# 
   935  0514                     	;# 
   936  0515                     	;# 
   937  0515                     	;# 
   938  0516                     	;# 
   939  0517                     	;# 
   940  0518                     	;# 
   941  0519                     	;# 
   942  051A                     	;# 
   943  051B                     	;# 
   944  051C                     	;# 
   945  051D                     	;# 
   946  058C                     	;# 
   947  058C                     	;# 
   948  058D                     	;# 
   949  058E                     	;# 
   950  058F                     	;# 
   951  058F                     	;# 
   952  0590                     	;# 
   953  0591                     	;# 
   954  0592                     	;# 
   955  0593                     	;# 
   956  060C                     	;# 
   957  060D                     	;# 
   958  060E                     	;# 
   959  060F                     	;# 
   960  0610                     	;# 
   961  0611                     	;# 
   962  0612                     	;# 
   963  0613                     	;# 
   964  0614                     	;# 
   965  0616                     	;# 
   966  0617                     	;# 
   967  0618                     	;# 
   968  0619                     	;# 
   969  061A                     	;# 
   970  061B                     	;# 
   971  061C                     	;# 
   972  061D                     	;# 
   973  061E                     	;# 
   974  068C                     	;# 
   975  068D                     	;# 
   976  068E                     	;# 
   977  068F                     	;# 
   978  0690                     	;# 
   979  0691                     	;# 
   980  0692                     	;# 
   981  0693                     	;# 
   982  0694                     	;# 
   983  070C                     	;# 
   984  070D                     	;# 
   985  070E                     	;# 
   986  070F                     	;# 
   987  0710                     	;# 
   988  0711                     	;# 
   989  0712                     	;# 
   990  0713                     	;# 
   991  0714                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  071A                     	;# 
   997  071B                     	;# 
   998  071C                     	;# 
   999  071D                     	;# 
  1000  071E                     	;# 
  1001  0796                     	;# 
  1002  0797                     	;# 
  1003  0798                     	;# 
  1004  0799                     	;# 
  1005  079A                     	;# 
  1006  079B                     	;# 
  1007  080C                     	;# 
  1008  080D                     	;# 
  1009  080E                     	;# 
  1010  080F                     	;# 
  1011  0810                     	;# 
  1012  0811                     	;# 
  1013  0812                     	;# 
  1014  0813                     	;# 
  1015  0814                     	;# 
  1016  081A                     	;# 
  1017  081B                     	;# 
  1018  081C                     	;# 
  1019  081D                     	;# 
  1020  081E                     	;# 
  1021  081F                     	;# 
  1022  088C                     	;# 
  1023  088D                     	;# 
  1024  088E                     	;# 
  1025  088F                     	;# 
  1026  0890                     	;# 
  1027  0891                     	;# 
  1028  0892                     	;# 
  1029  0893                     	;# 
  1030  0895                     	;# 
  1031  0896                     	;# 
  1032  0897                     	;# 
  1033  0898                     	;# 
  1034  0899                     	;# 
  1035  089A                     	;# 
  1036  089B                     	;# 
  1037  090C                     	;# 
  1038  090E                     	;# 
  1039  090F                     	;# 
  1040  091F                     	;# 
  1041  091F                     	;# 
  1042  098F                     	;# 
  1043  098F                     	;# 
  1044  0990                     	;# 
  1045  0991                     	;# 
  1046  0992                     	;# 
  1047  0993                     	;# 
  1048  0994                     	;# 
  1049  0995                     	;# 
  1050  0996                     	;# 
  1051  0997                     	;# 
  1052  0E0F                     	;# 
  1053  0E10                     	;# 
  1054  0E11                     	;# 
  1055  0E12                     	;# 
  1056  0E13                     	;# 
  1057  0E14                     	;# 
  1058  0E15                     	;# 
  1059  0E16                     	;# 
  1060  0E17                     	;# 
  1061  0E18                     	;# 
  1062  0E19                     	;# 
  1063  0E1A                     	;# 
  1064  0E1B                     	;# 
  1065  0E1C                     	;# 
  1066  0E1D                     	;# 
  1067  0E1E                     	;# 
  1068  0E1F                     	;# 
  1069  0E20                     	;# 
  1070  0E21                     	;# 
  1071  0E22                     	;# 
  1072  0E23                     	;# 
  1073  0E24                     	;# 
  1074  0E25                     	;# 
  1075  0E26                     	;# 
  1076  0E27                     	;# 
  1077  0E28                     	;# 
  1078  0E29                     	;# 
  1079  0E2A                     	;# 
  1080  0E2B                     	;# 
  1081  0E2C                     	;# 
  1082  0E2D                     	;# 
  1083  0E2E                     	;# 
  1084  0E2F                     	;# 
  1085  0E30                     	;# 
  1086  0E31                     	;# 
  1087  0E32                     	;# 
  1088  0E33                     	;# 
  1089  0E34                     	;# 
  1090  0E35                     	;# 
  1091  0E36                     	;# 
  1092  0E37                     	;# 
  1093  0E8F                     	;# 
  1094  0E90                     	;# 
  1095  0E91                     	;# 
  1096  0E92                     	;# 
  1097  0E93                     	;# 
  1098  0E94                     	;# 
  1099  0E95                     	;# 
  1100  0E96                     	;# 
  1101  0E97                     	;# 
  1102  0E9C                     	;# 
  1103  0E9D                     	;# 
  1104  0E9E                     	;# 
  1105  0EA1                     	;# 
  1106  0EA2                     	;# 
  1107  0EA3                     	;# 
  1108  0EA4                     	;# 
  1109  0EA5                     	;# 
  1110  0EA9                     	;# 
  1111  0EAA                     	;# 
  1112  0EAB                     	;# 
  1113  0EAC                     	;# 
  1114  0EB1                     	;# 
  1115  0EB2                     	;# 
  1116  0EB3                     	;# 
  1117  0EB8                     	;# 
  1118  0EB9                     	;# 
  1119  0EBA                     	;# 
  1120  0EBB                     	;# 
  1121  0EBC                     	;# 
  1122  0EBD                     	;# 
  1123  0EBE                     	;# 
  1124  0EC3                     	;# 
  1125  0EC5                     	;# 
  1126  0EC6                     	;# 
  1127  0EC7                     	;# 
  1128  0EC8                     	;# 
  1129  0EC9                     	;# 
  1130  0ECA                     	;# 
  1131  0ECB                     	;# 
  1132  0ECC                     	;# 
  1133  0F10                     	;# 
  1134  0F11                     	;# 
  1135  0F12                     	;# 
  1136  0F13                     	;# 
  1137  0F14                     	;# 
  1138  0F15                     	;# 
  1139  0F16                     	;# 
  1140  0F17                     	;# 
  1141  0F18                     	;# 
  1142  0F19                     	;# 
  1143  0F1A                     	;# 
  1144  0F1B                     	;# 
  1145  0F1C                     	;# 
  1146  0F1D                     	;# 
  1147  0F1E                     	;# 
  1148  0F1F                     	;# 
  1149  0F20                     	;# 
  1150  0F21                     	;# 
  1151  0F22                     	;# 
  1152  0F23                     	;# 
  1153  0F24                     	;# 
  1154  0F25                     	;# 
  1155  0F26                     	;# 
  1156  0F27                     	;# 
  1157  0F38                     	;# 
  1158  0F39                     	;# 
  1159  0F3A                     	;# 
  1160  0F3B                     	;# 
  1161  0F3C                     	;# 
  1162  0F3D                     	;# 
  1163  0F3E                     	;# 
  1164  0F3F                     	;# 
  1165  0F40                     	;# 
  1166  0F41                     	;# 
  1167  0F43                     	;# 
  1168  0F44                     	;# 
  1169  0F45                     	;# 
  1170  0F46                     	;# 
  1171  0F47                     	;# 
  1172  0F48                     	;# 
  1173  0F49                     	;# 
  1174  0F4A                     	;# 
  1175  0F4B                     	;# 
  1176  0F4C                     	;# 
  1177  0F4E                     	;# 
  1178  0F4F                     	;# 
  1179  0F50                     	;# 
  1180  0F51                     	;# 
  1181  0F52                     	;# 
  1182  0F53                     	;# 
  1183  0F54                     	;# 
  1184  0F55                     	;# 
  1185  0F56                     	;# 
  1186  0F57                     	;# 
  1187  0F65                     	;# 
  1188  0F68                     	;# 
  1189  0F69                     	;# 
  1190  0F6A                     	;# 
  1191  0F6B                     	;# 
  1192  0FE4                     	;# 
  1193  0FE5                     	;# 
  1194  0FE6                     	;# 
  1195  0FE7                     	;# 
  1196  0FE8                     	;# 
  1197  0FE9                     	;# 
  1198  0FEA                     	;# 
  1199  0FEB                     	;# 
  1200  0FED                     	;# 
  1201  0FEE                     	;# 
  1202  0FEF                     	;# 
  1203  0000                     	;# 
  1204  0001                     	;# 
  1205  0002                     	;# 
  1206  0003                     	;# 
  1207  0004                     	;# 
  1208  0005                     	;# 
  1209  0006                     	;# 
  1210  0007                     	;# 
  1211  0008                     	;# 
  1212  0009                     	;# 
  1213  000A                     	;# 
  1214  000B                     	;# 
  1215  000C                     	;# 
  1216  000D                     	;# 
  1217  000E                     	;# 
  1218  0010                     	;# 
  1219  0011                     	;# 
  1220  0012                     	;# 
  1221  0013                     	;# 
  1222  0016                     	;# 
  1223  0017                     	;# 
  1224  0018                     	;# 
  1225  001C                     	;# 
  1226  001C                     	;# 
  1227  001D                     	;# 
  1228  001D                     	;# 
  1229  001E                     	;# 
  1230  001F                     	;# 
  1231  008C                     	;# 
  1232  008C                     	;# 
  1233  008D                     	;# 
  1234  008E                     	;# 
  1235  008E                     	;# 
  1236  008F                     	;# 
  1237  0090                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0098                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009C                     	;# 
  1250  009D                     	;# 
  1251  009E                     	;# 
  1252  010C                     	;# 
  1253  010D                     	;# 
  1254  010E                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0110                     	;# 
  1259  0111                     	;# 
  1260  0112                     	;# 
  1261  0112                     	;# 
  1262  0113                     	;# 
  1263  0114                     	;# 
  1264  0114                     	;# 
  1265  0115                     	;# 
  1266  0116                     	;# 
  1267  0116                     	;# 
  1268  0117                     	;# 
  1269  0119                     	;# 
  1270  0119                     	;# 
  1271  0119                     	;# 
  1272  011A                     	;# 
  1273  011A                     	;# 
  1274  011A                     	;# 
  1275  011B                     	;# 
  1276  011B                     	;# 
  1277  011B                     	;# 
  1278  011B                     	;# 
  1279  011B                     	;# 
  1280  011C                     	;# 
  1281  011C                     	;# 
  1282  011C                     	;# 
  1283  011D                     	;# 
  1284  011D                     	;# 
  1285  011D                     	;# 
  1286  011E                     	;# 
  1287  011E                     	;# 
  1288  011E                     	;# 
  1289  011F                     	;# 
  1290  011F                     	;# 
  1291  011F                     	;# 
  1292  011F                     	;# 
  1293  011F                     	;# 
  1294  018C                     	;# 
  1295  018D                     	;# 
  1296  018E                     	;# 
  1297  018F                     	;# 
  1298  0190                     	;# 
  1299  0191                     	;# 
  1300  0192                     	;# 
  1301  0196                     	;# 
  1302  0197                     	;# 
  1303  0198                     	;# 
  1304  0199                     	;# 
  1305  019A                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  020C                     	;# 
  1309  020C                     	;# 
  1310  020D                     	;# 
  1311  020E                     	;# 
  1312  020F                     	;# 
  1313  020F                     	;# 
  1314  0210                     	;# 
  1315  0210                     	;# 
  1316  0211                     	;# 
  1317  0211                     	;# 
  1318  0212                     	;# 
  1319  0212                     	;# 
  1320  0213                     	;# 
  1321  0214                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0216                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0217                     	;# 
  1328  0218                     	;# 
  1329  0218                     	;# 
  1330  0219                     	;# 
  1331  021A                     	;# 
  1332  021B                     	;# 
  1333  021B                     	;# 
  1334  021C                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028C                     	;# 
  1342  028D                     	;# 
  1343  028D                     	;# 
  1344  028E                     	;# 
  1345  028F                     	;# 
  1346  0290                     	;# 
  1347  0290                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0292                     	;# 
  1351  0293                     	;# 
  1352  0293                     	;# 
  1353  0294                     	;# 
  1354  0295                     	;# 
  1355  0296                     	;# 
  1356  0296                     	;# 
  1357  0297                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  029B                     	;# 
  1364  029C                     	;# 
  1365  029C                     	;# 
  1366  029D                     	;# 
  1367  030C                     	;# 
  1368  030C                     	;# 
  1369  030D                     	;# 
  1370  030E                     	;# 
  1371  030F                     	;# 
  1372  0310                     	;# 
  1373  0310                     	;# 
  1374  0311                     	;# 
  1375  0312                     	;# 
  1376  0313                     	;# 
  1377  0314                     	;# 
  1378  0314                     	;# 
  1379  0315                     	;# 
  1380  0316                     	;# 
  1381  0317                     	;# 
  1382  0318                     	;# 
  1383  0318                     	;# 
  1384  0319                     	;# 
  1385  031A                     	;# 
  1386  031B                     	;# 
  1387  031C                     	;# 
  1388  031C                     	;# 
  1389  031D                     	;# 
  1390  031E                     	;# 
  1391  031F                     	;# 
  1392  038C                     	;# 
  1393  038D                     	;# 
  1394  038E                     	;# 
  1395  0390                     	;# 
  1396  0391                     	;# 
  1397  0392                     	;# 
  1398  040C                     	;# 
  1399  040D                     	;# 
  1400  040E                     	;# 
  1401  040F                     	;# 
  1402  0410                     	;# 
  1403  0411                     	;# 
  1404  0416                     	;# 
  1405  0416                     	;# 
  1406  0417                     	;# 
  1407  0418                     	;# 
  1408  0418                     	;# 
  1409  0419                     	;# 
  1410  041A                     	;# 
  1411  041A                     	;# 
  1412  041B                     	;# 
  1413  041C                     	;# 
  1414  041C                     	;# 
  1415  041D                     	;# 
  1416  041E                     	;# 
  1417  041F                     	;# 
  1418  048C                     	;# 
  1419  048C                     	;# 
  1420  048D                     	;# 
  1421  048E                     	;# 
  1422  048F                     	;# 
  1423  048F                     	;# 
  1424  0490                     	;# 
  1425  0491                     	;# 
  1426  0492                     	;# 
  1427  0492                     	;# 
  1428  0493                     	;# 
  1429  0494                     	;# 
  1430  0495                     	;# 
  1431  0495                     	;# 
  1432  0496                     	;# 
  1433  0497                     	;# 
  1434  0498                     	;# 
  1435  0499                     	;# 
  1436  049A                     	;# 
  1437  049B                     	;# 
  1438  049C                     	;# 
  1439  049D                     	;# 
  1440  050C                     	;# 
  1441  050C                     	;# 
  1442  050D                     	;# 
  1443  050E                     	;# 
  1444  050F                     	;# 
  1445  050F                     	;# 
  1446  0510                     	;# 
  1447  0511                     	;# 
  1448  0512                     	;# 
  1449  0512                     	;# 
  1450  0513                     	;# 
  1451  0514                     	;# 
  1452  0515                     	;# 
  1453  0515                     	;# 
  1454  0516                     	;# 
  1455  0517                     	;# 
  1456  0518                     	;# 
  1457  0519                     	;# 
  1458  051A                     	;# 
  1459  051B                     	;# 
  1460  051C                     	;# 
  1461  051D                     	;# 
  1462  058C                     	;# 
  1463  058C                     	;# 
  1464  058D                     	;# 
  1465  058E                     	;# 
  1466  058F                     	;# 
  1467  058F                     	;# 
  1468  0590                     	;# 
  1469  0591                     	;# 
  1470  0592                     	;# 
  1471  0593                     	;# 
  1472  060C                     	;# 
  1473  060D                     	;# 
  1474  060E                     	;# 
  1475  060F                     	;# 
  1476  0610                     	;# 
  1477  0611                     	;# 
  1478  0612                     	;# 
  1479  0613                     	;# 
  1480  0614                     	;# 
  1481  0616                     	;# 
  1482  0617                     	;# 
  1483  0618                     	;# 
  1484  0619                     	;# 
  1485  061A                     	;# 
  1486  061B                     	;# 
  1487  061C                     	;# 
  1488  061D                     	;# 
  1489  061E                     	;# 
  1490  068C                     	;# 
  1491  068D                     	;# 
  1492  068E                     	;# 
  1493  068F                     	;# 
  1494  0690                     	;# 
  1495  0691                     	;# 
  1496  0692                     	;# 
  1497  0693                     	;# 
  1498  0694                     	;# 
  1499  070C                     	;# 
  1500  070D                     	;# 
  1501  070E                     	;# 
  1502  070F                     	;# 
  1503  0710                     	;# 
  1504  0711                     	;# 
  1505  0712                     	;# 
  1506  0713                     	;# 
  1507  0714                     	;# 
  1508  0716                     	;# 
  1509  0717                     	;# 
  1510  0718                     	;# 
  1511  0719                     	;# 
  1512  071A                     	;# 
  1513  071B                     	;# 
  1514  071C                     	;# 
  1515  071D                     	;# 
  1516  071E                     	;# 
  1517  0796                     	;# 
  1518  0797                     	;# 
  1519  0798                     	;# 
  1520  0799                     	;# 
  1521  079A                     	;# 
  1522  079B                     	;# 
  1523  080C                     	;# 
  1524  080D                     	;# 
  1525  080E                     	;# 
  1526  080F                     	;# 
  1527  0810                     	;# 
  1528  0811                     	;# 
  1529  0812                     	;# 
  1530  0813                     	;# 
  1531  0814                     	;# 
  1532  081A                     	;# 
  1533  081B                     	;# 
  1534  081C                     	;# 
  1535  081D                     	;# 
  1536  081E                     	;# 
  1537  081F                     	;# 
  1538  088C                     	;# 
  1539  088D                     	;# 
  1540  088E                     	;# 
  1541  088F                     	;# 
  1542  0890                     	;# 
  1543  0891                     	;# 
  1544  0892                     	;# 
  1545  0893                     	;# 
  1546  0895                     	;# 
  1547  0896                     	;# 
  1548  0897                     	;# 
  1549  0898                     	;# 
  1550  0899                     	;# 
  1551  089A                     	;# 
  1552  089B                     	;# 
  1553  090C                     	;# 
  1554  090E                     	;# 
  1555  090F                     	;# 
  1556  091F                     	;# 
  1557  091F                     	;# 
  1558  098F                     	;# 
  1559  098F                     	;# 
  1560  0990                     	;# 
  1561  0991                     	;# 
  1562  0992                     	;# 
  1563  0993                     	;# 
  1564  0994                     	;# 
  1565  0995                     	;# 
  1566  0996                     	;# 
  1567  0997                     	;# 
  1568  0E0F                     	;# 
  1569  0E10                     	;# 
  1570  0E11                     	;# 
  1571  0E12                     	;# 
  1572  0E13                     	;# 
  1573  0E14                     	;# 
  1574  0E15                     	;# 
  1575  0E16                     	;# 
  1576  0E17                     	;# 
  1577  0E18                     	;# 
  1578  0E19                     	;# 
  1579  0E1A                     	;# 
  1580  0E1B                     	;# 
  1581  0E1C                     	;# 
  1582  0E1D                     	;# 
  1583  0E1E                     	;# 
  1584  0E1F                     	;# 
  1585  0E20                     	;# 
  1586  0E21                     	;# 
  1587  0E22                     	;# 
  1588  0E23                     	;# 
  1589  0E24                     	;# 
  1590  0E25                     	;# 
  1591  0E26                     	;# 
  1592  0E27                     	;# 
  1593  0E28                     	;# 
  1594  0E29                     	;# 
  1595  0E2A                     	;# 
  1596  0E2B                     	;# 
  1597  0E2C                     	;# 
  1598  0E2D                     	;# 
  1599  0E2E                     	;# 
  1600  0E2F                     	;# 
  1601  0E30                     	;# 
  1602  0E31                     	;# 
  1603  0E32                     	;# 
  1604  0E33                     	;# 
  1605  0E34                     	;# 
  1606  0E35                     	;# 
  1607  0E36                     	;# 
  1608  0E37                     	;# 
  1609  0E8F                     	;# 
  1610  0E90                     	;# 
  1611  0E91                     	;# 
  1612  0E92                     	;# 
  1613  0E93                     	;# 
  1614  0E94                     	;# 
  1615  0E95                     	;# 
  1616  0E96                     	;# 
  1617  0E97                     	;# 
  1618  0E9C                     	;# 
  1619  0E9D                     	;# 
  1620  0E9E                     	;# 
  1621  0EA1                     	;# 
  1622  0EA2                     	;# 
  1623  0EA3                     	;# 
  1624  0EA4                     	;# 
  1625  0EA5                     	;# 
  1626  0EA9                     	;# 
  1627  0EAA                     	;# 
  1628  0EAB                     	;# 
  1629  0EAC                     	;# 
  1630  0EB1                     	;# 
  1631  0EB2                     	;# 
  1632  0EB3                     	;# 
  1633  0EB8                     	;# 
  1634  0EB9                     	;# 
  1635  0EBA                     	;# 
  1636  0EBB                     	;# 
  1637  0EBC                     	;# 
  1638  0EBD                     	;# 
  1639  0EBE                     	;# 
  1640  0EC3                     	;# 
  1641  0EC5                     	;# 
  1642  0EC6                     	;# 
  1643  0EC7                     	;# 
  1644  0EC8                     	;# 
  1645  0EC9                     	;# 
  1646  0ECA                     	;# 
  1647  0ECB                     	;# 
  1648  0ECC                     	;# 
  1649  0F10                     	;# 
  1650  0F11                     	;# 
  1651  0F12                     	;# 
  1652  0F13                     	;# 
  1653  0F14                     	;# 
  1654  0F15                     	;# 
  1655  0F16                     	;# 
  1656  0F17                     	;# 
  1657  0F18                     	;# 
  1658  0F19                     	;# 
  1659  0F1A                     	;# 
  1660  0F1B                     	;# 
  1661  0F1C                     	;# 
  1662  0F1D                     	;# 
  1663  0F1E                     	;# 
  1664  0F1F                     	;# 
  1665  0F20                     	;# 
  1666  0F21                     	;# 
  1667  0F22                     	;# 
  1668  0F23                     	;# 
  1669  0F24                     	;# 
  1670  0F25                     	;# 
  1671  0F26                     	;# 
  1672  0F27                     	;# 
  1673  0F38                     	;# 
  1674  0F39                     	;# 
  1675  0F3A                     	;# 
  1676  0F3B                     	;# 
  1677  0F3C                     	;# 
  1678  0F3D                     	;# 
  1679  0F3E                     	;# 
  1680  0F3F                     	;# 
  1681  0F40                     	;# 
  1682  0F41                     	;# 
  1683  0F43                     	;# 
  1684  0F44                     	;# 
  1685  0F45                     	;# 
  1686  0F46                     	;# 
  1687  0F47                     	;# 
  1688  0F48                     	;# 
  1689  0F49                     	;# 
  1690  0F4A                     	;# 
  1691  0F4B                     	;# 
  1692  0F4C                     	;# 
  1693  0F4E                     	;# 
  1694  0F4F                     	;# 
  1695  0F50                     	;# 
  1696  0F51                     	;# 
  1697  0F52                     	;# 
  1698  0F53                     	;# 
  1699  0F54                     	;# 
  1700  0F55                     	;# 
  1701  0F56                     	;# 
  1702  0F57                     	;# 
  1703  0F65                     	;# 
  1704  0F68                     	;# 
  1705  0F69                     	;# 
  1706  0F6A                     	;# 
  1707  0F6B                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0013                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  001C                     	;# 
  1742  001C                     	;# 
  1743  001D                     	;# 
  1744  001D                     	;# 
  1745  001E                     	;# 
  1746  001F                     	;# 
  1747  008C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  008E                     	;# 
  1752  008F                     	;# 
  1753  0090                     	;# 
  1754  0090                     	;# 
  1755  0091                     	;# 
  1756  0093                     	;# 
  1757  0094                     	;# 
  1758  0095                     	;# 
  1759  0096                     	;# 
  1760  0097                     	;# 
  1761  0098                     	;# 
  1762  0099                     	;# 
  1763  009A                     	;# 
  1764  009B                     	;# 
  1765  009C                     	;# 
  1766  009D                     	;# 
  1767  009E                     	;# 
  1768  010C                     	;# 
  1769  010D                     	;# 
  1770  010E                     	;# 
  1771  010E                     	;# 
  1772  010F                     	;# 
  1773  0110                     	;# 
  1774  0110                     	;# 
  1775  0111                     	;# 
  1776  0112                     	;# 
  1777  0112                     	;# 
  1778  0113                     	;# 
  1779  0114                     	;# 
  1780  0114                     	;# 
  1781  0115                     	;# 
  1782  0116                     	;# 
  1783  0116                     	;# 
  1784  0117                     	;# 
  1785  0119                     	;# 
  1786  0119                     	;# 
  1787  0119                     	;# 
  1788  011A                     	;# 
  1789  011A                     	;# 
  1790  011A                     	;# 
  1791  011B                     	;# 
  1792  011B                     	;# 
  1793  011B                     	;# 
  1794  011B                     	;# 
  1795  011B                     	;# 
  1796  011C                     	;# 
  1797  011C                     	;# 
  1798  011C                     	;# 
  1799  011D                     	;# 
  1800  011D                     	;# 
  1801  011D                     	;# 
  1802  011E                     	;# 
  1803  011E                     	;# 
  1804  011E                     	;# 
  1805  011F                     	;# 
  1806  011F                     	;# 
  1807  011F                     	;# 
  1808  011F                     	;# 
  1809  011F                     	;# 
  1810  018C                     	;# 
  1811  018D                     	;# 
  1812  018E                     	;# 
  1813  018F                     	;# 
  1814  0190                     	;# 
  1815  0191                     	;# 
  1816  0192                     	;# 
  1817  0196                     	;# 
  1818  0197                     	;# 
  1819  0198                     	;# 
  1820  0199                     	;# 
  1821  019A                     	;# 
  1822  019B                     	;# 
  1823  019C                     	;# 
  1824  020C                     	;# 
  1825  020C                     	;# 
  1826  020D                     	;# 
  1827  020E                     	;# 
  1828  020F                     	;# 
  1829  020F                     	;# 
  1830  0210                     	;# 
  1831  0210                     	;# 
  1832  0211                     	;# 
  1833  0211                     	;# 
  1834  0212                     	;# 
  1835  0212                     	;# 
  1836  0213                     	;# 
  1837  0214                     	;# 
  1838  0215                     	;# 
  1839  0215                     	;# 
  1840  0216                     	;# 
  1841  0216                     	;# 
  1842  0217                     	;# 
  1843  0217                     	;# 
  1844  0218                     	;# 
  1845  0218                     	;# 
  1846  0219                     	;# 
  1847  021A                     	;# 
  1848  021B                     	;# 
  1849  021B                     	;# 
  1850  021C                     	;# 
  1851  021C                     	;# 
  1852  021D                     	;# 
  1853  021D                     	;# 
  1854  021E                     	;# 
  1855  021F                     	;# 
  1856  028C                     	;# 
  1857  028C                     	;# 
  1858  028D                     	;# 
  1859  028D                     	;# 
  1860  028E                     	;# 
  1861  028F                     	;# 
  1862  0290                     	;# 
  1863  0290                     	;# 
  1864  0291                     	;# 
  1865  0292                     	;# 
  1866  0292                     	;# 
  1867  0293                     	;# 
  1868  0293                     	;# 
  1869  0294                     	;# 
  1870  0295                     	;# 
  1871  0296                     	;# 
  1872  0296                     	;# 
  1873  0297                     	;# 
  1874  0298                     	;# 
  1875  0298                     	;# 
  1876  0299                     	;# 
  1877  0299                     	;# 
  1878  029A                     	;# 
  1879  029B                     	;# 
  1880  029C                     	;# 
  1881  029C                     	;# 
  1882  029D                     	;# 
  1883  030C                     	;# 
  1884  030C                     	;# 
  1885  030D                     	;# 
  1886  030E                     	;# 
  1887  030F                     	;# 
  1888  0310                     	;# 
  1889  0310                     	;# 
  1890  0311                     	;# 
  1891  0312                     	;# 
  1892  0313                     	;# 
  1893  0314                     	;# 
  1894  0314                     	;# 
  1895  0315                     	;# 
  1896  0316                     	;# 
  1897  0317                     	;# 
  1898  0318                     	;# 
  1899  0318                     	;# 
  1900  0319                     	;# 
  1901  031A                     	;# 
  1902  031B                     	;# 
  1903  031C                     	;# 
  1904  031C                     	;# 
  1905  031D                     	;# 
  1906  031E                     	;# 
  1907  031F                     	;# 
  1908  038C                     	;# 
  1909  038D                     	;# 
  1910  038E                     	;# 
  1911  0390                     	;# 
  1912  0391                     	;# 
  1913  0392                     	;# 
  1914  040C                     	;# 
  1915  040D                     	;# 
  1916  040E                     	;# 
  1917  040F                     	;# 
  1918  0410                     	;# 
  1919  0411                     	;# 
  1920  0416                     	;# 
  1921  0416                     	;# 
  1922  0417                     	;# 
  1923  0418                     	;# 
  1924  0418                     	;# 
  1925  0419                     	;# 
  1926  041A                     	;# 
  1927  041A                     	;# 
  1928  041B                     	;# 
  1929  041C                     	;# 
  1930  041C                     	;# 
  1931  041D                     	;# 
  1932  041E                     	;# 
  1933  041F                     	;# 
  1934  048C                     	;# 
  1935  048C                     	;# 
  1936  048D                     	;# 
  1937  048E                     	;# 
  1938  048F                     	;# 
  1939  048F                     	;# 
  1940  0490                     	;# 
  1941  0491                     	;# 
  1942  0492                     	;# 
  1943  0492                     	;# 
  1944  0493                     	;# 
  1945  0494                     	;# 
  1946  0495                     	;# 
  1947  0495                     	;# 
  1948  0496                     	;# 
  1949  0497                     	;# 
  1950  0498                     	;# 
  1951  0499                     	;# 
  1952  049A                     	;# 
  1953  049B                     	;# 
  1954  049C                     	;# 
  1955  049D                     	;# 
  1956  050C                     	;# 
  1957  050C                     	;# 
  1958  050D                     	;# 
  1959  050E                     	;# 
  1960  050F                     	;# 
  1961  050F                     	;# 
  1962  0510                     	;# 
  1963  0511                     	;# 
  1964  0512                     	;# 
  1965  0512                     	;# 
  1966  0513                     	;# 
  1967  0514                     	;# 
  1968  0515                     	;# 
  1969  0515                     	;# 
  1970  0516                     	;# 
  1971  0517                     	;# 
  1972  0518                     	;# 
  1973  0519                     	;# 
  1974  051A                     	;# 
  1975  051B                     	;# 
  1976  051C                     	;# 
  1977  051D                     	;# 
  1978  058C                     	;# 
  1979  058C                     	;# 
  1980  058D                     	;# 
  1981  058E                     	;# 
  1982  058F                     	;# 
  1983  058F                     	;# 
  1984  0590                     	;# 
  1985  0591                     	;# 
  1986  0592                     	;# 
  1987  0593                     	;# 
  1988  060C                     	;# 
  1989  060D                     	;# 
  1990  060E                     	;# 
  1991  060F                     	;# 
  1992  0610                     	;# 
  1993  0611                     	;# 
  1994  0612                     	;# 
  1995  0613                     	;# 
  1996  0614                     	;# 
  1997  0616                     	;# 
  1998  0617                     	;# 
  1999  0618                     	;# 
  2000  0619                     	;# 
  2001  061A                     	;# 
  2002  061B                     	;# 
  2003  061C                     	;# 
  2004  061D                     	;# 
  2005  061E                     	;# 
  2006  068C                     	;# 
  2007  068D                     	;# 
  2008  068E                     	;# 
  2009  068F                     	;# 
  2010  0690                     	;# 
  2011  0691                     	;# 
  2012  0692                     	;# 
  2013  0693                     	;# 
  2014  0694                     	;# 
  2015  070C                     	;# 
  2016  070D                     	;# 
  2017  070E                     	;# 
  2018  070F                     	;# 
  2019  0710                     	;# 
  2020  0711                     	;# 
  2021  0712                     	;# 
  2022  0713                     	;# 
  2023  0714                     	;# 
  2024  0716                     	;# 
  2025  0717                     	;# 
  2026  0718                     	;# 
  2027  0719                     	;# 
  2028  071A                     	;# 
  2029  071B                     	;# 
  2030  071C                     	;# 
  2031  071D                     	;# 
  2032  071E                     	;# 
  2033  0796                     	;# 
  2034  0797                     	;# 
  2035  0798                     	;# 
  2036  0799                     	;# 
  2037  079A                     	;# 
  2038  079B                     	;# 
  2039  080C                     	;# 
  2040  080D                     	;# 
  2041  080E                     	;# 
  2042  080F                     	;# 
  2043  0810                     	;# 
  2044  0811                     	;# 
  2045  0812                     	;# 
  2046  0813                     	;# 
  2047  0814                     	;# 
  2048  081A                     	;# 
  2049  081B                     	;# 
  2050  081C                     	;# 
  2051  081D                     	;# 
  2052  081E                     	;# 
  2053  081F                     	;# 
  2054  088C                     	;# 
  2055  088D                     	;# 
  2056  088E                     	;# 
  2057  088F                     	;# 
  2058  0890                     	;# 
  2059  0891                     	;# 
  2060  0892                     	;# 
  2061  0893                     	;# 
  2062  0895                     	;# 
  2063  0896                     	;# 
  2064  0897                     	;# 
  2065  0898                     	;# 
  2066  0899                     	;# 
  2067  089A                     	;# 
  2068  089B                     	;# 
  2069  090C                     	;# 
  2070  090E                     	;# 
  2071  090F                     	;# 
  2072  091F                     	;# 
  2073  091F                     	;# 
  2074  098F                     	;# 
  2075  098F                     	;# 
  2076  0990                     	;# 
  2077  0991                     	;# 
  2078  0992                     	;# 
  2079  0993                     	;# 
  2080  0994                     	;# 
  2081  0995                     	;# 
  2082  0996                     	;# 
  2083  0997                     	;# 
  2084  0E0F                     	;# 
  2085  0E10                     	;# 
  2086  0E11                     	;# 
  2087  0E12                     	;# 
  2088  0E13                     	;# 
  2089  0E14                     	;# 
  2090  0E15                     	;# 
  2091  0E16                     	;# 
  2092  0E17                     	;# 
  2093  0E18                     	;# 
  2094  0E19                     	;# 
  2095  0E1A                     	;# 
  2096  0E1B                     	;# 
  2097  0E1C                     	;# 
  2098  0E1D                     	;# 
  2099  0E1E                     	;# 
  2100  0E1F                     	;# 
  2101  0E20                     	;# 
  2102  0E21                     	;# 
  2103  0E22                     	;# 
  2104  0E23                     	;# 
  2105  0E24                     	;# 
  2106  0E25                     	;# 
  2107  0E26                     	;# 
  2108  0E27                     	;# 
  2109  0E28                     	;# 
  2110  0E29                     	;# 
  2111  0E2A                     	;# 
  2112  0E2B                     	;# 
  2113  0E2C                     	;# 
  2114  0E2D                     	;# 
  2115  0E2E                     	;# 
  2116  0E2F                     	;# 
  2117  0E30                     	;# 
  2118  0E31                     	;# 
  2119  0E32                     	;# 
  2120  0E33                     	;# 
  2121  0E34                     	;# 
  2122  0E35                     	;# 
  2123  0E36                     	;# 
  2124  0E37                     	;# 
  2125  0E8F                     	;# 
  2126  0E90                     	;# 
  2127  0E91                     	;# 
  2128  0E92                     	;# 
  2129  0E93                     	;# 
  2130  0E94                     	;# 
  2131  0E95                     	;# 
  2132  0E96                     	;# 
  2133  0E97                     	;# 
  2134  0E9C                     	;# 
  2135  0E9D                     	;# 
  2136  0E9E                     	;# 
  2137  0EA1                     	;# 
  2138  0EA2                     	;# 
  2139  0EA3                     	;# 
  2140  0EA4                     	;# 
  2141  0EA5                     	;# 
  2142  0EA9                     	;# 
  2143  0EAA                     	;# 
  2144  0EAB                     	;# 
  2145  0EAC                     	;# 
  2146  0EB1                     	;# 
  2147  0EB2                     	;# 
  2148  0EB3                     	;# 
  2149  0EB8                     	;# 
  2150  0EB9                     	;# 
  2151  0EBA                     	;# 
  2152  0EBB                     	;# 
  2153  0EBC                     	;# 
  2154  0EBD                     	;# 
  2155  0EBE                     	;# 
  2156  0EC3                     	;# 
  2157  0EC5                     	;# 
  2158  0EC6                     	;# 
  2159  0EC7                     	;# 
  2160  0EC8                     	;# 
  2161  0EC9                     	;# 
  2162  0ECA                     	;# 
  2163  0ECB                     	;# 
  2164  0ECC                     	;# 
  2165  0F10                     	;# 
  2166  0F11                     	;# 
  2167  0F12                     	;# 
  2168  0F13                     	;# 
  2169  0F14                     	;# 
  2170  0F15                     	;# 
  2171  0F16                     	;# 
  2172  0F17                     	;# 
  2173  0F18                     	;# 
  2174  0F19                     	;# 
  2175  0F1A                     	;# 
  2176  0F1B                     	;# 
  2177  0F1C                     	;# 
  2178  0F1D                     	;# 
  2179  0F1E                     	;# 
  2180  0F1F                     	;# 
  2181  0F20                     	;# 
  2182  0F21                     	;# 
  2183  0F22                     	;# 
  2184  0F23                     	;# 
  2185  0F24                     	;# 
  2186  0F25                     	;# 
  2187  0F26                     	;# 
  2188  0F27                     	;# 
  2189  0F38                     	;# 
  2190  0F39                     	;# 
  2191  0F3A                     	;# 
  2192  0F3B                     	;# 
  2193  0F3C                     	;# 
  2194  0F3D                     	;# 
  2195  0F3E                     	;# 
  2196  0F3F                     	;# 
  2197  0F40                     	;# 
  2198  0F41                     	;# 
  2199  0F43                     	;# 
  2200  0F44                     	;# 
  2201  0F45                     	;# 
  2202  0F46                     	;# 
  2203  0F47                     	;# 
  2204  0F48                     	;# 
  2205  0F49                     	;# 
  2206  0F4A                     	;# 
  2207  0F4B                     	;# 
  2208  0F4C                     	;# 
  2209  0F4E                     	;# 
  2210  0F4F                     	;# 
  2211  0F50                     	;# 
  2212  0F51                     	;# 
  2213  0F52                     	;# 
  2214  0F53                     	;# 
  2215  0F54                     	;# 
  2216  0F55                     	;# 
  2217  0F56                     	;# 
  2218  0F57                     	;# 
  2219  0F65                     	;# 
  2220  0F68                     	;# 
  2221  0F69                     	;# 
  2222  0F6A                     	;# 
  2223  0F6B                     	;# 
  2224  0FE4                     	;# 
  2225  0FE5                     	;# 
  2226  0FE6                     	;# 
  2227  0FE7                     	;# 
  2228  0FE8                     	;# 
  2229  0FE9                     	;# 
  2230  0FEA                     	;# 
  2231  0FEB                     	;# 
  2232  0FED                     	;# 
  2233  0FEE                     	;# 
  2234  0FEF                     	;# 
  2235  0000                     	;# 
  2236  0001                     	;# 
  2237  0002                     	;# 
  2238  0003                     	;# 
  2239  0004                     	;# 
  2240  0005                     	;# 
  2241  0006                     	;# 
  2242  0007                     	;# 
  2243  0008                     	;# 
  2244  0009                     	;# 
  2245  000A                     	;# 
  2246  000B                     	;# 
  2247  000C                     	;# 
  2248  000D                     	;# 
  2249  000E                     	;# 
  2250  0010                     	;# 
  2251  0011                     	;# 
  2252  0012                     	;# 
  2253  0013                     	;# 
  2254  0016                     	;# 
  2255  0017                     	;# 
  2256  0018                     	;# 
  2257  001C                     	;# 
  2258  001C                     	;# 
  2259  001D                     	;# 
  2260  001D                     	;# 
  2261  001E                     	;# 
  2262  001F                     	;# 
  2263  008C                     	;# 
  2264  008C                     	;# 
  2265  008D                     	;# 
  2266  008E                     	;# 
  2267  008E                     	;# 
  2268  008F                     	;# 
  2269  0090                     	;# 
  2270  0090                     	;# 
  2271  0091                     	;# 
  2272  0093                     	;# 
  2273  0094                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009C                     	;# 
  2282  009D                     	;# 
  2283  009E                     	;# 
  2284  010C                     	;# 
  2285  010D                     	;# 
  2286  010E                     	;# 
  2287  010E                     	;# 
  2288  010F                     	;# 
  2289  0110                     	;# 
  2290  0110                     	;# 
  2291  0111                     	;# 
  2292  0112                     	;# 
  2293  0112                     	;# 
  2294  0113                     	;# 
  2295  0114                     	;# 
  2296  0114                     	;# 
  2297  0115                     	;# 
  2298  0116                     	;# 
  2299  0116                     	;# 
  2300  0117                     	;# 
  2301  0119                     	;# 
  2302  0119                     	;# 
  2303  0119                     	;# 
  2304  011A                     	;# 
  2305  011A                     	;# 
  2306  011A                     	;# 
  2307  011B                     	;# 
  2308  011B                     	;# 
  2309  011B                     	;# 
  2310  011B                     	;# 
  2311  011B                     	;# 
  2312  011C                     	;# 
  2313  011C                     	;# 
  2314  011C                     	;# 
  2315  011D                     	;# 
  2316  011D                     	;# 
  2317  011D                     	;# 
  2318  011E                     	;# 
  2319  011E                     	;# 
  2320  011E                     	;# 
  2321  011F                     	;# 
  2322  011F                     	;# 
  2323  011F                     	;# 
  2324  011F                     	;# 
  2325  011F                     	;# 
  2326  018C                     	;# 
  2327  018D                     	;# 
  2328  018E                     	;# 
  2329  018F                     	;# 
  2330  0190                     	;# 
  2331  0191                     	;# 
  2332  0192                     	;# 
  2333  0196                     	;# 
  2334  0197                     	;# 
  2335  0198                     	;# 
  2336  0199                     	;# 
  2337  019A                     	;# 
  2338  019B                     	;# 
  2339  019C                     	;# 
  2340  020C                     	;# 
  2341  020C                     	;# 
  2342  020D                     	;# 
  2343  020E                     	;# 
  2344  020F                     	;# 
  2345  020F                     	;# 
  2346  0210                     	;# 
  2347  0210                     	;# 
  2348  0211                     	;# 
  2349  0211                     	;# 
  2350  0212                     	;# 
  2351  0212                     	;# 
  2352  0213                     	;# 
  2353  0214                     	;# 
  2354  0215                     	;# 
  2355  0215                     	;# 
  2356  0216                     	;# 
  2357  0216                     	;# 
  2358  0217                     	;# 
  2359  0217                     	;# 
  2360  0218                     	;# 
  2361  0218                     	;# 
  2362  0219                     	;# 
  2363  021A                     	;# 
  2364  021B                     	;# 
  2365  021B                     	;# 
  2366  021C                     	;# 
  2367  021C                     	;# 
  2368  021D                     	;# 
  2369  021D                     	;# 
  2370  021E                     	;# 
  2371  021F                     	;# 
  2372  028C                     	;# 
  2373  028C                     	;# 
  2374  028D                     	;# 
  2375  028D                     	;# 
  2376  028E                     	;# 
  2377  028F                     	;# 
  2378  0290                     	;# 
  2379  0290                     	;# 
  2380  0291                     	;# 
  2381  0292                     	;# 
  2382  0292                     	;# 
  2383  0293                     	;# 
  2384  0293                     	;# 
  2385  0294                     	;# 
  2386  0295                     	;# 
  2387  0296                     	;# 
  2388  0296                     	;# 
  2389  0297                     	;# 
  2390  0298                     	;# 
  2391  0298                     	;# 
  2392  0299                     	;# 
  2393  0299                     	;# 
  2394  029A                     	;# 
  2395  029B                     	;# 
  2396  029C                     	;# 
  2397  029C                     	;# 
  2398  029D                     	;# 
  2399  030C                     	;# 
  2400  030C                     	;# 
  2401  030D                     	;# 
  2402  030E                     	;# 
  2403  030F                     	;# 
  2404  0310                     	;# 
  2405  0310                     	;# 
  2406  0311                     	;# 
  2407  0312                     	;# 
  2408  0313                     	;# 
  2409  0314                     	;# 
  2410  0314                     	;# 
  2411  0315                     	;# 
  2412  0316                     	;# 
  2413  0317                     	;# 
  2414  0318                     	;# 
  2415  0318                     	;# 
  2416  0319                     	;# 
  2417  031A                     	;# 
  2418  031B                     	;# 
  2419  031C                     	;# 
  2420  031C                     	;# 
  2421  031D                     	;# 
  2422  031E                     	;# 
  2423  031F                     	;# 
  2424  038C                     	;# 
  2425  038D                     	;# 
  2426  038E                     	;# 
  2427  0390                     	;# 
  2428  0391                     	;# 
  2429  0392                     	;# 
  2430  040C                     	;# 
  2431  040D                     	;# 
  2432  040E                     	;# 
  2433  040F                     	;# 
  2434  0410                     	;# 
  2435  0411                     	;# 
  2436  0416                     	;# 
  2437  0416                     	;# 
  2438  0417                     	;# 
  2439  0418                     	;# 
  2440  0418                     	;# 
  2441  0419                     	;# 
  2442  041A                     	;# 
  2443  041A                     	;# 
  2444  041B                     	;# 
  2445  041C                     	;# 
  2446  041C                     	;# 
  2447  041D                     	;# 
  2448  041E                     	;# 
  2449  041F                     	;# 
  2450  048C                     	;# 
  2451  048C                     	;# 
  2452  048D                     	;# 
  2453  048E                     	;# 
  2454  048F                     	;# 
  2455  048F                     	;# 
  2456  0490                     	;# 
  2457  0491                     	;# 
  2458  0492                     	;# 
  2459  0492                     	;# 
  2460  0493                     	;# 
  2461  0494                     	;# 
  2462  0495                     	;# 
  2463  0495                     	;# 
  2464  0496                     	;# 
  2465  0497                     	;# 
  2466  0498                     	;# 
  2467  0499                     	;# 
  2468  049A                     	;# 
  2469  049B                     	;# 
  2470  049C                     	;# 
  2471  049D                     	;# 
  2472  050C                     	;# 
  2473  050C                     	;# 
  2474  050D                     	;# 
  2475  050E                     	;# 
  2476  050F                     	;# 
  2477  050F                     	;# 
  2478  0510                     	;# 
  2479  0511                     	;# 
  2480  0512                     	;# 
  2481  0512                     	;# 
  2482  0513                     	;# 
  2483  0514                     	;# 
  2484  0515                     	;# 
  2485  0515                     	;# 
  2486  0516                     	;# 
  2487  0517                     	;# 
  2488  0518                     	;# 
  2489  0519                     	;# 
  2490  051A                     	;# 
  2491  051B                     	;# 
  2492  051C                     	;# 
  2493  051D                     	;# 
  2494  058C                     	;# 
  2495  058C                     	;# 
  2496  058D                     	;# 
  2497  058E                     	;# 
  2498  058F                     	;# 
  2499  058F                     	;# 
  2500  0590                     	;# 
  2501  0591                     	;# 
  2502  0592                     	;# 
  2503  0593                     	;# 
  2504  060C                     	;# 
  2505  060D                     	;# 
  2506  060E                     	;# 
  2507  060F                     	;# 
  2508  0610                     	;# 
  2509  0611                     	;# 
  2510  0612                     	;# 
  2511  0613                     	;# 
  2512  0614                     	;# 
  2513  0616                     	;# 
  2514  0617                     	;# 
  2515  0618                     	;# 
  2516  0619                     	;# 
  2517  061A                     	;# 
  2518  061B                     	;# 
  2519  061C                     	;# 
  2520  061D                     	;# 
  2521  061E                     	;# 
  2522  068C                     	;# 
  2523  068D                     	;# 
  2524  068E                     	;# 
  2525  068F                     	;# 
  2526  0690                     	;# 
  2527  0691                     	;# 
  2528  0692                     	;# 
  2529  0693                     	;# 
  2530  0694                     	;# 
  2531  070C                     	;# 
  2532  070D                     	;# 
  2533  070E                     	;# 
  2534  070F                     	;# 
  2535  0710                     	;# 
  2536  0711                     	;# 
  2537  0712                     	;# 
  2538  0713                     	;# 
  2539  0714                     	;# 
  2540  0716                     	;# 
  2541  0717                     	;# 
  2542  0718                     	;# 
  2543  0719                     	;# 
  2544  071A                     	;# 
  2545  071B                     	;# 
  2546  071C                     	;# 
  2547  071D                     	;# 
  2548  071E                     	;# 
  2549  0796                     	;# 
  2550  0797                     	;# 
  2551  0798                     	;# 
  2552  0799                     	;# 
  2553  079A                     	;# 
  2554  079B                     	;# 
  2555  080C                     	;# 
  2556  080D                     	;# 
  2557  080E                     	;# 
  2558  080F                     	;# 
  2559  0810                     	;# 
  2560  0811                     	;# 
  2561  0812                     	;# 
  2562  0813                     	;# 
  2563  0814                     	;# 
  2564  081A                     	;# 
  2565  081B                     	;# 
  2566  081C                     	;# 
  2567  081D                     	;# 
  2568  081E                     	;# 
  2569  081F                     	;# 
  2570  088C                     	;# 
  2571  088D                     	;# 
  2572  088E                     	;# 
  2573  088F                     	;# 
  2574  0890                     	;# 
  2575  0891                     	;# 
  2576  0892                     	;# 
  2577  0893                     	;# 
  2578  0895                     	;# 
  2579  0896                     	;# 
  2580  0897                     	;# 
  2581  0898                     	;# 
  2582  0899                     	;# 
  2583  089A                     	;# 
  2584  089B                     	;# 
  2585  090C                     	;# 
  2586  090E                     	;# 
  2587  090F                     	;# 
  2588  091F                     	;# 
  2589  091F                     	;# 
  2590  098F                     	;# 
  2591  098F                     	;# 
  2592  0990                     	;# 
  2593  0991                     	;# 
  2594  0992                     	;# 
  2595  0993                     	;# 
  2596  0994                     	;# 
  2597  0995                     	;# 
  2598  0996                     	;# 
  2599  0997                     	;# 
  2600  0E0F                     	;# 
  2601  0E10                     	;# 
  2602  0E11                     	;# 
  2603  0E12                     	;# 
  2604  0E13                     	;# 
  2605  0E14                     	;# 
  2606  0E15                     	;# 
  2607  0E16                     	;# 
  2608  0E17                     	;# 
  2609  0E18                     	;# 
  2610  0E19                     	;# 
  2611  0E1A                     	;# 
  2612  0E1B                     	;# 
  2613  0E1C                     	;# 
  2614  0E1D                     	;# 
  2615  0E1E                     	;# 
  2616  0E1F                     	;# 
  2617  0E20                     	;# 
  2618  0E21                     	;# 
  2619  0E22                     	;# 
  2620  0E23                     	;# 
  2621  0E24                     	;# 
  2622  0E25                     	;# 
  2623  0E26                     	;# 
  2624  0E27                     	;# 
  2625  0E28                     	;# 
  2626  0E29                     	;# 
  2627  0E2A                     	;# 
  2628  0E2B                     	;# 
  2629  0E2C                     	;# 
  2630  0E2D                     	;# 
  2631  0E2E                     	;# 
  2632  0E2F                     	;# 
  2633  0E30                     	;# 
  2634  0E31                     	;# 
  2635  0E32                     	;# 
  2636  0E33                     	;# 
  2637  0E34                     	;# 
  2638  0E35                     	;# 
  2639  0E36                     	;# 
  2640  0E37                     	;# 
  2641  0E8F                     	;# 
  2642  0E90                     	;# 
  2643  0E91                     	;# 
  2644  0E92                     	;# 
  2645  0E93                     	;# 
  2646  0E94                     	;# 
  2647  0E95                     	;# 
  2648  0E96                     	;# 
  2649  0E97                     	;# 
  2650  0E9C                     	;# 
  2651  0E9D                     	;# 
  2652  0E9E                     	;# 
  2653  0EA1                     	;# 
  2654  0EA2                     	;# 
  2655  0EA3                     	;# 
  2656  0EA4                     	;# 
  2657  0EA5                     	;# 
  2658  0EA9                     	;# 
  2659  0EAA                     	;# 
  2660  0EAB                     	;# 
  2661  0EAC                     	;# 
  2662  0EB1                     	;# 
  2663  0EB2                     	;# 
  2664  0EB3                     	;# 
  2665  0EB8                     	;# 
  2666  0EB9                     	;# 
  2667  0EBA                     	;# 
  2668  0EBB                     	;# 
  2669  0EBC                     	;# 
  2670  0EBD                     	;# 
  2671  0EBE                     	;# 
  2672  0EC3                     	;# 
  2673  0EC5                     	;# 
  2674  0EC6                     	;# 
  2675  0EC7                     	;# 
  2676  0EC8                     	;# 
  2677  0EC9                     	;# 
  2678  0ECA                     	;# 
  2679  0ECB                     	;# 
  2680  0ECC                     	;# 
  2681  0F10                     	;# 
  2682  0F11                     	;# 
  2683  0F12                     	;# 
  2684  0F13                     	;# 
  2685  0F14                     	;# 
  2686  0F15                     	;# 
  2687  0F16                     	;# 
  2688  0F17                     	;# 
  2689  0F18                     	;# 
  2690  0F19                     	;# 
  2691  0F1A                     	;# 
  2692  0F1B                     	;# 
  2693  0F1C                     	;# 
  2694  0F1D                     	;# 
  2695  0F1E                     	;# 
  2696  0F1F                     	;# 
  2697  0F20                     	;# 
  2698  0F21                     	;# 
  2699  0F22                     	;# 
  2700  0F23                     	;# 
  2701  0F24                     	;# 
  2702  0F25                     	;# 
  2703  0F26                     	;# 
  2704  0F27                     	;# 
  2705  0F38                     	;# 
  2706  0F39                     	;# 
  2707  0F3A                     	;# 
  2708  0F3B                     	;# 
  2709  0F3C                     	;# 
  2710  0F3D                     	;# 
  2711  0F3E                     	;# 
  2712  0F3F                     	;# 
  2713  0F40                     	;# 
  2714  0F41                     	;# 
  2715  0F43                     	;# 
  2716  0F44                     	;# 
  2717  0F45                     	;# 
  2718  0F46                     	;# 
  2719  0F47                     	;# 
  2720  0F48                     	;# 
  2721  0F49                     	;# 
  2722  0F4A                     	;# 
  2723  0F4B                     	;# 
  2724  0F4C                     	;# 
  2725  0F4E                     	;# 
  2726  0F4F                     	;# 
  2727  0F50                     	;# 
  2728  0F51                     	;# 
  2729  0F52                     	;# 
  2730  0F53                     	;# 
  2731  0F54                     	;# 
  2732  0F55                     	;# 
  2733  0F56                     	;# 
  2734  0F57                     	;# 
  2735  0F65                     	;# 
  2736  0F68                     	;# 
  2737  0F69                     	;# 
  2738  0F6A                     	;# 
  2739  0F6B                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;# 
  2751  0000                     	;# 
  2752  0001                     	;# 
  2753  0002                     	;# 
  2754  0003                     	;# 
  2755  0004                     	;# 
  2756  0005                     	;# 
  2757  0006                     	;# 
  2758  0007                     	;# 
  2759  0008                     	;# 
  2760  0009                     	;# 
  2761  000A                     	;# 
  2762  000B                     	;# 
  2763  000C                     	;# 
  2764  000D                     	;# 
  2765  000E                     	;# 
  2766  0010                     	;# 
  2767  0011                     	;# 
  2768  0012                     	;# 
  2769  0013                     	;# 
  2770  0016                     	;# 
  2771  0017                     	;# 
  2772  0018                     	;# 
  2773  001C                     	;# 
  2774  001C                     	;# 
  2775  001D                     	;# 
  2776  001D                     	;# 
  2777  001E                     	;# 
  2778  001F                     	;# 
  2779  008C                     	;# 
  2780  008C                     	;# 
  2781  008D                     	;# 
  2782  008E                     	;# 
  2783  008E                     	;# 
  2784  008F                     	;# 
  2785  0090                     	;# 
  2786  0090                     	;# 
  2787  0091                     	;# 
  2788  0093                     	;# 
  2789  0094                     	;# 
  2790  0095                     	;# 
  2791  0096                     	;# 
  2792  0097                     	;# 
  2793  0098                     	;# 
  2794  0099                     	;# 
  2795  009A                     	;# 
  2796  009B                     	;# 
  2797  009C                     	;# 
  2798  009D                     	;# 
  2799  009E                     	;# 
  2800  010C                     	;# 
  2801  010D                     	;# 
  2802  010E                     	;# 
  2803  010E                     	;# 
  2804  010F                     	;# 
  2805  0110                     	;# 
  2806  0110                     	;# 
  2807  0111                     	;# 
  2808  0112                     	;# 
  2809  0112                     	;# 
  2810  0113                     	;# 
  2811  0114                     	;# 
  2812  0114                     	;# 
  2813  0115                     	;# 
  2814  0116                     	;# 
  2815  0116                     	;# 
  2816  0117                     	;# 
  2817  0119                     	;# 
  2818  0119                     	;# 
  2819  0119                     	;# 
  2820  011A                     	;# 
  2821  011A                     	;# 
  2822  011A                     	;# 
  2823  011B                     	;# 
  2824  011B                     	;# 
  2825  011B                     	;# 
  2826  011B                     	;# 
  2827  011B                     	;# 
  2828  011C                     	;# 
  2829  011C                     	;# 
  2830  011C                     	;# 
  2831  011D                     	;# 
  2832  011D                     	;# 
  2833  011D                     	;# 
  2834  011E                     	;# 
  2835  011E                     	;# 
  2836  011E                     	;# 
  2837  011F                     	;# 
  2838  011F                     	;# 
  2839  011F                     	;# 
  2840  011F                     	;# 
  2841  011F                     	;# 
  2842  018C                     	;# 
  2843  018D                     	;# 
  2844  018E                     	;# 
  2845  018F                     	;# 
  2846  0190                     	;# 
  2847  0191                     	;# 
  2848  0192                     	;# 
  2849  0196                     	;# 
  2850  0197                     	;# 
  2851  0198                     	;# 
  2852  0199                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019C                     	;# 
  2856  020C                     	;# 
  2857  020C                     	;# 
  2858  020D                     	;# 
  2859  020E                     	;# 
  2860  020F                     	;# 
  2861  020F                     	;# 
  2862  0210                     	;# 
  2863  0210                     	;# 
  2864  0211                     	;# 
  2865  0211                     	;# 
  2866  0212                     	;# 
  2867  0212                     	;# 
  2868  0213                     	;# 
  2869  0214                     	;# 
  2870  0215                     	;# 
  2871  0215                     	;# 
  2872  0216                     	;# 
  2873  0216                     	;# 
  2874  0217                     	;# 
  2875  0217                     	;# 
  2876  0218                     	;# 
  2877  0218                     	;# 
  2878  0219                     	;# 
  2879  021A                     	;# 
  2880  021B                     	;# 
  2881  021B                     	;# 
  2882  021C                     	;# 
  2883  021C                     	;# 
  2884  021D                     	;# 
  2885  021D                     	;# 
  2886  021E                     	;# 
  2887  021F                     	;# 
  2888  028C                     	;# 
  2889  028C                     	;# 
  2890  028D                     	;# 
  2891  028D                     	;# 
  2892  028E                     	;# 
  2893  028F                     	;# 
  2894  0290                     	;# 
  2895  0290                     	;# 
  2896  0291                     	;# 
  2897  0292                     	;# 
  2898  0292                     	;# 
  2899  0293                     	;# 
  2900  0293                     	;# 
  2901  0294                     	;# 
  2902  0295                     	;# 
  2903  0296                     	;# 
  2904  0296                     	;# 
  2905  0297                     	;# 
  2906  0298                     	;# 
  2907  0298                     	;# 
  2908  0299                     	;# 
  2909  0299                     	;# 
  2910  029A                     	;# 
  2911  029B                     	;# 
  2912  029C                     	;# 
  2913  029C                     	;# 
  2914  029D                     	;# 
  2915  030C                     	;# 
  2916  030C                     	;# 
  2917  030D                     	;# 
  2918  030E                     	;# 
  2919  030F                     	;# 
  2920  0310                     	;# 
  2921  0310                     	;# 
  2922  0311                     	;# 
  2923  0312                     	;# 
  2924  0313                     	;# 
  2925  0314                     	;# 
  2926  0314                     	;# 
  2927  0315                     	;# 
  2928  0316                     	;# 
  2929  0317                     	;# 
  2930  0318                     	;# 
  2931  0318                     	;# 
  2932  0319                     	;# 
  2933  031A                     	;# 
  2934  031B                     	;# 
  2935  031C                     	;# 
  2936  031C                     	;# 
  2937  031D                     	;# 
  2938  031E                     	;# 
  2939  031F                     	;# 
  2940  038C                     	;# 
  2941  038D                     	;# 
  2942  038E                     	;# 
  2943  0390                     	;# 
  2944  0391                     	;# 
  2945  0392                     	;# 
  2946  040C                     	;# 
  2947  040D                     	;# 
  2948  040E                     	;# 
  2949  040F                     	;# 
  2950  0410                     	;# 
  2951  0411                     	;# 
  2952  0416                     	;# 
  2953  0416                     	;# 
  2954  0417                     	;# 
  2955  0418                     	;# 
  2956  0418                     	;# 
  2957  0419                     	;# 
  2958  041A                     	;# 
  2959  041A                     	;# 
  2960  041B                     	;# 
  2961  041C                     	;# 
  2962  041C                     	;# 
  2963  041D                     	;# 
  2964  041E                     	;# 
  2965  041F                     	;# 
  2966  048C                     	;# 
  2967  048C                     	;# 
  2968  048D                     	;# 
  2969  048E                     	;# 
  2970  048F                     	;# 
  2971  048F                     	;# 
  2972  0490                     	;# 
  2973  0491                     	;# 
  2974  0492                     	;# 
  2975  0492                     	;# 
  2976  0493                     	;# 
  2977  0494                     	;# 
  2978  0495                     	;# 
  2979  0495                     	;# 
  2980  0496                     	;# 
  2981  0497                     	;# 
  2982  0498                     	;# 
  2983  0499                     	;# 
  2984  049A                     	;# 
  2985  049B                     	;# 
  2986  049C                     	;# 
  2987  049D                     	;# 
  2988  050C                     	;# 
  2989  050C                     	;# 
  2990  050D                     	;# 
  2991  050E                     	;# 
  2992  050F                     	;# 
  2993  050F                     	;# 
  2994  0510                     	;# 
  2995  0511                     	;# 
  2996  0512                     	;# 
  2997  0512                     	;# 
  2998  0513                     	;# 
  2999  0514                     	;# 
  3000  0515                     	;# 
  3001  0515                     	;# 
  3002  0516                     	;# 
  3003  0517                     	;# 
  3004  0518                     	;# 
  3005  0519                     	;# 
  3006  051A                     	;# 
  3007  051B                     	;# 
  3008  051C                     	;# 
  3009  051D                     	;# 
  3010  058C                     	;# 
  3011  058C                     	;# 
  3012  058D                     	;# 
  3013  058E                     	;# 
  3014  058F                     	;# 
  3015  058F                     	;# 
  3016  0590                     	;# 
  3017  0591                     	;# 
  3018  0592                     	;# 
  3019  0593                     	;# 
  3020  060C                     	;# 
  3021  060D                     	;# 
  3022  060E                     	;# 
  3023  060F                     	;# 
  3024  0610                     	;# 
  3025  0611                     	;# 
  3026  0612                     	;# 
  3027  0613                     	;# 
  3028  0614                     	;# 
  3029  0616                     	;# 
  3030  0617                     	;# 
  3031  0618                     	;# 
  3032  0619                     	;# 
  3033  061A                     	;# 
  3034  061B                     	;# 
  3035  061C                     	;# 
  3036  061D                     	;# 
  3037  061E                     	;# 
  3038  068C                     	;# 
  3039  068D                     	;# 
  3040  068E                     	;# 
  3041  068F                     	;# 
  3042  0690                     	;# 
  3043  0691                     	;# 
  3044  0692                     	;# 
  3045  0693                     	;# 
  3046  0694                     	;# 
  3047  070C                     	;# 
  3048  070D                     	;# 
  3049  070E                     	;# 
  3050  070F                     	;# 
  3051  0710                     	;# 
  3052  0711                     	;# 
  3053  0712                     	;# 
  3054  0713                     	;# 
  3055  0714                     	;# 
  3056  0716                     	;# 
  3057  0717                     	;# 
  3058  0718                     	;# 
  3059  0719                     	;# 
  3060  071A                     	;# 
  3061  071B                     	;# 
  3062  071C                     	;# 
  3063  071D                     	;# 
  3064  071E                     	;# 
  3065  0796                     	;# 
  3066  0797                     	;# 
  3067  0798                     	;# 
  3068  0799                     	;# 
  3069  079A                     	;# 
  3070  079B                     	;# 
  3071  080C                     	;# 
  3072  080D                     	;# 
  3073  080E                     	;# 
  3074  080F                     	;# 
  3075  0810                     	;# 
  3076  0811                     	;# 
  3077  0812                     	;# 
  3078  0813                     	;# 
  3079  0814                     	;# 
  3080  081A                     	;# 
  3081  081B                     	;# 
  3082  081C                     	;# 
  3083  081D                     	;# 
  3084  081E                     	;# 
  3085  081F                     	;# 
  3086  088C                     	;# 
  3087  088D                     	;# 
  3088  088E                     	;# 
  3089  088F                     	;# 
  3090  0890                     	;# 
  3091  0891                     	;# 
  3092  0892                     	;# 
  3093  0893                     	;# 
  3094  0895                     	;# 
  3095  0896                     	;# 
  3096  0897                     	;# 
  3097  0898                     	;# 
  3098  0899                     	;# 
  3099  089A                     	;# 
  3100  089B                     	;# 
  3101  090C                     	;# 
  3102  090E                     	;# 
  3103  090F                     	;# 
  3104  091F                     	;# 
  3105  091F                     	;# 
  3106  098F                     	;# 
  3107  098F                     	;# 
  3108  0990                     	;# 
  3109  0991                     	;# 
  3110  0992                     	;# 
  3111  0993                     	;# 
  3112  0994                     	;# 
  3113  0995                     	;# 
  3114  0996                     	;# 
  3115  0997                     	;# 
  3116  0E0F                     	;# 
  3117  0E10                     	;# 
  3118  0E11                     	;# 
  3119  0E12                     	;# 
  3120  0E13                     	;# 
  3121  0E14                     	;# 
  3122  0E15                     	;# 
  3123  0E16                     	;# 
  3124  0E17                     	;# 
  3125  0E18                     	;# 
  3126  0E19                     	;# 
  3127  0E1A                     	;# 
  3128  0E1B                     	;# 
  3129  0E1C                     	;# 
  3130  0E1D                     	;# 
  3131  0E1E                     	;# 
  3132  0E1F                     	;# 
  3133  0E20                     	;# 
  3134  0E21                     	;# 
  3135  0E22                     	;# 
  3136  0E23                     	;# 
  3137  0E24                     	;# 
  3138  0E25                     	;# 
  3139  0E26                     	;# 
  3140  0E27                     	;# 
  3141  0E28                     	;# 
  3142  0E29                     	;# 
  3143  0E2A                     	;# 
  3144  0E2B                     	;# 
  3145  0E2C                     	;# 
  3146  0E2D                     	;# 
  3147  0E2E                     	;# 
  3148  0E2F                     	;# 
  3149  0E30                     	;# 
  3150  0E31                     	;# 
  3151  0E32                     	;# 
  3152  0E33                     	;# 
  3153  0E34                     	;# 
  3154  0E35                     	;# 
  3155  0E36                     	;# 
  3156  0E37                     	;# 
  3157  0E8F                     	;# 
  3158  0E90                     	;# 
  3159  0E91                     	;# 
  3160  0E92                     	;# 
  3161  0E93                     	;# 
  3162  0E94                     	;# 
  3163  0E95                     	;# 
  3164  0E96                     	;# 
  3165  0E97                     	;# 
  3166  0E9C                     	;# 
  3167  0E9D                     	;# 
  3168  0E9E                     	;# 
  3169  0EA1                     	;# 
  3170  0EA2                     	;# 
  3171  0EA3                     	;# 
  3172  0EA4                     	;# 
  3173  0EA5                     	;# 
  3174  0EA9                     	;# 
  3175  0EAA                     	;# 
  3176  0EAB                     	;# 
  3177  0EAC                     	;# 
  3178  0EB1                     	;# 
  3179  0EB2                     	;# 
  3180  0EB3                     	;# 
  3181  0EB8                     	;# 
  3182  0EB9                     	;# 
  3183  0EBA                     	;# 
  3184  0EBB                     	;# 
  3185  0EBC                     	;# 
  3186  0EBD                     	;# 
  3187  0EBE                     	;# 
  3188  0EC3                     	;# 
  3189  0EC5                     	;# 
  3190  0EC6                     	;# 
  3191  0EC7                     	;# 
  3192  0EC8                     	;# 
  3193  0EC9                     	;# 
  3194  0ECA                     	;# 
  3195  0ECB                     	;# 
  3196  0ECC                     	;# 
  3197  0F10                     	;# 
  3198  0F11                     	;# 
  3199  0F12                     	;# 
  3200  0F13                     	;# 
  3201  0F14                     	;# 
  3202  0F15                     	;# 
  3203  0F16                     	;# 
  3204  0F17                     	;# 
  3205  0F18                     	;# 
  3206  0F19                     	;# 
  3207  0F1A                     	;# 
  3208  0F1B                     	;# 
  3209  0F1C                     	;# 
  3210  0F1D                     	;# 
  3211  0F1E                     	;# 
  3212  0F1F                     	;# 
  3213  0F20                     	;# 
  3214  0F21                     	;# 
  3215  0F22                     	;# 
  3216  0F23                     	;# 
  3217  0F24                     	;# 
  3218  0F25                     	;# 
  3219  0F26                     	;# 
  3220  0F27                     	;# 
  3221  0F38                     	;# 
  3222  0F39                     	;# 
  3223  0F3A                     	;# 
  3224  0F3B                     	;# 
  3225  0F3C                     	;# 
  3226  0F3D                     	;# 
  3227  0F3E                     	;# 
  3228  0F3F                     	;# 
  3229  0F40                     	;# 
  3230  0F41                     	;# 
  3231  0F43                     	;# 
  3232  0F44                     	;# 
  3233  0F45                     	;# 
  3234  0F46                     	;# 
  3235  0F47                     	;# 
  3236  0F48                     	;# 
  3237  0F49                     	;# 
  3238  0F4A                     	;# 
  3239  0F4B                     	;# 
  3240  0F4C                     	;# 
  3241  0F4E                     	;# 
  3242  0F4F                     	;# 
  3243  0F50                     	;# 
  3244  0F51                     	;# 
  3245  0F52                     	;# 
  3246  0F53                     	;# 
  3247  0F54                     	;# 
  3248  0F55                     	;# 
  3249  0F56                     	;# 
  3250  0F57                     	;# 
  3251  0F65                     	;# 
  3252  0F68                     	;# 
  3253  0F69                     	;# 
  3254  0F6A                     	;# 
  3255  0F6B                     	;# 
  3256  0FE4                     	;# 
  3257  0FE5                     	;# 
  3258  0FE6                     	;# 
  3259  0FE7                     	;# 
  3260  0FE8                     	;# 
  3261  0FE9                     	;# 
  3262  0FEA                     	;# 
  3263  0FEB                     	;# 
  3264  0FED                     	;# 
  3265  0FEE                     	;# 
  3266  0FEF                     	;# 
  3267  0000                     	;# 
  3268  0001                     	;# 
  3269  0002                     	;# 
  3270  0003                     	;# 
  3271  0004                     	;# 
  3272  0005                     	;# 
  3273  0006                     	;# 
  3274  0007                     	;# 
  3275  0008                     	;# 
  3276  0009                     	;# 
  3277  000A                     	;# 
  3278  000B                     	;# 
  3279  000C                     	;# 
  3280  000D                     	;# 
  3281  000E                     	;# 
  3282  0010                     	;# 
  3283  0011                     	;# 
  3284  0012                     	;# 
  3285  0013                     	;# 
  3286  0016                     	;# 
  3287  0017                     	;# 
  3288  0018                     	;# 
  3289  001C                     	;# 
  3290  001C                     	;# 
  3291  001D                     	;# 
  3292  001D                     	;# 
  3293  001E                     	;# 
  3294  001F                     	;# 
  3295  008C                     	;# 
  3296  008C                     	;# 
  3297  008D                     	;# 
  3298  008E                     	;# 
  3299  008E                     	;# 
  3300  008F                     	;# 
  3301  0090                     	;# 
  3302  0090                     	;# 
  3303  0091                     	;# 
  3304  0093                     	;# 
  3305  0094                     	;# 
  3306  0095                     	;# 
  3307  0096                     	;# 
  3308  0097                     	;# 
  3309  0098                     	;# 
  3310  0099                     	;# 
  3311  009A                     	;# 
  3312  009B                     	;# 
  3313  009C                     	;# 
  3314  009D                     	;# 
  3315  009E                     	;# 
  3316  010C                     	;# 
  3317  010D                     	;# 
  3318  010E                     	;# 
  3319  010E                     	;# 
  3320  010F                     	;# 
  3321  0110                     	;# 
  3322  0110                     	;# 
  3323  0111                     	;# 
  3324  0112                     	;# 
  3325  0112                     	;# 
  3326  0113                     	;# 
  3327  0114                     	;# 
  3328  0114                     	;# 
  3329  0115                     	;# 
  3330  0116                     	;# 
  3331  0116                     	;# 
  3332  0117                     	;# 
  3333  0119                     	;# 
  3334  0119                     	;# 
  3335  0119                     	;# 
  3336  011A                     	;# 
  3337  011A                     	;# 
  3338  011A                     	;# 
  3339  011B                     	;# 
  3340  011B                     	;# 
  3341  011B                     	;# 
  3342  011B                     	;# 
  3343  011B                     	;# 
  3344  011C                     	;# 
  3345  011C                     	;# 
  3346  011C                     	;# 
  3347  011D                     	;# 
  3348  011D                     	;# 
  3349  011D                     	;# 
  3350  011E                     	;# 
  3351  011E                     	;# 
  3352  011E                     	;# 
  3353  011F                     	;# 
  3354  011F                     	;# 
  3355  011F                     	;# 
  3356  011F                     	;# 
  3357  011F                     	;# 
  3358  018C                     	;# 
  3359  018D                     	;# 
  3360  018E                     	;# 
  3361  018F                     	;# 
  3362  0190                     	;# 
  3363  0191                     	;# 
  3364  0192                     	;# 
  3365  0196                     	;# 
  3366  0197                     	;# 
  3367  0198                     	;# 
  3368  0199                     	;# 
  3369  019A                     	;# 
  3370  019B                     	;# 
  3371  019C                     	;# 
  3372  020C                     	;# 
  3373  020C                     	;# 
  3374  020D                     	;# 
  3375  020E                     	;# 
  3376  020F                     	;# 
  3377  020F                     	;# 
  3378  0210                     	;# 
  3379  0210                     	;# 
  3380  0211                     	;# 
  3381  0211                     	;# 
  3382  0212                     	;# 
  3383  0212                     	;# 
  3384  0213                     	;# 
  3385  0214                     	;# 
  3386  0215                     	;# 
  3387  0215                     	;# 
  3388  0216                     	;# 
  3389  0216                     	;# 
  3390  0217                     	;# 
  3391  0217                     	;# 
  3392  0218                     	;# 
  3393  0218                     	;# 
  3394  0219                     	;# 
  3395  021A                     	;# 
  3396  021B                     	;# 
  3397  021B                     	;# 
  3398  021C                     	;# 
  3399  021C                     	;# 
  3400  021D                     	;# 
  3401  021D                     	;# 
  3402  021E                     	;# 
  3403  021F                     	;# 
  3404  028C                     	;# 
  3405  028C                     	;# 
  3406  028D                     	;# 
  3407  028D                     	;# 
  3408  028E                     	;# 
  3409  028F                     	;# 
  3410  0290                     	;# 
  3411  0290                     	;# 
  3412  0291                     	;# 
  3413  0292                     	;# 
  3414  0292                     	;# 
  3415  0293                     	;# 
  3416  0293                     	;# 
  3417  0294                     	;# 
  3418  0295                     	;# 
  3419  0296                     	;# 
  3420  0296                     	;# 
  3421  0297                     	;# 
  3422  0298                     	;# 
  3423  0298                     	;# 
  3424  0299                     	;# 
  3425  0299                     	;# 
  3426  029A                     	;# 
  3427  029B                     	;# 
  3428  029C                     	;# 
  3429  029C                     	;# 
  3430  029D                     	;# 
  3431  030C                     	;# 
  3432  030C                     	;# 
  3433  030D                     	;# 
  3434  030E                     	;# 
  3435  030F                     	;# 
  3436  0310                     	;# 
  3437  0310                     	;# 
  3438  0311                     	;# 
  3439  0312                     	;# 
  3440  0313                     	;# 
  3441  0314                     	;# 
  3442  0314                     	;# 
  3443  0315                     	;# 
  3444  0316                     	;# 
  3445  0317                     	;# 
  3446  0318                     	;# 
  3447  0318                     	;# 
  3448  0319                     	;# 
  3449  031A                     	;# 
  3450  031B                     	;# 
  3451  031C                     	;# 
  3452  031C                     	;# 
  3453  031D                     	;# 
  3454  031E                     	;# 
  3455  031F                     	;# 
  3456  038C                     	;# 
  3457  038D                     	;# 
  3458  038E                     	;# 
  3459  0390                     	;# 
  3460  0391                     	;# 
  3461  0392                     	;# 
  3462  040C                     	;# 
  3463  040D                     	;# 
  3464  040E                     	;# 
  3465  040F                     	;# 
  3466  0410                     	;# 
  3467  0411                     	;# 
  3468  0416                     	;# 
  3469  0416                     	;# 
  3470  0417                     	;# 
  3471  0418                     	;# 
  3472  0418                     	;# 
  3473  0419                     	;# 
  3474  041A                     	;# 
  3475  041A                     	;# 
  3476  041B                     	;# 
  3477  041C                     	;# 
  3478  041C                     	;# 
  3479  041D                     	;# 
  3480  041E                     	;# 
  3481  041F                     	;# 
  3482  048C                     	;# 
  3483  048C                     	;# 
  3484  048D                     	;# 
  3485  048E                     	;# 
  3486  048F                     	;# 
  3487  048F                     	;# 
  3488  0490                     	;# 
  3489  0491                     	;# 
  3490  0492                     	;# 
  3491  0492                     	;# 
  3492  0493                     	;# 
  3493  0494                     	;# 
  3494  0495                     	;# 
  3495  0495                     	;# 
  3496  0496                     	;# 
  3497  0497                     	;# 
  3498  0498                     	;# 
  3499  0499                     	;# 
  3500  049A                     	;# 
  3501  049B                     	;# 
  3502  049C                     	;# 
  3503  049D                     	;# 
  3504  050C                     	;# 
  3505  050C                     	;# 
  3506  050D                     	;# 
  3507  050E                     	;# 
  3508  050F                     	;# 
  3509  050F                     	;# 
  3510  0510                     	;# 
  3511  0511                     	;# 
  3512  0512                     	;# 
  3513  0512                     	;# 
  3514  0513                     	;# 
  3515  0514                     	;# 
  3516  0515                     	;# 
  3517  0515                     	;# 
  3518  0516                     	;# 
  3519  0517                     	;# 
  3520  0518                     	;# 
  3521  0519                     	;# 
  3522  051A                     	;# 
  3523  051B                     	;# 
  3524  051C                     	;# 
  3525  051D                     	;# 
  3526  058C                     	;# 
  3527  058C                     	;# 
  3528  058D                     	;# 
  3529  058E                     	;# 
  3530  058F                     	;# 
  3531  058F                     	;# 
  3532  0590                     	;# 
  3533  0591                     	;# 
  3534  0592                     	;# 
  3535  0593                     	;# 
  3536  060C                     	;# 
  3537  060D                     	;# 
  3538  060E                     	;# 
  3539  060F                     	;# 
  3540  0610                     	;# 
  3541  0611                     	;# 
  3542  0612                     	;# 
  3543  0613                     	;# 
  3544  0614                     	;# 
  3545  0616                     	;# 
  3546  0617                     	;# 
  3547  0618                     	;# 
  3548  0619                     	;# 
  3549  061A                     	;# 
  3550  061B                     	;# 
  3551  061C                     	;# 
  3552  061D                     	;# 
  3553  061E                     	;# 
  3554  068C                     	;# 
  3555  068D                     	;# 
  3556  068E                     	;# 
  3557  068F                     	;# 
  3558  0690                     	;# 
  3559  0691                     	;# 
  3560  0692                     	;# 
  3561  0693                     	;# 
  3562  0694                     	;# 
  3563  070C                     	;# 
  3564  070D                     	;# 
  3565  070E                     	;# 
  3566  070F                     	;# 
  3567  0710                     	;# 
  3568  0711                     	;# 
  3569  0712                     	;# 
  3570  0713                     	;# 
  3571  0714                     	;# 
  3572  0716                     	;# 
  3573  0717                     	;# 
  3574  0718                     	;# 
  3575  0719                     	;# 
  3576  071A                     	;# 
  3577  071B                     	;# 
  3578  071C                     	;# 
  3579  071D                     	;# 
  3580  071E                     	;# 
  3581  0796                     	;# 
  3582  0797                     	;# 
  3583  0798                     	;# 
  3584  0799                     	;# 
  3585  079A                     	;# 
  3586  079B                     	;# 
  3587  080C                     	;# 
  3588  080D                     	;# 
  3589  080E                     	;# 
  3590  080F                     	;# 
  3591  0810                     	;# 
  3592  0811                     	;# 
  3593  0812                     	;# 
  3594  0813                     	;# 
  3595  0814                     	;# 
  3596  081A                     	;# 
  3597  081B                     	;# 
  3598  081C                     	;# 
  3599  081D                     	;# 
  3600  081E                     	;# 
  3601  081F                     	;# 
  3602  088C                     	;# 
  3603  088D                     	;# 
  3604  088E                     	;# 
  3605  088F                     	;# 
  3606  0890                     	;# 
  3607  0891                     	;# 
  3608  0892                     	;# 
  3609  0893                     	;# 
  3610  0895                     	;# 
  3611  0896                     	;# 
  3612  0897                     	;# 
  3613  0898                     	;# 
  3614  0899                     	;# 
  3615  089A                     	;# 
  3616  089B                     	;# 
  3617  090C                     	;# 
  3618  090E                     	;# 
  3619  090F                     	;# 
  3620  091F                     	;# 
  3621  091F                     	;# 
  3622  098F                     	;# 
  3623  098F                     	;# 
  3624  0990                     	;# 
  3625  0991                     	;# 
  3626  0992                     	;# 
  3627  0993                     	;# 
  3628  0994                     	;# 
  3629  0995                     	;# 
  3630  0996                     	;# 
  3631  0997                     	;# 
  3632  0E0F                     	;# 
  3633  0E10                     	;# 
  3634  0E11                     	;# 
  3635  0E12                     	;# 
  3636  0E13                     	;# 
  3637  0E14                     	;# 
  3638  0E15                     	;# 
  3639  0E16                     	;# 
  3640  0E17                     	;# 
  3641  0E18                     	;# 
  3642  0E19                     	;# 
  3643  0E1A                     	;# 
  3644  0E1B                     	;# 
  3645  0E1C                     	;# 
  3646  0E1D                     	;# 
  3647  0E1E                     	;# 
  3648  0E1F                     	;# 
  3649  0E20                     	;# 
  3650  0E21                     	;# 
  3651  0E22                     	;# 
  3652  0E23                     	;# 
  3653  0E24                     	;# 
  3654  0E25                     	;# 
  3655  0E26                     	;# 
  3656  0E27                     	;# 
  3657  0E28                     	;# 
  3658  0E29                     	;# 
  3659  0E2A                     	;# 
  3660  0E2B                     	;# 
  3661  0E2C                     	;# 
  3662  0E2D                     	;# 
  3663  0E2E                     	;# 
  3664  0E2F                     	;# 
  3665  0E30                     	;# 
  3666  0E31                     	;# 
  3667  0E32                     	;# 
  3668  0E33                     	;# 
  3669  0E34                     	;# 
  3670  0E35                     	;# 
  3671  0E36                     	;# 
  3672  0E37                     	;# 
  3673  0E8F                     	;# 
  3674  0E90                     	;# 
  3675  0E91                     	;# 
  3676  0E92                     	;# 
  3677  0E93                     	;# 
  3678  0E94                     	;# 
  3679  0E95                     	;# 
  3680  0E96                     	;# 
  3681  0E97                     	;# 
  3682  0E9C                     	;# 
  3683  0E9D                     	;# 
  3684  0E9E                     	;# 
  3685  0EA1                     	;# 
  3686  0EA2                     	;# 
  3687  0EA3                     	;# 
  3688  0EA4                     	;# 
  3689  0EA5                     	;# 
  3690  0EA9                     	;# 
  3691  0EAA                     	;# 
  3692  0EAB                     	;# 
  3693  0EAC                     	;# 
  3694  0EB1                     	;# 
  3695  0EB2                     	;# 
  3696  0EB3                     	;# 
  3697  0EB8                     	;# 
  3698  0EB9                     	;# 
  3699  0EBA                     	;# 
  3700  0EBB                     	;# 
  3701  0EBC                     	;# 
  3702  0EBD                     	;# 
  3703  0EBE                     	;# 
  3704  0EC3                     	;# 
  3705  0EC5                     	;# 
  3706  0EC6                     	;# 
  3707  0EC7                     	;# 
  3708  0EC8                     	;# 
  3709  0EC9                     	;# 
  3710  0ECA                     	;# 
  3711  0ECB                     	;# 
  3712  0ECC                     	;# 
  3713  0F10                     	;# 
  3714  0F11                     	;# 
  3715  0F12                     	;# 
  3716  0F13                     	;# 
  3717  0F14                     	;# 
  3718  0F15                     	;# 
  3719  0F16                     	;# 
  3720  0F17                     	;# 
  3721  0F18                     	;# 
  3722  0F19                     	;# 
  3723  0F1A                     	;# 
  3724  0F1B                     	;# 
  3725  0F1C                     	;# 
  3726  0F1D                     	;# 
  3727  0F1E                     	;# 
  3728  0F1F                     	;# 
  3729  0F20                     	;# 
  3730  0F21                     	;# 
  3731  0F22                     	;# 
  3732  0F23                     	;# 
  3733  0F24                     	;# 
  3734  0F25                     	;# 
  3735  0F26                     	;# 
  3736  0F27                     	;# 
  3737  0F38                     	;# 
  3738  0F39                     	;# 
  3739  0F3A                     	;# 
  3740  0F3B                     	;# 
  3741  0F3C                     	;# 
  3742  0F3D                     	;# 
  3743  0F3E                     	;# 
  3744  0F3F                     	;# 
  3745  0F40                     	;# 
  3746  0F41                     	;# 
  3747  0F43                     	;# 
  3748  0F44                     	;# 
  3749  0F45                     	;# 
  3750  0F46                     	;# 
  3751  0F47                     	;# 
  3752  0F48                     	;# 
  3753  0F49                     	;# 
  3754  0F4A                     	;# 
  3755  0F4B                     	;# 
  3756  0F4C                     	;# 
  3757  0F4E                     	;# 
  3758  0F4F                     	;# 
  3759  0F50                     	;# 
  3760  0F51                     	;# 
  3761  0F52                     	;# 
  3762  0F53                     	;# 
  3763  0F54                     	;# 
  3764  0F55                     	;# 
  3765  0F56                     	;# 
  3766  0F57                     	;# 
  3767  0F65                     	;# 
  3768  0F68                     	;# 
  3769  0F69                     	;# 
  3770  0F6A                     	;# 
  3771  0F6B                     	;# 
  3772  0FE4                     	;# 
  3773  0FE5                     	;# 
  3774  0FE6                     	;# 
  3775  0FE7                     	;# 
  3776  0FE8                     	;# 
  3777  0FE9                     	;# 
  3778  0FEA                     	;# 
  3779  0FEB                     	;# 
  3780  0FED                     	;# 
  3781  0FEE                     	;# 
  3782  0FEF                     	;# 
  3783  0000                     	;# 
  3784  0001                     	;# 
  3785  0002                     	;# 
  3786  0003                     	;# 
  3787  0004                     	;# 
  3788  0005                     	;# 
  3789  0006                     	;# 
  3790  0007                     	;# 
  3791  0008                     	;# 
  3792  0009                     	;# 
  3793  000A                     	;# 
  3794  000B                     	;# 
  3795  000C                     	;# 
  3796  000D                     	;# 
  3797  000E                     	;# 
  3798  0010                     	;# 
  3799  0011                     	;# 
  3800  0012                     	;# 
  3801  0013                     	;# 
  3802  0016                     	;# 
  3803  0017                     	;# 
  3804  0018                     	;# 
  3805  001C                     	;# 
  3806  001C                     	;# 
  3807  001D                     	;# 
  3808  001D                     	;# 
  3809  001E                     	;# 
  3810  001F                     	;# 
  3811  008C                     	;# 
  3812  008C                     	;# 
  3813  008D                     	;# 
  3814  008E                     	;# 
  3815  008E                     	;# 
  3816  008F                     	;# 
  3817  0090                     	;# 
  3818  0090                     	;# 
  3819  0091                     	;# 
  3820  0093                     	;# 
  3821  0094                     	;# 
  3822  0095                     	;# 
  3823  0096                     	;# 
  3824  0097                     	;# 
  3825  0098                     	;# 
  3826  0099                     	;# 
  3827  009A                     	;# 
  3828  009B                     	;# 
  3829  009C                     	;# 
  3830  009D                     	;# 
  3831  009E                     	;# 
  3832  010C                     	;# 
  3833  010D                     	;# 
  3834  010E                     	;# 
  3835  010E                     	;# 
  3836  010F                     	;# 
  3837  0110                     	;# 
  3838  0110                     	;# 
  3839  0111                     	;# 
  3840  0112                     	;# 
  3841  0112                     	;# 
  3842  0113                     	;# 
  3843  0114                     	;# 
  3844  0114                     	;# 
  3845  0115                     	;# 
  3846  0116                     	;# 
  3847  0116                     	;# 
  3848  0117                     	;# 
  3849  0119                     	;# 
  3850  0119                     	;# 
  3851  0119                     	;# 
  3852  011A                     	;# 
  3853  011A                     	;# 
  3854  011A                     	;# 
  3855  011B                     	;# 
  3856  011B                     	;# 
  3857  011B                     	;# 
  3858  011B                     	;# 
  3859  011B                     	;# 
  3860  011C                     	;# 
  3861  011C                     	;# 
  3862  011C                     	;# 
  3863  011D                     	;# 
  3864  011D                     	;# 
  3865  011D                     	;# 
  3866  011E                     	;# 
  3867  011E                     	;# 
  3868  011E                     	;# 
  3869  011F                     	;# 
  3870  011F                     	;# 
  3871  011F                     	;# 
  3872  011F                     	;# 
  3873  011F                     	;# 
  3874  018C                     	;# 
  3875  018D                     	;# 
  3876  018E                     	;# 
  3877  018F                     	;# 
  3878  0190                     	;# 
  3879  0191                     	;# 
  3880  0192                     	;# 
  3881  0196                     	;# 
  3882  0197                     	;# 
  3883  0198                     	;# 
  3884  0199                     	;# 
  3885  019A                     	;# 
  3886  019B                     	;# 
  3887  019C                     	;# 
  3888  020C                     	;# 
  3889  020C                     	;# 
  3890  020D                     	;# 
  3891  020E                     	;# 
  3892  020F                     	;# 
  3893  020F                     	;# 
  3894  0210                     	;# 
  3895  0210                     	;# 
  3896  0211                     	;# 
  3897  0211                     	;# 
  3898  0212                     	;# 
  3899  0212                     	;# 
  3900  0213                     	;# 
  3901  0214                     	;# 
  3902  0215                     	;# 
  3903  0215                     	;# 
  3904  0216                     	;# 
  3905  0216                     	;# 
  3906  0217                     	;# 
  3907  0217                     	;# 
  3908  0218                     	;# 
  3909  0218                     	;# 
  3910  0219                     	;# 
  3911  021A                     	;# 
  3912  021B                     	;# 
  3913  021B                     	;# 
  3914  021C                     	;# 
  3915  021C                     	;# 
  3916  021D                     	;# 
  3917  021D                     	;# 
  3918  021E                     	;# 
  3919  021F                     	;# 
  3920  028C                     	;# 
  3921  028C                     	;# 
  3922  028D                     	;# 
  3923  028D                     	;# 
  3924  028E                     	;# 
  3925  028F                     	;# 
  3926  0290                     	;# 
  3927  0290                     	;# 
  3928  0291                     	;# 
  3929  0292                     	;# 
  3930  0292                     	;# 
  3931  0293                     	;# 
  3932  0293                     	;# 
  3933  0294                     	;# 
  3934  0295                     	;# 
  3935  0296                     	;# 
  3936  0296                     	;# 
  3937  0297                     	;# 
  3938  0298                     	;# 
  3939  0298                     	;# 
  3940  0299                     	;# 
  3941  0299                     	;# 
  3942  029A                     	;# 
  3943  029B                     	;# 
  3944  029C                     	;# 
  3945  029C                     	;# 
  3946  029D                     	;# 
  3947  030C                     	;# 
  3948  030C                     	;# 
  3949  030D                     	;# 
  3950  030E                     	;# 
  3951  030F                     	;# 
  3952  0310                     	;# 
  3953  0310                     	;# 
  3954  0311                     	;# 
  3955  0312                     	;# 
  3956  0313                     	;# 
  3957  0314                     	;# 
  3958  0314                     	;# 
  3959  0315                     	;# 
  3960  0316                     	;# 
  3961  0317                     	;# 
  3962  0318                     	;# 
  3963  0318                     	;# 
  3964  0319                     	;# 
  3965  031A                     	;# 
  3966  031B                     	;# 
  3967  031C                     	;# 
  3968  031C                     	;# 
  3969  031D                     	;# 
  3970  031E                     	;# 
  3971  031F                     	;# 
  3972  038C                     	;# 
  3973  038D                     	;# 
  3974  038E                     	;# 
  3975  0390                     	;# 
  3976  0391                     	;# 
  3977  0392                     	;# 
  3978  040C                     	;# 
  3979  040D                     	;# 
  3980  040E                     	;# 
  3981  040F                     	;# 
  3982  0410                     	;# 
  3983  0411                     	;# 
  3984  0416                     	;# 
  3985  0416                     	;# 
  3986  0417                     	;# 
  3987  0418                     	;# 
  3988  0418                     	;# 
  3989  0419                     	;# 
  3990  041A                     	;# 
  3991  041A                     	;# 
  3992  041B                     	;# 
  3993  041C                     	;# 
  3994  041C                     	;# 
  3995  041D                     	;# 
  3996  041E                     	;# 
  3997  041F                     	;# 
  3998  048C                     	;# 
  3999  048C                     	;# 
  4000  048D                     	;# 
  4001  048E                     	;# 
  4002  048F                     	;# 
  4003  048F                     	;# 
  4004  0490                     	;# 
  4005  0491                     	;# 
  4006  0492                     	;# 
  4007  0492                     	;# 
  4008  0493                     	;# 
  4009  0494                     	;# 
  4010  0495                     	;# 
  4011  0495                     	;# 
  4012  0496                     	;# 
  4013  0497                     	;# 
  4014  0498                     	;# 
  4015  0499                     	;# 
  4016  049A                     	;# 
  4017  049B                     	;# 
  4018  049C                     	;# 
  4019  049D                     	;# 
  4020  050C                     	;# 
  4021  050C                     	;# 
  4022  050D                     	;# 
  4023  050E                     	;# 
  4024  050F                     	;# 
  4025  050F                     	;# 
  4026  0510                     	;# 
  4027  0511                     	;# 
  4028  0512                     	;# 
  4029  0512                     	;# 
  4030  0513                     	;# 
  4031  0514                     	;# 
  4032  0515                     	;# 
  4033  0515                     	;# 
  4034  0516                     	;# 
  4035  0517                     	;# 
  4036  0518                     	;# 
  4037  0519                     	;# 
  4038  051A                     	;# 
  4039  051B                     	;# 
  4040  051C                     	;# 
  4041  051D                     	;# 
  4042  058C                     	;# 
  4043  058C                     	;# 
  4044  058D                     	;# 
  4045  058E                     	;# 
  4046  058F                     	;# 
  4047  058F                     	;# 
  4048  0590                     	;# 
  4049  0591                     	;# 
  4050  0592                     	;# 
  4051  0593                     	;# 
  4052  060C                     	;# 
  4053  060D                     	;# 
  4054  060E                     	;# 
  4055  060F                     	;# 
  4056  0610                     	;# 
  4057  0611                     	;# 
  4058  0612                     	;# 
  4059  0613                     	;# 
  4060  0614                     	;# 
  4061  0616                     	;# 
  4062  0617                     	;# 
  4063  0618                     	;# 
  4064  0619                     	;# 
  4065  061A                     	;# 
  4066  061B                     	;# 
  4067  061C                     	;# 
  4068  061D                     	;# 
  4069  061E                     	;# 
  4070  068C                     	;# 
  4071  068D                     	;# 
  4072  068E                     	;# 
  4073  068F                     	;# 
  4074  0690                     	;# 
  4075  0691                     	;# 
  4076  0692                     	;# 
  4077  0693                     	;# 
  4078  0694                     	;# 
  4079  070C                     	;# 
  4080  070D                     	;# 
  4081  070E                     	;# 
  4082  070F                     	;# 
  4083  0710                     	;# 
  4084  0711                     	;# 
  4085  0712                     	;# 
  4086  0713                     	;# 
  4087  0714                     	;# 
  4088  0716                     	;# 
  4089  0717                     	;# 
  4090  0718                     	;# 
  4091  0719                     	;# 
  4092  071A                     	;# 
  4093  071B                     	;# 
  4094  071C                     	;# 
  4095  071D                     	;# 
  4096  071E                     	;# 
  4097  0796                     	;# 
  4098  0797                     	;# 
  4099  0798                     	;# 
  4100  0799                     	;# 
  4101  079A                     	;# 
  4102  079B                     	;# 
  4103  080C                     	;# 
  4104  080D                     	;# 
  4105  080E                     	;# 
  4106  080F                     	;# 
  4107  0810                     	;# 
  4108  0811                     	;# 
  4109  0812                     	;# 
  4110  0813                     	;# 
  4111  0814                     	;# 
  4112  081A                     	;# 
  4113  081B                     	;# 
  4114  081C                     	;# 
  4115  081D                     	;# 
  4116  081E                     	;# 
  4117  081F                     	;# 
  4118  088C                     	;# 
  4119  088D                     	;# 
  4120  088E                     	;# 
  4121  088F                     	;# 
  4122  0890                     	;# 
  4123  0891                     	;# 
  4124  0892                     	;# 
  4125  0893                     	;# 
  4126  0895                     	;# 
  4127  0896                     	;# 
  4128  0897                     	;# 
  4129  0898                     	;# 
  4130  0899                     	;# 
  4131  089A                     	;# 
  4132  089B                     	;# 
  4133  090C                     	;# 
  4134  090E                     	;# 
  4135  090F                     	;# 
  4136  091F                     	;# 
  4137  091F                     	;# 
  4138  098F                     	;# 
  4139  098F                     	;# 
  4140  0990                     	;# 
  4141  0991                     	;# 
  4142  0992                     	;# 
  4143  0993                     	;# 
  4144  0994                     	;# 
  4145  0995                     	;# 
  4146  0996                     	;# 
  4147  0997                     	;# 
  4148  0E0F                     	;# 
  4149  0E10                     	;# 
  4150  0E11                     	;# 
  4151  0E12                     	;# 
  4152  0E13                     	;# 
  4153  0E14                     	;# 
  4154  0E15                     	;# 
  4155  0E16                     	;# 
  4156  0E17                     	;# 
  4157  0E18                     	;# 
  4158  0E19                     	;# 
  4159  0E1A                     	;# 
  4160  0E1B                     	;# 
  4161  0E1C                     	;# 
  4162  0E1D                     	;# 
  4163  0E1E                     	;# 
  4164  0E1F                     	;# 
  4165  0E20                     	;# 
  4166  0E21                     	;# 
  4167  0E22                     	;# 
  4168  0E23                     	;# 
  4169  0E24                     	;# 
  4170  0E25                     	;# 
  4171  0E26                     	;# 
  4172  0E27                     	;# 
  4173  0E28                     	;# 
  4174  0E29                     	;# 
  4175  0E2A                     	;# 
  4176  0E2B                     	;# 
  4177  0E2C                     	;# 
  4178  0E2D                     	;# 
  4179  0E2E                     	;# 
  4180  0E2F                     	;# 
  4181  0E30                     	;# 
  4182  0E31                     	;# 
  4183  0E32                     	;# 
  4184  0E33                     	;# 
  4185  0E34                     	;# 
  4186  0E35                     	;# 
  4187  0E36                     	;# 
  4188  0E37                     	;# 
  4189  0E8F                     	;# 
  4190  0E90                     	;# 
  4191  0E91                     	;# 
  4192  0E92                     	;# 
  4193  0E93                     	;# 
  4194  0E94                     	;# 
  4195  0E95                     	;# 
  4196  0E96                     	;# 
  4197  0E97                     	;# 
  4198  0E9C                     	;# 
  4199  0E9D                     	;# 
  4200  0E9E                     	;# 
  4201  0EA1                     	;# 
  4202  0EA2                     	;# 
  4203  0EA3                     	;# 
  4204  0EA4                     	;# 
  4205  0EA5                     	;# 
  4206  0EA9                     	;# 
  4207  0EAA                     	;# 
  4208  0EAB                     	;# 
  4209  0EAC                     	;# 
  4210  0EB1                     	;# 
  4211  0EB2                     	;# 
  4212  0EB3                     	;# 
  4213  0EB8                     	;# 
  4214  0EB9                     	;# 
  4215  0EBA                     	;# 
  4216  0EBB                     	;# 
  4217  0EBC                     	;# 
  4218  0EBD                     	;# 
  4219  0EBE                     	;# 
  4220  0EC3                     	;# 
  4221  0EC5                     	;# 
  4222  0EC6                     	;# 
  4223  0EC7                     	;# 
  4224  0EC8                     	;# 
  4225  0EC9                     	;# 
  4226  0ECA                     	;# 
  4227  0ECB                     	;# 
  4228  0ECC                     	;# 
  4229  0F10                     	;# 
  4230  0F11                     	;# 
  4231  0F12                     	;# 
  4232  0F13                     	;# 
  4233  0F14                     	;# 
  4234  0F15                     	;# 
  4235  0F16                     	;# 
  4236  0F17                     	;# 
  4237  0F18                     	;# 
  4238  0F19                     	;# 
  4239  0F1A                     	;# 
  4240  0F1B                     	;# 
  4241  0F1C                     	;# 
  4242  0F1D                     	;# 
  4243  0F1E                     	;# 
  4244  0F1F                     	;# 
  4245  0F20                     	;# 
  4246  0F21                     	;# 
  4247  0F22                     	;# 
  4248  0F23                     	;# 
  4249  0F24                     	;# 
  4250  0F25                     	;# 
  4251  0F26                     	;# 
  4252  0F27                     	;# 
  4253  0F38                     	;# 
  4254  0F39                     	;# 
  4255  0F3A                     	;# 
  4256  0F3B                     	;# 
  4257  0F3C                     	;# 
  4258  0F3D                     	;# 
  4259  0F3E                     	;# 
  4260  0F3F                     	;# 
  4261  0F40                     	;# 
  4262  0F41                     	;# 
  4263  0F43                     	;# 
  4264  0F44                     	;# 
  4265  0F45                     	;# 
  4266  0F46                     	;# 
  4267  0F47                     	;# 
  4268  0F48                     	;# 
  4269  0F49                     	;# 
  4270  0F4A                     	;# 
  4271  0F4B                     	;# 
  4272  0F4C                     	;# 
  4273  0F4E                     	;# 
  4274  0F4F                     	;# 
  4275  0F50                     	;# 
  4276  0F51                     	;# 
  4277  0F52                     	;# 
  4278  0F53                     	;# 
  4279  0F54                     	;# 
  4280  0F55                     	;# 
  4281  0F56                     	;# 
  4282  0F57                     	;# 
  4283  0F65                     	;# 
  4284  0F68                     	;# 
  4285  0F69                     	;# 
  4286  0F6A                     	;# 
  4287  0F6B                     	;# 
  4288  0FE4                     	;# 
  4289  0FE5                     	;# 
  4290  0FE6                     	;# 
  4291  0FE7                     	;# 
  4292  0FE8                     	;# 
  4293  0FE9                     	;# 
  4294  0FEA                     	;# 
  4295  0FEB                     	;# 
  4296  0FED                     	;# 
  4297  0FEE                     	;# 
  4298  0FEF                     	;# 
  4299  0000                     	;# 
  4300  0001                     	;# 
  4301  0002                     	;# 
  4302  0003                     	;# 
  4303  0004                     	;# 
  4304  0005                     	;# 
  4305  0006                     	;# 
  4306  0007                     	;# 
  4307  0008                     	;# 
  4308  0009                     	;# 
  4309  000A                     	;# 
  4310  000B                     	;# 
  4311  000C                     	;# 
  4312  000D                     	;# 
  4313  000E                     	;# 
  4314  0010                     	;# 
  4315  0011                     	;# 
  4316  0012                     	;# 
  4317  0013                     	;# 
  4318  0016                     	;# 
  4319  0017                     	;# 
  4320  0018                     	;# 
  4321  001C                     	;# 
  4322  001C                     	;# 
  4323  001D                     	;# 
  4324  001D                     	;# 
  4325  001E                     	;# 
  4326  001F                     	;# 
  4327  008C                     	;# 
  4328  008C                     	;# 
  4329  008D                     	;# 
  4330  008E                     	;# 
  4331  008E                     	;# 
  4332  008F                     	;# 
  4333  0090                     	;# 
  4334  0090                     	;# 
  4335  0091                     	;# 
  4336  0093                     	;# 
  4337  0094                     	;# 
  4338  0095                     	;# 
  4339  0096                     	;# 
  4340  0097                     	;# 
  4341  0098                     	;# 
  4342  0099                     	;# 
  4343  009A                     	;# 
  4344  009B                     	;# 
  4345  009C                     	;# 
  4346  009D                     	;# 
  4347  009E                     	;# 
  4348  010C                     	;# 
  4349  010D                     	;# 
  4350  010E                     	;# 
  4351  010E                     	;# 
  4352  010F                     	;# 
  4353  0110                     	;# 
  4354  0110                     	;# 
  4355  0111                     	;# 
  4356  0112                     	;# 
  4357  0112                     	;# 
  4358  0113                     	;# 
  4359  0114                     	;# 
  4360  0114                     	;# 
  4361  0115                     	;# 
  4362  0116                     	;# 
  4363  0116                     	;# 
  4364  0117                     	;# 
  4365  0119                     	;# 
  4366  0119                     	;# 
  4367  0119                     	;# 
  4368  011A                     	;# 
  4369  011A                     	;# 
  4370  011A                     	;# 
  4371  011B                     	;# 
  4372  011B                     	;# 
  4373  011B                     	;# 
  4374  011B                     	;# 
  4375  011B                     	;# 
  4376  011C                     	;# 
  4377  011C                     	;# 
  4378  011C                     	;# 
  4379  011D                     	;# 
  4380  011D                     	;# 
  4381  011D                     	;# 
  4382  011E                     	;# 
  4383  011E                     	;# 
  4384  011E                     	;# 
  4385  011F                     	;# 
  4386  011F                     	;# 
  4387  011F                     	;# 
  4388  011F                     	;# 
  4389  011F                     	;# 
  4390  018C                     	;# 
  4391  018D                     	;# 
  4392  018E                     	;# 
  4393  018F                     	;# 
  4394  0190                     	;# 
  4395  0191                     	;# 
  4396  0192                     	;# 
  4397  0196                     	;# 
  4398  0197                     	;# 
  4399  0198                     	;# 
  4400  0199                     	;# 
  4401  019A                     	;# 
  4402  019B                     	;# 
  4403  019C                     	;# 
  4404  020C                     	;# 
  4405  020C                     	;# 
  4406  020D                     	;# 
  4407  020E                     	;# 
  4408  020F                     	;# 
  4409  020F                     	;# 
  4410  0210                     	;# 
  4411  0210                     	;# 
  4412  0211                     	;# 
  4413  0211                     	;# 
  4414  0212                     	;# 
  4415  0212                     	;# 
  4416  0213                     	;# 
  4417  0214                     	;# 
  4418  0215                     	;# 
  4419  0215                     	;# 
  4420  0216                     	;# 
  4421  0216                     	;# 
  4422  0217                     	;# 
  4423  0217                     	;# 
  4424  0218                     	;# 
  4425  0218                     	;# 
  4426  0219                     	;# 
  4427  021A                     	;# 
  4428  021B                     	;# 
  4429  021B                     	;# 
  4430  021C                     	;# 
  4431  021C                     	;# 
  4432  021D                     	;# 
  4433  021D                     	;# 
  4434  021E                     	;# 
  4435  021F                     	;# 
  4436  028C                     	;# 
  4437  028C                     	;# 
  4438  028D                     	;# 
  4439  028D                     	;# 
  4440  028E                     	;# 
  4441  028F                     	;# 
  4442  0290                     	;# 
  4443  0290                     	;# 
  4444  0291                     	;# 
  4445  0292                     	;# 
  4446  0292                     	;# 
  4447  0293                     	;# 
  4448  0293                     	;# 
  4449  0294                     	;# 
  4450  0295                     	;# 
  4451  0296                     	;# 
  4452  0296                     	;# 
  4453  0297                     	;# 
  4454  0298                     	;# 
  4455  0298                     	;# 
  4456  0299                     	;# 
  4457  0299                     	;# 
  4458  029A                     	;# 
  4459  029B                     	;# 
  4460  029C                     	;# 
  4461  029C                     	;# 
  4462  029D                     	;# 
  4463  030C                     	;# 
  4464  030C                     	;# 
  4465  030D                     	;# 
  4466  030E                     	;# 
  4467  030F                     	;# 
  4468  0310                     	;# 
  4469  0310                     	;# 
  4470  0311                     	;# 
  4471  0312                     	;# 
  4472  0313                     	;# 
  4473  0314                     	;# 
  4474  0314                     	;# 
  4475  0315                     	;# 
  4476  0316                     	;# 
  4477  0317                     	;# 
  4478  0318                     	;# 
  4479  0318                     	;# 
  4480  0319                     	;# 
  4481  031A                     	;# 
  4482  031B                     	;# 
  4483  031C                     	;# 
  4484  031C                     	;# 
  4485  031D                     	;# 
  4486  031E                     	;# 
  4487  031F                     	;# 
  4488  038C                     	;# 
  4489  038D                     	;# 
  4490  038E                     	;# 
  4491  0390                     	;# 
  4492  0391                     	;# 
  4493  0392                     	;# 
  4494  040C                     	;# 
  4495  040D                     	;# 
  4496  040E                     	;# 
  4497  040F                     	;# 
  4498  0410                     	;# 
  4499  0411                     	;# 
  4500  0416                     	;# 
  4501  0416                     	;# 
  4502  0417                     	;# 
  4503  0418                     	;# 
  4504  0418                     	;# 
  4505  0419                     	;# 
  4506  041A                     	;# 
  4507  041A                     	;# 
  4508  041B                     	;# 
  4509  041C                     	;# 
  4510  041C                     	;# 
  4511  041D                     	;# 
  4512  041E                     	;# 
  4513  041F                     	;# 
  4514  048C                     	;# 
  4515  048C                     	;# 
  4516  048D                     	;# 
  4517  048E                     	;# 
  4518  048F                     	;# 
  4519  048F                     	;# 
  4520  0490                     	;# 
  4521  0491                     	;# 
  4522  0492                     	;# 
  4523  0492                     	;# 
  4524  0493                     	;# 
  4525  0494                     	;# 
  4526  0495                     	;# 
  4527  0495                     	;# 
  4528  0496                     	;# 
  4529  0497                     	;# 
  4530  0498                     	;# 
  4531  0499                     	;# 
  4532  049A                     	;# 
  4533  049B                     	;# 
  4534  049C                     	;# 
  4535  049D                     	;# 
  4536  050C                     	;# 
  4537  050C                     	;# 
  4538  050D                     	;# 
  4539  050E                     	;# 
  4540  050F                     	;# 
  4541  050F                     	;# 
  4542  0510                     	;# 
  4543  0511                     	;# 
  4544  0512                     	;# 
  4545  0512                     	;# 
  4546  0513                     	;# 
  4547  0514                     	;# 
  4548  0515                     	;# 
  4549  0515                     	;# 
  4550  0516                     	;# 
  4551  0517                     	;# 
  4552  0518                     	;# 
  4553  0519                     	;# 
  4554  051A                     	;# 
  4555  051B                     	;# 
  4556  051C                     	;# 
  4557  051D                     	;# 
  4558  058C                     	;# 
  4559  058C                     	;# 
  4560  058D                     	;# 
  4561  058E                     	;# 
  4562  058F                     	;# 
  4563  058F                     	;# 
  4564  0590                     	;# 
  4565  0591                     	;# 
  4566  0592                     	;# 
  4567  0593                     	;# 
  4568  060C                     	;# 
  4569  060D                     	;# 
  4570  060E                     	;# 
  4571  060F                     	;# 
  4572  0610                     	;# 
  4573  0611                     	;# 
  4574  0612                     	;# 
  4575  0613                     	;# 
  4576  0614                     	;# 
  4577  0616                     	;# 
  4578  0617                     	;# 
  4579  0618                     	;# 
  4580  0619                     	;# 
  4581  061A                     	;# 
  4582  061B                     	;# 
  4583  061C                     	;# 
  4584  061D                     	;# 
  4585  061E                     	;# 
  4586  068C                     	;# 
  4587  068D                     	;# 
  4588  068E                     	;# 
  4589  068F                     	;# 
  4590  0690                     	;# 
  4591  0691                     	;# 
  4592  0692                     	;# 
  4593  0693                     	;# 
  4594  0694                     	;# 
  4595  070C                     	;# 
  4596  070D                     	;# 
  4597  070E                     	;# 
  4598  070F                     	;# 
  4599  0710                     	;# 
  4600  0711                     	;# 
  4601  0712                     	;# 
  4602  0713                     	;# 
  4603  0714                     	;# 
  4604  0716                     	;# 
  4605  0717                     	;# 
  4606  0718                     	;# 
  4607  0719                     	;# 
  4608  071A                     	;# 
  4609  071B                     	;# 
  4610  071C                     	;# 
  4611  071D                     	;# 
  4612  071E                     	;# 
  4613  0796                     	;# 
  4614  0797                     	;# 
  4615  0798                     	;# 
  4616  0799                     	;# 
  4617  079A                     	;# 
  4618  079B                     	;# 
  4619  080C                     	;# 
  4620  080D                     	;# 
  4621  080E                     	;# 
  4622  080F                     	;# 
  4623  0810                     	;# 
  4624  0811                     	;# 
  4625  0812                     	;# 
  4626  0813                     	;# 
  4627  0814                     	;# 
  4628  081A                     	;# 
  4629  081B                     	;# 
  4630  081C                     	;# 
  4631  081D                     	;# 
  4632  081E                     	;# 
  4633  081F                     	;# 
  4634  088C                     	;# 
  4635  088D                     	;# 
  4636  088E                     	;# 
  4637  088F                     	;# 
  4638  0890                     	;# 
  4639  0891                     	;# 
  4640  0892                     	;# 
  4641  0893                     	;# 
  4642  0895                     	;# 
  4643  0896                     	;# 
  4644  0897                     	;# 
  4645  0898                     	;# 
  4646  0899                     	;# 
  4647  089A                     	;# 
  4648  089B                     	;# 
  4649  090C                     	;# 
  4650  090E                     	;# 
  4651  090F                     	;# 
  4652  091F                     	;# 
  4653  091F                     	;# 
  4654  098F                     	;# 
  4655  098F                     	;# 
  4656  0990                     	;# 
  4657  0991                     	;# 
  4658  0992                     	;# 
  4659  0993                     	;# 
  4660  0994                     	;# 
  4661  0995                     	;# 
  4662  0996                     	;# 
  4663  0997                     	;# 
  4664  0E0F                     	;# 
  4665  0E10                     	;# 
  4666  0E11                     	;# 
  4667  0E12                     	;# 
  4668  0E13                     	;# 
  4669  0E14                     	;# 
  4670  0E15                     	;# 
  4671  0E16                     	;# 
  4672  0E17                     	;# 
  4673  0E18                     	;# 
  4674  0E19                     	;# 
  4675  0E1A                     	;# 
  4676  0E1B                     	;# 
  4677  0E1C                     	;# 
  4678  0E1D                     	;# 
  4679  0E1E                     	;# 
  4680  0E1F                     	;# 
  4681  0E20                     	;# 
  4682  0E21                     	;# 
  4683  0E22                     	;# 
  4684  0E23                     	;# 
  4685  0E24                     	;# 
  4686  0E25                     	;# 
  4687  0E26                     	;# 
  4688  0E27                     	;# 
  4689  0E28                     	;# 
  4690  0E29                     	;# 
  4691  0E2A                     	;# 
  4692  0E2B                     	;# 
  4693  0E2C                     	;# 
  4694  0E2D                     	;# 
  4695  0E2E                     	;# 
  4696  0E2F                     	;# 
  4697  0E30                     	;# 
  4698  0E31                     	;# 
  4699  0E32                     	;# 
  4700  0E33                     	;# 
  4701  0E34                     	;# 
  4702  0E35                     	;# 
  4703  0E36                     	;# 
  4704  0E37                     	;# 
  4705  0E8F                     	;# 
  4706  0E90                     	;# 
  4707  0E91                     	;# 
  4708  0E92                     	;# 
  4709  0E93                     	;# 
  4710  0E94                     	;# 
  4711  0E95                     	;# 
  4712  0E96                     	;# 
  4713  0E97                     	;# 
  4714  0E9C                     	;# 
  4715  0E9D                     	;# 
  4716  0E9E                     	;# 
  4717  0EA1                     	;# 
  4718  0EA2                     	;# 
  4719  0EA3                     	;# 
  4720  0EA4                     	;# 
  4721  0EA5                     	;# 
  4722  0EA9                     	;# 
  4723  0EAA                     	;# 
  4724  0EAB                     	;# 
  4725  0EAC                     	;# 
  4726  0EB1                     	;# 
  4727  0EB2                     	;# 
  4728  0EB3                     	;# 
  4729  0EB8                     	;# 
  4730  0EB9                     	;# 
  4731  0EBA                     	;# 
  4732  0EBB                     	;# 
  4733  0EBC                     	;# 
  4734  0EBD                     	;# 
  4735  0EBE                     	;# 
  4736  0EC3                     	;# 
  4737  0EC5                     	;# 
  4738  0EC6                     	;# 
  4739  0EC7                     	;# 
  4740  0EC8                     	;# 
  4741  0EC9                     	;# 
  4742  0ECA                     	;# 
  4743  0ECB                     	;# 
  4744  0ECC                     	;# 
  4745  0F10                     	;# 
  4746  0F11                     	;# 
  4747  0F12                     	;# 
  4748  0F13                     	;# 
  4749  0F14                     	;# 
  4750  0F15                     	;# 
  4751  0F16                     	;# 
  4752  0F17                     	;# 
  4753  0F18                     	;# 
  4754  0F19                     	;# 
  4755  0F1A                     	;# 
  4756  0F1B                     	;# 
  4757  0F1C                     	;# 
  4758  0F1D                     	;# 
  4759  0F1E                     	;# 
  4760  0F1F                     	;# 
  4761  0F20                     	;# 
  4762  0F21                     	;# 
  4763  0F22                     	;# 
  4764  0F23                     	;# 
  4765  0F24                     	;# 
  4766  0F25                     	;# 
  4767  0F26                     	;# 
  4768  0F27                     	;# 
  4769  0F38                     	;# 
  4770  0F39                     	;# 
  4771  0F3A                     	;# 
  4772  0F3B                     	;# 
  4773  0F3C                     	;# 
  4774  0F3D                     	;# 
  4775  0F3E                     	;# 
  4776  0F3F                     	;# 
  4777  0F40                     	;# 
  4778  0F41                     	;# 
  4779  0F43                     	;# 
  4780  0F44                     	;# 
  4781  0F45                     	;# 
  4782  0F46                     	;# 
  4783  0F47                     	;# 
  4784  0F48                     	;# 
  4785  0F49                     	;# 
  4786  0F4A                     	;# 
  4787  0F4B                     	;# 
  4788  0F4C                     	;# 
  4789  0F4E                     	;# 
  4790  0F4F                     	;# 
  4791  0F50                     	;# 
  4792  0F51                     	;# 
  4793  0F52                     	;# 
  4794  0F53                     	;# 
  4795  0F54                     	;# 
  4796  0F55                     	;# 
  4797  0F56                     	;# 
  4798  0F57                     	;# 
  4799  0F65                     	;# 
  4800  0F68                     	;# 
  4801  0F69                     	;# 
  4802  0F6A                     	;# 
  4803  0F6B                     	;# 
  4804  0FE4                     	;# 
  4805  0FE5                     	;# 
  4806  0FE6                     	;# 
  4807  0FE7                     	;# 
  4808  0FE8                     	;# 
  4809  0FE9                     	;# 
  4810  0FEA                     	;# 
  4811  0FEB                     	;# 
  4812  0FED                     	;# 
  4813  0FEE                     	;# 
  4814  0FEF                     	;# 
  4815  0000                     	;# 
  4816  0001                     	;# 
  4817  0002                     	;# 
  4818  0003                     	;# 
  4819  0004                     	;# 
  4820  0005                     	;# 
  4821  0006                     	;# 
  4822  0007                     	;# 
  4823  0008                     	;# 
  4824  0009                     	;# 
  4825  000A                     	;# 
  4826  000B                     	;# 
  4827  000C                     	;# 
  4828  000D                     	;# 
  4829  000E                     	;# 
  4830  0010                     	;# 
  4831  0011                     	;# 
  4832  0012                     	;# 
  4833  0013                     	;# 
  4834  0016                     	;# 
  4835  0017                     	;# 
  4836  0018                     	;# 
  4837  001C                     	;# 
  4838  001C                     	;# 
  4839  001D                     	;# 
  4840  001D                     	;# 
  4841  001E                     	;# 
  4842  001F                     	;# 
  4843  008C                     	;# 
  4844  008C                     	;# 
  4845  008D                     	;# 
  4846  008E                     	;# 
  4847  008E                     	;# 
  4848  008F                     	;# 
  4849  0090                     	;# 
  4850  0090                     	;# 
  4851  0091                     	;# 
  4852  0093                     	;# 
  4853  0094                     	;# 
  4854  0095                     	;# 
  4855  0096                     	;# 
  4856  0097                     	;# 
  4857  0098                     	;# 
  4858  0099                     	;# 
  4859  009A                     	;# 
  4860  009B                     	;# 
  4861  009C                     	;# 
  4862  009D                     	;# 
  4863  009E                     	;# 
  4864  010C                     	;# 
  4865  010D                     	;# 
  4866  010E                     	;# 
  4867  010E                     	;# 
  4868  010F                     	;# 
  4869  0110                     	;# 
  4870  0110                     	;# 
  4871  0111                     	;# 
  4872  0112                     	;# 
  4873  0112                     	;# 
  4874  0113                     	;# 
  4875  0114                     	;# 
  4876  0114                     	;# 
  4877  0115                     	;# 
  4878  0116                     	;# 
  4879  0116                     	;# 
  4880  0117                     	;# 
  4881  0119                     	;# 
  4882  0119                     	;# 
  4883  0119                     	;# 
  4884  011A                     	;# 
  4885  011A                     	;# 
  4886  011A                     	;# 
  4887  011B                     	;# 
  4888  011B                     	;# 
  4889  011B                     	;# 
  4890  011B                     	;# 
  4891  011B                     	;# 
  4892  011C                     	;# 
  4893  011C                     	;# 
  4894  011C                     	;# 
  4895  011D                     	;# 
  4896  011D                     	;# 
  4897  011D                     	;# 
  4898  011E                     	;# 
  4899  011E                     	;# 
  4900  011E                     	;# 
  4901  011F                     	;# 
  4902  011F                     	;# 
  4903  011F                     	;# 
  4904  011F                     	;# 
  4905  011F                     	;# 
  4906  018C                     	;# 
  4907  018D                     	;# 
  4908  018E                     	;# 
  4909  018F                     	;# 
  4910  0190                     	;# 
  4911  0191                     	;# 
  4912  0192                     	;# 
  4913  0196                     	;# 
  4914  0197                     	;# 
  4915  0198                     	;# 
  4916  0199                     	;# 
  4917  019A                     	;# 
  4918  019B                     	;# 
  4919  019C                     	;# 
  4920  020C                     	;# 
  4921  020C                     	;# 
  4922  020D                     	;# 
  4923  020E                     	;# 
  4924  020F                     	;# 
  4925  020F                     	;# 
  4926  0210                     	;# 
  4927  0210                     	;# 
  4928  0211                     	;# 
  4929  0211                     	;# 
  4930  0212                     	;# 
  4931  0212                     	;# 
  4932  0213                     	;# 
  4933  0214                     	;# 
  4934  0215                     	;# 
  4935  0215                     	;# 
  4936  0216                     	;# 
  4937  0216                     	;# 
  4938  0217                     	;# 
  4939  0217                     	;# 
  4940  0218                     	;# 
  4941  0218                     	;# 
  4942  0219                     	;# 
  4943  021A                     	;# 
  4944  021B                     	;# 
  4945  021B                     	;# 
  4946  021C                     	;# 
  4947  021C                     	;# 
  4948  021D                     	;# 
  4949  021D                     	;# 
  4950  021E                     	;# 
  4951  021F                     	;# 
  4952  028C                     	;# 
  4953  028C                     	;# 
  4954  028D                     	;# 
  4955  028D                     	;# 
  4956  028E                     	;# 
  4957  028F                     	;# 
  4958  0290                     	;# 
  4959  0290                     	;# 
  4960  0291                     	;# 
  4961  0292                     	;# 
  4962  0292                     	;# 
  4963  0293                     	;# 
  4964  0293                     	;# 
  4965  0294                     	;# 
  4966  0295                     	;# 
  4967  0296                     	;# 
  4968  0296                     	;# 
  4969  0297                     	;# 
  4970  0298                     	;# 
  4971  0298                     	;# 
  4972  0299                     	;# 
  4973  0299                     	;# 
  4974  029A                     	;# 
  4975  029B                     	;# 
  4976  029C                     	;# 
  4977  029C                     	;# 
  4978  029D                     	;# 
  4979  030C                     	;# 
  4980  030C                     	;# 
  4981  030D                     	;# 
  4982  030E                     	;# 
  4983  030F                     	;# 
  4984  0310                     	;# 
  4985  0310                     	;# 
  4986  0311                     	;# 
  4987  0312                     	;# 
  4988  0313                     	;# 
  4989  0314                     	;# 
  4990  0314                     	;# 
  4991  0315                     	;# 
  4992  0316                     	;# 
  4993  0317                     	;# 
  4994  0318                     	;# 
  4995  0318                     	;# 
  4996  0319                     	;# 
  4997  031A                     	;# 
  4998  031B                     	;# 
  4999  031C                     	;# 
  5000  031C                     	;# 
  5001  031D                     	;# 
  5002  031E                     	;# 
  5003  031F                     	;# 
  5004  038C                     	;# 
  5005  038D                     	;# 
  5006  038E                     	;# 
  5007  0390                     	;# 
  5008  0391                     	;# 
  5009  0392                     	;# 
  5010  040C                     	;# 
  5011  040D                     	;# 
  5012  040E                     	;# 
  5013  040F                     	;# 
  5014  0410                     	;# 
  5015  0411                     	;# 
  5016  0416                     	;# 
  5017  0416                     	;# 
  5018  0417                     	;# 
  5019  0418                     	;# 
  5020  0418                     	;# 
  5021  0419                     	;# 
  5022  041A                     	;# 
  5023  041A                     	;# 
  5024  041B                     	;# 
  5025  041C                     	;# 
  5026  041C                     	;# 
  5027  041D                     	;# 
  5028  041E                     	;# 
  5029  041F                     	;# 
  5030  048C                     	;# 
  5031  048C                     	;# 
  5032  048D                     	;# 
  5033  048E                     	;# 
  5034  048F                     	;# 
  5035  048F                     	;# 
  5036  0490                     	;# 
  5037  0491                     	;# 
  5038  0492                     	;# 
  5039  0492                     	;# 
  5040  0493                     	;# 
  5041  0494                     	;# 
  5042  0495                     	;# 
  5043  0495                     	;# 
  5044  0496                     	;# 
  5045  0497                     	;# 
  5046  0498                     	;# 
  5047  0499                     	;# 
  5048  049A                     	;# 
  5049  049B                     	;# 
  5050  049C                     	;# 
  5051  049D                     	;# 
  5052  050C                     	;# 
  5053  050C                     	;# 
  5054  050D                     	;# 
  5055  050E                     	;# 
  5056  050F                     	;# 
  5057  050F                     	;# 
  5058  0510                     	;# 
  5059  0511                     	;# 
  5060  0512                     	;# 
  5061  0512                     	;# 
  5062  0513                     	;# 
  5063  0514                     	;# 
  5064  0515                     	;# 
  5065  0515                     	;# 
  5066  0516                     	;# 
  5067  0517                     	;# 
  5068  0518                     	;# 
  5069  0519                     	;# 
  5070  051A                     	;# 
  5071  051B                     	;# 
  5072  051C                     	;# 
  5073  051D                     	;# 
  5074  058C                     	;# 
  5075  058C                     	;# 
  5076  058D                     	;# 
  5077  058E                     	;# 
  5078  058F                     	;# 
  5079  058F                     	;# 
  5080  0590                     	;# 
  5081  0591                     	;# 
  5082  0592                     	;# 
  5083  0593                     	;# 
  5084  060C                     	;# 
  5085  060D                     	;# 
  5086  060E                     	;# 
  5087  060F                     	;# 
  5088  0610                     	;# 
  5089  0611                     	;# 
  5090  0612                     	;# 
  5091  0613                     	;# 
  5092  0614                     	;# 
  5093  0616                     	;# 
  5094  0617                     	;# 
  5095  0618                     	;# 
  5096  0619                     	;# 
  5097  061A                     	;# 
  5098  061B                     	;# 
  5099  061C                     	;# 
  5100  061D                     	;# 
  5101  061E                     	;# 
  5102  068C                     	;# 
  5103  068D                     	;# 
  5104  068E                     	;# 
  5105  068F                     	;# 
  5106  0690                     	;# 
  5107  0691                     	;# 
  5108  0692                     	;# 
  5109  0693                     	;# 
  5110  0694                     	;# 
  5111  070C                     	;# 
  5112  070D                     	;# 
  5113  070E                     	;# 
  5114  070F                     	;# 
  5115  0710                     	;# 
  5116  0711                     	;# 
  5117  0712                     	;# 
  5118  0713                     	;# 
  5119  0714                     	;# 
  5120  0716                     	;# 
  5121  0717                     	;# 
  5122  0718                     	;# 
  5123  0719                     	;# 
  5124  071A                     	;# 
  5125  071B                     	;# 
  5126  071C                     	;# 
  5127  071D                     	;# 
  5128  071E                     	;# 
  5129  0796                     	;# 
  5130  0797                     	;# 
  5131  0798                     	;# 
  5132  0799                     	;# 
  5133  079A                     	;# 
  5134  079B                     	;# 
  5135  080C                     	;# 
  5136  080D                     	;# 
  5137  080E                     	;# 
  5138  080F                     	;# 
  5139  0810                     	;# 
  5140  0811                     	;# 
  5141  0812                     	;# 
  5142  0813                     	;# 
  5143  0814                     	;# 
  5144  081A                     	;# 
  5145  081B                     	;# 
  5146  081C                     	;# 
  5147  081D                     	;# 
  5148  081E                     	;# 
  5149  081F                     	;# 
  5150  088C                     	;# 
  5151  088D                     	;# 
  5152  088E                     	;# 
  5153  088F                     	;# 
  5154  0890                     	;# 
  5155  0891                     	;# 
  5156  0892                     	;# 
  5157  0893                     	;# 
  5158  0895                     	;# 
  5159  0896                     	;# 
  5160  0897                     	;# 
  5161  0898                     	;# 
  5162  0899                     	;# 
  5163  089A                     	;# 
  5164  089B                     	;# 
  5165  090C                     	;# 
  5166  090E                     	;# 
  5167  090F                     	;# 
  5168  091F                     	;# 
  5169  091F                     	;# 
  5170  098F                     	;# 
  5171  098F                     	;# 
  5172  0990                     	;# 
  5173  0991                     	;# 
  5174  0992                     	;# 
  5175  0993                     	;# 
  5176  0994                     	;# 
  5177  0995                     	;# 
  5178  0996                     	;# 
  5179  0997                     	;# 
  5180  0E0F                     	;# 
  5181  0E10                     	;# 
  5182  0E11                     	;# 
  5183  0E12                     	;# 
  5184  0E13                     	;# 
  5185  0E14                     	;# 
  5186  0E15                     	;# 
  5187  0E16                     	;# 
  5188  0E17                     	;# 
  5189  0E18                     	;# 
  5190  0E19                     	;# 
  5191  0E1A                     	;# 
  5192  0E1B                     	;# 
  5193  0E1C                     	;# 
  5194  0E1D                     	;# 
  5195  0E1E                     	;# 
  5196  0E1F                     	;# 
  5197  0E20                     	;# 
  5198  0E21                     	;# 
  5199  0E22                     	;# 
  5200  0E23                     	;# 
  5201  0E24                     	;# 
  5202  0E25                     	;# 
  5203  0E26                     	;# 
  5204  0E27                     	;# 
  5205  0E28                     	;# 
  5206  0E29                     	;# 
  5207  0E2A                     	;# 
  5208  0E2B                     	;# 
  5209  0E2C                     	;# 
  5210  0E2D                     	;# 
  5211  0E2E                     	;# 
  5212  0E2F                     	;# 
  5213  0E30                     	;# 
  5214  0E31                     	;# 
  5215  0E32                     	;# 
  5216  0E33                     	;# 
  5217  0E34                     	;# 
  5218  0E35                     	;# 
  5219  0E36                     	;# 
  5220  0E37                     	;# 
  5221  0E8F                     	;# 
  5222  0E90                     	;# 
  5223  0E91                     	;# 
  5224  0E92                     	;# 
  5225  0E93                     	;# 
  5226  0E94                     	;# 
  5227  0E95                     	;# 
  5228  0E96                     	;# 
  5229  0E97                     	;# 
  5230  0E9C                     	;# 
  5231  0E9D                     	;# 
  5232  0E9E                     	;# 
  5233  0EA1                     	;# 
  5234  0EA2                     	;# 
  5235  0EA3                     	;# 
  5236  0EA4                     	;# 
  5237  0EA5                     	;# 
  5238  0EA9                     	;# 
  5239  0EAA                     	;# 
  5240  0EAB                     	;# 
  5241  0EAC                     	;# 
  5242  0EB1                     	;# 
  5243  0EB2                     	;# 
  5244  0EB3                     	;# 
  5245  0EB8                     	;# 
  5246  0EB9                     	;# 
  5247  0EBA                     	;# 
  5248  0EBB                     	;# 
  5249  0EBC                     	;# 
  5250  0EBD                     	;# 
  5251  0EBE                     	;# 
  5252  0EC3                     	;# 
  5253  0EC5                     	;# 
  5254  0EC6                     	;# 
  5255  0EC7                     	;# 
  5256  0EC8                     	;# 
  5257  0EC9                     	;# 
  5258  0ECA                     	;# 
  5259  0ECB                     	;# 
  5260  0ECC                     	;# 
  5261  0F10                     	;# 
  5262  0F11                     	;# 
  5263  0F12                     	;# 
  5264  0F13                     	;# 
  5265  0F14                     	;# 
  5266  0F15                     	;# 
  5267  0F16                     	;# 
  5268  0F17                     	;# 
  5269  0F18                     	;# 
  5270  0F19                     	;# 
  5271  0F1A                     	;# 
  5272  0F1B                     	;# 
  5273  0F1C                     	;# 
  5274  0F1D                     	;# 
  5275  0F1E                     	;# 
  5276  0F1F                     	;# 
  5277  0F20                     	;# 
  5278  0F21                     	;# 
  5279  0F22                     	;# 
  5280  0F23                     	;# 
  5281  0F24                     	;# 
  5282  0F25                     	;# 
  5283  0F26                     	;# 
  5284  0F27                     	;# 
  5285  0F38                     	;# 
  5286  0F39                     	;# 
  5287  0F3A                     	;# 
  5288  0F3B                     	;# 
  5289  0F3C                     	;# 
  5290  0F3D                     	;# 
  5291  0F3E                     	;# 
  5292  0F3F                     	;# 
  5293  0F40                     	;# 
  5294  0F41                     	;# 
  5295  0F43                     	;# 
  5296  0F44                     	;# 
  5297  0F45                     	;# 
  5298  0F46                     	;# 
  5299  0F47                     	;# 
  5300  0F48                     	;# 
  5301  0F49                     	;# 
  5302  0F4A                     	;# 
  5303  0F4B                     	;# 
  5304  0F4C                     	;# 
  5305  0F4E                     	;# 
  5306  0F4F                     	;# 
  5307  0F50                     	;# 
  5308  0F51                     	;# 
  5309  0F52                     	;# 
  5310  0F53                     	;# 
  5311  0F54                     	;# 
  5312  0F55                     	;# 
  5313  0F56                     	;# 
  5314  0F57                     	;# 
  5315  0F65                     	;# 
  5316  0F68                     	;# 
  5317  0F69                     	;# 
  5318  0F6A                     	;# 
  5319  0F6B                     	;# 
  5320  0FE4                     	;# 
  5321  0FE5                     	;# 
  5322  0FE6                     	;# 
  5323  0FE7                     	;# 
  5324  0FE8                     	;# 
  5325  0FE9                     	;# 
  5326  0FEA                     	;# 
  5327  0FEB                     	;# 
  5328  0FED                     	;# 
  5329  0FEE                     	;# 
  5330  0FEF                     	;# 
  5331  0000                     	;# 
  5332  0001                     	;# 
  5333  0002                     	;# 
  5334  0003                     	;# 
  5335  0004                     	;# 
  5336  0005                     	;# 
  5337  0006                     	;# 
  5338  0007                     	;# 
  5339  0008                     	;# 
  5340  0009                     	;# 
  5341  000A                     	;# 
  5342  000B                     	;# 
  5343  000C                     	;# 
  5344  000D                     	;# 
  5345  000E                     	;# 
  5346  0010                     	;# 
  5347  0011                     	;# 
  5348  0012                     	;# 
  5349  0013                     	;# 
  5350  0016                     	;# 
  5351  0017                     	;# 
  5352  0018                     	;# 
  5353  001C                     	;# 
  5354  001C                     	;# 
  5355  001D                     	;# 
  5356  001D                     	;# 
  5357  001E                     	;# 
  5358  001F                     	;# 
  5359  008C                     	;# 
  5360  008C                     	;# 
  5361  008D                     	;# 
  5362  008E                     	;# 
  5363  008E                     	;# 
  5364  008F                     	;# 
  5365  0090                     	;# 
  5366  0090                     	;# 
  5367  0091                     	;# 
  5368  0093                     	;# 
  5369  0094                     	;# 
  5370  0095                     	;# 
  5371  0096                     	;# 
  5372  0097                     	;# 
  5373  0098                     	;# 
  5374  0099                     	;# 
  5375  009A                     	;# 
  5376  009B                     	;# 
  5377  009C                     	;# 
  5378  009D                     	;# 
  5379  009E                     	;# 
  5380  010C                     	;# 
  5381  010D                     	;# 
  5382  010E                     	;# 
  5383  010E                     	;# 
  5384  010F                     	;# 
  5385  0110                     	;# 
  5386  0110                     	;# 
  5387  0111                     	;# 
  5388  0112                     	;# 
  5389  0112                     	;# 
  5390  0113                     	;# 
  5391  0114                     	;# 
  5392  0114                     	;# 
  5393  0115                     	;# 
  5394  0116                     	;# 
  5395  0116                     	;# 
  5396  0117                     	;# 
  5397  0119                     	;# 
  5398  0119                     	;# 
  5399  0119                     	;# 
  5400  011A                     	;# 
  5401  011A                     	;# 
  5402  011A                     	;# 
  5403  011B                     	;# 
  5404  011B                     	;# 
  5405  011B                     	;# 
  5406  011B                     	;# 
  5407  011B                     	;# 
  5408  011C                     	;# 
  5409  011C                     	;# 
  5410  011C                     	;# 
  5411  011D                     	;# 
  5412  011D                     	;# 
  5413  011D                     	;# 
  5414  011E                     	;# 
  5415  011E                     	;# 
  5416  011E                     	;# 
  5417  011F                     	;# 
  5418  011F                     	;# 
  5419  011F                     	;# 
  5420  011F                     	;# 
  5421  011F                     	;# 
  5422  018C                     	;# 
  5423  018D                     	;# 
  5424  018E                     	;# 
  5425  018F                     	;# 
  5426  0190                     	;# 
  5427  0191                     	;# 
  5428  0192                     	;# 
  5429  0196                     	;# 
  5430  0197                     	;# 
  5431  0198                     	;# 
  5432  0199                     	;# 
  5433  019A                     	;# 
  5434  019B                     	;# 
  5435  019C                     	;# 
  5436  020C                     	;# 
  5437  020C                     	;# 
  5438  020D                     	;# 
  5439  020E                     	;# 
  5440  020F                     	;# 
  5441  020F                     	;# 
  5442  0210                     	;# 
  5443  0210                     	;# 
  5444  0211                     	;# 
  5445  0211                     	;# 
  5446  0212                     	;# 
  5447  0212                     	;# 
  5448  0213                     	;# 
  5449  0214                     	;# 
  5450  0215                     	;# 
  5451  0215                     	;# 
  5452  0216                     	;# 
  5453  0216                     	;# 
  5454  0217                     	;# 
  5455  0217                     	;# 
  5456  0218                     	;# 
  5457  0218                     	;# 
  5458  0219                     	;# 
  5459  021A                     	;# 
  5460  021B                     	;# 
  5461  021B                     	;# 
  5462  021C                     	;# 
  5463  021C                     	;# 
  5464  021D                     	;# 
  5465  021D                     	;# 
  5466  021E                     	;# 
  5467  021F                     	;# 
  5468  028C                     	;# 
  5469  028C                     	;# 
  5470  028D                     	;# 
  5471  028D                     	;# 
  5472  028E                     	;# 
  5473  028F                     	;# 
  5474  0290                     	;# 
  5475  0290                     	;# 
  5476  0291                     	;# 
  5477  0292                     	;# 
  5478  0292                     	;# 
  5479  0293                     	;# 
  5480  0293                     	;# 
  5481  0294                     	;# 
  5482  0295                     	;# 
  5483  0296                     	;# 
  5484  0296                     	;# 
  5485  0297                     	;# 
  5486  0298                     	;# 
  5487  0298                     	;# 
  5488  0299                     	;# 
  5489  0299                     	;# 
  5490  029A                     	;# 
  5491  029B                     	;# 
  5492  029C                     	;# 
  5493  029C                     	;# 
  5494  029D                     	;# 
  5495  030C                     	;# 
  5496  030C                     	;# 
  5497  030D                     	;# 
  5498  030E                     	;# 
  5499  030F                     	;# 
  5500  0310                     	;# 
  5501  0310                     	;# 
  5502  0311                     	;# 
  5503  0312                     	;# 
  5504  0313                     	;# 
  5505  0314                     	;# 
  5506  0314                     	;# 
  5507  0315                     	;# 
  5508  0316                     	;# 
  5509  0317                     	;# 
  5510  0318                     	;# 
  5511  0318                     	;# 
  5512  0319                     	;# 
  5513  031A                     	;# 
  5514  031B                     	;# 
  5515  031C                     	;# 
  5516  031C                     	;# 
  5517  031D                     	;# 
  5518  031E                     	;# 
  5519  031F                     	;# 
  5520  038C                     	;# 
  5521  038D                     	;# 
  5522  038E                     	;# 
  5523  0390                     	;# 
  5524  0391                     	;# 
  5525  0392                     	;# 
  5526  040C                     	;# 
  5527  040D                     	;# 
  5528  040E                     	;# 
  5529  040F                     	;# 
  5530  0410                     	;# 
  5531  0411                     	;# 
  5532  0416                     	;# 
  5533  0416                     	;# 
  5534  0417                     	;# 
  5535  0418                     	;# 
  5536  0418                     	;# 
  5537  0419                     	;# 
  5538  041A                     	;# 
  5539  041A                     	;# 
  5540  041B                     	;# 
  5541  041C                     	;# 
  5542  041C                     	;# 
  5543  041D                     	;# 
  5544  041E                     	;# 
  5545  041F                     	;# 
  5546  048C                     	;# 
  5547  048C                     	;# 
  5548  048D                     	;# 
  5549  048E                     	;# 
  5550  048F                     	;# 
  5551  048F                     	;# 
  5552  0490                     	;# 
  5553  0491                     	;# 
  5554  0492                     	;# 
  5555  0492                     	;# 
  5556  0493                     	;# 
  5557  0494                     	;# 
  5558  0495                     	;# 
  5559  0495                     	;# 
  5560  0496                     	;# 
  5561  0497                     	;# 
  5562  0498                     	;# 
  5563  0499                     	;# 
  5564  049A                     	;# 
  5565  049B                     	;# 
  5566  049C                     	;# 
  5567  049D                     	;# 
  5568  050C                     	;# 
  5569  050C                     	;# 
  5570  050D                     	;# 
  5571  050E                     	;# 
  5572  050F                     	;# 
  5573  050F                     	;# 
  5574  0510                     	;# 
  5575  0511                     	;# 
  5576  0512                     	;# 
  5577  0512                     	;# 
  5578  0513                     	;# 
  5579  0514                     	;# 
  5580  0515                     	;# 
  5581  0515                     	;# 
  5582  0516                     	;# 
  5583  0517                     	;# 
  5584  0518                     	;# 
  5585  0519                     	;# 
  5586  051A                     	;# 
  5587  051B                     	;# 
  5588  051C                     	;# 
  5589  051D                     	;# 
  5590  058C                     	;# 
  5591  058C                     	;# 
  5592  058D                     	;# 
  5593  058E                     	;# 
  5594  058F                     	;# 
  5595  058F                     	;# 
  5596  0590                     	;# 
  5597  0591                     	;# 
  5598  0592                     	;# 
  5599  0593                     	;# 
  5600  060C                     	;# 
  5601  060D                     	;# 
  5602  060E                     	;# 
  5603  060F                     	;# 
  5604  0610                     	;# 
  5605  0611                     	;# 
  5606  0612                     	;# 
  5607  0613                     	;# 
  5608  0614                     	;# 
  5609  0616                     	;# 
  5610  0617                     	;# 
  5611  0618                     	;# 
  5612  0619                     	;# 
  5613  061A                     	;# 
  5614  061B                     	;# 
  5615  061C                     	;# 
  5616  061D                     	;# 
  5617  061E                     	;# 
  5618  068C                     	;# 
  5619  068D                     	;# 
  5620  068E                     	;# 
  5621  068F                     	;# 
  5622  0690                     	;# 
  5623  0691                     	;# 
  5624  0692                     	;# 
  5625  0693                     	;# 
  5626  0694                     	;# 
  5627  070C                     	;# 
  5628  070D                     	;# 
  5629  070E                     	;# 
  5630  070F                     	;# 
  5631  0710                     	;# 
  5632  0711                     	;# 
  5633  0712                     	;# 
  5634  0713                     	;# 
  5635  0714                     	;# 
  5636  0716                     	;# 
  5637  0717                     	;# 
  5638  0718                     	;# 
  5639  0719                     	;# 
  5640  071A                     	;# 
  5641  071B                     	;# 
  5642  071C                     	;# 
  5643  071D                     	;# 
  5644  071E                     	;# 
  5645  0796                     	;# 
  5646  0797                     	;# 
  5647  0798                     	;# 
  5648  0799                     	;# 
  5649  079A                     	;# 
  5650  079B                     	;# 
  5651  080C                     	;# 
  5652  080D                     	;# 
  5653  080E                     	;# 
  5654  080F                     	;# 
  5655  0810                     	;# 
  5656  0811                     	;# 
  5657  0812                     	;# 
  5658  0813                     	;# 
  5659  0814                     	;# 
  5660  081A                     	;# 
  5661  081B                     	;# 
  5662  081C                     	;# 
  5663  081D                     	;# 
  5664  081E                     	;# 
  5665  081F                     	;# 
  5666  088C                     	;# 
  5667  088D                     	;# 
  5668  088E                     	;# 
  5669  088F                     	;# 
  5670  0890                     	;# 
  5671  0891                     	;# 
  5672  0892                     	;# 
  5673  0893                     	;# 
  5674  0895                     	;# 
  5675  0896                     	;# 
  5676  0897                     	;# 
  5677  0898                     	;# 
  5678  0899                     	;# 
  5679  089A                     	;# 
  5680  089B                     	;# 
  5681  090C                     	;# 
  5682  090E                     	;# 
  5683  090F                     	;# 
  5684  091F                     	;# 
  5685  091F                     	;# 
  5686  098F                     	;# 
  5687  098F                     	;# 
  5688  0990                     	;# 
  5689  0991                     	;# 
  5690  0992                     	;# 
  5691  0993                     	;# 
  5692  0994                     	;# 
  5693  0995                     	;# 
  5694  0996                     	;# 
  5695  0997                     	;# 
  5696  0E0F                     	;# 
  5697  0E10                     	;# 
  5698  0E11                     	;# 
  5699  0E12                     	;# 
  5700  0E13                     	;# 
  5701  0E14                     	;# 
  5702  0E15                     	;# 
  5703  0E16                     	;# 
  5704  0E17                     	;# 
  5705  0E18                     	;# 
  5706  0E19                     	;# 
  5707  0E1A                     	;# 
  5708  0E1B                     	;# 
  5709  0E1C                     	;# 
  5710  0E1D                     	;# 
  5711  0E1E                     	;# 
  5712  0E1F                     	;# 
  5713  0E20                     	;# 
  5714  0E21                     	;# 
  5715  0E22                     	;# 
  5716  0E23                     	;# 
  5717  0E24                     	;# 
  5718  0E25                     	;# 
  5719  0E26                     	;# 
  5720  0E27                     	;# 
  5721  0E28                     	;# 
  5722  0E29                     	;# 
  5723  0E2A                     	;# 
  5724  0E2B                     	;# 
  5725  0E2C                     	;# 
  5726  0E2D                     	;# 
  5727  0E2E                     	;# 
  5728  0E2F                     	;# 
  5729  0E30                     	;# 
  5730  0E31                     	;# 
  5731  0E32                     	;# 
  5732  0E33                     	;# 
  5733  0E34                     	;# 
  5734  0E35                     	;# 
  5735  0E36                     	;# 
  5736  0E37                     	;# 
  5737  0E8F                     	;# 
  5738  0E90                     	;# 
  5739  0E91                     	;# 
  5740  0E92                     	;# 
  5741  0E93                     	;# 
  5742  0E94                     	;# 
  5743  0E95                     	;# 
  5744  0E96                     	;# 
  5745  0E97                     	;# 
  5746  0E9C                     	;# 
  5747  0E9D                     	;# 
  5748  0E9E                     	;# 
  5749  0EA1                     	;# 
  5750  0EA2                     	;# 
  5751  0EA3                     	;# 
  5752  0EA4                     	;# 
  5753  0EA5                     	;# 
  5754  0EA9                     	;# 
  5755  0EAA                     	;# 
  5756  0EAB                     	;# 
  5757  0EAC                     	;# 
  5758  0EB1                     	;# 
  5759  0EB2                     	;# 
  5760  0EB3                     	;# 
  5761  0EB8                     	;# 
  5762  0EB9                     	;# 
  5763  0EBA                     	;# 
  5764  0EBB                     	;# 
  5765  0EBC                     	;# 
  5766  0EBD                     	;# 
  5767  0EBE                     	;# 
  5768  0EC3                     	;# 
  5769  0EC5                     	;# 
  5770  0EC6                     	;# 
  5771  0EC7                     	;# 
  5772  0EC8                     	;# 
  5773  0EC9                     	;# 
  5774  0ECA                     	;# 
  5775  0ECB                     	;# 
  5776  0ECC                     	;# 
  5777  0F10                     	;# 
  5778  0F11                     	;# 
  5779  0F12                     	;# 
  5780  0F13                     	;# 
  5781  0F14                     	;# 
  5782  0F15                     	;# 
  5783  0F16                     	;# 
  5784  0F17                     	;# 
  5785  0F18                     	;# 
  5786  0F19                     	;# 
  5787  0F1A                     	;# 
  5788  0F1B                     	;# 
  5789  0F1C                     	;# 
  5790  0F1D                     	;# 
  5791  0F1E                     	;# 
  5792  0F1F                     	;# 
  5793  0F20                     	;# 
  5794  0F21                     	;# 
  5795  0F22                     	;# 
  5796  0F23                     	;# 
  5797  0F24                     	;# 
  5798  0F25                     	;# 
  5799  0F26                     	;# 
  5800  0F27                     	;# 
  5801  0F38                     	;# 
  5802  0F39                     	;# 
  5803  0F3A                     	;# 
  5804  0F3B                     	;# 
  5805  0F3C                     	;# 
  5806  0F3D                     	;# 
  5807  0F3E                     	;# 
  5808  0F3F                     	;# 
  5809  0F40                     	;# 
  5810  0F41                     	;# 
  5811  0F43                     	;# 
  5812  0F44                     	;# 
  5813  0F45                     	;# 
  5814  0F46                     	;# 
  5815  0F47                     	;# 
  5816  0F48                     	;# 
  5817  0F49                     	;# 
  5818  0F4A                     	;# 
  5819  0F4B                     	;# 
  5820  0F4C                     	;# 
  5821  0F4E                     	;# 
  5822  0F4F                     	;# 
  5823  0F50                     	;# 
  5824  0F51                     	;# 
  5825  0F52                     	;# 
  5826  0F53                     	;# 
  5827  0F54                     	;# 
  5828  0F55                     	;# 
  5829  0F56                     	;# 
  5830  0F57                     	;# 
  5831  0F65                     	;# 
  5832  0F68                     	;# 
  5833  0F69                     	;# 
  5834  0F6A                     	;# 
  5835  0F6B                     	;# 
  5836  0FE4                     	;# 
  5837  0FE5                     	;# 
  5838  0FE6                     	;# 
  5839  0FE7                     	;# 
  5840  0FE8                     	;# 
  5841  0FE9                     	;# 
  5842  0FEA                     	;# 
  5843  0FEB                     	;# 
  5844  0FED                     	;# 
  5845  0FEE                     	;# 
  5846  0FEF                     	;# 
  5847  0000                     	;# 
  5848  0001                     	;# 
  5849  0002                     	;# 
  5850  0003                     	;# 
  5851  0004                     	;# 
  5852  0005                     	;# 
  5853  0006                     	;# 
  5854  0007                     	;# 
  5855  0008                     	;# 
  5856  0009                     	;# 
  5857  000A                     	;# 
  5858  000B                     	;# 
  5859  000C                     	;# 
  5860  000D                     	;# 
  5861  000E                     	;# 
  5862  0010                     	;# 
  5863  0011                     	;# 
  5864  0012                     	;# 
  5865  0013                     	;# 
  5866  0016                     	;# 
  5867  0017                     	;# 
  5868  0018                     	;# 
  5869  001C                     	;# 
  5870  001C                     	;# 
  5871  001D                     	;# 
  5872  001D                     	;# 
  5873  001E                     	;# 
  5874  001F                     	;# 
  5875  008C                     	;# 
  5876  008C                     	;# 
  5877  008D                     	;# 
  5878  008E                     	;# 
  5879  008E                     	;# 
  5880  008F                     	;# 
  5881  0090                     	;# 
  5882  0090                     	;# 
  5883  0091                     	;# 
  5884  0093                     	;# 
  5885  0094                     	;# 
  5886  0095                     	;# 
  5887  0096                     	;# 
  5888  0097                     	;# 
  5889  0098                     	;# 
  5890  0099                     	;# 
  5891  009A                     	;# 
  5892  009B                     	;# 
  5893  009C                     	;# 
  5894  009D                     	;# 
  5895  009E                     	;# 
  5896  010C                     	;# 
  5897  010D                     	;# 
  5898  010E                     	;# 
  5899  010E                     	;# 
  5900  010F                     	;# 
  5901  0110                     	;# 
  5902  0110                     	;# 
  5903  0111                     	;# 
  5904  0112                     	;# 
  5905  0112                     	;# 
  5906  0113                     	;# 
  5907  0114                     	;# 
  5908  0114                     	;# 
  5909  0115                     	;# 
  5910  0116                     	;# 
  5911  0116                     	;# 
  5912  0117                     	;# 
  5913  0119                     	;# 
  5914  0119                     	;# 
  5915  0119                     	;# 
  5916  011A                     	;# 
  5917  011A                     	;# 
  5918  011A                     	;# 
  5919  011B                     	;# 
  5920  011B                     	;# 
  5921  011B                     	;# 
  5922  011B                     	;# 
  5923  011B                     	;# 
  5924  011C                     	;# 
  5925  011C                     	;# 
  5926  011C                     	;# 
  5927  011D                     	;# 
  5928  011D                     	;# 
  5929  011D                     	;# 
  5930  011E                     	;# 
  5931  011E                     	;# 
  5932  011E                     	;# 
  5933  011F                     	;# 
  5934  011F                     	;# 
  5935  011F                     	;# 
  5936  011F                     	;# 
  5937  011F                     	;# 
  5938  018C                     	;# 
  5939  018D                     	;# 
  5940  018E                     	;# 
  5941  018F                     	;# 
  5942  0190                     	;# 
  5943  0191                     	;# 
  5944  0192                     	;# 
  5945  0196                     	;# 
  5946  0197                     	;# 
  5947  0198                     	;# 
  5948  0199                     	;# 
  5949  019A                     	;# 
  5950  019B                     	;# 
  5951  019C                     	;# 
  5952  020C                     	;# 
  5953  020C                     	;# 
  5954  020D                     	;# 
  5955  020E                     	;# 
  5956  020F                     	;# 
  5957  020F                     	;# 
  5958  0210                     	;# 
  5959  0210                     	;# 
  5960  0211                     	;# 
  5961  0211                     	;# 
  5962  0212                     	;# 
  5963  0212                     	;# 
  5964  0213                     	;# 
  5965  0214                     	;# 
  5966  0215                     	;# 
  5967  0215                     	;# 
  5968  0216                     	;# 
  5969  0216                     	;# 
  5970  0217                     	;# 
  5971  0217                     	;# 
  5972  0218                     	;# 
  5973  0218                     	;# 
  5974  0219                     	;# 
  5975  021A                     	;# 
  5976  021B                     	;# 
  5977  021B                     	;# 
  5978  021C                     	;# 
  5979  021C                     	;# 
  5980  021D                     	;# 
  5981  021D                     	;# 
  5982  021E                     	;# 
  5983  021F                     	;# 
  5984  028C                     	;# 
  5985  028C                     	;# 
  5986  028D                     	;# 
  5987  028D                     	;# 
  5988  028E                     	;# 
  5989  028F                     	;# 
  5990  0290                     	;# 
  5991  0290                     	;# 
  5992  0291                     	;# 
  5993  0292                     	;# 
  5994  0292                     	;# 
  5995  0293                     	;# 
  5996  0293                     	;# 
  5997  0294                     	;# 
  5998  0295                     	;# 
  5999  0296                     	;# 
  6000  0296                     	;# 
  6001  0297                     	;# 
  6002  0298                     	;# 
  6003  0298                     	;# 
  6004  0299                     	;# 
  6005  0299                     	;# 
  6006  029A                     	;# 
  6007  029B                     	;# 
  6008  029C                     	;# 
  6009  029C                     	;# 
  6010  029D                     	;# 
  6011  030C                     	;# 
  6012  030C                     	;# 
  6013  030D                     	;# 
  6014  030E                     	;# 
  6015  030F                     	;# 
  6016  0310                     	;# 
  6017  0310                     	;# 
  6018  0311                     	;# 
  6019  0312                     	;# 
  6020  0313                     	;# 
  6021  0314                     	;# 
  6022  0314                     	;# 
  6023  0315                     	;# 
  6024  0316                     	;# 
  6025  0317                     	;# 
  6026  0318                     	;# 
  6027  0318                     	;# 
  6028  0319                     	;# 
  6029  031A                     	;# 
  6030  031B                     	;# 
  6031  031C                     	;# 
  6032  031C                     	;# 
  6033  031D                     	;# 
  6034  031E                     	;# 
  6035  031F                     	;# 
  6036  038C                     	;# 
  6037  038D                     	;# 
  6038  038E                     	;# 
  6039  0390                     	;# 
  6040  0391                     	;# 
  6041  0392                     	;# 
  6042  040C                     	;# 
  6043  040D                     	;# 
  6044  040E                     	;# 
  6045  040F                     	;# 
  6046  0410                     	;# 
  6047  0411                     	;# 
  6048  0416                     	;# 
  6049  0416                     	;# 
  6050  0417                     	;# 
  6051  0418                     	;# 
  6052  0418                     	;# 
  6053  0419                     	;# 
  6054  041A                     	;# 
  6055  041A                     	;# 
  6056  041B                     	;# 
  6057  041C                     	;# 
  6058  041C                     	;# 
  6059  041D                     	;# 
  6060  041E                     	;# 
  6061  041F                     	;# 
  6062  048C                     	;# 
  6063  048C                     	;# 
  6064  048D                     	;# 
  6065  048E                     	;# 
  6066  048F                     	;# 
  6067  048F                     	;# 
  6068  0490                     	;# 
  6069  0491                     	;# 
  6070  0492                     	;# 
  6071  0492                     	;# 
  6072  0493                     	;# 
  6073  0494                     	;# 
  6074  0495                     	;# 
  6075  0495                     	;# 
  6076  0496                     	;# 
  6077  0497                     	;# 
  6078  0498                     	;# 
  6079  0499                     	;# 
  6080  049A                     	;# 
  6081  049B                     	;# 
  6082  049C                     	;# 
  6083  049D                     	;# 
  6084  050C                     	;# 
  6085  050C                     	;# 
  6086  050D                     	;# 
  6087  050E                     	;# 
  6088  050F                     	;# 
  6089  050F                     	;# 
  6090  0510                     	;# 
  6091  0511                     	;# 
  6092  0512                     	;# 
  6093  0512                     	;# 
  6094  0513                     	;# 
  6095  0514                     	;# 
  6096  0515                     	;# 
  6097  0515                     	;# 
  6098  0516                     	;# 
  6099  0517                     	;# 
  6100  0518                     	;# 
  6101  0519                     	;# 
  6102  051A                     	;# 
  6103  051B                     	;# 
  6104  051C                     	;# 
  6105  051D                     	;# 
  6106  058C                     	;# 
  6107  058C                     	;# 
  6108  058D                     	;# 
  6109  058E                     	;# 
  6110  058F                     	;# 
  6111  058F                     	;# 
  6112  0590                     	;# 
  6113  0591                     	;# 
  6114  0592                     	;# 
  6115  0593                     	;# 
  6116  060C                     	;# 
  6117  060D                     	;# 
  6118  060E                     	;# 
  6119  060F                     	;# 
  6120  0610                     	;# 
  6121  0611                     	;# 
  6122  0612                     	;# 
  6123  0613                     	;# 
  6124  0614                     	;# 
  6125  0616                     	;# 
  6126  0617                     	;# 
  6127  0618                     	;# 
  6128  0619                     	;# 
  6129  061A                     	;# 
  6130  061B                     	;# 
  6131  061C                     	;# 
  6132  061D                     	;# 
  6133  061E                     	;# 
  6134  068C                     	;# 
  6135  068D                     	;# 
  6136  068E                     	;# 
  6137  068F                     	;# 
  6138  0690                     	;# 
  6139  0691                     	;# 
  6140  0692                     	;# 
  6141  0693                     	;# 
  6142  0694                     	;# 
  6143  070C                     	;# 
  6144  070D                     	;# 
  6145  070E                     	;# 
  6146  070F                     	;# 
  6147  0710                     	;# 
  6148  0711                     	;# 
  6149  0712                     	;# 
  6150  0713                     	;# 
  6151  0714                     	;# 
  6152  0716                     	;# 
  6153  0717                     	;# 
  6154  0718                     	;# 
  6155  0719                     	;# 
  6156  071A                     	;# 
  6157  071B                     	;# 
  6158  071C                     	;# 
  6159  071D                     	;# 
  6160  071E                     	;# 
  6161  0796                     	;# 
  6162  0797                     	;# 
  6163  0798                     	;# 
  6164  0799                     	;# 
  6165  079A                     	;# 
  6166  079B                     	;# 
  6167  080C                     	;# 
  6168  080D                     	;# 
  6169  080E                     	;# 
  6170  080F                     	;# 
  6171  0810                     	;# 
  6172  0811                     	;# 
  6173  0812                     	;# 
  6174  0813                     	;# 
  6175  0814                     	;# 
  6176  081A                     	;# 
  6177  081B                     	;# 
  6178  081C                     	;# 
  6179  081D                     	;# 
  6180  081E                     	;# 
  6181  081F                     	;# 
  6182  088C                     	;# 
  6183  088D                     	;# 
  6184  088E                     	;# 
  6185  088F                     	;# 
  6186  0890                     	;# 
  6187  0891                     	;# 
  6188  0892                     	;# 
  6189  0893                     	;# 
  6190  0895                     	;# 
  6191  0896                     	;# 
  6192  0897                     	;# 
  6193  0898                     	;# 
  6194  0899                     	;# 
  6195  089A                     	;# 
  6196  089B                     	;# 
  6197  090C                     	;# 
  6198  090E                     	;# 
  6199  090F                     	;# 
  6200  091F                     	;# 
  6201  091F                     	;# 
  6202  098F                     	;# 
  6203  098F                     	;# 
  6204  0990                     	;# 
  6205  0991                     	;# 
  6206  0992                     	;# 
  6207  0993                     	;# 
  6208  0994                     	;# 
  6209  0995                     	;# 
  6210  0996                     	;# 
  6211  0997                     	;# 
  6212  0E0F                     	;# 
  6213  0E10                     	;# 
  6214  0E11                     	;# 
  6215  0E12                     	;# 
  6216  0E13                     	;# 
  6217  0E14                     	;# 
  6218  0E15                     	;# 
  6219  0E16                     	;# 
  6220  0E17                     	;# 
  6221  0E18                     	;# 
  6222  0E19                     	;# 
  6223  0E1A                     	;# 
  6224  0E1B                     	;# 
  6225  0E1C                     	;# 
  6226  0E1D                     	;# 
  6227  0E1E                     	;# 
  6228  0E1F                     	;# 
  6229  0E20                     	;# 
  6230  0E21                     	;# 
  6231  0E22                     	;# 
  6232  0E23                     	;# 
  6233  0E24                     	;# 
  6234  0E25                     	;# 
  6235  0E26                     	;# 
  6236  0E27                     	;# 
  6237  0E28                     	;# 
  6238  0E29                     	;# 
  6239  0E2A                     	;# 
  6240  0E2B                     	;# 
  6241  0E2C                     	;# 
  6242  0E2D                     	;# 
  6243  0E2E                     	;# 
  6244  0E2F                     	;# 
  6245  0E30                     	;# 
  6246  0E31                     	;# 
  6247  0E32                     	;# 
  6248  0E33                     	;# 
  6249  0E34                     	;# 
  6250  0E35                     	;# 
  6251  0E36                     	;# 
  6252  0E37                     	;# 
  6253  0E8F                     	;# 
  6254  0E90                     	;# 
  6255  0E91                     	;# 
  6256  0E92                     	;# 
  6257  0E93                     	;# 
  6258  0E94                     	;# 
  6259  0E95                     	;# 
  6260  0E96                     	;# 
  6261  0E97                     	;# 
  6262  0E9C                     	;# 
  6263  0E9D                     	;# 
  6264  0E9E                     	;# 
  6265  0EA1                     	;# 
  6266  0EA2                     	;# 
  6267  0EA3                     	;# 
  6268  0EA4                     	;# 
  6269  0EA5                     	;# 
  6270  0EA9                     	;# 
  6271  0EAA                     	;# 
  6272  0EAB                     	;# 
  6273  0EAC                     	;# 
  6274  0EB1                     	;# 
  6275  0EB2                     	;# 
  6276  0EB3                     	;# 
  6277  0EB8                     	;# 
  6278  0EB9                     	;# 
  6279  0EBA                     	;# 
  6280  0EBB                     	;# 
  6281  0EBC                     	;# 
  6282  0EBD                     	;# 
  6283  0EBE                     	;# 
  6284  0EC3                     	;# 
  6285  0EC5                     	;# 
  6286  0EC6                     	;# 
  6287  0EC7                     	;# 
  6288  0EC8                     	;# 
  6289  0EC9                     	;# 
  6290  0ECA                     	;# 
  6291  0ECB                     	;# 
  6292  0ECC                     	;# 
  6293  0F10                     	;# 
  6294  0F11                     	;# 
  6295  0F12                     	;# 
  6296  0F13                     	;# 
  6297  0F14                     	;# 
  6298  0F15                     	;# 
  6299  0F16                     	;# 
  6300  0F17                     	;# 
  6301  0F18                     	;# 
  6302  0F19                     	;# 
  6303  0F1A                     	;# 
  6304  0F1B                     	;# 
  6305  0F1C                     	;# 
  6306  0F1D                     	;# 
  6307  0F1E                     	;# 
  6308  0F1F                     	;# 
  6309  0F20                     	;# 
  6310  0F21                     	;# 
  6311  0F22                     	;# 
  6312  0F23                     	;# 
  6313  0F24                     	;# 
  6314  0F25                     	;# 
  6315  0F26                     	;# 
  6316  0F27                     	;# 
  6317  0F38                     	;# 
  6318  0F39                     	;# 
  6319  0F3A                     	;# 
  6320  0F3B                     	;# 
  6321  0F3C                     	;# 
  6322  0F3D                     	;# 
  6323  0F3E                     	;# 
  6324  0F3F                     	;# 
  6325  0F40                     	;# 
  6326  0F41                     	;# 
  6327  0F43                     	;# 
  6328  0F44                     	;# 
  6329  0F45                     	;# 
  6330  0F46                     	;# 
  6331  0F47                     	;# 
  6332  0F48                     	;# 
  6333  0F49                     	;# 
  6334  0F4A                     	;# 
  6335  0F4B                     	;# 
  6336  0F4C                     	;# 
  6337  0F4E                     	;# 
  6338  0F4F                     	;# 
  6339  0F50                     	;# 
  6340  0F51                     	;# 
  6341  0F52                     	;# 
  6342  0F53                     	;# 
  6343  0F54                     	;# 
  6344  0F55                     	;# 
  6345  0F56                     	;# 
  6346  0F57                     	;# 
  6347  0F65                     	;# 
  6348  0F68                     	;# 
  6349  0F69                     	;# 
  6350  0F6A                     	;# 
  6351  0F6B                     	;# 
  6352  0FE4                     	;# 
  6353  0FE5                     	;# 
  6354  0FE6                     	;# 
  6355  0FE7                     	;# 
  6356  0FE8                     	;# 
  6357  0FE9                     	;# 
  6358  0FEA                     	;# 
  6359  0FEB                     	;# 
  6360  0FED                     	;# 
  6361  0FEE                     	;# 
  6362  0FEF                     	;# 
  6363  0000                     	;# 
  6364  0001                     	;# 
  6365  0002                     	;# 
  6366  0003                     	;# 
  6367  0004                     	;# 
  6368  0005                     	;# 
  6369  0006                     	;# 
  6370  0007                     	;# 
  6371  0008                     	;# 
  6372  0009                     	;# 
  6373  000A                     	;# 
  6374  000B                     	;# 
  6375  000C                     	;# 
  6376  000D                     	;# 
  6377  000E                     	;# 
  6378  0010                     	;# 
  6379  0011                     	;# 
  6380  0012                     	;# 
  6381  0013                     	;# 
  6382  0016                     	;# 
  6383  0017                     	;# 
  6384  0018                     	;# 
  6385  001C                     	;# 
  6386  001C                     	;# 
  6387  001D                     	;# 
  6388  001D                     	;# 
  6389  001E                     	;# 
  6390  001F                     	;# 
  6391  008C                     	;# 
  6392  008C                     	;# 
  6393  008D                     	;# 
  6394  008E                     	;# 
  6395  008E                     	;# 
  6396  008F                     	;# 
  6397  0090                     	;# 
  6398  0090                     	;# 
  6399  0091                     	;# 
  6400  0093                     	;# 
  6401  0094                     	;# 
  6402  0095                     	;# 
  6403  0096                     	;# 
  6404  0097                     	;# 
  6405  0098                     	;# 
  6406  0099                     	;# 
  6407  009A                     	;# 
  6408  009B                     	;# 
  6409  009C                     	;# 
  6410  009D                     	;# 
  6411  009E                     	;# 
  6412  010C                     	;# 
  6413  010D                     	;# 
  6414  010E                     	;# 
  6415  010E                     	;# 
  6416  010F                     	;# 
  6417  0110                     	;# 
  6418  0110                     	;# 
  6419  0111                     	;# 
  6420  0112                     	;# 
  6421  0112                     	;# 
  6422  0113                     	;# 
  6423  0114                     	;# 
  6424  0114                     	;# 
  6425  0115                     	;# 
  6426  0116                     	;# 
  6427  0116                     	;# 
  6428  0117                     	;# 
  6429  0119                     	;# 
  6430  0119                     	;# 
  6431  0119                     	;# 
  6432  011A                     	;# 
  6433  011A                     	;# 
  6434  011A                     	;# 
  6435  011B                     	;# 
  6436  011B                     	;# 
  6437  011B                     	;# 
  6438  011B                     	;# 
  6439  011B                     	;# 
  6440  011C                     	;# 
  6441  011C                     	;# 
  6442  011C                     	;# 
  6443  011D                     	;# 
  6444  011D                     	;# 
  6445  011D                     	;# 
  6446  011E                     	;# 
  6447  011E                     	;# 
  6448  011E                     	;# 
  6449  011F                     	;# 
  6450  011F                     	;# 
  6451  011F                     	;# 
  6452  011F                     	;# 
  6453  011F                     	;# 
  6454  018C                     	;# 
  6455  018D                     	;# 
  6456  018E                     	;# 
  6457  018F                     	;# 
  6458  0190                     	;# 
  6459  0191                     	;# 
  6460  0192                     	;# 
  6461  0196                     	;# 
  6462  0197                     	;# 
  6463  0198                     	;# 
  6464  0199                     	;# 
  6465  019A                     	;# 
  6466  019B                     	;# 
  6467  019C                     	;# 
  6468  020C                     	;# 
  6469  020C                     	;# 
  6470  020D                     	;# 
  6471  020E                     	;# 
  6472  020F                     	;# 
  6473  020F                     	;# 
  6474  0210                     	;# 
  6475  0210                     	;# 
  6476  0211                     	;# 
  6477  0211                     	;# 
  6478  0212                     	;# 
  6479  0212                     	;# 
  6480  0213                     	;# 
  6481  0214                     	;# 
  6482  0215                     	;# 
  6483  0215                     	;# 
  6484  0216                     	;# 
  6485  0216                     	;# 
  6486  0217                     	;# 
  6487  0217                     	;# 
  6488  0218                     	;# 
  6489  0218                     	;# 
  6490  0219                     	;# 
  6491  021A                     	;# 
  6492  021B                     	;# 
  6493  021B                     	;# 
  6494  021C                     	;# 
  6495  021C                     	;# 
  6496  021D                     	;# 
  6497  021D                     	;# 
  6498  021E                     	;# 
  6499  021F                     	;# 
  6500  028C                     	;# 
  6501  028C                     	;# 
  6502  028D                     	;# 
  6503  028D                     	;# 
  6504  028E                     	;# 
  6505  028F                     	;# 
  6506  0290                     	;# 
  6507  0290                     	;# 
  6508  0291                     	;# 
  6509  0292                     	;# 
  6510  0292                     	;# 
  6511  0293                     	;# 
  6512  0293                     	;# 
  6513  0294                     	;# 
  6514  0295                     	;# 
  6515  0296                     	;# 
  6516  0296                     	;# 
  6517  0297                     	;# 
  6518  0298                     	;# 
  6519  0298                     	;# 
  6520  0299                     	;# 
  6521  0299                     	;# 
  6522  029A                     	;# 
  6523  029B                     	;# 
  6524  029C                     	;# 
  6525  029C                     	;# 
  6526  029D                     	;# 
  6527  030C                     	;# 
  6528  030C                     	;# 
  6529  030D                     	;# 
  6530  030E                     	;# 
  6531  030F                     	;# 
  6532  0310                     	;# 
  6533  0310                     	;# 
  6534  0311                     	;# 
  6535  0312                     	;# 
  6536  0313                     	;# 
  6537  0314                     	;# 
  6538  0314                     	;# 
  6539  0315                     	;# 
  6540  0316                     	;# 
  6541  0317                     	;# 
  6542  0318                     	;# 
  6543  0318                     	;# 
  6544  0319                     	;# 
  6545  031A                     	;# 
  6546  031B                     	;# 
  6547  031C                     	;# 
  6548  031C                     	;# 
  6549  031D                     	;# 
  6550  031E                     	;# 
  6551  031F                     	;# 
  6552  038C                     	;# 
  6553  038D                     	;# 
  6554  038E                     	;# 
  6555  0390                     	;# 
  6556  0391                     	;# 
  6557  0392                     	;# 
  6558  040C                     	;# 
  6559  040D                     	;# 
  6560  040E                     	;# 
  6561  040F                     	;# 
  6562  0410                     	;# 
  6563  0411                     	;# 
  6564  0416                     	;# 
  6565  0416                     	;# 
  6566  0417                     	;# 
  6567  0418                     	;# 
  6568  0418                     	;# 
  6569  0419                     	;# 
  6570  041A                     	;# 
  6571  041A                     	;# 
  6572  041B                     	;# 
  6573  041C                     	;# 
  6574  041C                     	;# 
  6575  041D                     	;# 
  6576  041E                     	;# 
  6577  041F                     	;# 
  6578  048C                     	;# 
  6579  048C                     	;# 
  6580  048D                     	;# 
  6581  048E                     	;# 
  6582  048F                     	;# 
  6583  048F                     	;# 
  6584  0490                     	;# 
  6585  0491                     	;# 
  6586  0492                     	;# 
  6587  0492                     	;# 
  6588  0493                     	;# 
  6589  0494                     	;# 
  6590  0495                     	;# 
  6591  0495                     	;# 
  6592  0496                     	;# 
  6593  0497                     	;# 
  6594  0498                     	;# 
  6595  0499                     	;# 
  6596  049A                     	;# 
  6597  049B                     	;# 
  6598  049C                     	;# 
  6599  049D                     	;# 
  6600  050C                     	;# 
  6601  050C                     	;# 
  6602  050D                     	;# 
  6603  050E                     	;# 
  6604  050F                     	;# 
  6605  050F                     	;# 
  6606  0510                     	;# 
  6607  0511                     	;# 
  6608  0512                     	;# 
  6609  0512                     	;# 
  6610  0513                     	;# 
  6611  0514                     	;# 
  6612  0515                     	;# 
  6613  0515                     	;# 
  6614  0516                     	;# 
  6615  0517                     	;# 
  6616  0518                     	;# 
  6617  0519                     	;# 
  6618  051A                     	;# 
  6619  051B                     	;# 
  6620  051C                     	;# 
  6621  051D                     	;# 
  6622  058C                     	;# 
  6623  058C                     	;# 
  6624  058D                     	;# 
  6625  058E                     	;# 
  6626  058F                     	;# 
  6627  058F                     	;# 
  6628  0590                     	;# 
  6629  0591                     	;# 
  6630  0592                     	;# 
  6631  0593                     	;# 
  6632  060C                     	;# 
  6633  060D                     	;# 
  6634  060E                     	;# 
  6635  060F                     	;# 
  6636  0610                     	;# 
  6637  0611                     	;# 
  6638  0612                     	;# 
  6639  0613                     	;# 
  6640  0614                     	;# 
  6641  0616                     	;# 
  6642  0617                     	;# 
  6643  0618                     	;# 
  6644  0619                     	;# 
  6645  061A                     	;# 
  6646  061B                     	;# 
  6647  061C                     	;# 
  6648  061D                     	;# 
  6649  061E                     	;# 
  6650  068C                     	;# 
  6651  068D                     	;# 
  6652  068E                     	;# 
  6653  068F                     	;# 
  6654  0690                     	;# 
  6655  0691                     	;# 
  6656  0692                     	;# 
  6657  0693                     	;# 
  6658  0694                     	;# 
  6659  070C                     	;# 
  6660  070D                     	;# 
  6661  070E                     	;# 
  6662  070F                     	;# 
  6663  0710                     	;# 
  6664  0711                     	;# 
  6665  0712                     	;# 
  6666  0713                     	;# 
  6667  0714                     	;# 
  6668  0716                     	;# 
  6669  0717                     	;# 
  6670  0718                     	;# 
  6671  0719                     	;# 
  6672  071A                     	;# 
  6673  071B                     	;# 
  6674  071C                     	;# 
  6675  071D                     	;# 
  6676  071E                     	;# 
  6677  0796                     	;# 
  6678  0797                     	;# 
  6679  0798                     	;# 
  6680  0799                     	;# 
  6681  079A                     	;# 
  6682  079B                     	;# 
  6683  080C                     	;# 
  6684  080D                     	;# 
  6685  080E                     	;# 
  6686  080F                     	;# 
  6687  0810                     	;# 
  6688  0811                     	;# 
  6689  0812                     	;# 
  6690  0813                     	;# 
  6691  0814                     	;# 
  6692  081A                     	;# 
  6693  081B                     	;# 
  6694  081C                     	;# 
  6695  081D                     	;# 
  6696  081E                     	;# 
  6697  081F                     	;# 
  6698  088C                     	;# 
  6699  088D                     	;# 
  6700  088E                     	;# 
  6701  088F                     	;# 
  6702  0890                     	;# 
  6703  0891                     	;# 
  6704  0892                     	;# 
  6705  0893                     	;# 
  6706  0895                     	;# 
  6707  0896                     	;# 
  6708  0897                     	;# 
  6709  0898                     	;# 
  6710  0899                     	;# 
  6711  089A                     	;# 
  6712  089B                     	;# 
  6713  090C                     	;# 
  6714  090E                     	;# 
  6715  090F                     	;# 
  6716  091F                     	;# 
  6717  091F                     	;# 
  6718  098F                     	;# 
  6719  098F                     	;# 
  6720  0990                     	;# 
  6721  0991                     	;# 
  6722  0992                     	;# 
  6723  0993                     	;# 
  6724  0994                     	;# 
  6725  0995                     	;# 
  6726  0996                     	;# 
  6727  0997                     	;# 
  6728  0E0F                     	;# 
  6729  0E10                     	;# 
  6730  0E11                     	;# 
  6731  0E12                     	;# 
  6732  0E13                     	;# 
  6733  0E14                     	;# 
  6734  0E15                     	;# 
  6735  0E16                     	;# 
  6736  0E17                     	;# 
  6737  0E18                     	;# 
  6738  0E19                     	;# 
  6739  0E1A                     	;# 
  6740  0E1B                     	;# 
  6741  0E1C                     	;# 
  6742  0E1D                     	;# 
  6743  0E1E                     	;# 
  6744  0E1F                     	;# 
  6745  0E20                     	;# 
  6746  0E21                     	;# 
  6747  0E22                     	;# 
  6748  0E23                     	;# 
  6749  0E24                     	;# 
  6750  0E25                     	;# 
  6751  0E26                     	;# 
  6752  0E27                     	;# 
  6753  0E28                     	;# 
  6754  0E29                     	;# 
  6755  0E2A                     	;# 
  6756  0E2B                     	;# 
  6757  0E2C                     	;# 
  6758  0E2D                     	;# 
  6759  0E2E                     	;# 
  6760  0E2F                     	;# 
  6761  0E30                     	;# 
  6762  0E31                     	;# 
  6763  0E32                     	;# 
  6764  0E33                     	;# 
  6765  0E34                     	;# 
  6766  0E35                     	;# 
  6767  0E36                     	;# 
  6768  0E37                     	;# 
  6769  0E8F                     	;# 
  6770  0E90                     	;# 
  6771  0E91                     	;# 
  6772  0E92                     	;# 
  6773  0E93                     	;# 
  6774  0E94                     	;# 
  6775  0E95                     	;# 
  6776  0E96                     	;# 
  6777  0E97                     	;# 
  6778  0E9C                     	;# 
  6779  0E9D                     	;# 
  6780  0E9E                     	;# 
  6781  0EA1                     	;# 
  6782  0EA2                     	;# 
  6783  0EA3                     	;# 
  6784  0EA4                     	;# 
  6785  0EA5                     	;# 
  6786  0EA9                     	;# 
  6787  0EAA                     	;# 
  6788  0EAB                     	;# 
  6789  0EAC                     	;# 
  6790  0EB1                     	;# 
  6791  0EB2                     	;# 
  6792  0EB3                     	;# 
  6793  0EB8                     	;# 
  6794  0EB9                     	;# 
  6795  0EBA                     	;# 
  6796  0EBB                     	;# 
  6797  0EBC                     	;# 
  6798  0EBD                     	;# 
  6799  0EBE                     	;# 
  6800  0EC3                     	;# 
  6801  0EC5                     	;# 
  6802  0EC6                     	;# 
  6803  0EC7                     	;# 
  6804  0EC8                     	;# 
  6805  0EC9                     	;# 
  6806  0ECA                     	;# 
  6807  0ECB                     	;# 
  6808  0ECC                     	;# 
  6809  0F10                     	;# 
  6810  0F11                     	;# 
  6811  0F12                     	;# 
  6812  0F13                     	;# 
  6813  0F14                     	;# 
  6814  0F15                     	;# 
  6815  0F16                     	;# 
  6816  0F17                     	;# 
  6817  0F18                     	;# 
  6818  0F19                     	;# 
  6819  0F1A                     	;# 
  6820  0F1B                     	;# 
  6821  0F1C                     	;# 
  6822  0F1D                     	;# 
  6823  0F1E                     	;# 
  6824  0F1F                     	;# 
  6825  0F20                     	;# 
  6826  0F21                     	;# 
  6827  0F22                     	;# 
  6828  0F23                     	;# 
  6829  0F24                     	;# 
  6830  0F25                     	;# 
  6831  0F26                     	;# 
  6832  0F27                     	;# 
  6833  0F38                     	;# 
  6834  0F39                     	;# 
  6835  0F3A                     	;# 
  6836  0F3B                     	;# 
  6837  0F3C                     	;# 
  6838  0F3D                     	;# 
  6839  0F3E                     	;# 
  6840  0F3F                     	;# 
  6841  0F40                     	;# 
  6842  0F41                     	;# 
  6843  0F43                     	;# 
  6844  0F44                     	;# 
  6845  0F45                     	;# 
  6846  0F46                     	;# 
  6847  0F47                     	;# 
  6848  0F48                     	;# 
  6849  0F49                     	;# 
  6850  0F4A                     	;# 
  6851  0F4B                     	;# 
  6852  0F4C                     	;# 
  6853  0F4E                     	;# 
  6854  0F4F                     	;# 
  6855  0F50                     	;# 
  6856  0F51                     	;# 
  6857  0F52                     	;# 
  6858  0F53                     	;# 
  6859  0F54                     	;# 
  6860  0F55                     	;# 
  6861  0F56                     	;# 
  6862  0F57                     	;# 
  6863  0F65                     	;# 
  6864  0F68                     	;# 
  6865  0F69                     	;# 
  6866  0F6A                     	;# 
  6867  0F6B                     	;# 
  6868  0FE4                     	;# 
  6869  0FE5                     	;# 
  6870  0FE6                     	;# 
  6871  0FE7                     	;# 
  6872  0FE8                     	;# 
  6873  0FE9                     	;# 
  6874  0FEA                     	;# 
  6875  0FEB                     	;# 
  6876  0FED                     	;# 
  6877  0FEE                     	;# 
  6878  0FEF                     	;# 
  6879  0000                     	;# 
  6880  0001                     	;# 
  6881  0002                     	;# 
  6882  0003                     	;# 
  6883  0004                     	;# 
  6884  0005                     	;# 
  6885  0006                     	;# 
  6886  0007                     	;# 
  6887  0008                     	;# 
  6888  0009                     	;# 
  6889  000A                     	;# 
  6890  000B                     	;# 
  6891  000C                     	;# 
  6892  000D                     	;# 
  6893  000E                     	;# 
  6894  0010                     	;# 
  6895  0011                     	;# 
  6896  0012                     	;# 
  6897  0013                     	;# 
  6898  0016                     	;# 
  6899  0017                     	;# 
  6900  0018                     	;# 
  6901  001C                     	;# 
  6902  001C                     	;# 
  6903  001D                     	;# 
  6904  001D                     	;# 
  6905  001E                     	;# 
  6906  001F                     	;# 
  6907  008C                     	;# 
  6908  008C                     	;# 
  6909  008D                     	;# 
  6910  008E                     	;# 
  6911  008E                     	;# 
  6912  008F                     	;# 
  6913  0090                     	;# 
  6914  0090                     	;# 
  6915  0091                     	;# 
  6916  0093                     	;# 
  6917  0094                     	;# 
  6918  0095                     	;# 
  6919  0096                     	;# 
  6920  0097                     	;# 
  6921  0098                     	;# 
  6922  0099                     	;# 
  6923  009A                     	;# 
  6924  009B                     	;# 
  6925  009C                     	;# 
  6926  009D                     	;# 
  6927  009E                     	;# 
  6928  010C                     	;# 
  6929  010D                     	;# 
  6930  010E                     	;# 
  6931  010E                     	;# 
  6932  010F                     	;# 
  6933  0110                     	;# 
  6934  0110                     	;# 
  6935  0111                     	;# 
  6936  0112                     	;# 
  6937  0112                     	;# 
  6938  0113                     	;# 
  6939  0114                     	;# 
  6940  0114                     	;# 
  6941  0115                     	;# 
  6942  0116                     	;# 
  6943  0116                     	;# 
  6944  0117                     	;# 
  6945  0119                     	;# 
  6946  0119                     	;# 
  6947  0119                     	;# 
  6948  011A                     	;# 
  6949  011A                     	;# 
  6950  011A                     	;# 
  6951  011B                     	;# 
  6952  011B                     	;# 
  6953  011B                     	;# 
  6954  011B                     	;# 
  6955  011B                     	;# 
  6956  011C                     	;# 
  6957  011C                     	;# 
  6958  011C                     	;# 
  6959  011D                     	;# 
  6960  011D                     	;# 
  6961  011D                     	;# 
  6962  011E                     	;# 
  6963  011E                     	;# 
  6964  011E                     	;# 
  6965  011F                     	;# 
  6966  011F                     	;# 
  6967  011F                     	;# 
  6968  011F                     	;# 
  6969  011F                     	;# 
  6970  018C                     	;# 
  6971  018D                     	;# 
  6972  018E                     	;# 
  6973  018F                     	;# 
  6974  0190                     	;# 
  6975  0191                     	;# 
  6976  0192                     	;# 
  6977  0196                     	;# 
  6978  0197                     	;# 
  6979  0198                     	;# 
  6980  0199                     	;# 
  6981  019A                     	;# 
  6982  019B                     	;# 
  6983  019C                     	;# 
  6984  020C                     	;# 
  6985  020C                     	;# 
  6986  020D                     	;# 
  6987  020E                     	;# 
  6988  020F                     	;# 
  6989  020F                     	;# 
  6990  0210                     	;# 
  6991  0210                     	;# 
  6992  0211                     	;# 
  6993  0211                     	;# 
  6994  0212                     	;# 
  6995  0212                     	;# 
  6996  0213                     	;# 
  6997  0214                     	;# 
  6998  0215                     	;# 
  6999  0215                     	;# 
  7000  0216                     	;# 
  7001  0216                     	;# 
  7002  0217                     	;# 
  7003  0217                     	;# 
  7004  0218                     	;# 
  7005  0218                     	;# 
  7006  0219                     	;# 
  7007  021A                     	;# 
  7008  021B                     	;# 
  7009  021B                     	;# 
  7010  021C                     	;# 
  7011  021C                     	;# 
  7012  021D                     	;# 
  7013  021D                     	;# 
  7014  021E                     	;# 
  7015  021F                     	;# 
  7016  028C                     	;# 
  7017  028C                     	;# 
  7018  028D                     	;# 
  7019  028D                     	;# 
  7020  028E                     	;# 
  7021  028F                     	;# 
  7022  0290                     	;# 
  7023  0290                     	;# 
  7024  0291                     	;# 
  7025  0292                     	;# 
  7026  0292                     	;# 
  7027  0293                     	;# 
  7028  0293                     	;# 
  7029  0294                     	;# 
  7030  0295                     	;# 
  7031  0296                     	;# 
  7032  0296                     	;# 
  7033  0297                     	;# 
  7034  0298                     	;# 
  7035  0298                     	;# 
  7036  0299                     	;# 
  7037  0299                     	;# 
  7038  029A                     	;# 
  7039  029B                     	;# 
  7040  029C                     	;# 
  7041  029C                     	;# 
  7042  029D                     	;# 
  7043  030C                     	;# 
  7044  030C                     	;# 
  7045  030D                     	;# 
  7046  030E                     	;# 
  7047  030F                     	;# 
  7048  0310                     	;# 
  7049  0310                     	;# 
  7050  0311                     	;# 
  7051  0312                     	;# 
  7052  0313                     	;# 
  7053  0314                     	;# 
  7054  0314                     	;# 
  7055  0315                     	;# 
  7056  0316                     	;# 
  7057  0317                     	;# 
  7058  0318                     	;# 
  7059  0318                     	;# 
  7060  0319                     	;# 
  7061  031A                     	;# 
  7062  031B                     	;# 
  7063  031C                     	;# 
  7064  031C                     	;# 
  7065  031D                     	;# 
  7066  031E                     	;# 
  7067  031F                     	;# 
  7068  038C                     	;# 
  7069  038D                     	;# 
  7070  038E                     	;# 
  7071  0390                     	;# 
  7072  0391                     	;# 
  7073  0392                     	;# 
  7074  040C                     	;# 
  7075  040D                     	;# 
  7076  040E                     	;# 
  7077  040F                     	;# 
  7078  0410                     	;# 
  7079  0411                     	;# 
  7080  0416                     	;# 
  7081  0416                     	;# 
  7082  0417                     	;# 
  7083  0418                     	;# 
  7084  0418                     	;# 
  7085  0419                     	;# 
  7086  041A                     	;# 
  7087  041A                     	;# 
  7088  041B                     	;# 
  7089  041C                     	;# 
  7090  041C                     	;# 
  7091  041D                     	;# 
  7092  041E                     	;# 
  7093  041F                     	;# 
  7094  048C                     	;# 
  7095  048C                     	;# 
  7096  048D                     	;# 
  7097  048E                     	;# 
  7098  048F                     	;# 
  7099  048F                     	;# 
  7100  0490                     	;# 
  7101  0491                     	;# 
  7102  0492                     	;# 
  7103  0492                     	;# 
  7104  0493                     	;# 
  7105  0494                     	;# 
  7106  0495                     	;# 
  7107  0495                     	;# 
  7108  0496                     	;# 
  7109  0497                     	;# 
  7110  0498                     	;# 
  7111  0499                     	;# 
  7112  049A                     	;# 
  7113  049B                     	;# 
  7114  049C                     	;# 
  7115  049D                     	;# 
  7116  050C                     	;# 
  7117  050C                     	;# 
  7118  050D                     	;# 
  7119  050E                     	;# 
  7120  050F                     	;# 
  7121  050F                     	;# 
  7122  0510                     	;# 
  7123  0511                     	;# 
  7124  0512                     	;# 
  7125  0512                     	;# 
  7126  0513                     	;# 
  7127  0514                     	;# 
  7128  0515                     	;# 
  7129  0515                     	;# 
  7130  0516                     	;# 
  7131  0517                     	;# 
  7132  0518                     	;# 
  7133  0519                     	;# 
  7134  051A                     	;# 
  7135  051B                     	;# 
  7136  051C                     	;# 
  7137  051D                     	;# 
  7138  058C                     	;# 
  7139  058C                     	;# 
  7140  058D                     	;# 
  7141  058E                     	;# 
  7142  058F                     	;# 
  7143  058F                     	;# 
  7144  0590                     	;# 
  7145  0591                     	;# 
  7146  0592                     	;# 
  7147  0593                     	;# 
  7148  060C                     	;# 
  7149  060D                     	;# 
  7150  060E                     	;# 
  7151  060F                     	;# 
  7152  0610                     	;# 
  7153  0611                     	;# 
  7154  0612                     	;# 
  7155  0613                     	;# 
  7156  0614                     	;# 
  7157  0616                     	;# 
  7158  0617                     	;# 
  7159  0618                     	;# 
  7160  0619                     	;# 
  7161  061A                     	;# 
  7162  061B                     	;# 
  7163  061C                     	;# 
  7164  061D                     	;# 
  7165  061E                     	;# 
  7166  068C                     	;# 
  7167  068D                     	;# 
  7168  068E                     	;# 
  7169  068F                     	;# 
  7170  0690                     	;# 
  7171  0691                     	;# 
  7172  0692                     	;# 
  7173  0693                     	;# 
  7174  0694                     	;# 
  7175  070C                     	;# 
  7176  070D                     	;# 
  7177  070E                     	;# 
  7178  070F                     	;# 
  7179  0710                     	;# 
  7180  0711                     	;# 
  7181  0712                     	;# 
  7182  0713                     	;# 
  7183  0714                     	;# 
  7184  0716                     	;# 
  7185  0717                     	;# 
  7186  0718                     	;# 
  7187  0719                     	;# 
  7188  071A                     	;# 
  7189  071B                     	;# 
  7190  071C                     	;# 
  7191  071D                     	;# 
  7192  071E                     	;# 
  7193  0796                     	;# 
  7194  0797                     	;# 
  7195  0798                     	;# 
  7196  0799                     	;# 
  7197  079A                     	;# 
  7198  079B                     	;# 
  7199  080C                     	;# 
  7200  080D                     	;# 
  7201  080E                     	;# 
  7202  080F                     	;# 
  7203  0810                     	;# 
  7204  0811                     	;# 
  7205  0812                     	;# 
  7206  0813                     	;# 
  7207  0814                     	;# 
  7208  081A                     	;# 
  7209  081B                     	;# 
  7210  081C                     	;# 
  7211  081D                     	;# 
  7212  081E                     	;# 
  7213  081F                     	;# 
  7214  088C                     	;# 
  7215  088D                     	;# 
  7216  088E                     	;# 
  7217  088F                     	;# 
  7218  0890                     	;# 
  7219  0891                     	;# 
  7220  0892                     	;# 
  7221  0893                     	;# 
  7222  0895                     	;# 
  7223  0896                     	;# 
  7224  0897                     	;# 
  7225  0898                     	;# 
  7226  0899                     	;# 
  7227  089A                     	;# 
  7228  089B                     	;# 
  7229  090C                     	;# 
  7230  090E                     	;# 
  7231  090F                     	;# 
  7232  091F                     	;# 
  7233  091F                     	;# 
  7234  098F                     	;# 
  7235  098F                     	;# 
  7236  0990                     	;# 
  7237  0991                     	;# 
  7238  0992                     	;# 
  7239  0993                     	;# 
  7240  0994                     	;# 
  7241  0995                     	;# 
  7242  0996                     	;# 
  7243  0997                     	;# 
  7244  0E0F                     	;# 
  7245  0E10                     	;# 
  7246  0E11                     	;# 
  7247  0E12                     	;# 
  7248  0E13                     	;# 
  7249  0E14                     	;# 
  7250  0E15                     	;# 
  7251  0E16                     	;# 
  7252  0E17                     	;# 
  7253  0E18                     	;# 
  7254  0E19                     	;# 
  7255  0E1A                     	;# 
  7256  0E1B                     	;# 
  7257  0E1C                     	;# 
  7258  0E1D                     	;# 
  7259  0E1E                     	;# 
  7260  0E1F                     	;# 
  7261  0E20                     	;# 
  7262  0E21                     	;# 
  7263  0E22                     	;# 
  7264  0E23                     	;# 
  7265  0E24                     	;# 
  7266  0E25                     	;# 
  7267  0E26                     	;# 
  7268  0E27                     	;# 
  7269  0E28                     	;# 
  7270  0E29                     	;# 
  7271  0E2A                     	;# 
  7272  0E2B                     	;# 
  7273  0E2C                     	;# 
  7274  0E2D                     	;# 
  7275  0E2E                     	;# 
  7276  0E2F                     	;# 
  7277  0E30                     	;# 
  7278  0E31                     	;# 
  7279  0E32                     	;# 
  7280  0E33                     	;# 
  7281  0E34                     	;# 
  7282  0E35                     	;# 
  7283  0E36                     	;# 
  7284  0E37                     	;# 
  7285  0E8F                     	;# 
  7286  0E90                     	;# 
  7287  0E91                     	;# 
  7288  0E92                     	;# 
  7289  0E93                     	;# 
  7290  0E94                     	;# 
  7291  0E95                     	;# 
  7292  0E96                     	;# 
  7293  0E97                     	;# 
  7294  0E9C                     	;# 
  7295  0E9D                     	;# 
  7296  0E9E                     	;# 
  7297  0EA1                     	;# 
  7298  0EA2                     	;# 
  7299  0EA3                     	;# 
  7300  0EA4                     	;# 
  7301  0EA5                     	;# 
  7302  0EA9                     	;# 
  7303  0EAA                     	;# 
  7304  0EAB                     	;# 
  7305  0EAC                     	;# 
  7306  0EB1                     	;# 
  7307  0EB2                     	;# 
  7308  0EB3                     	;# 
  7309  0EB8                     	;# 
  7310  0EB9                     	;# 
  7311  0EBA                     	;# 
  7312  0EBB                     	;# 
  7313  0EBC                     	;# 
  7314  0EBD                     	;# 
  7315  0EBE                     	;# 
  7316  0EC3                     	;# 
  7317  0EC5                     	;# 
  7318  0EC6                     	;# 
  7319  0EC7                     	;# 
  7320  0EC8                     	;# 
  7321  0EC9                     	;# 
  7322  0ECA                     	;# 
  7323  0ECB                     	;# 
  7324  0ECC                     	;# 
  7325  0F10                     	;# 
  7326  0F11                     	;# 
  7327  0F12                     	;# 
  7328  0F13                     	;# 
  7329  0F14                     	;# 
  7330  0F15                     	;# 
  7331  0F16                     	;# 
  7332  0F17                     	;# 
  7333  0F18                     	;# 
  7334  0F19                     	;# 
  7335  0F1A                     	;# 
  7336  0F1B                     	;# 
  7337  0F1C                     	;# 
  7338  0F1D                     	;# 
  7339  0F1E                     	;# 
  7340  0F1F                     	;# 
  7341  0F20                     	;# 
  7342  0F21                     	;# 
  7343  0F22                     	;# 
  7344  0F23                     	;# 
  7345  0F24                     	;# 
  7346  0F25                     	;# 
  7347  0F26                     	;# 
  7348  0F27                     	;# 
  7349  0F38                     	;# 
  7350  0F39                     	;# 
  7351  0F3A                     	;# 
  7352  0F3B                     	;# 
  7353  0F3C                     	;# 
  7354  0F3D                     	;# 
  7355  0F3E                     	;# 
  7356  0F3F                     	;# 
  7357  0F40                     	;# 
  7358  0F41                     	;# 
  7359  0F43                     	;# 
  7360  0F44                     	;# 
  7361  0F45                     	;# 
  7362  0F46                     	;# 
  7363  0F47                     	;# 
  7364  0F48                     	;# 
  7365  0F49                     	;# 
  7366  0F4A                     	;# 
  7367  0F4B                     	;# 
  7368  0F4C                     	;# 
  7369  0F4E                     	;# 
  7370  0F4F                     	;# 
  7371  0F50                     	;# 
  7372  0F51                     	;# 
  7373  0F52                     	;# 
  7374  0F53                     	;# 
  7375  0F54                     	;# 
  7376  0F55                     	;# 
  7377  0F56                     	;# 
  7378  0F57                     	;# 
  7379  0F65                     	;# 
  7380  0F68                     	;# 
  7381  0F69                     	;# 
  7382  0F6A                     	;# 
  7383  0F6B                     	;# 
  7384  0FE4                     	;# 
  7385  0FE5                     	;# 
  7386  0FE6                     	;# 
  7387  0FE7                     	;# 
  7388  0FE8                     	;# 
  7389  0FE9                     	;# 
  7390  0FEA                     	;# 
  7391  0FEB                     	;# 
  7392  0FED                     	;# 
  7393  0FEE                     	;# 
  7394  0FEF                     	;# 
  7395  0000                     	;# 
  7396  0001                     	;# 
  7397  0002                     	;# 
  7398  0003                     	;# 
  7399  0004                     	;# 
  7400  0005                     	;# 
  7401  0006                     	;# 
  7402  0007                     	;# 
  7403  0008                     	;# 
  7404  0009                     	;# 
  7405  000A                     	;# 
  7406  000B                     	;# 
  7407  000C                     	;# 
  7408  000D                     	;# 
  7409  000E                     	;# 
  7410  0010                     	;# 
  7411  0011                     	;# 
  7412  0012                     	;# 
  7413  0013                     	;# 
  7414  0016                     	;# 
  7415  0017                     	;# 
  7416  0018                     	;# 
  7417  001C                     	;# 
  7418  001C                     	;# 
  7419  001D                     	;# 
  7420  001D                     	;# 
  7421  001E                     	;# 
  7422  001F                     	;# 
  7423  008C                     	;# 
  7424  008C                     	;# 
  7425  008D                     	;# 
  7426  008E                     	;# 
  7427  008E                     	;# 
  7428  008F                     	;# 
  7429  0090                     	;# 
  7430  0090                     	;# 
  7431  0091                     	;# 
  7432  0093                     	;# 
  7433  0094                     	;# 
  7434  0095                     	;# 
  7435  0096                     	;# 
  7436  0097                     	;# 
  7437  0098                     	;# 
  7438  0099                     	;# 
  7439  009A                     	;# 
  7440  009B                     	;# 
  7441  009C                     	;# 
  7442  009D                     	;# 
  7443  009E                     	;# 
  7444  010C                     	;# 
  7445  010D                     	;# 
  7446  010E                     	;# 
  7447  010E                     	;# 
  7448  010F                     	;# 
  7449  0110                     	;# 
  7450  0110                     	;# 
  7451  0111                     	;# 
  7452  0112                     	;# 
  7453  0112                     	;# 
  7454  0113                     	;# 
  7455  0114                     	;# 
  7456  0114                     	;# 
  7457  0115                     	;# 
  7458  0116                     	;# 
  7459  0116                     	;# 
  7460  0117                     	;# 
  7461  0119                     	;# 
  7462  0119                     	;# 
  7463  0119                     	;# 
  7464  011A                     	;# 
  7465  011A                     	;# 
  7466  011A                     	;# 
  7467  011B                     	;# 
  7468  011B                     	;# 
  7469  011B                     	;# 
  7470  011B                     	;# 
  7471  011B                     	;# 
  7472  011C                     	;# 
  7473  011C                     	;# 
  7474  011C                     	;# 
  7475  011D                     	;# 
  7476  011D                     	;# 
  7477  011D                     	;# 
  7478  011E                     	;# 
  7479  011E                     	;# 
  7480  011E                     	;# 
  7481  011F                     	;# 
  7482  011F                     	;# 
  7483  011F                     	;# 
  7484  011F                     	;# 
  7485  011F                     	;# 
  7486  018C                     	;# 
  7487  018D                     	;# 
  7488  018E                     	;# 
  7489  018F                     	;# 
  7490  0190                     	;# 
  7491  0191                     	;# 
  7492  0192                     	;# 
  7493  0196                     	;# 
  7494  0197                     	;# 
  7495  0198                     	;# 
  7496  0199                     	;# 
  7497  019A                     	;# 
  7498  019B                     	;# 
  7499  019C                     	;# 
  7500  020C                     	;# 
  7501  020C                     	;# 
  7502  020D                     	;# 
  7503  020E                     	;# 
  7504  020F                     	;# 
  7505  020F                     	;# 
  7506  0210                     	;# 
  7507  0210                     	;# 
  7508  0211                     	;# 
  7509  0211                     	;# 
  7510  0212                     	;# 
  7511  0212                     	;# 
  7512  0213                     	;# 
  7513  0214                     	;# 
  7514  0215                     	;# 
  7515  0215                     	;# 
  7516  0216                     	;# 
  7517  0216                     	;# 
  7518  0217                     	;# 
  7519  0217                     	;# 
  7520  0218                     	;# 
  7521  0218                     	;# 
  7522  0219                     	;# 
  7523  021A                     	;# 
  7524  021B                     	;# 
  7525  021B                     	;# 
  7526  021C                     	;# 
  7527  021C                     	;# 
  7528  021D                     	;# 
  7529  021D                     	;# 
  7530  021E                     	;# 
  7531  021F                     	;# 
  7532  028C                     	;# 
  7533  028C                     	;# 
  7534  028D                     	;# 
  7535  028D                     	;# 
  7536  028E                     	;# 
  7537  028F                     	;# 
  7538  0290                     	;# 
  7539  0290                     	;# 
  7540  0291                     	;# 
  7541  0292                     	;# 
  7542  0292                     	;# 
  7543  0293                     	;# 
  7544  0293                     	;# 
  7545  0294                     	;# 
  7546  0295                     	;# 
  7547  0296                     	;# 
  7548  0296                     	;# 
  7549  0297                     	;# 
  7550  0298                     	;# 
  7551  0298                     	;# 
  7552  0299                     	;# 
  7553  0299                     	;# 
  7554  029A                     	;# 
  7555  029B                     	;# 
  7556  029C                     	;# 
  7557  029C                     	;# 
  7558  029D                     	;# 
  7559  030C                     	;# 
  7560  030C                     	;# 
  7561  030D                     	;# 
  7562  030E                     	;# 
  7563  030F                     	;# 
  7564  0310                     	;# 
  7565  0310                     	;# 
  7566  0311                     	;# 
  7567  0312                     	;# 
  7568  0313                     	;# 
  7569  0314                     	;# 
  7570  0314                     	;# 
  7571  0315                     	;# 
  7572  0316                     	;# 
  7573  0317                     	;# 
  7574  0318                     	;# 
  7575  0318                     	;# 
  7576  0319                     	;# 
  7577  031A                     	;# 
  7578  031B                     	;# 
  7579  031C                     	;# 
  7580  031C                     	;# 
  7581  031D                     	;# 
  7582  031E                     	;# 
  7583  031F                     	;# 
  7584  038C                     	;# 
  7585  038D                     	;# 
  7586  038E                     	;# 
  7587  0390                     	;# 
  7588  0391                     	;# 
  7589  0392                     	;# 
  7590  040C                     	;# 
  7591  040D                     	;# 
  7592  040E                     	;# 
  7593  040F                     	;# 
  7594  0410                     	;# 
  7595  0411                     	;# 
  7596  0416                     	;# 
  7597  0416                     	;# 
  7598  0417                     	;# 
  7599  0418                     	;# 
  7600  0418                     	;# 
  7601  0419                     	;# 
  7602  041A                     	;# 
  7603  041A                     	;# 
  7604  041B                     	;# 
  7605  041C                     	;# 
  7606  041C                     	;# 
  7607  041D                     	;# 
  7608  041E                     	;# 
  7609  041F                     	;# 
  7610  048C                     	;# 
  7611  048C                     	;# 
  7612  048D                     	;# 
  7613  048E                     	;# 
  7614  048F                     	;# 
  7615  048F                     	;# 
  7616  0490                     	;# 
  7617  0491                     	;# 
  7618  0492                     	;# 
  7619  0492                     	;# 
  7620  0493                     	;# 
  7621  0494                     	;# 
  7622  0495                     	;# 
  7623  0495                     	;# 
  7624  0496                     	;# 
  7625  0497                     	;# 
  7626  0498                     	;# 
  7627  0499                     	;# 
  7628  049A                     	;# 
  7629  049B                     	;# 
  7630  049C                     	;# 
  7631  049D                     	;# 
  7632  050C                     	;# 
  7633  050C                     	;# 
  7634  050D                     	;# 
  7635  050E                     	;# 
  7636  050F                     	;# 
  7637  050F                     	;# 
  7638  0510                     	;# 
  7639  0511                     	;# 
  7640  0512                     	;# 
  7641  0512                     	;# 
  7642  0513                     	;# 
  7643  0514                     	;# 
  7644  0515                     	;# 
  7645  0515                     	;# 
  7646  0516                     	;# 
  7647  0517                     	;# 
  7648  0518                     	;# 
  7649  0519                     	;# 
  7650  051A                     	;# 
  7651  051B                     	;# 
  7652  051C                     	;# 
  7653  051D                     	;# 
  7654  058C                     	;# 
  7655  058C                     	;# 
  7656  058D                     	;# 
  7657  058E                     	;# 
  7658  058F                     	;# 
  7659  058F                     	;# 
  7660  0590                     	;# 
  7661  0591                     	;# 
  7662  0592                     	;# 
  7663  0593                     	;# 
  7664  060C                     	;# 
  7665  060D                     	;# 
  7666  060E                     	;# 
  7667  060F                     	;# 
  7668  0610                     	;# 
  7669  0611                     	;# 
  7670  0612                     	;# 
  7671  0613                     	;# 
  7672  0614                     	;# 
  7673  0616                     	;# 
  7674  0617                     	;# 
  7675  0618                     	;# 
  7676  0619                     	;# 
  7677  061A                     	;# 
  7678  061B                     	;# 
  7679  061C                     	;# 
  7680  061D                     	;# 
  7681  061E                     	;# 
  7682  068C                     	;# 
  7683  068D                     	;# 
  7684  068E                     	;# 
  7685  068F                     	;# 
  7686  0690                     	;# 
  7687  0691                     	;# 
  7688  0692                     	;# 
  7689  0693                     	;# 
  7690  0694                     	;# 
  7691  070C                     	;# 
  7692  070D                     	;# 
  7693  070E                     	;# 
  7694  070F                     	;# 
  7695  0710                     	;# 
  7696  0711                     	;# 
  7697  0712                     	;# 
  7698  0713                     	;# 
  7699  0714                     	;# 
  7700  0716                     	;# 
  7701  0717                     	;# 
  7702  0718                     	;# 
  7703  0719                     	;# 
  7704  071A                     	;# 
  7705  071B                     	;# 
  7706  071C                     	;# 
  7707  071D                     	;# 
  7708  071E                     	;# 
  7709  0796                     	;# 
  7710  0797                     	;# 
  7711  0798                     	;# 
  7712  0799                     	;# 
  7713  079A                     	;# 
  7714  079B                     	;# 
  7715  080C                     	;# 
  7716  080D                     	;# 
  7717  080E                     	;# 
  7718  080F                     	;# 
  7719  0810                     	;# 
  7720  0811                     	;# 
  7721  0812                     	;# 
  7722  0813                     	;# 
  7723  0814                     	;# 
  7724  081A                     	;# 
  7725  081B                     	;# 
  7726  081C                     	;# 
  7727  081D                     	;# 
  7728  081E                     	;# 
  7729  081F                     	;# 
  7730  088C                     	;# 
  7731  088D                     	;# 
  7732  088E                     	;# 
  7733  088F                     	;# 
  7734  0890                     	;# 
  7735  0891                     	;# 
  7736  0892                     	;# 
  7737  0893                     	;# 
  7738  0895                     	;# 
  7739  0896                     	;# 
  7740  0897                     	;# 
  7741  0898                     	;# 
  7742  0899                     	;# 
  7743  089A                     	;# 
  7744  089B                     	;# 
  7745  090C                     	;# 
  7746  090E                     	;# 
  7747  090F                     	;# 
  7748  091F                     	;# 
  7749  091F                     	;# 
  7750  098F                     	;# 
  7751  098F                     	;# 
  7752  0990                     	;# 
  7753  0991                     	;# 
  7754  0992                     	;# 
  7755  0993                     	;# 
  7756  0994                     	;# 
  7757  0995                     	;# 
  7758  0996                     	;# 
  7759  0997                     	;# 
  7760  0E0F                     	;# 
  7761  0E10                     	;# 
  7762  0E11                     	;# 
  7763  0E12                     	;# 
  7764  0E13                     	;# 
  7765  0E14                     	;# 
  7766  0E15                     	;# 
  7767  0E16                     	;# 
  7768  0E17                     	;# 
  7769  0E18                     	;# 
  7770  0E19                     	;# 
  7771  0E1A                     	;# 
  7772  0E1B                     	;# 
  7773  0E1C                     	;# 
  7774  0E1D                     	;# 
  7775  0E1E                     	;# 
  7776  0E1F                     	;# 
  7777  0E20                     	;# 
  7778  0E21                     	;# 
  7779  0E22                     	;# 
  7780  0E23                     	;# 
  7781  0E24                     	;# 
  7782  0E25                     	;# 
  7783  0E26                     	;# 
  7784  0E27                     	;# 
  7785  0E28                     	;# 
  7786  0E29                     	;# 
  7787  0E2A                     	;# 
  7788  0E2B                     	;# 
  7789  0E2C                     	;# 
  7790  0E2D                     	;# 
  7791  0E2E                     	;# 
  7792  0E2F                     	;# 
  7793  0E30                     	;# 
  7794  0E31                     	;# 
  7795  0E32                     	;# 
  7796  0E33                     	;# 
  7797  0E34                     	;# 
  7798  0E35                     	;# 
  7799  0E36                     	;# 
  7800  0E37                     	;# 
  7801  0E8F                     	;# 
  7802  0E90                     	;# 
  7803  0E91                     	;# 
  7804  0E92                     	;# 
  7805  0E93                     	;# 
  7806  0E94                     	;# 
  7807  0E95                     	;# 
  7808  0E96                     	;# 
  7809  0E97                     	;# 
  7810  0E9C                     	;# 
  7811  0E9D                     	;# 
  7812  0E9E                     	;# 
  7813  0EA1                     	;# 
  7814  0EA2                     	;# 
  7815  0EA3                     	;# 
  7816  0EA4                     	;# 
  7817  0EA5                     	;# 
  7818  0EA9                     	;# 
  7819  0EAA                     	;# 
  7820  0EAB                     	;# 
  7821  0EAC                     	;# 
  7822  0EB1                     	;# 
  7823  0EB2                     	;# 
  7824  0EB3                     	;# 
  7825  0EB8                     	;# 
  7826  0EB9                     	;# 
  7827  0EBA                     	;# 
  7828  0EBB                     	;# 
  7829  0EBC                     	;# 
  7830  0EBD                     	;# 
  7831  0EBE                     	;# 
  7832  0EC3                     	;# 
  7833  0EC5                     	;# 
  7834  0EC6                     	;# 
  7835  0EC7                     	;# 
  7836  0EC8                     	;# 
  7837  0EC9                     	;# 
  7838  0ECA                     	;# 
  7839  0ECB                     	;# 
  7840  0ECC                     	;# 
  7841  0F10                     	;# 
  7842  0F11                     	;# 
  7843  0F12                     	;# 
  7844  0F13                     	;# 
  7845  0F14                     	;# 
  7846  0F15                     	;# 
  7847  0F16                     	;# 
  7848  0F17                     	;# 
  7849  0F18                     	;# 
  7850  0F19                     	;# 
  7851  0F1A                     	;# 
  7852  0F1B                     	;# 
  7853  0F1C                     	;# 
  7854  0F1D                     	;# 
  7855  0F1E                     	;# 
  7856  0F1F                     	;# 
  7857  0F20                     	;# 
  7858  0F21                     	;# 
  7859  0F22                     	;# 
  7860  0F23                     	;# 
  7861  0F24                     	;# 
  7862  0F25                     	;# 
  7863  0F26                     	;# 
  7864  0F27                     	;# 
  7865  0F38                     	;# 
  7866  0F39                     	;# 
  7867  0F3A                     	;# 
  7868  0F3B                     	;# 
  7869  0F3C                     	;# 
  7870  0F3D                     	;# 
  7871  0F3E                     	;# 
  7872  0F3F                     	;# 
  7873  0F40                     	;# 
  7874  0F41                     	;# 
  7875  0F43                     	;# 
  7876  0F44                     	;# 
  7877  0F45                     	;# 
  7878  0F46                     	;# 
  7879  0F47                     	;# 
  7880  0F48                     	;# 
  7881  0F49                     	;# 
  7882  0F4A                     	;# 
  7883  0F4B                     	;# 
  7884  0F4C                     	;# 
  7885  0F4E                     	;# 
  7886  0F4F                     	;# 
  7887  0F50                     	;# 
  7888  0F51                     	;# 
  7889  0F52                     	;# 
  7890  0F53                     	;# 
  7891  0F54                     	;# 
  7892  0F55                     	;# 
  7893  0F56                     	;# 
  7894  0F57                     	;# 
  7895  0F65                     	;# 
  7896  0F68                     	;# 
  7897  0F69                     	;# 
  7898  0F6A                     	;# 
  7899  0F6B                     	;# 
  7900  0FE4                     	;# 
  7901  0FE5                     	;# 
  7902  0FE6                     	;# 
  7903  0FE7                     	;# 
  7904  0FE8                     	;# 
  7905  0FE9                     	;# 
  7906  0FEA                     	;# 
  7907  0FEB                     	;# 
  7908  0FED                     	;# 
  7909  0FEE                     	;# 
  7910  0FEF                     	;# 
  7911  0000                     	;# 
  7912  0001                     	;# 
  7913  0002                     	;# 
  7914  0003                     	;# 
  7915  0004                     	;# 
  7916  0005                     	;# 
  7917  0006                     	;# 
  7918  0007                     	;# 
  7919  0008                     	;# 
  7920  0009                     	;# 
  7921  000A                     	;# 
  7922  000B                     	;# 
  7923  000C                     	;# 
  7924  000D                     	;# 
  7925  000E                     	;# 
  7926  0010                     	;# 
  7927  0011                     	;# 
  7928  0012                     	;# 
  7929  0013                     	;# 
  7930  0016                     	;# 
  7931  0017                     	;# 
  7932  0018                     	;# 
  7933  001C                     	;# 
  7934  001C                     	;# 
  7935  001D                     	;# 
  7936  001D                     	;# 
  7937  001E                     	;# 
  7938  001F                     	;# 
  7939  008C                     	;# 
  7940  008C                     	;# 
  7941  008D                     	;# 
  7942  008E                     	;# 
  7943  008E                     	;# 
  7944  008F                     	;# 
  7945  0090                     	;# 
  7946  0090                     	;# 
  7947  0091                     	;# 
  7948  0093                     	;# 
  7949  0094                     	;# 
  7950  0095                     	;# 
  7951  0096                     	;# 
  7952  0097                     	;# 
  7953  0098                     	;# 
  7954  0099                     	;# 
  7955  009A                     	;# 
  7956  009B                     	;# 
  7957  009C                     	;# 
  7958  009D                     	;# 
  7959  009E                     	;# 
  7960  010C                     	;# 
  7961  010D                     	;# 
  7962  010E                     	;# 
  7963  010E                     	;# 
  7964  010F                     	;# 
  7965  0110                     	;# 
  7966  0110                     	;# 
  7967  0111                     	;# 
  7968  0112                     	;# 
  7969  0112                     	;# 
  7970  0113                     	;# 
  7971  0114                     	;# 
  7972  0114                     	;# 
  7973  0115                     	;# 
  7974  0116                     	;# 
  7975  0116                     	;# 
  7976  0117                     	;# 
  7977  0119                     	;# 
  7978  0119                     	;# 
  7979  0119                     	;# 
  7980  011A                     	;# 
  7981  011A                     	;# 
  7982  011A                     	;# 
  7983  011B                     	;# 
  7984  011B                     	;# 
  7985  011B                     	;# 
  7986  011B                     	;# 
  7987  011B                     	;# 
  7988  011C                     	;# 
  7989  011C                     	;# 
  7990  011C                     	;# 
  7991  011D                     	;# 
  7992  011D                     	;# 
  7993  011D                     	;# 
  7994  011E                     	;# 
  7995  011E                     	;# 
  7996  011E                     	;# 
  7997  011F                     	;# 
  7998  011F                     	;# 
  7999  011F                     	;# 
  8000  011F                     	;# 
  8001  011F                     	;# 
  8002  018C                     	;# 
  8003  018D                     	;# 
  8004  018E                     	;# 
  8005  018F                     	;# 
  8006  0190                     	;# 
  8007  0191                     	;# 
  8008  0192                     	;# 
  8009  0196                     	;# 
  8010  0197                     	;# 
  8011  0198                     	;# 
  8012  0199                     	;# 
  8013  019A                     	;# 
  8014  019B                     	;# 
  8015  019C                     	;# 
  8016  020C                     	;# 
  8017  020C                     	;# 
  8018  020D                     	;# 
  8019  020E                     	;# 
  8020  020F                     	;# 
  8021  020F                     	;# 
  8022  0210                     	;# 
  8023  0210                     	;# 
  8024  0211                     	;# 
  8025  0211                     	;# 
  8026  0212                     	;# 
  8027  0212                     	;# 
  8028  0213                     	;# 
  8029  0214                     	;# 
  8030  0215                     	;# 
  8031  0215                     	;# 
  8032  0216                     	;# 
  8033  0216                     	;# 
  8034  0217                     	;# 
  8035  0217                     	;# 
  8036  0218                     	;# 
  8037  0218                     	;# 
  8038  0219                     	;# 
  8039  021A                     	;# 
  8040  021B                     	;# 
  8041  021B                     	;# 
  8042  021C                     	;# 
  8043  021C                     	;# 
  8044  021D                     	;# 
  8045  021D                     	;# 
  8046  021E                     	;# 
  8047  021F                     	;# 
  8048  028C                     	;# 
  8049  028C                     	;# 
  8050  028D                     	;# 
  8051  028D                     	;# 
  8052  028E                     	;# 
  8053  028F                     	;# 
  8054  0290                     	;# 
  8055  0290                     	;# 
  8056  0291                     	;# 
  8057  0292                     	;# 
  8058  0292                     	;# 
  8059  0293                     	;# 
  8060  0293                     	;# 
  8061  0294                     	;# 
  8062  0295                     	;# 
  8063  0296                     	;# 
  8064  0296                     	;# 
  8065  0297                     	;# 
  8066  0298                     	;# 
  8067  0298                     	;# 
  8068  0299                     	;# 
  8069  0299                     	;# 
  8070  029A                     	;# 
  8071  029B                     	;# 
  8072  029C                     	;# 
  8073  029C                     	;# 
  8074  029D                     	;# 
  8075  030C                     	;# 
  8076  030C                     	;# 
  8077  030D                     	;# 
  8078  030E                     	;# 
  8079  030F                     	;# 
  8080  0310                     	;# 
  8081  0310                     	;# 
  8082  0311                     	;# 
  8083  0312                     	;# 
  8084  0313                     	;# 
  8085  0314                     	;# 
  8086  0314                     	;# 
  8087  0315                     	;# 
  8088  0316                     	;# 
  8089  0317                     	;# 
  8090  0318                     	;# 
  8091  0318                     	;# 
  8092  0319                     	;# 
  8093  031A                     	;# 
  8094  031B                     	;# 
  8095  031C                     	;# 
  8096  031C                     	;# 
  8097  031D                     	;# 
  8098  031E                     	;# 
  8099  031F                     	;# 
  8100  038C                     	;# 
  8101  038D                     	;# 
  8102  038E                     	;# 
  8103  0390                     	;# 
  8104  0391                     	;# 
  8105  0392                     	;# 
  8106  040C                     	;# 
  8107  040D                     	;# 
  8108  040E                     	;# 
  8109  040F                     	;# 
  8110  0410                     	;# 
  8111  0411                     	;# 
  8112  0416                     	;# 
  8113  0416                     	;# 
  8114  0417                     	;# 
  8115  0418                     	;# 
  8116  0418                     	;# 
  8117  0419                     	;# 
  8118  041A                     	;# 
  8119  041A                     	;# 
  8120  041B                     	;# 
  8121  041C                     	;# 
  8122  041C                     	;# 
  8123  041D                     	;# 
  8124  041E                     	;# 
  8125  041F                     	;# 
  8126  048C                     	;# 
  8127  048C                     	;# 
  8128  048D                     	;# 
  8129  048E                     	;# 
  8130  048F                     	;# 
  8131  048F                     	;# 
  8132  0490                     	;# 
  8133  0491                     	;# 
  8134  0492                     	;# 
  8135  0492                     	;# 
  8136  0493                     	;# 
  8137  0494                     	;# 
  8138  0495                     	;# 
  8139  0495                     	;# 
  8140  0496                     	;# 
  8141  0497                     	;# 
  8142  0498                     	;# 
  8143  0499                     	;# 
  8144  049A                     	;# 
  8145  049B                     	;# 
  8146  049C                     	;# 
  8147  049D                     	;# 
  8148  050C                     	;# 
  8149  050C                     	;# 
  8150  050D                     	;# 
  8151  050E                     	;# 
  8152  050F                     	;# 
  8153  050F                     	;# 
  8154  0510                     	;# 
  8155  0511                     	;# 
  8156  0512                     	;# 
  8157  0512                     	;# 
  8158  0513                     	;# 
  8159  0514                     	;# 
  8160  0515                     	;# 
  8161  0515                     	;# 
  8162  0516                     	;# 
  8163  0517                     	;# 
  8164  0518                     	;# 
  8165  0519                     	;# 
  8166  051A                     	;# 
  8167  051B                     	;# 
  8168  051C                     	;# 
  8169  051D                     	;# 
  8170  058C                     	;# 
  8171  058C                     	;# 
  8172  058D                     	;# 
  8173  058E                     	;# 
  8174  058F                     	;# 
  8175  058F                     	;# 
  8176  0590                     	;# 
  8177  0591                     	;# 
  8178  0592                     	;# 
  8179  0593                     	;# 
  8180  060C                     	;# 
  8181  060D                     	;# 
  8182  060E                     	;# 
  8183  060F                     	;# 
  8184  0610                     	;# 
  8185  0611                     	;# 
  8186  0612                     	;# 
  8187  0613                     	;# 
  8188  0614                     	;# 
  8189  0616                     	;# 
  8190  0617                     	;# 
  8191  0618                     	;# 
  8192  0619                     	;# 
  8193  061A                     	;# 
  8194  061B                     	;# 
  8195  061C                     	;# 
  8196  061D                     	;# 
  8197  061E                     	;# 
  8198  068C                     	;# 
  8199  068D                     	;# 
  8200  068E                     	;# 
  8201  068F                     	;# 
  8202  0690                     	;# 
  8203  0691                     	;# 
  8204  0692                     	;# 
  8205  0693                     	;# 
  8206  0694                     	;# 
  8207  070C                     	;# 
  8208  070D                     	;# 
  8209  070E                     	;# 
  8210  070F                     	;# 
  8211  0710                     	;# 
  8212  0711                     	;# 
  8213  0712                     	;# 
  8214  0713                     	;# 
  8215  0714                     	;# 
  8216  0716                     	;# 
  8217  0717                     	;# 
  8218  0718                     	;# 
  8219  0719                     	;# 
  8220  071A                     	;# 
  8221  071B                     	;# 
  8222  071C                     	;# 
  8223  071D                     	;# 
  8224  071E                     	;# 
  8225  0796                     	;# 
  8226  0797                     	;# 
  8227  0798                     	;# 
  8228  0799                     	;# 
  8229  079A                     	;# 
  8230  079B                     	;# 
  8231  080C                     	;# 
  8232  080D                     	;# 
  8233  080E                     	;# 
  8234  080F                     	;# 
  8235  0810                     	;# 
  8236  0811                     	;# 
  8237  0812                     	;# 
  8238  0813                     	;# 
  8239  0814                     	;# 
  8240  081A                     	;# 
  8241  081B                     	;# 
  8242  081C                     	;# 
  8243  081D                     	;# 
  8244  081E                     	;# 
  8245  081F                     	;# 
  8246  088C                     	;# 
  8247  088D                     	;# 
  8248  088E                     	;# 
  8249  088F                     	;# 
  8250  0890                     	;# 
  8251  0891                     	;# 
  8252  0892                     	;# 
  8253  0893                     	;# 
  8254  0895                     	;# 
  8255  0896                     	;# 
  8256  0897                     	;# 
  8257  0898                     	;# 
  8258  0899                     	;# 
  8259  089A                     	;# 
  8260  089B                     	;# 
  8261  090C                     	;# 
  8262  090E                     	;# 
  8263  090F                     	;# 
  8264  091F                     	;# 
  8265  091F                     	;# 
  8266  098F                     	;# 
  8267  098F                     	;# 
  8268  0990                     	;# 
  8269  0991                     	;# 
  8270  0992                     	;# 
  8271  0993                     	;# 
  8272  0994                     	;# 
  8273  0995                     	;# 
  8274  0996                     	;# 
  8275  0997                     	;# 
  8276  0E0F                     	;# 
  8277  0E10                     	;# 
  8278  0E11                     	;# 
  8279  0E12                     	;# 
  8280  0E13                     	;# 
  8281  0E14                     	;# 
  8282  0E15                     	;# 
  8283  0E16                     	;# 
  8284  0E17                     	;# 
  8285  0E18                     	;# 
  8286  0E19                     	;# 
  8287  0E1A                     	;# 
  8288  0E1B                     	;# 
  8289  0E1C                     	;# 
  8290  0E1D                     	;# 
  8291  0E1E                     	;# 
  8292  0E1F                     	;# 
  8293  0E20                     	;# 
  8294  0E21                     	;# 
  8295  0E22                     	;# 
  8296  0E23                     	;# 
  8297  0E24                     	;# 
  8298  0E25                     	;# 
  8299  0E26                     	;# 
  8300  0E27                     	;# 
  8301  0E28                     	;# 
  8302  0E29                     	;# 
  8303  0E2A                     	;# 
  8304  0E2B                     	;# 
  8305  0E2C                     	;# 
  8306  0E2D                     	;# 
  8307  0E2E                     	;# 
  8308  0E2F                     	;# 
  8309  0E30                     	;# 
  8310  0E31                     	;# 
  8311  0E32                     	;# 
  8312  0E33                     	;# 
  8313  0E34                     	;# 
  8314  0E35                     	;# 
  8315  0E36                     	;# 
  8316  0E37                     	;# 
  8317  0E8F                     	;# 
  8318  0E90                     	;# 
  8319  0E91                     	;# 
  8320  0E92                     	;# 
  8321  0E93                     	;# 
  8322  0E94                     	;# 
  8323  0E95                     	;# 
  8324  0E96                     	;# 
  8325  0E97                     	;# 
  8326  0E9C                     	;# 
  8327  0E9D                     	;# 
  8328  0E9E                     	;# 
  8329  0EA1                     	;# 
  8330  0EA2                     	;# 
  8331  0EA3                     	;# 
  8332  0EA4                     	;# 
  8333  0EA5                     	;# 
  8334  0EA9                     	;# 
  8335  0EAA                     	;# 
  8336  0EAB                     	;# 
  8337  0EAC                     	;# 
  8338  0EB1                     	;# 
  8339  0EB2                     	;# 
  8340  0EB3                     	;# 
  8341  0EB8                     	;# 
  8342  0EB9                     	;# 
  8343  0EBA                     	;# 
  8344  0EBB                     	;# 
  8345  0EBC                     	;# 
  8346  0EBD                     	;# 
  8347  0EBE                     	;# 
  8348  0EC3                     	;# 
  8349  0EC5                     	;# 
  8350  0EC6                     	;# 
  8351  0EC7                     	;# 
  8352  0EC8                     	;# 
  8353  0EC9                     	;# 
  8354  0ECA                     	;# 
  8355  0ECB                     	;# 
  8356  0ECC                     	;# 
  8357  0F10                     	;# 
  8358  0F11                     	;# 
  8359  0F12                     	;# 
  8360  0F13                     	;# 
  8361  0F14                     	;# 
  8362  0F15                     	;# 
  8363  0F16                     	;# 
  8364  0F17                     	;# 
  8365  0F18                     	;# 
  8366  0F19                     	;# 
  8367  0F1A                     	;# 
  8368  0F1B                     	;# 
  8369  0F1C                     	;# 
  8370  0F1D                     	;# 
  8371  0F1E                     	;# 
  8372  0F1F                     	;# 
  8373  0F20                     	;# 
  8374  0F21                     	;# 
  8375  0F22                     	;# 
  8376  0F23                     	;# 
  8377  0F24                     	;# 
  8378  0F25                     	;# 
  8379  0F26                     	;# 
  8380  0F27                     	;# 
  8381  0F38                     	;# 
  8382  0F39                     	;# 
  8383  0F3A                     	;# 
  8384  0F3B                     	;# 
  8385  0F3C                     	;# 
  8386  0F3D                     	;# 
  8387  0F3E                     	;# 
  8388  0F3F                     	;# 
  8389  0F40                     	;# 
  8390  0F41                     	;# 
  8391  0F43                     	;# 
  8392  0F44                     	;# 
  8393  0F45                     	;# 
  8394  0F46                     	;# 
  8395  0F47                     	;# 
  8396  0F48                     	;# 
  8397  0F49                     	;# 
  8398  0F4A                     	;# 
  8399  0F4B                     	;# 
  8400  0F4C                     	;# 
  8401  0F4E                     	;# 
  8402  0F4F                     	;# 
  8403  0F50                     	;# 
  8404  0F51                     	;# 
  8405  0F52                     	;# 
  8406  0F53                     	;# 
  8407  0F54                     	;# 
  8408  0F55                     	;# 
  8409  0F56                     	;# 
  8410  0F57                     	;# 
  8411  0F65                     	;# 
  8412  0F68                     	;# 
  8413  0F69                     	;# 
  8414  0F6A                     	;# 
  8415  0F6B                     	;# 
  8416  0FE4                     	;# 
  8417  0FE5                     	;# 
  8418  0FE6                     	;# 
  8419  0FE7                     	;# 
  8420  0FE8                     	;# 
  8421  0FE9                     	;# 
  8422  0FEA                     	;# 
  8423  0FEB                     	;# 
  8424  0FED                     	;# 
  8425  0FEE                     	;# 
  8426  0FEF                     	;# 
  8427  0000                     	;# 
  8428  0001                     	;# 
  8429  0002                     	;# 
  8430  0003                     	;# 
  8431  0004                     	;# 
  8432  0005                     	;# 
  8433  0006                     	;# 
  8434  0007                     	;# 
  8435  0008                     	;# 
  8436  0009                     	;# 
  8437  000A                     	;# 
  8438  000B                     	;# 
  8439  000C                     	;# 
  8440  000D                     	;# 
  8441  000E                     	;# 
  8442  0010                     	;# 
  8443  0011                     	;# 
  8444  0012                     	;# 
  8445  0013                     	;# 
  8446  0016                     	;# 
  8447  0017                     	;# 
  8448  0018                     	;# 
  8449  001C                     	;# 
  8450  001C                     	;# 
  8451  001D                     	;# 
  8452  001D                     	;# 
  8453  001E                     	;# 
  8454  001F                     	;# 
  8455  008C                     	;# 
  8456  008C                     	;# 
  8457  008D                     	;# 
  8458  008E                     	;# 
  8459  008E                     	;# 
  8460  008F                     	;# 
  8461  0090                     	;# 
  8462  0090                     	;# 
  8463  0091                     	;# 
  8464  0093                     	;# 
  8465  0094                     	;# 
  8466  0095                     	;# 
  8467  0096                     	;# 
  8468  0097                     	;# 
  8469  0098                     	;# 
  8470  0099                     	;# 
  8471  009A                     	;# 
  8472  009B                     	;# 
  8473  009C                     	;# 
  8474  009D                     	;# 
  8475  009E                     	;# 
  8476  010C                     	;# 
  8477  010D                     	;# 
  8478  010E                     	;# 
  8479  010E                     	;# 
  8480  010F                     	;# 
  8481  0110                     	;# 
  8482  0110                     	;# 
  8483  0111                     	;# 
  8484  0112                     	;# 
  8485  0112                     	;# 
  8486  0113                     	;# 
  8487  0114                     	;# 
  8488  0114                     	;# 
  8489  0115                     	;# 
  8490  0116                     	;# 
  8491  0116                     	;# 
  8492  0117                     	;# 
  8493  0119                     	;# 
  8494  0119                     	;# 
  8495  0119                     	;# 
  8496  011A                     	;# 
  8497  011A                     	;# 
  8498  011A                     	;# 
  8499  011B                     	;# 
  8500  011B                     	;# 
  8501  011B                     	;# 
  8502  011B                     	;# 
  8503  011B                     	;# 
  8504  011C                     	;# 
  8505  011C                     	;# 
  8506  011C                     	;# 
  8507  011D                     	;# 
  8508  011D                     	;# 
  8509  011D                     	;# 
  8510  011E                     	;# 
  8511  011E                     	;# 
  8512  011E                     	;# 
  8513  011F                     	;# 
  8514  011F                     	;# 
  8515  011F                     	;# 
  8516  011F                     	;# 
  8517  011F                     	;# 
  8518  018C                     	;# 
  8519  018D                     	;# 
  8520  018E                     	;# 
  8521  018F                     	;# 
  8522  0190                     	;# 
  8523  0191                     	;# 
  8524  0192                     	;# 
  8525  0196                     	;# 
  8526  0197                     	;# 
  8527  0198                     	;# 
  8528  0199                     	;# 
  8529  019A                     	;# 
  8530  019B                     	;# 
  8531  019C                     	;# 
  8532  020C                     	;# 
  8533  020C                     	;# 
  8534  020D                     	;# 
  8535  020E                     	;# 
  8536  020F                     	;# 
  8537  020F                     	;# 
  8538  0210                     	;# 
  8539  0210                     	;# 
  8540  0211                     	;# 
  8541  0211                     	;# 
  8542  0212                     	;# 
  8543  0212                     	;# 
  8544  0213                     	;# 
  8545  0214                     	;# 
  8546  0215                     	;# 
  8547  0215                     	;# 
  8548  0216                     	;# 
  8549  0216                     	;# 
  8550  0217                     	;# 
  8551  0217                     	;# 
  8552  0218                     	;# 
  8553  0218                     	;# 
  8554  0219                     	;# 
  8555  021A                     	;# 
  8556  021B                     	;# 
  8557  021B                     	;# 
  8558  021C                     	;# 
  8559  021C                     	;# 
  8560  021D                     	;# 
  8561  021D                     	;# 
  8562  021E                     	;# 
  8563  021F                     	;# 
  8564  028C                     	;# 
  8565  028C                     	;# 
  8566  028D                     	;# 
  8567  028D                     	;# 
  8568  028E                     	;# 
  8569  028F                     	;# 
  8570  0290                     	;# 
  8571  0290                     	;# 
  8572  0291                     	;# 
  8573  0292                     	;# 
  8574  0292                     	;# 
  8575  0293                     	;# 
  8576  0293                     	;# 
  8577  0294                     	;# 
  8578  0295                     	;# 
  8579  0296                     	;# 
  8580  0296                     	;# 
  8581  0297                     	;# 
  8582  0298                     	;# 
  8583  0298                     	;# 
  8584  0299                     	;# 
  8585  0299                     	;# 
  8586  029A                     	;# 
  8587  029B                     	;# 
  8588  029C                     	;# 
  8589  029C                     	;# 
  8590  029D                     	;# 
  8591  030C                     	;# 
  8592  030C                     	;# 
  8593  030D                     	;# 
  8594  030E                     	;# 
  8595  030F                     	;# 
  8596  0310                     	;# 
  8597  0310                     	;# 
  8598  0311                     	;# 
  8599  0312                     	;# 
  8600  0313                     	;# 
  8601  0314                     	;# 
  8602  0314                     	;# 
  8603  0315                     	;# 
  8604  0316                     	;# 
  8605  0317                     	;# 
  8606  0318                     	;# 
  8607  0318                     	;# 
  8608  0319                     	;# 
  8609  031A                     	;# 
  8610  031B                     	;# 
  8611  031C                     	;# 
  8612  031C                     	;# 
  8613  031D                     	;# 
  8614  031E                     	;# 
  8615  031F                     	;# 
  8616  038C                     	;# 
  8617  038D                     	;# 
  8618  038E                     	;# 
  8619  0390                     	;# 
  8620  0391                     	;# 
  8621  0392                     	;# 
  8622  040C                     	;# 
  8623  040D                     	;# 
  8624  040E                     	;# 
  8625  040F                     	;# 
  8626  0410                     	;# 
  8627  0411                     	;# 
  8628  0416                     	;# 
  8629  0416                     	;# 
  8630  0417                     	;# 
  8631  0418                     	;# 
  8632  0418                     	;# 
  8633  0419                     	;# 
  8634  041A                     	;# 
  8635  041A                     	;# 
  8636  041B                     	;# 
  8637  041C                     	;# 
  8638  041C                     	;# 
  8639  041D                     	;# 
  8640  041E                     	;# 
  8641  041F                     	;# 
  8642  048C                     	;# 
  8643  048C                     	;# 
  8644  048D                     	;# 
  8645  048E                     	;# 
  8646  048F                     	;# 
  8647  048F                     	;# 
  8648  0490                     	;# 
  8649  0491                     	;# 
  8650  0492                     	;# 
  8651  0492                     	;# 
  8652  0493                     	;# 
  8653  0494                     	;# 
  8654  0495                     	;# 
  8655  0495                     	;# 
  8656  0496                     	;# 
  8657  0497                     	;# 
  8658  0498                     	;# 
  8659  0499                     	;# 
  8660  049A                     	;# 
  8661  049B                     	;# 
  8662  049C                     	;# 
  8663  049D                     	;# 
  8664  050C                     	;# 
  8665  050C                     	;# 
  8666  050D                     	;# 
  8667  050E                     	;# 
  8668  050F                     	;# 
  8669  050F                     	;# 
  8670  0510                     	;# 
  8671  0511                     	;# 
  8672  0512                     	;# 
  8673  0512                     	;# 
  8674  0513                     	;# 
  8675  0514                     	;# 
  8676  0515                     	;# 
  8677  0515                     	;# 
  8678  0516                     	;# 
  8679  0517                     	;# 
  8680  0518                     	;# 
  8681  0519                     	;# 
  8682  051A                     	;# 
  8683  051B                     	;# 
  8684  051C                     	;# 
  8685  051D                     	;# 
  8686  058C                     	;# 
  8687  058C                     	;# 
  8688  058D                     	;# 
  8689  058E                     	;# 
  8690  058F                     	;# 
  8691  058F                     	;# 
  8692  0590                     	;# 
  8693  0591                     	;# 
  8694  0592                     	;# 
  8695  0593                     	;# 
  8696  060C                     	;# 
  8697  060D                     	;# 
  8698  060E                     	;# 
  8699  060F                     	;# 
  8700  0610                     	;# 
  8701  0611                     	;# 
  8702  0612                     	;# 
  8703  0613                     	;# 
  8704  0614                     	;# 
  8705  0616                     	;# 
  8706  0617                     	;# 
  8707  0618                     	;# 
  8708  0619                     	;# 
  8709  061A                     	;# 
  8710  061B                     	;# 
  8711  061C                     	;# 
  8712  061D                     	;# 
  8713  061E                     	;# 
  8714  068C                     	;# 
  8715  068D                     	;# 
  8716  068E                     	;# 
  8717  068F                     	;# 
  8718  0690                     	;# 
  8719  0691                     	;# 
  8720  0692                     	;# 
  8721  0693                     	;# 
  8722  0694                     	;# 
  8723  070C                     	;# 
  8724  070D                     	;# 
  8725  070E                     	;# 
  8726  070F                     	;# 
  8727  0710                     	;# 
  8728  0711                     	;# 
  8729  0712                     	;# 
  8730  0713                     	;# 
  8731  0714                     	;# 
  8732  0716                     	;# 
  8733  0717                     	;# 
  8734  0718                     	;# 
  8735  0719                     	;# 
  8736  071A                     	;# 
  8737  071B                     	;# 
  8738  071C                     	;# 
  8739  071D                     	;# 
  8740  071E                     	;# 
  8741  0796                     	;# 
  8742  0797                     	;# 
  8743  0798                     	;# 
  8744  0799                     	;# 
  8745  079A                     	;# 
  8746  079B                     	;# 
  8747  080C                     	;# 
  8748  080D                     	;# 
  8749  080E                     	;# 
  8750  080F                     	;# 
  8751  0810                     	;# 
  8752  0811                     	;# 
  8753  0812                     	;# 
  8754  0813                     	;# 
  8755  0814                     	;# 
  8756  081A                     	;# 
  8757  081B                     	;# 
  8758  081C                     	;# 
  8759  081D                     	;# 
  8760  081E                     	;# 
  8761  081F                     	;# 
  8762  088C                     	;# 
  8763  088D                     	;# 
  8764  088E                     	;# 
  8765  088F                     	;# 
  8766  0890                     	;# 
  8767  0891                     	;# 
  8768  0892                     	;# 
  8769  0893                     	;# 
  8770  0895                     	;# 
  8771  0896                     	;# 
  8772  0897                     	;# 
  8773  0898                     	;# 
  8774  0899                     	;# 
  8775  089A                     	;# 
  8776  089B                     	;# 
  8777  090C                     	;# 
  8778  090E                     	;# 
  8779  090F                     	;# 
  8780  091F                     	;# 
  8781  091F                     	;# 
  8782  098F                     	;# 
  8783  098F                     	;# 
  8784  0990                     	;# 
  8785  0991                     	;# 
  8786  0992                     	;# 
  8787  0993                     	;# 
  8788  0994                     	;# 
  8789  0995                     	;# 
  8790  0996                     	;# 
  8791  0997                     	;# 
  8792  0E0F                     	;# 
  8793  0E10                     	;# 
  8794  0E11                     	;# 
  8795  0E12                     	;# 
  8796  0E13                     	;# 
  8797  0E14                     	;# 
  8798  0E15                     	;# 
  8799  0E16                     	;# 
  8800  0E17                     	;# 
  8801  0E18                     	;# 
  8802  0E19                     	;# 
  8803  0E1A                     	;# 
  8804  0E1B                     	;# 
  8805  0E1C                     	;# 
  8806  0E1D                     	;# 
  8807  0E1E                     	;# 
  8808  0E1F                     	;# 
  8809  0E20                     	;# 
  8810  0E21                     	;# 
  8811  0E22                     	;# 
  8812  0E23                     	;# 
  8813  0E24                     	;# 
  8814  0E25                     	;# 
  8815  0E26                     	;# 
  8816  0E27                     	;# 
  8817  0E28                     	;# 
  8818  0E29                     	;# 
  8819  0E2A                     	;# 
  8820  0E2B                     	;# 
  8821  0E2C                     	;# 
  8822  0E2D                     	;# 
  8823  0E2E                     	;# 
  8824  0E2F                     	;# 
  8825  0E30                     	;# 
  8826  0E31                     	;# 
  8827  0E32                     	;# 
  8828  0E33                     	;# 
  8829  0E34                     	;# 
  8830  0E35                     	;# 
  8831  0E36                     	;# 
  8832  0E37                     	;# 
  8833  0E8F                     	;# 
  8834  0E90                     	;# 
  8835  0E91                     	;# 
  8836  0E92                     	;# 
  8837  0E93                     	;# 
  8838  0E94                     	;# 
  8839  0E95                     	;# 
  8840  0E96                     	;# 
  8841  0E97                     	;# 
  8842  0E9C                     	;# 
  8843  0E9D                     	;# 
  8844  0E9E                     	;# 
  8845  0EA1                     	;# 
  8846  0EA2                     	;# 
  8847  0EA3                     	;# 
  8848  0EA4                     	;# 
  8849  0EA5                     	;# 
  8850  0EA9                     	;# 
  8851  0EAA                     	;# 
  8852  0EAB                     	;# 
  8853  0EAC                     	;# 
  8854  0EB1                     	;# 
  8855  0EB2                     	;# 
  8856  0EB3                     	;# 
  8857  0EB8                     	;# 
  8858  0EB9                     	;# 
  8859  0EBA                     	;# 
  8860  0EBB                     	;# 
  8861  0EBC                     	;# 
  8862  0EBD                     	;# 
  8863  0EBE                     	;# 
  8864  0EC3                     	;# 
  8865  0EC5                     	;# 
  8866  0EC6                     	;# 
  8867  0EC7                     	;# 
  8868  0EC8                     	;# 
  8869  0EC9                     	;# 
  8870  0ECA                     	;# 
  8871  0ECB                     	;# 
  8872  0ECC                     	;# 
  8873  0F10                     	;# 
  8874  0F11                     	;# 
  8875  0F12                     	;# 
  8876  0F13                     	;# 
  8877  0F14                     	;# 
  8878  0F15                     	;# 
  8879  0F16                     	;# 
  8880  0F17                     	;# 
  8881  0F18                     	;# 
  8882  0F19                     	;# 
  8883  0F1A                     	;# 
  8884  0F1B                     	;# 
  8885  0F1C                     	;# 
  8886  0F1D                     	;# 
  8887  0F1E                     	;# 
  8888  0F1F                     	;# 
  8889  0F20                     	;# 
  8890  0F21                     	;# 
  8891  0F22                     	;# 
  8892  0F23                     	;# 
  8893  0F24                     	;# 
  8894  0F25                     	;# 
  8895  0F26                     	;# 
  8896  0F27                     	;# 
  8897  0F38                     	;# 
  8898  0F39                     	;# 
  8899  0F3A                     	;# 
  8900  0F3B                     	;# 
  8901  0F3C                     	;# 
  8902  0F3D                     	;# 
  8903  0F3E                     	;# 
  8904  0F3F                     	;# 
  8905  0F40                     	;# 
  8906  0F41                     	;# 
  8907  0F43                     	;# 
  8908  0F44                     	;# 
  8909  0F45                     	;# 
  8910  0F46                     	;# 
  8911  0F47                     	;# 
  8912  0F48                     	;# 
  8913  0F49                     	;# 
  8914  0F4A                     	;# 
  8915  0F4B                     	;# 
  8916  0F4C                     	;# 
  8917  0F4E                     	;# 
  8918  0F4F                     	;# 
  8919  0F50                     	;# 
  8920  0F51                     	;# 
  8921  0F52                     	;# 
  8922  0F53                     	;# 
  8923  0F54                     	;# 
  8924  0F55                     	;# 
  8925  0F56                     	;# 
  8926  0F57                     	;# 
  8927  0F65                     	;# 
  8928  0F68                     	;# 
  8929  0F69                     	;# 
  8930  0F6A                     	;# 
  8931  0F6B                     	;# 
  8932  0FE4                     	;# 
  8933  0FE5                     	;# 
  8934  0FE6                     	;# 
  8935  0FE7                     	;# 
  8936  0FE8                     	;# 
  8937  0FE9                     	;# 
  8938  0FEA                     	;# 
  8939  0FEB                     	;# 
  8940  0FED                     	;# 
  8941  0FEE                     	;# 
  8942  0FEF                     	;# 
  8943  0000                     	;# 
  8944  0001                     	;# 
  8945  0002                     	;# 
  8946  0003                     	;# 
  8947  0004                     	;# 
  8948  0005                     	;# 
  8949  0006                     	;# 
  8950  0007                     	;# 
  8951  0008                     	;# 
  8952  0009                     	;# 
  8953  000A                     	;# 
  8954  000B                     	;# 
  8955  000C                     	;# 
  8956  000D                     	;# 
  8957  000E                     	;# 
  8958  0010                     	;# 
  8959  0011                     	;# 
  8960  0012                     	;# 
  8961  0013                     	;# 
  8962  0016                     	;# 
  8963  0017                     	;# 
  8964  0018                     	;# 
  8965  001C                     	;# 
  8966  001C                     	;# 
  8967  001D                     	;# 
  8968  001D                     	;# 
  8969  001E                     	;# 
  8970  001F                     	;# 
  8971  008C                     	;# 
  8972  008C                     	;# 
  8973  008D                     	;# 
  8974  008E                     	;# 
  8975  008E                     	;# 
  8976  008F                     	;# 
  8977  0090                     	;# 
  8978  0090                     	;# 
  8979  0091                     	;# 
  8980  0093                     	;# 
  8981  0094                     	;# 
  8982  0095                     	;# 
  8983  0096                     	;# 
  8984  0097                     	;# 
  8985  0098                     	;# 
  8986  0099                     	;# 
  8987  009A                     	;# 
  8988  009B                     	;# 
  8989  009C                     	;# 
  8990  009D                     	;# 
  8991  009E                     	;# 
  8992  010C                     	;# 
  8993  010D                     	;# 
  8994  010E                     	;# 
  8995  010E                     	;# 
  8996  010F                     	;# 
  8997  0110                     	;# 
  8998  0110                     	;# 
  8999  0111                     	;# 
  9000  0112                     	;# 
  9001  0112                     	;# 
  9002  0113                     	;# 
  9003  0114                     	;# 
  9004  0114                     	;# 
  9005  0115                     	;# 
  9006  0116                     	;# 
  9007  0116                     	;# 
  9008  0117                     	;# 
  9009  0119                     	;# 
  9010  0119                     	;# 
  9011  0119                     	;# 
  9012  011A                     	;# 
  9013  011A                     	;# 
  9014  011A                     	;# 
  9015  011B                     	;# 
  9016  011B                     	;# 
  9017  011B                     	;# 
  9018  011B                     	;# 
  9019  011B                     	;# 
  9020  011C                     	;# 
  9021  011C                     	;# 
  9022  011C                     	;# 
  9023  011D                     	;# 
  9024  011D                     	;# 
  9025  011D                     	;# 
  9026  011E                     	;# 
  9027  011E                     	;# 
  9028  011E                     	;# 
  9029  011F                     	;# 
  9030  011F                     	;# 
  9031  011F                     	;# 
  9032  011F                     	;# 
  9033  011F                     	;# 
  9034  018C                     	;# 
  9035  018D                     	;# 
  9036  018E                     	;# 
  9037  018F                     	;# 
  9038  0190                     	;# 
  9039  0191                     	;# 
  9040  0192                     	;# 
  9041  0196                     	;# 
  9042  0197                     	;# 
  9043  0198                     	;# 
  9044  0199                     	;# 
  9045  019A                     	;# 
  9046  019B                     	;# 
  9047  019C                     	;# 
  9048  020C                     	;# 
  9049  020C                     	;# 
  9050  020D                     	;# 
  9051  020E                     	;# 
  9052  020F                     	;# 
  9053  020F                     	;# 
  9054  0210                     	;# 
  9055  0210                     	;# 
  9056  0211                     	;# 
  9057  0211                     	;# 
  9058  0212                     	;# 
  9059  0212                     	;# 
  9060  0213                     	;# 
  9061  0214                     	;# 
  9062  0215                     	;# 
  9063  0215                     	;# 
  9064  0216                     	;# 
  9065  0216                     	;# 
  9066  0217                     	;# 
  9067  0217                     	;# 
  9068  0218                     	;# 
  9069  0218                     	;# 
  9070  0219                     	;# 
  9071  021A                     	;# 
  9072  021B                     	;# 
  9073  021B                     	;# 
  9074  021C                     	;# 
  9075  021C                     	;# 
  9076  021D                     	;# 
  9077  021D                     	;# 
  9078  021E                     	;# 
  9079  021F                     	;# 
  9080  028C                     	;# 
  9081  028C                     	;# 
  9082  028D                     	;# 
  9083  028D                     	;# 
  9084  028E                     	;# 
  9085  028F                     	;# 
  9086  0290                     	;# 
  9087  0290                     	;# 
  9088  0291                     	;# 
  9089  0292                     	;# 
  9090  0292                     	;# 
  9091  0293                     	;# 
  9092  0293                     	;# 
  9093  0294                     	;# 
  9094  0295                     	;# 
  9095  0296                     	;# 
  9096  0296                     	;# 
  9097  0297                     	;# 
  9098  0298                     	;# 
  9099  0298                     	;# 
  9100  0299                     	;# 
  9101  0299                     	;# 
  9102  029A                     	;# 
  9103  029B                     	;# 
  9104  029C                     	;# 
  9105  029C                     	;# 
  9106  029D                     	;# 
  9107  030C                     	;# 
  9108  030C                     	;# 
  9109  030D                     	;# 
  9110  030E                     	;# 
  9111  030F                     	;# 
  9112  0310                     	;# 
  9113  0310                     	;# 
  9114  0311                     	;# 
  9115  0312                     	;# 
  9116  0313                     	;# 
  9117  0314                     	;# 
  9118  0314                     	;# 
  9119  0315                     	;# 
  9120  0316                     	;# 
  9121  0317                     	;# 
  9122  0318                     	;# 
  9123  0318                     	;# 
  9124  0319                     	;# 
  9125  031A                     	;# 
  9126  031B                     	;# 
  9127  031C                     	;# 
  9128  031C                     	;# 
  9129  031D                     	;# 
  9130  031E                     	;# 
  9131  031F                     	;# 
  9132  038C                     	;# 
  9133  038D                     	;# 
  9134  038E                     	;# 
  9135  0390                     	;# 
  9136  0391                     	;# 
  9137  0392                     	;# 
  9138  040C                     	;# 
  9139  040D                     	;# 
  9140  040E                     	;# 
  9141  040F                     	;# 
  9142  0410                     	;# 
  9143  0411                     	;# 
  9144  0416                     	;# 
  9145  0416                     	;# 
  9146  0417                     	;# 
  9147  0418                     	;# 
  9148  0418                     	;# 
  9149  0419                     	;# 
  9150  041A                     	;# 
  9151  041A                     	;# 
  9152  041B                     	;# 
  9153  041C                     	;# 
  9154  041C                     	;# 
  9155  041D                     	;# 
  9156  041E                     	;# 
  9157  041F                     	;# 
  9158  048C                     	;# 
  9159  048C                     	;# 
  9160  048D                     	;# 
  9161  048E                     	;# 
  9162  048F                     	;# 
  9163  048F                     	;# 
  9164  0490                     	;# 
  9165  0491                     	;# 
  9166  0492                     	;# 
  9167  0492                     	;# 
  9168  0493                     	;# 
  9169  0494                     	;# 
  9170  0495                     	;# 
  9171  0495                     	;# 
  9172  0496                     	;# 
  9173  0497                     	;# 
  9174  0498                     	;# 
  9175  0499                     	;# 
  9176  049A                     	;# 
  9177  049B                     	;# 
  9178  049C                     	;# 
  9179  049D                     	;# 
  9180  050C                     	;# 
  9181  050C                     	;# 
  9182  050D                     	;# 
  9183  050E                     	;# 
  9184  050F                     	;# 
  9185  050F                     	;# 
  9186  0510                     	;# 
  9187  0511                     	;# 
  9188  0512                     	;# 
  9189  0512                     	;# 
  9190  0513                     	;# 
  9191  0514                     	;# 
  9192  0515                     	;# 
  9193  0515                     	;# 
  9194  0516                     	;# 
  9195  0517                     	;# 
  9196  0518                     	;# 
  9197  0519                     	;# 
  9198  051A                     	;# 
  9199  051B                     	;# 
  9200  051C                     	;# 
  9201  051D                     	;# 
  9202  058C                     	;# 
  9203  058C                     	;# 
  9204  058D                     	;# 
  9205  058E                     	;# 
  9206  058F                     	;# 
  9207  058F                     	;# 
  9208  0590                     	;# 
  9209  0591                     	;# 
  9210  0592                     	;# 
  9211  0593                     	;# 
  9212  060C                     	;# 
  9213  060D                     	;# 
  9214  060E                     	;# 
  9215  060F                     	;# 
  9216  0610                     	;# 
  9217  0611                     	;# 
  9218  0612                     	;# 
  9219  0613                     	;# 
  9220  0614                     	;# 
  9221  0616                     	;# 
  9222  0617                     	;# 
  9223  0618                     	;# 
  9224  0619                     	;# 
  9225  061A                     	;# 
  9226  061B                     	;# 
  9227  061C                     	;# 
  9228  061D                     	;# 
  9229  061E                     	;# 
  9230  068C                     	;# 
  9231  068D                     	;# 
  9232  068E                     	;# 
  9233  068F                     	;# 
  9234  0690                     	;# 
  9235  0691                     	;# 
  9236  0692                     	;# 
  9237  0693                     	;# 
  9238  0694                     	;# 
  9239  070C                     	;# 
  9240  070D                     	;# 
  9241  070E                     	;# 
  9242  070F                     	;# 
  9243  0710                     	;# 
  9244  0711                     	;# 
  9245  0712                     	;# 
  9246  0713                     	;# 
  9247  0714                     	;# 
  9248  0716                     	;# 
  9249  0717                     	;# 
  9250  0718                     	;# 
  9251  0719                     	;# 
  9252  071A                     	;# 
  9253  071B                     	;# 
  9254  071C                     	;# 
  9255  071D                     	;# 
  9256  071E                     	;# 
  9257  0796                     	;# 
  9258  0797                     	;# 
  9259  0798                     	;# 
  9260  0799                     	;# 
  9261  079A                     	;# 
  9262  079B                     	;# 
  9263  080C                     	;# 
  9264  080D                     	;# 
  9265  080E                     	;# 
  9266  080F                     	;# 
  9267  0810                     	;# 
  9268  0811                     	;# 
  9269  0812                     	;# 
  9270  0813                     	;# 
  9271  0814                     	;# 
  9272  081A                     	;# 
  9273  081B                     	;# 
  9274  081C                     	;# 
  9275  081D                     	;# 
  9276  081E                     	;# 
  9277  081F                     	;# 
  9278  088C                     	;# 
  9279  088D                     	;# 
  9280  088E                     	;# 
  9281  088F                     	;# 
  9282  0890                     	;# 
  9283  0891                     	;# 
  9284  0892                     	;# 
  9285  0893                     	;# 
  9286  0895                     	;# 
  9287  0896                     	;# 
  9288  0897                     	;# 
  9289  0898                     	;# 
  9290  0899                     	;# 
  9291  089A                     	;# 
  9292  089B                     	;# 
  9293  090C                     	;# 
  9294  090E                     	;# 
  9295  090F                     	;# 
  9296  091F                     	;# 
  9297  091F                     	;# 
  9298  098F                     	;# 
  9299  098F                     	;# 
  9300  0990                     	;# 
  9301  0991                     	;# 
  9302  0992                     	;# 
  9303  0993                     	;# 
  9304  0994                     	;# 
  9305  0995                     	;# 
  9306  0996                     	;# 
  9307  0997                     	;# 
  9308  0E0F                     	;# 
  9309  0E10                     	;# 
  9310  0E11                     	;# 
  9311  0E12                     	;# 
  9312  0E13                     	;# 
  9313  0E14                     	;# 
  9314  0E15                     	;# 
  9315  0E16                     	;# 
  9316  0E17                     	;# 
  9317  0E18                     	;# 
  9318  0E19                     	;# 
  9319  0E1A                     	;# 
  9320  0E1B                     	;# 
  9321  0E1C                     	;# 
  9322  0E1D                     	;# 
  9323  0E1E                     	;# 
  9324  0E1F                     	;# 
  9325  0E20                     	;# 
  9326  0E21                     	;# 
  9327  0E22                     	;# 
  9328  0E23                     	;# 
  9329  0E24                     	;# 
  9330  0E25                     	;# 
  9331  0E26                     	;# 
  9332  0E27                     	;# 
  9333  0E28                     	;# 
  9334  0E29                     	;# 
  9335  0E2A                     	;# 
  9336  0E2B                     	;# 
  9337  0E2C                     	;# 
  9338  0E2D                     	;# 
  9339  0E2E                     	;# 
  9340  0E2F                     	;# 
  9341  0E30                     	;# 
  9342  0E31                     	;# 
  9343  0E32                     	;# 
  9344  0E33                     	;# 
  9345  0E34                     	;# 
  9346  0E35                     	;# 
  9347  0E36                     	;# 
  9348  0E37                     	;# 
  9349  0E8F                     	;# 
  9350  0E90                     	;# 
  9351  0E91                     	;# 
  9352  0E92                     	;# 
  9353  0E93                     	;# 
  9354  0E94                     	;# 
  9355  0E95                     	;# 
  9356  0E96                     	;# 
  9357  0E97                     	;# 
  9358  0E9C                     	;# 
  9359  0E9D                     	;# 
  9360  0E9E                     	;# 
  9361  0EA1                     	;# 
  9362  0EA2                     	;# 
  9363  0EA3                     	;# 
  9364  0EA4                     	;# 
  9365  0EA5                     	;# 
  9366  0EA9                     	;# 
  9367  0EAA                     	;# 
  9368  0EAB                     	;# 
  9369  0EAC                     	;# 
  9370  0EB1                     	;# 
  9371  0EB2                     	;# 
  9372  0EB3                     	;# 
  9373  0EB8                     	;# 
  9374  0EB9                     	;# 
  9375  0EBA                     	;# 
  9376  0EBB                     	;# 
  9377  0EBC                     	;# 
  9378  0EBD                     	;# 
  9379  0EBE                     	;# 
  9380  0EC3                     	;# 
  9381  0EC5                     	;# 
  9382  0EC6                     	;# 
  9383  0EC7                     	;# 
  9384  0EC8                     	;# 
  9385  0EC9                     	;# 
  9386  0ECA                     	;# 
  9387  0ECB                     	;# 
  9388  0ECC                     	;# 
  9389  0F10                     	;# 
  9390  0F11                     	;# 
  9391  0F12                     	;# 
  9392  0F13                     	;# 
  9393  0F14                     	;# 
  9394  0F15                     	;# 
  9395  0F16                     	;# 
  9396  0F17                     	;# 
  9397  0F18                     	;# 
  9398  0F19                     	;# 
  9399  0F1A                     	;# 
  9400  0F1B                     	;# 
  9401  0F1C                     	;# 
  9402  0F1D                     	;# 
  9403  0F1E                     	;# 
  9404  0F1F                     	;# 
  9405  0F20                     	;# 
  9406  0F21                     	;# 
  9407  0F22                     	;# 
  9408  0F23                     	;# 
  9409  0F24                     	;# 
  9410  0F25                     	;# 
  9411  0F26                     	;# 
  9412  0F27                     	;# 
  9413  0F38                     	;# 
  9414  0F39                     	;# 
  9415  0F3A                     	;# 
  9416  0F3B                     	;# 
  9417  0F3C                     	;# 
  9418  0F3D                     	;# 
  9419  0F3E                     	;# 
  9420  0F3F                     	;# 
  9421  0F40                     	;# 
  9422  0F41                     	;# 
  9423  0F43                     	;# 
  9424  0F44                     	;# 
  9425  0F45                     	;# 
  9426  0F46                     	;# 
  9427  0F47                     	;# 
  9428  0F48                     	;# 
  9429  0F49                     	;# 
  9430  0F4A                     	;# 
  9431  0F4B                     	;# 
  9432  0F4C                     	;# 
  9433  0F4E                     	;# 
  9434  0F4F                     	;# 
  9435  0F50                     	;# 
  9436  0F51                     	;# 
  9437  0F52                     	;# 
  9438  0F53                     	;# 
  9439  0F54                     	;# 
  9440  0F55                     	;# 
  9441  0F56                     	;# 
  9442  0F57                     	;# 
  9443  0F65                     	;# 
  9444  0F68                     	;# 
  9445  0F69                     	;# 
  9446  0F6A                     	;# 
  9447  0F6B                     	;# 
  9448  0FE4                     	;# 
  9449  0FE5                     	;# 
  9450  0FE6                     	;# 
  9451  0FE7                     	;# 
  9452  0FE8                     	;# 
  9453  0FE9                     	;# 
  9454  0FEA                     	;# 
  9455  0FEB                     	;# 
  9456  0FED                     	;# 
  9457  0FEE                     	;# 
  9458  0FEF                     	;_mtouch_button
  9459                           
  9460 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  9461  0000                     
  9462 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  9463  0000                     
  9464 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  9465  0000                     
  9466                           	psect	idataBANK0
  9467  1FD5                     __pidataBANK0:	
  9468                           
  9469                           ;initializer for _lastFanSpeed
  9470  1FD5  3401               	retlw	1
  9471  1FD6  3401               	retlw	1
  9472                           
  9473                           ;initializer for _activeFanIR
  9474  1FD7  34FF               	retlw	-1
  9475                           
  9476                           	psect	idataBANK1
  9477  10C5                     __pidataBANK1:	
  9478                           
  9479                           ;initializer for _freq_hop
  9480  10C5  3400               	retlw	0
  9481  10C6  341E               	retlw	30
  9482  10C7  343C               	retlw	60
  9483                           
  9484                           ;initializer for _H
  9485  10C8  3405               	retlw	5
  9486  10C9  3400               	retlw	0
  9487                           
  9488                           ;initializer for _callback_sampled
  9489  10CA  3403               	retlw	low _Sensor_DefaultCallback
  9490  10CB  3400               	retlw	high _Sensor_DefaultCallback
  9491                           
  9492                           ;initializer for _callback_notPressed
  9493  10CC  3402               	retlw	low _Button_DefaultCallback
  9494  10CD  3400               	retlw	high _Button_DefaultCallback
  9495                           
  9496                           ;initializer for _callback_pressed
  9497  10CE  3402               	retlw	low _Button_DefaultCallback
  9498  10CF  3400               	retlw	high _Button_DefaultCallback
  9499                           
  9500                           	psect	idataBANK2
  9501  1FF2                     __pidataBANK2:	
  9502                           
  9503                           ;initializer for _Button_StateMachine
  9504  1FF2  3462               	retlw	low _Button_State_Initializing
  9505  1FF3  340A               	retlw	high _Button_State_Initializing
  9506  1FF4  344C               	retlw	low _Button_State_NotPressed
  9507  1FF5  3407               	retlw	high _Button_State_NotPressed
  9508  1FF6  34D0               	retlw	low _Button_State_Pressed
  9509  1FF7  340A               	retlw	high _Button_State_Pressed
  9510                           
  9511                           	psect	idataBANK4
  9512  13E3                     __pidataBANK4:	
  9513                           
  9514                           ;initializer for _controls
  9515  13E3  3403               	retlw	3
  9516  13E4  3461               	retlw	97
  9517  13E5  3462               	retlw	98
  9518  13E6  3400               	retlw	0
  9519  13E7  3400               	retlw	0
  9520  13E8  3401               	retlw	1
  9521  13E9  3400               	retlw	0
  9522  13EA  3405               	retlw	5
  9523  13EB  3400               	retlw	0
  9524  13EC  3401               	retlw	1
  9525  13ED  3463               	retlw	99
  9526  13EE  3464               	retlw	100
  9527  13EF  3400               	retlw	0
  9528  13F0  3400               	retlw	0
  9529  13F1  3401               	retlw	1
  9530  13F2  3400               	retlw	0
  9531  13F3  3400               	retlw	0
  9532  13F4  3400               	retlw	0
  9533  13F5  3402               	retlw	2
  9534  13F6  3465               	retlw	101
  9535  13F7  3466               	retlw	102
  9536  13F8  3400               	retlw	0
  9537  13F9  3400               	retlw	0
  9538  13FA  3400               	retlw	0
  9539  13FB  3400               	retlw	0
  9540  13FC  3405               	retlw	5
  9541  13FD  3400               	retlw	0
  9542  13FE  3400               	retlw	0
  9543  13FF  3467               	retlw	103
  9544  1400  3468               	retlw	104
  9545  1401  3400               	retlw	0
  9546  1402  3400               	retlw	0
  9547  1403  3400               	retlw	0
  9548  1404  3400               	retlw	0
  9549  1405  3401               	retlw	1
  9550  1406  3400               	retlw	0
  9551                           
  9552                           	psect	stringtext1
  9553  182D                     __pstringtext1:	
  9554  182D                     _speedDelays:	
  9555  182D  3400               	retlw	0
  9556  182E  3400               	retlw	0
  9557  182F  3482               	retlw	130
  9558  1830  34DC               	retlw	220
  9559  1831  348C               	retlw	140
  9560  1832  34A0               	retlw	160
  9561  1833  34A2               	retlw	162
  9562  1834  3440               	retlw	64
  9563  1835  34D8               	retlw	216
  9564  1836  34F0               	retlw	240
  9565  1837                     __end_of_speedDelays:	
  9566                           
  9567                           	psect	stringtext2
  9568  1000                     __pstringtext2:	
  9569  1000                     _mtouch_button_init:	
  9570  1000  3400               	retlw	0
  9571  1001  3403               	retlw	3
  9572  1002  3400               	retlw	0
  9573  1003  3400               	retlw	0
  9574  1004  3400               	retlw	0
  9575  1005  3400               	retlw	0
  9576  1006  3400               	retlw	0
  9577  1007  3400               	retlw	0
  9578  1008  3400               	retlw	0
  9579  1009  3400               	retlw	0
  9580  100A  3400               	retlw	0
  9581  100B  3400               	retlw	0
  9582  100C  3400               	retlw	0
  9583  100D  3400               	retlw	0
  9584  100E  341E               	retlw	30
  9585  100F  3401               	retlw	1
  9586  1010  3405               	retlw	5
  9587  1011  3401               	retlw	1
  9588  1012  3401               	retlw	1
  9589  1013  3400               	retlw	0
  9590  1014  3400               	retlw	0
  9591  1015  3400               	retlw	0
  9592  1016  3400               	retlw	0
  9593  1017  3400               	retlw	0
  9594  1018  3400               	retlw	0
  9595  1019  3400               	retlw	0
  9596  101A  3400               	retlw	0
  9597  101B  3400               	retlw	0
  9598  101C  3400               	retlw	0
  9599  101D  3400               	retlw	0
  9600  101E  3400               	retlw	0
  9601  101F  341E               	retlw	30
  9602  1020  3401               	retlw	1
  9603  1021  3405               	retlw	5
  9604  1022  3402               	retlw	2
  9605  1023  3404               	retlw	4
  9606  1024  3400               	retlw	0
  9607  1025  3400               	retlw	0
  9608  1026  3400               	retlw	0
  9609  1027  3400               	retlw	0
  9610  1028  3400               	retlw	0
  9611  1029  3400               	retlw	0
  9612  102A  3400               	retlw	0
  9613  102B  3400               	retlw	0
  9614  102C  3400               	retlw	0
  9615  102D  3400               	retlw	0
  9616  102E  3400               	retlw	0
  9617  102F  3400               	retlw	0
  9618  1030  341E               	retlw	30
  9619  1031  3401               	retlw	1
  9620  1032  3405               	retlw	5
  9621  1033  3403               	retlw	3
  9622  1034  3400               	retlw	0
  9623  1035  3400               	retlw	0
  9624  1036  3400               	retlw	0
  9625  1037  3400               	retlw	0
  9626  1038  3400               	retlw	0
  9627  1039  3400               	retlw	0
  9628  103A  3400               	retlw	0
  9629  103B  3400               	retlw	0
  9630  103C  3400               	retlw	0
  9631  103D  3400               	retlw	0
  9632  103E  3400               	retlw	0
  9633  103F  3400               	retlw	0
  9634  1040  3400               	retlw	0
  9635  1041  341E               	retlw	30
  9636  1042  3401               	retlw	1
  9637  1043  3405               	retlw	5
  9638  1044  3404               	retlw	4
  9639  1045  3402               	retlw	2
  9640  1046  3400               	retlw	0
  9641  1047  3400               	retlw	0
  9642  1048  3400               	retlw	0
  9643  1049  3400               	retlw	0
  9644  104A  3400               	retlw	0
  9645  104B  3400               	retlw	0
  9646  104C  3400               	retlw	0
  9647  104D  3400               	retlw	0
  9648  104E  3400               	retlw	0
  9649  104F  3400               	retlw	0
  9650  1050  3400               	retlw	0
  9651  1051  3400               	retlw	0
  9652  1052  341E               	retlw	30
  9653  1053  3401               	retlw	1
  9654  1054  3404               	retlw	4
  9655  1055                     __end_of_mtouch_button_init:	
  9656                           
  9657                           	psect	stringtext3
  9658  1800                     __pstringtext3:	
  9659  1800                     _mtouch_sensor_init:	
  9660  1800  3400               	retlw	0
  9661  1801  3400               	retlw	0
  9662  1802  34C0               	retlw	192
  9663  1803  3440               	retlw	64
  9664  1804  3420               	retlw	32
  9665  1805  3400               	retlw	0
  9666  1806  3400               	retlw	0
  9667  1807  3400               	retlw	0
  9668  1808  3400               	retlw	0
  9669  1809  3401               	retlw	1
  9670  180A  3401               	retlw	1
  9671  180B  34C0               	retlw	192
  9672  180C  3440               	retlw	64
  9673  180D  3420               	retlw	32
  9674  180E  3400               	retlw	0
  9675  180F  3400               	retlw	0
  9676  1810  3400               	retlw	0
  9677  1811  3400               	retlw	0
  9678  1812  3402               	retlw	2
  9679  1813  3402               	retlw	2
  9680  1814  34C0               	retlw	192
  9681  1815  3440               	retlw	64
  9682  1816  3420               	retlw	32
  9683  1817  3400               	retlw	0
  9684  1818  3400               	retlw	0
  9685  1819  3400               	retlw	0
  9686  181A  3400               	retlw	0
  9687  181B  3403               	retlw	3
  9688  181C  3403               	retlw	3
  9689  181D  34C0               	retlw	192
  9690  181E  3440               	retlw	64
  9691  181F  3420               	retlw	32
  9692  1820  3400               	retlw	0
  9693  1821  3400               	retlw	0
  9694  1822  3400               	retlw	0
  9695  1823  3400               	retlw	0
  9696  1824  3404               	retlw	4
  9697  1825  3404               	retlw	4
  9698  1826  34C0               	retlw	192
  9699  1827  3440               	retlw	64
  9700  1828  3420               	retlw	32
  9701  1829  3400               	retlw	0
  9702  182A  3400               	retlw	0
  9703  182B  3400               	retlw	0
  9704  182C  3400               	retlw	0
  9705  182D                     __end_of_mtouch_sensor_init:	
  9706                           
  9707                           	psect	nvBANK2
  9708  016B                     __pnvBANK2:	
  9709  016B                     _EUSART_FramingErrorHandler:	
  9710  016B                     	ds	2
  9711  016D                     _ADCC_ADTI_InterruptHandler:	
  9712  016D                     	ds	2
  9713                           
  9714                           	psect	nvBANK4
  9715  0244                     __pnvBANK4:	
  9716  0244                     _EUSART_ErrorHandler:	
  9717  0244                     	ds	2
  9718  0246                     _EUSART_OverrunErrorHandler:	
  9719  0246                     	ds	2
  9720  0018                     _LATCbits	set	24
  9721  000D                     _PORTBbits	set	13
  9722  000B                     _INTCONbits	set	11
  9723  0013                     _TRISC	set	19
  9724  0012                     _TRISB	set	18
  9725  0011                     _TRISA	set	17
  9726  0018                     _LATC	set	24
  9727  0017                     _LATB	set	23
  9728  0016                     _LATA	set	22
  9729  0011                     _TRISAbits	set	17
  9730  005F                     _GIE	set	95
  9731  0090                     _ADACC	set	144
  9732  0094                     _ADCON1bits	set	148
  9733  008E                     _ADPREVL	set	142
  9734  008F                     _ADPREVH	set	143
  9735  0097                     _ADSTATbits	set	151
  9736  0090                     _ADACCL	set	144
  9737  0091                     _ADACCH	set	145
  9738  0095                     _ADCON2bits	set	149
  9739  0096                     _ADCON3bits	set	150
  9740  008C                     _ADRESL	set	140
  9741  008D                     _ADRESH	set	141
  9742  0099                     _ADACT	set	153
  9743  0097                     _ADSTAT	set	151
  9744  0093                     _ADCON0bits	set	147
  9745  009E                     _ADPCH	set	158
  9746  009C                     _ADPRE	set	156
  9747  009D                     _ADACQ	set	157
  9748  0093                     _ADCON0	set	147
  9749  0096                     _ADCON3	set	150
  9750  0095                     _ADCON2	set	149
  9751  0094                     _ADCON1	set	148
  9752  009B                     _ADCAP	set	155
  9753  009A                     _ADREF	set	154
  9754  0098                     _ADCLK	set	152
  9755  0114                     _ADFLTR	set	276
  9756  011A                     _TX1REG	set	282
  9757  0119                     _RC1REG	set	281
  9758  011D                     _RC1STAbits	set	285
  9759  011E                     _TX1STAbits	set	286
  9760  011C                     _SP1BRGH	set	284
  9761  011B                     _SP1BRGL	set	283
  9762  011E                     _TX1STA	set	286
  9763  011D                     _RC1STA	set	285
  9764  011F                     _BAUD1CON	set	287
  9765  0116                     _ADERRL	set	278
  9766  0117                     _ADERRH	set	279
  9767  0114                     _ADFLTRL	set	276
  9768  0115                     _ADFLTRH	set	277
  9769  010C                     _ADCNT	set	268
  9770  010D                     _ADRPT	set	269
  9771  0113                     _ADSTPTH	set	275
  9772  0112                     _ADSTPTL	set	274
  9773  0111                     _ADUTHH	set	273
  9774  0110                     _ADUTHL	set	272
  9775  010F                     _ADLTHH	set	271
  9776  010E                     _ADLTHL	set	270
  9777  0310                     _CCPR2L	set	784
  9778  031C                     _CCPR5L	set	796
  9779  031D                     _CCPR5H	set	797
  9780  070F                     _PIR3bits	set	1807
  9781  0716                     _PIE0bits	set	1814
  9782  070C                     _PIR0bits	set	1804
  9783  0717                     _PIE1bits	set	1815
  9784  070D                     _PIR1bits	set	1805
  9785  079B                     _PMD5	set	1947
  9786  079A                     _PMD4	set	1946
  9787  0799                     _PMD3	set	1945
  9788  0798                     _PMD2	set	1944
  9789  0797                     _PMD1	set	1943
  9790  0796                     _PMD0	set	1942
  9791  081F                     _NVMCON2	set	2079
  9792  081C                     _NVMDATL	set	2076
  9793  081D                     _NVMDATH	set	2077
  9794  081E                     _NVMCON1bits	set	2078
  9795  081B                     _NVMADRH	set	2075
  9796  081A                     _NVMADRL	set	2074
  9797  0892                     _OSCTUNE	set	2194
  9798  0893                     _OSCFRQ	set	2195
  9799  0891                     _OSCEN	set	2193
  9800  088F                     _OSCCON3	set	2191
  9801  088D                     _OSCCON1	set	2189
  9802  0ECB                     _RXPPS	set	3787
  9803  0E8F                     _PPSLOCKbits	set	3727
  9804  0E8F                     _PPSLOCK	set	3727
  9805  0F26                     _RC6PPS	set	3878
  9806  0F68                     _INLVLE	set	3944
  9807  0F52                     _INLVLC	set	3922
  9808  0F47                     _INLVLB	set	3911
  9809  0F3C                     _INLVLA	set	3900
  9810  0F51                     _SLRCONC	set	3921
  9811  0F46                     _SLRCONB	set	3910
  9812  0F3B                     _SLRCONA	set	3899
  9813  0F50                     _ODCONC	set	3920
  9814  0F45                     _ODCONB	set	3909
  9815  0F3A                     _ODCONA	set	3898
  9816  0F4F                     _WPUC	set	3919
  9817  0F39                     _WPUA	set	3897
  9818  0F44                     _WPUB	set	3908
  9819  0F65                     _WPUE	set	3941
  9820  0F38                     _ANSELA	set	3896
  9821  0F43                     _ANSELB	set	3907
  9822  0F4E                     _ANSELC	set	3918
  9823  0F15                     _RA5PPS	set	3861
  9824                           
  9825                           ; #config settings
  9826  0000                     
  9827                           	psect	cinit
  9828  0024                     start_initialization:	
  9829  0024                     __initialization:		;BIGRAM
  9830                           
  9831                           ; Initialize objects allocated to BANK0
  9832  0024  319F  27D5  3180   	fcall	__pidataBANK0	;fetch initializer
  9833  0027  00E3               	movwf	__pdataBANK0& (0+127)
  9834  0028  319F  27D6  3180   	fcall	__pidataBANK0+1	;fetch initializer
  9835  002B  00E4               	movwf	(__pdataBANK0+1)& (0+127)
  9836  002C  319F  27D7  3180   	fcall	__pidataBANK0+2	;fetch initializer
  9837  002F  00E5               	movwf	(__pdataBANK0+2)& (0+127)
  9838                           
  9839                           ; Initialize objects allocated to BANK1
  9840  0030  30C5               	movlw	low __pidataBANK1
  9841  0031  0084               	movwf	4
  9842  0032  3090               	movlw	(high __pidataBANK1)| (0+128)
  9843  0033  0085               	movwf	5
  9844  0034  30E4               	movlw	low __pdataBANK1
  9845  0035  0086               	movwf	6
  9846  0036  3000               	movlw	high __pdataBANK1
  9847  0037  0087               	movwf	7
  9848  0038  3000               	movlw	0
  9849  0039  00FF               	movwf	btemp+1
  9850  003A  300B               	movlw	11
  9851  003B  3191  210C  3180   	fcall	init_ram
  9852                           
  9853                           ; Initialize objects allocated to BANK2
  9854  003E  30F2               	movlw	low __pidataBANK2
  9855  003F  0084               	movwf	4
  9856  0040  309F               	movlw	(high __pidataBANK2)| (0+128)
  9857  0041  0085               	movwf	5
  9858  0042  3065               	movlw	low __pdataBANK2
  9859  0043  0086               	movwf	6
  9860  0044  3001               	movlw	high __pdataBANK2
  9861  0045  0087               	movwf	7
  9862  0046  3000               	movlw	0
  9863  0047  00FF               	movwf	btemp+1
  9864  0048  3006               	movlw	6
  9865  0049  3191  210C  3180   	fcall	init_ram
  9866                           
  9867                           ; Initialize objects allocated to BANK4
  9868  004C  30E3               	movlw	low __pidataBANK4
  9869  004D  0084               	movwf	4
  9870  004E  3093               	movlw	(high __pidataBANK4)| (0+128)
  9871  004F  0085               	movwf	5
  9872  0050  3020               	movlw	low __pdataBANK4
  9873  0051  0086               	movwf	6
  9874  0052  3002               	movlw	high __pdataBANK4
  9875  0053  0087               	movwf	7
  9876  0054  3000               	movlw	0
  9877  0055  00FF               	movwf	btemp+1
  9878  0056  3024               	movlw	36
  9879  0057  3191  210C  3180   	fcall	init_ram
  9880                           
  9881                           ; Clear objects allocated to BIGRAM
  9882  005A  309B               	movlw	low (0+9115)
  9883  005B  0084               	movwf	4
  9884  005C  3023               	movlw	high (0+9115)
  9885  005D  0085               	movwf	5
  9886  005E  3055               	movlw	85
  9887  005F  00FE               	movwf	btemp
  9888  0060  3000               	movlw	0
  9889  0061  00FF               	movwf	btemp+1
  9890  0062  3191  2100  3180   	fcall	clear_ram0
  9891                           
  9892                           ; Clear objects allocated to BANK0
  9893  0065  304B               	movlw	low __pbssBANK0
  9894  0066  0084               	movwf	4
  9895  0067  3000               	movlw	high __pbssBANK0
  9896  0068  0085               	movwf	5
  9897  0069  3018               	movlw	24
  9898  006A  00FE               	movwf	btemp
  9899  006B  3000               	movlw	0
  9900  006C  00FF               	movwf	btemp+1
  9901  006D  3191  2100  3180   	fcall	clear_ram0
  9902                           
  9903                           ; Clear objects allocated to BANK1
  9904  0070  30A0               	movlw	low __pbssBANK1
  9905  0071  0084               	movwf	4
  9906  0072  3000               	movlw	high __pbssBANK1
  9907  0073  0085               	movwf	5
  9908  0074  3044               	movlw	68
  9909  0075  00FE               	movwf	btemp
  9910  0076  3000               	movlw	0
  9911  0077  00FF               	movwf	btemp+1
  9912  0078  3191  2100  3180   	fcall	clear_ram0
  9913                           
  9914                           ; Clear objects allocated to BANK2
  9915  007B  3020               	movlw	low __pbssBANK2
  9916  007C  0084               	movwf	4
  9917  007D  3001               	movlw	high __pbssBANK2
  9918  007E  0085               	movwf	5
  9919  007F  3045               	movlw	69
  9920  0080  00FE               	movwf	btemp
  9921  0081  3000               	movlw	0
  9922  0082  00FF               	movwf	btemp+1
  9923  0083  3191  2100  3180   	fcall	clear_ram0
  9924                           
  9925                           ; Clear objects allocated to BANK3
  9926  0086  30A0               	movlw	low __pbssBANK3
  9927  0087  0084               	movwf	4
  9928  0088  3001               	movlw	high __pbssBANK3
  9929  0089  0085               	movwf	5
  9930  008A  304F               	movlw	79
  9931  008B  00FE               	movwf	btemp
  9932  008C  3000               	movlw	0
  9933  008D  00FF               	movwf	btemp+1
  9934  008E  3191  2100  3180   	fcall	clear_ram0
  9935                           
  9936                           ; Clear objects allocated to BANK5
  9937  0091  30A0               	movlw	low __pbssBANK5
  9938  0092  0084               	movwf	4
  9939  0093  3002               	movlw	high __pbssBANK5
  9940  0094  0085               	movwf	5
  9941  0095  3046               	movlw	70
  9942  0096  00FE               	movwf	btemp
  9943  0097  3000               	movlw	0
  9944  0098  00FF               	movwf	btemp+1
  9945  0099  3191  2100         	fcall	clear_ram0
  9946  009B                     end_of_initialization:	
  9947                           ;End of C runtime variable initialization code
  9948                           
  9949  009B                     __end_of__initialization:	
  9950  009B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  9951  009C  0020               	movlb	0
  9952  009D  318B  2BCC         	ljmp	_main	;jump to C main() function
  9953                           
  9954                           	psect	bssBANK0
  9955  004B                     __pbssBANK0:	
  9956  004B                     _ld3:	
  9957  004B                     	ds	4
  9958  004F                     _c2:	
  9959  004F                     	ds	2
  9960  0051                     _c1:	
  9961  0051                     	ds	2
  9962  0053                     _a2:	
  9963  0053                     	ds	2
  9964  0055                     _a1:	
  9965  0055                     	ds	2
  9966  0057                     OnHold@irTriggered:	
  9967  0057                     	ds	1
  9968  0058                     _ustate:	
  9969  0058                     	ds	1
  9970  0059                     _mainToggleState:	
  9971  0059                     	ds	1
  9972  005A                     _wipeEnabled:	
  9973  005A                     	ds	1
  9974  005B                     _sample_delay:	
  9975  005B                     	ds	1
  9976  005C                     _freq_index:	
  9977  005C                     	ds	1
  9978  005D                     _lowpowerActivated:	
  9979  005D                     	ds	1
  9980  005E                     _scanInterrupted:	
  9981  005E                     	ds	1
  9982  005F                     _sampling_flag:	
  9983  005F                     	ds	1
  9984  0060                     _currentScanSensor:	
  9985  0060                     	ds	1
  9986  0061                     _mtouch_request_init:	
  9987  0061                     	ds	1
  9988  0062                     _mtouch_time_toScan:	
  9989  0062                     	ds	1
  9990                           
  9991                           	psect	dataBANK0
  9992  0063                     __pdataBANK0:	
  9993  0063                     _lastFanSpeed:	
  9994  0063                     	ds	2
  9995  0065                     _activeFanIR:	
  9996  0065                     	ds	1
  9997                           
  9998                           	psect	bssBANK1
  9999  00A0                     __pbssBANK1:	
 10000  00A0                     _l2:	
 10001  00A0                     	ds	4
 10002  00A4                     _l1:	
 10003  00A4                     	ds	4
 10004  00A8                     _ld2:	
 10005  00A8                     	ds	4
 10006  00AC                     _ld1:	
 10007  00AC                     	ds	4
 10008  00B0                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:	
 10009  00B0                     	ds	3
 10010  00B3                     _x2:	
 10011  00B3                     	ds	2
 10012  00B5                     _x1:	
 10013  00B5                     	ds	2
 10014  00B7                     _r2:	
 10015  00B7                     	ds	2
 10016  00B9                     _r1:	
 10017  00B9                     	ds	2
 10018  00BB                     _d2:	
 10019  00BB                     	ds	2
 10020  00BD                     _d1:	
 10021  00BD                     	ds	2
 10022  00BF                     _t1:	
 10023  00BF                     	ds	2
 10024  00C1                     _d:	
 10025  00C1                     	ds	2
 10026  00C3                     _holdCounter:	
 10027  00C3                     	ds	2
 10028  00C5                     _fn2:	
 10029  00C5                     	ds	2
 10030  00C7                     _fn1:	
 10031  00C7                     	ds	2
 10032  00C9                     _count:	
 10033  00C9                     	ds	2
 10034  00CB                     _temp2h:	
 10035  00CB                     	ds	2
 10036  00CD                     _temp2l:	
 10037  00CD                     	ds	2
 10038  00CF                     _temp1l:	
 10039  00CF                     	ds	2
 10040  00D1                     _temp1h:	
 10041  00D1                     	ds	2
 10042  00D3                     _sto:	
 10043  00D3                     	ds	2
 10044  00D5                     _fan3:	
 10045  00D5                     	ds	1
 10046  00D6                     _fan2:	
 10047  00D6                     	ds	1
 10048  00D7                     _fan1:	
 10049  00D7                     	ds	1
 10050  00D8                     _received:	
 10051  00D8                     	ds	1
 10052  00D9                     OnHold@matterTriggered:	
 10053  00D9                     	ds	1
 10054  00DA                     _toggle:	
 10055  00DA                     	ds	1
 10056  00DB                     _touchEdgeDetected:	
 10057  00DB                     	ds	1
 10058  00DC                     _f21:	
 10059  00DC                     	ds	1
 10060  00DD                     _f20:	
 10061  00DD                     	ds	1
 10062  00DE                     _f11:	
 10063  00DE                     	ds	1
 10064  00DF                     _f10:	
 10065  00DF                     	ds	1
 10066  00E0                     _fan2_state:	
 10067  00E0                     	ds	1
 10068  00E1                     _fan1_state:	
 10069  00E1                     	ds	1
 10070  00E2                     _wipeTriggerFlag:	
 10071  00E2                     	ds	1
 10072  00E3                     _eusartRxLastError:	
 10073  00E3                     	ds	1
 10074                           
 10075                           	psect	dataBANK1
 10076  00E4                     __pdataBANK1:	
 10077  00E4                     _freq_hop:	
 10078  00E4                     	ds	3
 10079  00E7                     _H:	
 10080  00E7                     	ds	2
 10081  00E9                     _callback_sampled:	
 10082  00E9                     	ds	2
 10083  00EB                     _callback_notPressed:	
 10084  00EB                     	ds	2
 10085  00ED                     _callback_pressed:	
 10086  00ED                     	ds	2
 10087                           
 10088                           	psect	bssBANK2
 10089  0120                     __pbssBANK2:	
 10090  0120                     _sensor_medianBuffer:	
 10091  0120                     	ds	30
 10092  013E                     _packet_sample:	
 10093  013E                     	ds	10
 10094  0148                     medianFilter@bufferIndex:	
 10095  0148                     	ds	5
 10096  014D                     _l4:	
 10097  014D                     	ds	4
 10098  0151                     _l3:	
 10099  0151                     	ds	4
 10100  0155                     _L:	
 10101  0155                     	ds	2
 10102  0157                     _fanToggles:	
 10103  0157                     	ds	14
 10104                           
 10105                           	psect	dataBANK2
 10106  0165                     __pdataBANK2:	
 10107  0165                     _Button_StateMachine:	
 10108  0165                     	ds	6
 10109                           
 10110                           	psect	bssBANK3
 10111  01A0                     __pbssBANK3:	
 10112  01A0                     _mtouch_sensor:	
 10113  01A0                     	ds	45
 10114  01CD                     _fans:	
 10115  01CD                     	ds	34
 10116                           
 10117                           	psect	dataBANK4
 10118  0220                     __pdataBANK4:	
 10119  0220                     _controls:	
 10120  0220                     	ds	36
 10121                           
 10122                           	psect	bssBANK5
 10123  02A0                     __pbssBANK5:	
 10124  02A0                     _fanSpeedControls:	
 10125  02A0                     	ds	70
 10126                           
 10127                           	psect	inittext
 10128  110C                     init_ram:	
 10129  110C  00FE               	movwf	126
 10130  110D                     initloop:	
 10131  110D  0012               	moviw fsr0++
 10132  110E  001E               	movwi fsr1++
 10133  110F  3001               	movlw	1
 10134  1110  02FE               	subwf	126,f
 10135  1111  3000               	movlw	0
 10136  1112  3BFF               	subwfb	127,f
 10137  1113  087F               	movf	127,w
 10138  1114  047E               	iorwf	126,w
 10139  1115  1903               	btfsc	3,2
 10140  1116  3400               	retlw	0
 10141  1117  290D               	goto	initloop
 10142                           
 10143                           	psect	clrtext
 10144  1100                     clear_ram0:	
 10145                           ;	Called with FSR0 containing the base address, and
 10146                           ;	btemp/btemp+1 has the size to clear
 10147                           
 10148  1100  0064               	clrwdt	;clear the watchdog before getting into this loop
 10149  1101                     clrloop0:	
 10150  1101  0180               	clrf	0	;clear RAM location pointed to by FSR
 10151  1102  3101               	addfsr 0,1
 10152  1103  3001               	movlw	1
 10153  1104  02FE               	subwf	126,f
 10154  1105  3000               	movlw	0
 10155  1106  3BFF               	subwfb	127,f
 10156  1107  087F               	movf	127,w
 10157  1108  047E               	iorwf	126,w
 10158  1109  1903               	btfsc	3,2
 10159  110A  3400               	retlw	0	;all done for this memory range, return
 10160  110B  2901               	goto	clrloop0	;have we reached the end yet?
 10161                           
 10162                           	psect	cstackBANK1
 10163  00EF                     __pcstackBANK1:	
 10164  00EF                     main@touchDetected:	
 10165                           
 10166                           ; 1 bytes @ 0x0
 10167  00EF                     	ds	1
 10168                           
 10169                           	psect	cstackCOMMON
 10170  0070                     __pcstackCOMMON:	
 10171  0070                     ?_MTOUCH_Service_Mainloop:	
 10172  0070                     ?_MTOUCH_Button_isPressed:	
 10173                           ; 1 bytes @ 0x0
 10174                           
 10175  0070                     ?_MTOUCH_Sensor_InitializeAll:	
 10176                           ; 1 bytes @ 0x0
 10177                           
 10178  0070                     ?_MTOUCH_Button_InitializeAll:	
 10179                           ; 1 bytes @ 0x0
 10180                           
 10181  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
 10182                           ; 1 bytes @ 0x0
 10183                           
 10184  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
 10185                           ; 1 bytes @ 0x0
 10186                           
 10187  0070                     ?_MTOUCH_Sensor_SampleAll:	
 10188                           ; 1 bytes @ 0x0
 10189                           
 10190  0070                     ?_MTOUCH_Button_ServiceAll:	
 10191                           ; 1 bytes @ 0x0
 10192                           
 10193  0070                     ?_MTOUCH_needReburst:	
 10194                           ; 1 bytes @ 0x0
 10195                           
 10196  0070                     ?_MTOUCH_Tick:	
 10197                           ; 1 bytes @ 0x0
 10198                           
 10199  0070                     ?_MTOUCH_Button_Tick:	
 10200                           ; 1 bytes @ 0x0
 10201                           
 10202  0070                     ?_MTOUCH_Sensor_Calibrate:	
 10203                           ; 1 bytes @ 0x0
 10204                           
 10205  0070                     ?_Button_Service:	
 10206                           ; 1 bytes @ 0x0
 10207                           
 10208  0070                     ?_MTOUCH_Sensor_wasSampled:	
 10209                           ; 1 bytes @ 0x0
 10210                           
 10211  0070                     ?_MTOUCH_Sensor_isCalibrated:	
 10212                           ; 1 bytes @ 0x0
 10213                           
 10214  0070                     ?_MTOUCH_Sensor_Enable:	
 10215                           ; 1 bytes @ 0x0
 10216                           
 10217  0070                     ?_Sensor_Sampled_Reset:	
 10218                           ; 1 bytes @ 0x0
 10219                           
 10220  0070                     ?_ADCC_ThresholdISR_mTouch:	
 10221                           ; 1 bytes @ 0x0
 10222                           
 10223  0070                     ?_MTOUCH_Sensor_isEnabled:	
 10224                           ; 1 bytes @ 0x0
 10225                           
 10226  0070                     ?_MTOUCH_Sensor_isSampling:	
 10227                           ; 1 bytes @ 0x0
 10228                           
 10229  0070                     ?_Sensor_scheduleNextScan:	
 10230                           ; 1 bytes @ 0x0
 10231                           
 10232  0070                     ?_Sensor_FrequencyHopping:	
 10233                           ; 1 bytes @ 0x0
 10234                           
 10235  0070                     ?_MTOUCH_Sensor_postAcquisitionProcess:	
 10236                           ; 1 bytes @ 0x0
 10237                           
 10238  0070                     ?_Sensor_isCalibrated:	
 10239                           ; 1 bytes @ 0x0
 10240                           
 10241  0070                     ?_Sensor_isCalibratingAcqTime:	
 10242                           ; 1 bytes @ 0x0
 10243                           
 10244  0070                     ?_Sensor_setCalibratAcqTime:	
 10245                           ; 1 bytes @ 0x0
 10246                           
 10247  0070                     ??_Sensor_setCalibratAcqTime:	
 10248                           ; 1 bytes @ 0x0
 10249                           
 10250  0070                     ?_Sensor_setCalibrated:	
 10251                           ; 1 bytes @ 0x0
 10252                           
 10253  0070                     ??_Sensor_setCalibrated:	
 10254                           ; 1 bytes @ 0x0
 10255                           
 10256  0070                     ?_Sensor_RawSample_Update:	
 10257                           ; 1 bytes @ 0x0
 10258                           
 10259  0070                     ?_MTOUCH_Sensor_Service:	
 10260                           ; 1 bytes @ 0x0
 10261                           
 10262  0070                     ?_Sensor_setSampled:	
 10263                           ; 1 bytes @ 0x0
 10264                           
 10265  0070                     ??_Sensor_setSampled:	
 10266                           ; 1 bytes @ 0x0
 10267                           
 10268  0070                     ?_Sensor_FrequencyHopping_Autotune_Process:	
 10269                           ; 1 bytes @ 0x0
 10270                           
 10271  0070                     ?_ADCC_DefaultInterruptHandler:	
 10272                           ; 1 bytes @ 0x0
 10273                           
 10274  0070                     ??_ADCC_DefaultInterruptHandler:	
 10275                           ; 1 bytes @ 0x0
 10276                           
 10277  0070                     ?_PMD_Initialize:	
 10278                           ; 1 bytes @ 0x0
 10279                           
 10280  0070                     ?_OSCILLATOR_Initialize:	
 10281                           ; 1 bytes @ 0x0
 10282                           
 10283  0070                     ?_EUSART_Initialize:	
 10284                           ; 1 bytes @ 0x0
 10285                           
 10286  0070                     ?_decodeIRSignal:	
 10287                           ; 1 bytes @ 0x0
 10288                           
 10289  0070                     ?_syncFanToggleState:	
 10290                           ; 1 bytes @ 0x0
 10291                           
 10292  0070                     ?_OnHold:	
 10293                           ; 1 bytes @ 0x0
 10294                           
 10295  0070                     ?_handleUARTCommands:	
 10296                           ; 1 bytes @ 0x0
 10297                           
 10298  0070                     ?_handleGeneralTouchControls:	
 10299                           ; 1 bytes @ 0x0
 10300                           
 10301  0070                     ?_MTOUCH_Initialize:	
 10302                           ; 1 bytes @ 0x0
 10303                           
 10304  0070                     ?_MTOUCH_Button_Initialize:	
 10305                           ; 1 bytes @ 0x0
 10306                           
 10307  0070                     ?_MTOUCH_Sensor_Initialize:	
 10308                           ; 1 bytes @ 0x0
 10309                           
 10310  0070                     ?_MTOUCH_Sensor_ADCC_Initialize:	
 10311                           ; 1 bytes @ 0x0
 10312                           
 10313  0070                     ?_MTOUCH_Sensor_isSamplingComplete:	
 10314                           ; 1 bytes @ 0x0
 10315                           
 10316  0070                     ?_Sensor_autoCalibration:	
 10317                           ; 1 bytes @ 0x0
 10318                           
 10319  0070                     ?_Sensor_setSamplePeriod:	
 10320                           ; 1 bytes @ 0x0
 10321                           
 10322  0070                     ?_PIN_MANAGER_Initialize:	
 10323                           ; 1 bytes @ 0x0
 10324                           
 10325  0070                     ?_DATAEE_WriteByte:	
 10326                           ; 1 bytes @ 0x0
 10327                           
 10328  0070                     ?_ADCC_Initialize:	
 10329                           ; 1 bytes @ 0x0
 10330                           
 10331  0070                     ?_ADCC_ThresholdISR:	
 10332                           ; 1 bytes @ 0x0
 10333                           
 10334  0070                     ?_SYSTEM_Initialize:	
 10335                           ; 1 bytes @ 0x0
 10336                           
 10337  0070                     ?_INTERRUPT_InterruptManager:	
 10338                           ; 1 bytes @ 0x0
 10339                           
 10340  0070                     ?_InitExternal_INT:	
 10341                           ; 1 bytes @ 0x0
 10342                           
 10343  0070                     ?_EUSART_is_rx_ready:	
 10344                           ; 1 bytes @ 0x0
 10345                           
 10346  0070                     ?_EUSART_Read:	
 10347                           ; 1 bytes @ 0x0
 10348                           
 10349  0070                     ?_EUSART_Write:	
 10350                           ; 1 bytes @ 0x0
 10351                           
 10352  0070                     ?_ir_handler:	
 10353                           ; 1 bytes @ 0x0
 10354                           
 10355  0070                     ?_updateLight:	
 10356                           ; 1 bytes @ 0x0
 10357                           
 10358  0070                     ?_uartLight:	
 10359                           ; 1 bytes @ 0x0
 10360                           
 10361  0070                     ?_main:	
 10362                           ; 1 bytes @ 0x0
 10363                           
 10364  0070                     ?i1_Sensor_SetTrisBit:	
 10365                           ; 1 bytes @ 0x0
 10366                           
 10367  0070                     ?i1_Sensor_scheduleNextScan:	
 10368                           ; 1 bytes @ 0x0
 10369                           
 10370  0070                     ?i1_MTOUCH_Sensor_isEnabled:	
 10371                           ; 1 bytes @ 0x0
 10372                           
 10373  0070                     ?i1_Sensor_isCalibrated:	
 10374                           ; 1 bytes @ 0x0
 10375                           
 10376  0070                     ??i1_Sensor_isCalibrated:	
 10377                           ; 1 bytes @ 0x0
 10378                           
 10379  0070                     ?i1_Sensor_isCalibratingAcqTime:	
 10380                           ; 1 bytes @ 0x0
 10381                           
 10382  0070                     ??i1_Sensor_isCalibratingAcqTime:	
 10383                           ; 1 bytes @ 0x0
 10384                           
 10385  0070                     ?i1_MTOUCH_Sensor_wasSampled:	
 10386                           ; 1 bytes @ 0x0
 10387                           
 10388  0070                     ?i1_DATAEE_ReadByte:	
 10389                           ; 1 bytes @ 0x0
 10390                           
 10391  0070                     ?i1_EUSART_Write:	
 10392                           ; 1 bytes @ 0x0
 10393                           
 10394  0070                     ??i1_EUSART_Write:	
 10395                           ; 1 bytes @ 0x0
 10396                           
 10397  0070                     ?i1___bmul:	
 10398                           ; 1 bytes @ 0x0
 10399                           
 10400  0070                     ?___awdiv:	
 10401                           ; 1 bytes @ 0x0
 10402                           
 10403  0070                     ?i1_abs:	
 10404                           ; 2 bytes @ 0x0
 10405                           
 10406  0070                     Sensor_setCalibrated@sensor:	
 10407                           ; 2 bytes @ 0x0
 10408                           
 10409  0070                     Sensor_setSampled@sensor:	
 10410                           ; 1 bytes @ 0x0
 10411                           
 10412  0070                     i1Sensor_SetTrisBit@TrisBit:	
 10413                           ; 1 bytes @ 0x0
 10414                           
 10415  0070                     i1Sensor_isCalibratingAcqTime@sensor:	
 10416                           ; 1 bytes @ 0x0
 10417                           
 10418  0070                     i1EUSART_Write@txData:	
 10419                           ; 1 bytes @ 0x0
 10420                           
 10421  0070                     i1___bmul@multiplicand:	
 10422                           ; 1 bytes @ 0x0
 10423                           
 10424  0070                     DATAEE_WriteByte@bAdd:	
 10425                           ; 1 bytes @ 0x0
 10426                           
 10427  0070                     ___awdiv@divisor:	
 10428                           ; 2 bytes @ 0x0
 10429                           
 10430  0070                     i1DATAEE_ReadByte@bAdd:	
 10431                           ; 2 bytes @ 0x0
 10432                           
 10433  0070                     i1abs@a:	
 10434                           ; 2 bytes @ 0x0
 10435                           
 10436                           
 10437                           ; 2 bytes @ 0x0
 10438  0070                     	ds	1
 10439  0071                     ??i1_Sensor_SetTrisBit:	
 10440  0071                     ??i1___bmul:	
 10441                           ; 1 bytes @ 0x1
 10442                           
 10443  0071                     Sensor_setCalibratAcqTime@sensor:	
 10444                           ; 1 bytes @ 0x1
 10445                           
 10446  0071                     i1Sensor_SetTrisBit@sensor:	
 10447                           ; 1 bytes @ 0x1
 10448                           
 10449  0071                     i1Sensor_isCalibrated@sensor:	
 10450                           ; 1 bytes @ 0x1
 10451                           
 10452                           
 10453                           ; 1 bytes @ 0x1
 10454  0071                     	ds	1
 10455  0072                     ??i1_DATAEE_ReadByte:	
 10456  0072                     ??i1_abs:	
 10457                           ; 1 bytes @ 0x2
 10458                           
 10459  0072                     DATAEE_WriteByte@bData:	
 10460                           ; 1 bytes @ 0x2
 10461                           
 10462  0072                     i1___bmul@multiplier:	
 10463                           ; 1 bytes @ 0x2
 10464                           
 10465  0072                     ___awdiv@dividend:	
 10466                           ; 1 bytes @ 0x2
 10467                           
 10468                           
 10469                           ; 2 bytes @ 0x2
 10470  0072                     	ds	1
 10471  0073                     ??_DATAEE_WriteByte:	
 10472  0073                     DATAEE_WriteByte@GIEBitValue:	
 10473                           ; 1 bytes @ 0x3
 10474                           
 10475  0073                     i1___bmul@product:	
 10476                           ; 1 bytes @ 0x3
 10477                           
 10478                           
 10479                           ; 1 bytes @ 0x3
 10480  0073                     	ds	1
 10481  0074                     ??_Sensor_autoCalibration:	
 10482  0074                     ??___awdiv:	
 10483                           ; 1 bytes @ 0x4
 10484                           
 10485  0074                     ??i1_MTOUCH_Sensor_isEnabled:	
 10486                           ; 1 bytes @ 0x4
 10487                           
 10488  0074                     ??i1_MTOUCH_Sensor_wasSampled:	
 10489                           ; 1 bytes @ 0x4
 10490                           
 10491                           
 10492                           ; 1 bytes @ 0x4
 10493  0074                     	ds	1
 10494  0075                     ___awdiv@counter:	
 10495  0075                     i1MTOUCH_Sensor_isEnabled@sensor:	
 10496                           ; 1 bytes @ 0x5
 10497                           
 10498  0075                     i1MTOUCH_Sensor_wasSampled@sensor:	
 10499                           ; 1 bytes @ 0x5
 10500                           
 10501                           
 10502                           ; 1 bytes @ 0x5
 10503  0075                     	ds	1
 10504  0076                     ??i1_Sensor_scheduleNextScan:	
 10505  0076                     ___awdiv@sign:	
 10506                           ; 1 bytes @ 0x6
 10507                           
 10508                           
 10509                           ; 1 bytes @ 0x6
 10510  0076                     	ds	1
 10511  0077                     ___awdiv@quotient:	
 10512                           
 10513                           ; 2 bytes @ 0x7
 10514  0077                     	ds	1
 10515  0078                     Sensor_autoCalibration@name:	
 10516  0078                     i1Sensor_scheduleNextScan@state:	
 10517                           ; 1 bytes @ 0x8
 10518                           
 10519                           
 10520                           ; 1 bytes @ 0x8
 10521  0078                     	ds	1
 10522  0079                     ?i1___awmod:	
 10523  0079                     Sensor_autoCalibration@sensor:	
 10524                           ; 2 bytes @ 0x9
 10525                           
 10526  0079                     i1Sensor_scheduleNextScan@skipScan:	
 10527                           ; 1 bytes @ 0x9
 10528                           
 10529  0079                     i1___awmod@divisor:	
 10530                           ; 1 bytes @ 0x9
 10531                           
 10532                           
 10533                           ; 2 bytes @ 0x9
 10534  0079                     	ds	1
 10535  007A                     i1Sensor_scheduleNextScan@sensor:	
 10536                           
 10537                           ; 1 bytes @ 0xA
 10538  007A                     	ds	1
 10539  007B                     ??_MTOUCH_Sensor_Service:	
 10540  007B                     i1___awmod@dividend:	
 10541                           ; 1 bytes @ 0xB
 10542                           
 10543                           
 10544                           ; 2 bytes @ 0xB
 10545  007B                     	ds	2
 10546  007D                     ??i1___awmod:	
 10547  007D                     MTOUCH_Sensor_Service@sensor:	
 10548                           ; 1 bytes @ 0xD
 10549                           
 10550                           
 10551                           ; 1 bytes @ 0xD
 10552  007D                     	ds	1
 10553  007E                     ??_ADCC_ThresholdISR_mTouch:	
 10554  007E                     ??_ADCC_ThresholdISR:	
 10555                           ; 1 bytes @ 0xE
 10556                           
 10557                           
 10558                           	psect	cstackBANK0
 10559  0020                     __pcstackBANK0:	
 10560                           ; 1 bytes @ 0xE
 10561                           
 10562  0020                     i1___awmod@counter:	
 10563                           
 10564                           ; 1 bytes @ 0x0
 10565  0020                     	ds	1
 10566  0021                     i1___awmod@sign:	
 10567                           
 10568                           ; 1 bytes @ 0x1
 10569  0021                     	ds	1
 10570  0022                     ??_decodeIRSignal:	
 10571                           
 10572                           ; 1 bytes @ 0x2
 10573  0022                     	ds	4
 10574  0026                     decodeIRSignal@address:	
 10575                           
 10576                           ; 1 bytes @ 0x6
 10577  0026                     	ds	1
 10578  0027                     decodeIRSignal@command:	
 10579                           
 10580                           ; 1 bytes @ 0x7
 10581  0027                     	ds	1
 10582  0028                     decodeIRSignal@i:	
 10583                           
 10584                           ; 1 bytes @ 0x8
 10585  0028                     	ds	1
 10586  0029                     ??_INTERRUPT_InterruptManager:	
 10587                           
 10588                           ; 1 bytes @ 0x9
 10589  0029                     	ds	1
 10590  002A                     ??_MTOUCH_needReburst:	
 10591  002A                     ?_Button_DefaultCallback:	
 10592                           ; 1 bytes @ 0xA
 10593                           
 10594  002A                     ?_Button_Deviation_Update:	
 10595                           ; 1 bytes @ 0xA
 10596                           
 10597  002A                     ?_Button_Baseline_Update:	
 10598                           ; 1 bytes @ 0xA
 10599                           
 10600  002A                     ?_Sensor_DefaultCallback:	
 10601                           ; 1 bytes @ 0xA
 10602                           
 10603  002A                     ??_Sensor_Sampled_Reset:	
 10604                           ; 1 bytes @ 0xA
 10605                           
 10606  002A                     ?_ADCC_SetADTIInterruptHandler:	
 10607                           ; 1 bytes @ 0xA
 10608                           
 10609  002A                     ??_MTOUCH_Sensor_isSampling:	
 10610                           ; 1 bytes @ 0xA
 10611                           
 10612  002A                     ??_Sensor_isCalibrated:	
 10613                           ; 1 bytes @ 0xA
 10614                           
 10615  002A                     ??_Sensor_isCalibratingAcqTime:	
 10616                           ; 1 bytes @ 0xA
 10617                           
 10618  002A                     ??_PMD_Initialize:	
 10619                           ; 1 bytes @ 0xA
 10620                           
 10621  002A                     ??_OSCILLATOR_Initialize:	
 10622                           ; 1 bytes @ 0xA
 10623                           
 10624  002A                     ?_EUSART_SetFramingErrorHandler:	
 10625                           ; 1 bytes @ 0xA
 10626                           
 10627  002A                     ?_EUSART_SetOverrunErrorHandler:	
 10628                           ; 1 bytes @ 0xA
 10629                           
 10630  002A                     ?_EUSART_SetErrorHandler:	
 10631                           ; 1 bytes @ 0xA
 10632                           
 10633  002A                     ?_Sensor_SetTrisBit:	
 10634                           ; 1 bytes @ 0xA
 10635                           
 10636  002A                     ??_Sensor_setSamplePeriod:	
 10637                           ; 1 bytes @ 0xA
 10638                           
 10639  002A                     ??_PIN_MANAGER_Initialize:	
 10640                           ; 1 bytes @ 0xA
 10641                           
 10642  002A                     ?_DATAEE_ReadByte:	
 10643                           ; 1 bytes @ 0xA
 10644                           
 10645  002A                     ??_InitExternal_INT:	
 10646                           ; 1 bytes @ 0xA
 10647                           
 10648  002A                     ??_EUSART_is_rx_ready:	
 10649                           ; 1 bytes @ 0xA
 10650                           
 10651  002A                     ??_EUSART_Read:	
 10652                           ; 1 bytes @ 0xA
 10653                           
 10654  002A                     ??_EUSART_Write:	
 10655                           ; 1 bytes @ 0xA
 10656                           
 10657  002A                     ??_uartLight:	
 10658                           ; 1 bytes @ 0xA
 10659                           
 10660  002A                     ?_handleFanToggleU:	
 10661                           ; 1 bytes @ 0xA
 10662                           
 10663  002A                     ??_handleFanToggleU:	
 10664                           ; 1 bytes @ 0xA
 10665                           
 10666  002A                     ?___bmul:	
 10667                           ; 1 bytes @ 0xA
 10668                           
 10669  002A                     ?___wmul:	
 10670                           ; 1 bytes @ 0xA
 10671                           
 10672  002A                     ?___awmod:	
 10673                           ; 2 bytes @ 0xA
 10674                           
 10675  002A                     MTOUCH_needReburst@needReburst:	
 10676                           ; 2 bytes @ 0xA
 10677                           
 10678  002A                     Button_DefaultCallback@button:	
 10679                           ; 1 bytes @ 0xA
 10680                           
 10681  002A                     Sensor_SetTrisBit@TrisBit:	
 10682                           ; 1 bytes @ 0xA
 10683                           
 10684  002A                     Sensor_DefaultCallback@sensor:	
 10685                           ; 1 bytes @ 0xA
 10686                           
 10687  002A                     Sensor_isCalibratingAcqTime@sensor:	
 10688                           ; 1 bytes @ 0xA
 10689                           
 10690  002A                     Sensor_Sampled_Reset@sensor:	
 10691                           ; 1 bytes @ 0xA
 10692                           
 10693  002A                     EUSART_Write@txData:	
 10694                           ; 1 bytes @ 0xA
 10695                           
 10696  002A                     uartLight@received:	
 10697                           ; 1 bytes @ 0xA
 10698                           
 10699  002A                     ___bmul@multiplicand:	
 10700                           ; 1 bytes @ 0xA
 10701                           
 10702  002A                     Button_Deviation_Update@button:	
 10703                           ; 1 bytes @ 0xA
 10704                           
 10705  002A                     Button_Baseline_Update@button:	
 10706                           ; 2 bytes @ 0xA
 10707                           
 10708  002A                     DATAEE_ReadByte@bAdd:	
 10709                           ; 2 bytes @ 0xA
 10710                           
 10711  002A                     ADCC_SetADTIInterruptHandler@InterruptHandler:	
 10712                           ; 2 bytes @ 0xA
 10713                           
 10714  002A                     EUSART_SetFramingErrorHandler@interruptHandler:	
 10715                           ; 2 bytes @ 0xA
 10716                           
 10717  002A                     EUSART_SetOverrunErrorHandler@interruptHandler:	
 10718                           ; 2 bytes @ 0xA
 10719                           
 10720  002A                     EUSART_SetErrorHandler@interruptHandler:	
 10721                           ; 2 bytes @ 0xA
 10722                           
 10723  002A                     ___wmul@multiplier:	
 10724                           ; 2 bytes @ 0xA
 10725                           
 10726  002A                     ___awmod@divisor:	
 10727                           ; 2 bytes @ 0xA
 10728                           
 10729                           
 10730                           ; 2 bytes @ 0xA
 10731  002A                     	ds	1
 10732  002B                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
 10733  002B                     ??_Button_DefaultCallback:	
 10734                           ; 1 bytes @ 0xB
 10735                           
 10736  002B                     ??_Sensor_DefaultCallback:	
 10737                           ; 1 bytes @ 0xB
 10738                           
 10739  002B                     ??_handleFanToggle:	
 10740                           ; 1 bytes @ 0xB
 10741                           
 10742  002B                     ?_handleFanSpeedChange:	
 10743                           ; 1 bytes @ 0xB
 10744                           
 10745  002B                     ??_OnHold:	
 10746                           ; 1 bytes @ 0xB
 10747                           
 10748  002B                     ??_Sensor_SetTrisBit:	
 10749                           ; 1 bytes @ 0xB
 10750                           
 10751  002B                     ??___bmul:	
 10752                           ; 1 bytes @ 0xB
 10753                           
 10754  002B                     Sensor_SetTrisBit@sensor:	
 10755                           ; 1 bytes @ 0xB
 10756                           
 10757  002B                     Sensor_isCalibrated@sensor:	
 10758                           ; 1 bytes @ 0xB
 10759                           
 10760  002B                     handleFanSpeedChange@direction:	
 10761                           ; 1 bytes @ 0xB
 10762                           
 10763                           
 10764                           ; 1 bytes @ 0xB
 10765  002B                     	ds	1
 10766  002C                     ??_MTOUCH_Sensor_Scan_Initialize:	
 10767  002C                     ??_Button_Deviation_Update:	
 10768                           ; 1 bytes @ 0xC
 10769                           
 10770  002C                     ??_Button_Baseline_Update:	
 10771                           ; 1 bytes @ 0xC
 10772                           
 10773  002C                     ??_ADCC_SetADTIInterruptHandler:	
 10774                           ; 1 bytes @ 0xC
 10775                           
 10776  002C                     ??_EUSART_Initialize:	
 10777                           ; 1 bytes @ 0xC
 10778                           
 10779  002C                     ??_EUSART_SetFramingErrorHandler:	
 10780                           ; 1 bytes @ 0xC
 10781                           
 10782  002C                     ??_EUSART_SetOverrunErrorHandler:	
 10783                           ; 1 bytes @ 0xC
 10784                           
 10785  002C                     ??_EUSART_SetErrorHandler:	
 10786                           ; 1 bytes @ 0xC
 10787                           
 10788  002C                     ??_handleFanSpeedChange:	
 10789                           ; 1 bytes @ 0xC
 10790                           
 10791  002C                     ??_MTOUCH_Sensor_ADCC_Initialize:	
 10792                           ; 1 bytes @ 0xC
 10793                           
 10794  002C                     ??_DATAEE_ReadByte:	
 10795                           ; 1 bytes @ 0xC
 10796                           
 10797  002C                     ??_ADCC_Initialize:	
 10798                           ; 1 bytes @ 0xC
 10799                           
 10800  002C                     MTOUCH_Sensor_Scan_Initialize@state:	
 10801                           ; 1 bytes @ 0xC
 10802                           
 10803  002C                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
 10804                           ; 1 bytes @ 0xC
 10805                           
 10806  002C                     handleFanSpeedChange@fan:	
 10807                           ; 1 bytes @ 0xC
 10808                           
 10809  002C                     ___bmul@product:	
 10810                           ; 1 bytes @ 0xC
 10811                           
 10812  002C                     _handleFanToggleU$2059:	
 10813                           ; 1 bytes @ 0xC
 10814                           
 10815  002C                     ___wmul@multiplicand:	
 10816                           ; 2 bytes @ 0xC
 10817                           
 10818  002C                     ___awmod@dividend:	
 10819                           ; 2 bytes @ 0xC
 10820                           
 10821                           
 10822                           ; 2 bytes @ 0xC
 10823  002C                     	ds	1
 10824  002D                     OnHold@touch:	
 10825  002D                     ___bmul@multiplier:	
 10826                           ; 1 bytes @ 0xD
 10827                           
 10828  002D                     _handleFanToggle$2042:	
 10829                           ; 1 bytes @ 0xD
 10830                           
 10831                           
 10832                           ; 2 bytes @ 0xD
 10833  002D                     	ds	1
 10834  002E                     ??_MTOUCH_Sensor_Calibrate:	
 10835  002E                     ??_MTOUCH_Sensor_wasSampled:	
 10836                           ; 1 bytes @ 0xE
 10837                           
 10838  002E                     ??_MTOUCH_Sensor_isCalibrated:	
 10839                           ; 1 bytes @ 0xE
 10840                           
 10841  002E                     ??_MTOUCH_Sensor_Enable:	
 10842                           ; 1 bytes @ 0xE
 10843                           
 10844  002E                     ??_MTOUCH_Sensor_isEnabled:	
 10845                           ; 1 bytes @ 0xE
 10846                           
 10847  002E                     ??_syncFanToggleState:	
 10848                           ; 1 bytes @ 0xE
 10849                           
 10850  002E                     ?_setLightState:	
 10851                           ; 1 bytes @ 0xE
 10852                           
 10853  002E                     ??___wmul:	
 10854                           ; 1 bytes @ 0xE
 10855                           
 10856  002E                     ??___awmod:	
 10857                           ; 1 bytes @ 0xE
 10858                           
 10859  002E                     ?_MTOUCH_Sensor_RawSample_Get:	
 10860                           ; 1 bytes @ 0xE
 10861                           
 10862  002E                     ?_abs:	
 10863                           ; 2 bytes @ 0xE
 10864                           
 10865  002E                     ?_medianFilter:	
 10866                           ; 2 bytes @ 0xE
 10867                           
 10868  002E                     setLightState@state:	
 10869                           ; 2 bytes @ 0xE
 10870                           
 10871  002E                     handleFanToggleU@index:	
 10872                           ; 1 bytes @ 0xE
 10873                           
 10874  002E                     ___wmul@product:	
 10875                           ; 1 bytes @ 0xE
 10876                           
 10877  002E                     abs@a:	
 10878                           ; 2 bytes @ 0xE
 10879                           
 10880                           
 10881                           ; 2 bytes @ 0xE
 10882  002E                     	ds	1
 10883  002F                     ??_setLightState:	
 10884  002F                     MTOUCH_Sensor_Enable@sensor:	
 10885                           ; 1 bytes @ 0xF
 10886                           
 10887  002F                     MTOUCH_Sensor_isEnabled@sensor:	
 10888                           ; 1 bytes @ 0xF
 10889                           
 10890  002F                     MTOUCH_Sensor_Calibrate@sensor:	
 10891                           ; 1 bytes @ 0xF
 10892                           
 10893  002F                     MTOUCH_Sensor_wasSampled@sensor:	
 10894                           ; 1 bytes @ 0xF
 10895                           
 10896  002F                     setLightState@touchID:	
 10897                           ; 1 bytes @ 0xF
 10898                           
 10899  002F                     handleFanToggle@index:	
 10900                           ; 1 bytes @ 0xF
 10901                           
 10902  002F                     handleFanToggleU@fan:	
 10903                           ; 1 bytes @ 0xF
 10904                           
 10905  002F                     ___awmod@counter:	
 10906                           ; 1 bytes @ 0xF
 10907                           
 10908                           
 10909                           ; 1 bytes @ 0xF
 10910  002F                     	ds	1
 10911  0030                     ??_MTOUCH_Button_isPressed:	
 10912  0030                     ?_Button_Tick_helper:	
 10913                           ; 1 bytes @ 0x10
 10914                           
 10915  0030                     ??_MTOUCH_Sensor_RawSample_Get:	
 10916                           ; 1 bytes @ 0x10
 10917                           
 10918  0030                     ??_Sensor_scheduleNextScan:	
 10919                           ; 1 bytes @ 0x10
 10920                           
 10921  0030                     ??_abs:	
 10922                           ; 1 bytes @ 0x10
 10923                           
 10924  0030                     ??_medianFilter:	
 10925                           ; 1 bytes @ 0x10
 10926                           
 10927  0030                     ?_handleFanToggle:	
 10928                           ; 1 bytes @ 0x10
 10929                           
 10930  0030                     ??_MTOUCH_Button_Initialize:	
 10931                           ; 1 bytes @ 0x10
 10932                           
 10933  0030                     ??_MTOUCH_Sensor_Initialize:	
 10934                           ; 1 bytes @ 0x10
 10935                           
 10936  0030                     ??_updateLight:	
 10937                           ; 1 bytes @ 0x10
 10938                           
 10939  0030                     MTOUCH_Sensor_isCalibrated@sensor:	
 10940                           ; 1 bytes @ 0x10
 10941                           
 10942  0030                     handleFanToggle@fan:	
 10943                           ; 1 bytes @ 0x10
 10944                           
 10945  0030                     syncFanToggleState@ft:	
 10946                           ; 1 bytes @ 0x10
 10947                           
 10948  0030                     ___awmod@sign:	
 10949                           ; 1 bytes @ 0x10
 10950                           
 10951  0030                     Button_Tick_helper@button:	
 10952                           ; 1 bytes @ 0x10
 10953                           
 10954                           
 10955                           ; 2 bytes @ 0x10
 10956  0030                     	ds	1
 10957  0031                     MTOUCH_Sensor_Initialize@sensor:	
 10958  0031                     MTOUCH_Sensor_RawSample_Get@name:	
 10959                           ; 1 bytes @ 0x11
 10960                           
 10961  0031                     syncFanToggleState@i:	
 10962                           ; 1 bytes @ 0x11
 10963                           
 10964                           
 10965                           ; 1 bytes @ 0x11
 10966  0031                     	ds	1
 10967  0032                     ??_MTOUCH_Sensor_InitializeAll:	
 10968  0032                     ?_Button_Baseline_Initialize:	
 10969                           ; 1 bytes @ 0x12
 10970                           
 10971  0032                     ??_Button_Tick_helper:	
 10972                           ; 1 bytes @ 0x12
 10973                           
 10974  0032                     ?_Button_Reading_Update_Helper:	
 10975                           ; 1 bytes @ 0x12
 10976                           
 10977  0032                     ??_Sensor_FrequencyHopping_Autotune_Process:	
 10978                           ; 1 bytes @ 0x12
 10979                           
 10980  0032                     ?_processFanSpeedControlU:	
 10981                           ; 1 bytes @ 0x12
 10982                           
 10983  0032                     Sensor_scheduleNextScan@state:	
 10984                           ; 1 bytes @ 0x12
 10985                           
 10986  0032                     processFanSpeedControlU@index:	
 10987                           ; 1 bytes @ 0x12
 10988                           
 10989  0032                     Button_Reading_Update_Helper@button:	
 10990                           ; 1 bytes @ 0x12
 10991                           
 10992  0032                     Button_Baseline_Initialize@button:	
 10993                           ; 2 bytes @ 0x12
 10994                           
 10995                           
 10996                           ; 2 bytes @ 0x12
 10997  0032                     	ds	1
 10998  0033                     ??_processFanSpeedControlU:	
 10999  0033                     MTOUCH_Sensor_InitializeAll@sensor:	
 11000                           ; 1 bytes @ 0x13
 11001                           
 11002  0033                     Sensor_scheduleNextScan@skipScan:	
 11003                           ; 1 bytes @ 0x13
 11004                           
 11005  0033                     updateLight@i:	
 11006                           ; 1 bytes @ 0x13
 11007                           
 11008                           
 11009                           ; 1 bytes @ 0x13
 11010  0033                     	ds	1
 11011  0034                     ??_MTOUCH_Button_Tick:	
 11012  0034                     ??_Button_Baseline_Initialize:	
 11013                           ; 1 bytes @ 0x14
 11014                           
 11015  0034                     ??_Button_Reading_Update_Helper:	
 11016                           ; 1 bytes @ 0x14
 11017                           
 11018  0034                     ?_processToggle:	
 11019                           ; 1 bytes @ 0x14
 11020                           
 11021  0034                     MTOUCH_Button_Initialize@name:	
 11022                           ; 1 bytes @ 0x14
 11023                           
 11024  0034                     Sensor_scheduleNextScan@sensor:	
 11025                           ; 1 bytes @ 0x14
 11026                           
 11027  0034                     processToggle@index:	
 11028                           ; 1 bytes @ 0x14
 11029                           
 11030                           
 11031                           ; 1 bytes @ 0x14
 11032  0034                     	ds	1
 11033  0035                     ??_processToggle:	
 11034  0035                     ??_MTOUCH_Sensor_isSamplingComplete:	
 11035                           ; 1 bytes @ 0x15
 11036                           
 11037  0035                     MTOUCH_Button_Initialize@button:	
 11038                           ; 1 bytes @ 0x15
 11039                           
 11040                           
 11041                           ; 2 bytes @ 0x15
 11042  0035                     	ds	1
 11043  0036                     ?_Button_Reading_Update:	
 11044  0036                     MTOUCH_Button_isPressed@name:	
 11045                           ; 1 bytes @ 0x16
 11046                           
 11047  0036                     MTOUCH_Sensor_isSamplingComplete@sensor:	
 11048                           ; 1 bytes @ 0x16
 11049                           
 11050  0036                     medianFilter@sensor:	
 11051                           ; 1 bytes @ 0x16
 11052                           
 11053  0036                     processFanSpeedControlU@fc:	
 11054                           ; 1 bytes @ 0x16
 11055                           
 11056  0036                     Button_Reading_Update@button:	
 11057                           ; 1 bytes @ 0x16
 11058                           
 11059  0036                     Button_Deviation_Update@deviation:	
 11060                           ; 2 bytes @ 0x16
 11061                           
 11062                           
 11063                           ; 4 bytes @ 0x16
 11064  0036                     	ds	1
 11065  0037                     ??_MTOUCH_Button_InitializeAll:	
 11066  0037                     ??_Sensor_RawSample_Update:	
 11067                           ; 1 bytes @ 0x17
 11068                           
 11069  0037                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:	
 11070                           ; 1 bytes @ 0x17
 11071                           
 11072  0037                     processFanSpeedControlU@fan:	
 11073                           ; 1 bytes @ 0x17
 11074                           
 11075  0037                     Sensor_RawSample_Update@result:	
 11076                           ; 1 bytes @ 0x17
 11077                           
 11078  0037                     _processToggle$2288:	
 11079                           ; 2 bytes @ 0x17
 11080                           
 11081                           
 11082                           ; 2 bytes @ 0x17
 11083  0037                     	ds	1
 11084  0038                     ?_Button_State_Initializing:	
 11085  0038                     ?_Button_State_NotPressed:	
 11086                           ; 1 bytes @ 0x18
 11087                           
 11088  0038                     ?_Button_State_Pressed:	
 11089                           ; 1 bytes @ 0x18
 11090                           
 11091  0038                     ??_Button_Reading_Update:	
 11092                           ; 1 bytes @ 0x18
 11093                           
 11094  0038                     ??_handleUARTCommands:	
 11095                           ; 1 bytes @ 0x18
 11096                           
 11097  0038                     MTOUCH_Button_InitializeAll@button:	
 11098                           ; 1 bytes @ 0x18
 11099                           
 11100  0038                     MTOUCH_Button_Tick@i:	
 11101                           ; 1 bytes @ 0x18
 11102                           
 11103  0038                     Button_State_Initializing@button:	
 11104                           ; 1 bytes @ 0x18
 11105                           
 11106  0038                     Button_State_NotPressed@button:	
 11107                           ; 2 bytes @ 0x18
 11108                           
 11109  0038                     Button_State_Pressed@button:	
 11110                           ; 2 bytes @ 0x18
 11111                           
 11112  0038                     Sensor_FrequencyHopping_Autotune_Process@variance:	
 11113                           ; 2 bytes @ 0x18
 11114                           
 11115                           
 11116                           ; 2 bytes @ 0x18
 11117  0038                     	ds	1
 11118  0039                     ??_MTOUCH_Tick:	
 11119  0039                     ??_MTOUCH_Initialize:	
 11120                           ; 1 bytes @ 0x19
 11121                           
 11122  0039                     ??_SYSTEM_Initialize:	
 11123                           ; 1 bytes @ 0x19
 11124                           
 11125  0039                     Sensor_RawSample_Update@sensor:	
 11126                           ; 1 bytes @ 0x19
 11127                           
 11128  0039                     processToggle@ctrl:	
 11129                           ; 1 bytes @ 0x19
 11130                           
 11131                           
 11132                           ; 1 bytes @ 0x19
 11133  0039                     	ds	1
 11134  003A                     ??_Button_State_Initializing:	
 11135  003A                     ??_Button_State_NotPressed:	
 11136                           ; 1 bytes @ 0x1A
 11137                           
 11138  003A                     ??_Button_State_Pressed:	
 11139                           ; 1 bytes @ 0x1A
 11140                           
 11141  003A                     ??_MTOUCH_Sensor_postAcquisitionProcess:	
 11142                           ; 1 bytes @ 0x1A
 11143                           
 11144  003A                     ??_handleGeneralTouchControls:	
 11145                           ; 1 bytes @ 0x1A
 11146                           
 11147  003A                     ??_ir_handler:	
 11148                           ; 1 bytes @ 0x1A
 11149                           
 11150  003A                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:	
 11151                           ; 1 bytes @ 0x1A
 11152                           
 11153                           
 11154                           ; 2 bytes @ 0x1A
 11155  003A                     	ds	1
 11156  003B                     MTOUCH_Sensor_postAcquisitionProcess@name:	
 11157  003B                     handleUARTCommands@index:	
 11158                           ; 1 bytes @ 0x1B
 11159                           
 11160                           
 11161                           ; 1 bytes @ 0x1B
 11162  003B                     	ds	1
 11163  003C                     Sensor_FrequencyHopping_Autotune_Process@sensor:	
 11164  003C                     ir_handler@ctrl:	
 11165                           ; 1 bytes @ 0x1C
 11166                           
 11167  003C                     handleGeneralTouchControls@ctrl:	
 11168                           ; 1 bytes @ 0x1C
 11169                           
 11170  003C                     handleUARTCommands@index_2479:	
 11171                           ; 1 bytes @ 0x1C
 11172                           
 11173                           
 11174                           ; 1 bytes @ 0x1C
 11175  003C                     	ds	1
 11176  003D                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:	
 11177  003D                     ir_handler@i:	
 11178                           ; 1 bytes @ 0x1D
 11179                           
 11180  003D                     handleGeneralTouchControls@i:	
 11181                           ; 1 bytes @ 0x1D
 11182                           
 11183  003D                     _handleUARTCommands$3294:	
 11184                           ; 1 bytes @ 0x1D
 11185                           
 11186                           
 11187                           ; 1 bytes @ 0x1D
 11188  003D                     	ds	1
 11189  003E                     ??_Button_Service:	
 11190  003E                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:	
 11191                           ; 1 bytes @ 0x1E
 11192                           
 11193  003E                     ir_handler@k:	
 11194                           ; 1 bytes @ 0x1E
 11195                           
 11196  003E                     handleUARTCommands@received:	
 11197                           ; 1 bytes @ 0x1E
 11198                           
 11199                           
 11200                           ; 1 bytes @ 0x1E
 11201  003E                     	ds	1
 11202  003F                     ??_MTOUCH_Sensor_SampleAll:	
 11203  003F                     ??_Sensor_FrequencyHopping:	
 11204                           ; 1 bytes @ 0x1F
 11205                           
 11206  003F                     handleUARTCommands@i:	
 11207                           ; 1 bytes @ 0x1F
 11208                           
 11209                           
 11210                           ; 1 bytes @ 0x1F
 11211  003F                     	ds	3
 11212  0042                     Button_Service@name:	
 11213                           
 11214                           ; 1 bytes @ 0x22
 11215  0042                     	ds	1
 11216  0043                     Button_Service@button:	
 11217                           
 11218                           ; 2 bytes @ 0x23
 11219  0043                     	ds	2
 11220  0045                     ??_MTOUCH_Button_ServiceAll:	
 11221                           
 11222                           ; 1 bytes @ 0x25
 11223  0045                     	ds	1
 11224  0046                     MTOUCH_Button_ServiceAll@button:	
 11225                           
 11226                           ; 1 bytes @ 0x26
 11227  0046                     	ds	1
 11228  0047                     ??_MTOUCH_Service_Mainloop:	
 11229                           
 11230                           ; 1 bytes @ 0x27
 11231  0047                     	ds	1
 11232  0048                     MTOUCH_Service_Mainloop@mask:	
 11233                           
 11234                           ; 1 bytes @ 0x28
 11235  0048                     	ds	1
 11236  0049                     ??_main:	
 11237                           
 11238                           ; 1 bytes @ 0x29
 11239  0049                     	ds	2
 11240                           
 11241                           	psect	maintext
 11242  0BCC                     __pmaintext:	
 11243 ;;
 11244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
 11245 ;;
 11246 ;; *************** function _main *****************
 11247 ;; Defined at:
 11248 ;;		line 15 in file "main.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  touchDetecte    1    0[BANK1 ] unsigned char 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      void 
 11255 ;; Registers used:
 11256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : B1F/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        3 bytes
 11267 ;; Hardware stack levels required when called:   14
 11268 ;; This function calls:
 11269 ;;		_DATAEE_ReadByte
 11270 ;;		_EUSART_Write
 11271 ;;		_InitExternal_INT
 11272 ;;		_MTOUCH_Button_isPressed
 11273 ;;		_MTOUCH_Service_Mainloop
 11274 ;;		_OnHold
 11275 ;;		_SYSTEM_Initialize
 11276 ;;		_handleGeneralTouchControls
 11277 ;;		_handleUARTCommands
 11278 ;;		_ir_handler
 11279 ;; This function is called by:
 11280 ;;		Startup code after reset
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           
 11285                           ;psect for function _main
 11286  0BCC                     _main:	
 11287                           
 11288                           ;main.c: 17: SYSTEM_Initialize();
 11289                           
 11290                           ;incstack = 0
 11291                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11292  0BCC  3191  21C0  318B   	fcall	_SYSTEM_Initialize
 11293                           
 11294                           ;main.c: 18: (INTCONbits.GIE = 1);
 11295  0BCF  178B               	bsf	11,7	;volatile
 11296                           
 11297                           ;main.c: 19: (INTCONbits.PEIE = 1);
 11298  0BD0  170B               	bsf	11,6	;volatile
 11299                           
 11300                           ;main.c: 21: InitExternal_INT();
 11301  0BD1  319F  27E6  318B   	fcall	_InitExternal_INT
 11302                           
 11303                           ;main.c: 31: d1 = DATAEE_ReadByte(0x00);
 11304  0BD4  3000               	movlw	0
 11305  0BD5  0020               	movlb	0	; select bank0
 11306  0BD6  00AA               	movwf	DATAEE_ReadByte@bAdd
 11307  0BD7  00AB               	movwf	DATAEE_ReadByte@bAdd+1
 11308  0BD8  3191  214E  318B   	fcall	_DATAEE_ReadByte
 11309  0BDB  0020               	movlb	0	; select bank0
 11310  0BDC  00C9               	movwf	??_main
 11311  0BDD  01CA               	clrf	??_main+1
 11312  0BDE  0849               	movf	??_main,w
 11313  0BDF  0021               	movlb	1	; select bank1
 11314  0BE0  00BD               	movwf	_d1^(0+128)
 11315  0BE1  0020               	movlb	0	; select bank0
 11316  0BE2  084A               	movf	??_main+1,w
 11317  0BE3  0021               	movlb	1	; select bank1
 11318  0BE4  00BE               	movwf	(_d1+1)^(0+128)
 11319                           
 11320                           ;main.c: 32: _delay((unsigned long)((650)*(32000000/4000.0)));
 11321  0BE5  301B               	movlw	27
 11322  0BE6  0020               	movlb	0	; select bank0
 11323  0BE7  00CA               	movwf	??_main+1
 11324  0BE8  3062               	movlw	98
 11325  0BE9  00C9               	movwf	??_main
 11326  0BEA  302B               	movlw	43
 11327  0BEB                     u9237:	
 11328  0BEB  0B89               	decfsz	9,f
 11329  0BEC  2BEB               	goto	u9237
 11330  0BED  0BC9               	decfsz	??_main,f
 11331  0BEE  2BEB               	goto	u9237
 11332  0BEF  0BCA               	decfsz	??_main+1,f
 11333  0BF0  2BEB               	goto	u9237
 11334                           
 11335                           ;main.c: 33: d2 = DATAEE_ReadByte(0x01);
 11336  0BF1  3001               	movlw	1
 11337  0BF2  0020               	movlb	0	; select bank0
 11338  0BF3  00AA               	movwf	DATAEE_ReadByte@bAdd
 11339  0BF4  3000               	movlw	0
 11340  0BF5  00AB               	movwf	DATAEE_ReadByte@bAdd+1
 11341  0BF6  3191  214E  318B   	fcall	_DATAEE_ReadByte
 11342  0BF9  0020               	movlb	0	; select bank0
 11343  0BFA  00C9               	movwf	??_main
 11344  0BFB  01CA               	clrf	??_main+1
 11345  0BFC  0849               	movf	??_main,w
 11346  0BFD  0021               	movlb	1	; select bank1
 11347  0BFE  00BB               	movwf	_d2^(0+128)
 11348  0BFF  0020               	movlb	0	; select bank0
 11349  0C00  084A               	movf	??_main+1,w
 11350  0C01  0021               	movlb	1	; select bank1
 11351  0C02  00BC               	movwf	(_d2+1)^(0+128)
 11352                           
 11353                           ;main.c: 34: _delay((unsigned long)((650)*(32000000/4000.0)));
 11354  0C03  301B               	movlw	27
 11355  0C04  0020               	movlb	0	; select bank0
 11356  0C05  00CA               	movwf	??_main+1
 11357  0C06  3062               	movlw	98
 11358  0C07  00C9               	movwf	??_main
 11359  0C08  302B               	movlw	43
 11360  0C09                     u9247:	
 11361  0C09  0B89               	decfsz	9,f
 11362  0C0A  2C09               	goto	u9247
 11363  0C0B  0BC9               	decfsz	??_main,f
 11364  0C0C  2C09               	goto	u9247
 11365  0C0D  0BCA               	decfsz	??_main+1,f
 11366  0C0E  2C09               	goto	u9247
 11367  0C0F                     l8183:	
 11368                           ;main.c: 36: while (1) {
 11369                           
 11370                           
 11371                           ;main.c: 38: MTOUCH_Service_Mainloop();
 11372  0C0F  3194  24CC  318B   	fcall	_MTOUCH_Service_Mainloop
 11373                           
 11374                           ;main.c: 39: bool touchDetected = MTOUCH_Button_isPressed(ALLOFF);
 11375  0C12  3004               	movlw	4
 11376  0C13  3195  25AC  318B   	fcall	_MTOUCH_Button_isPressed
 11377  0C16  0020               	movlb	0	; select bank0
 11378  0C17  00C9               	movwf	??_main
 11379  0C18  0849               	movf	??_main,w
 11380  0C19  0021               	movlb	1	; select bank1
 11381  0C1A  00EF               	movwf	main@touchDetected^(0+128)
 11382                           
 11383                           ;main.c: 40: OnHold(touchDetected);
 11384  0C1B  086F               	movf	main@touchDetected^(0+128),w
 11385  0C1C  3189  2122  318B   	fcall	_OnHold
 11386                           
 11387                           ;main.c: 42: if (touchDetected)
 11388  0C1F  0021               	movlb	1	; select bank1
 11389  0C20  086F               	movf	main@touchDetected^(0+128),w
 11390  0C21  1903               	btfsc	3,2
 11391  0C22  2C25               	goto	l8193
 11392                           
 11393                           ;main.c: 43: {
 11394                           ;main.c: 44: touchEdgeDetected = 1;
 11395  0C23  01DB               	clrf	_touchEdgeDetected^(0+128)
 11396  0C24  0ADB               	incf	_touchEdgeDetected^(0+128),f
 11397  0C25                     l8193:	
 11398                           
 11399                           ;main.c: 45: }
 11400                           ;main.c: 46: if (touchEdgeDetected == 1 && !touchDetected)
 11401  0C25  035B               	decf	_touchEdgeDetected^(0+128),w
 11402  0C26  1D03               	btfss	3,2
 11403  0C27  2C47               	goto	l8215
 11404  0C28  086F               	movf	main@touchDetected^(0+128),w
 11405  0C29  1D03               	btfss	3,2
 11406  0C2A  2C47               	goto	l8215
 11407                           
 11408                           ;main.c: 47: {
 11409                           ;main.c: 48: touchEdgeDetected = 0;
 11410  0C2B  01DB               	clrf	_touchEdgeDetected^(0+128)
 11411                           
 11412                           ;main.c: 49: mainToggleState = !mainToggleState;
 11413  0C2C  0020               	movlb	0	; select bank0
 11414  0C2D  0859               	movf	_mainToggleState,w
 11415  0C2E  1D03               	btfss	3,2
 11416  0C2F  2C32               	goto	u9110
 11417  0C30  3001               	movlw	1
 11418  0C31  2C33               	goto	u9120
 11419  0C32                     u9110:	
 11420  0C32  3000               	movlw	0
 11421  0C33                     u9120:	
 11422  0C33  00C9               	movwf	??_main
 11423  0C34  0849               	movf	??_main,w
 11424  0C35  00D9               	movwf	_mainToggleState
 11425                           
 11426                           ;main.c: 51: if (mainToggleState == 1)
 11427  0C36  0359               	decf	_mainToggleState,w
 11428  0C37  1D03               	btfss	3,2
 11429  0C38  2C3E               	goto	l8205
 11430                           
 11431                           ;main.c: 52: {
 11432                           ;main.c: 53: EUSART_Write('y');
 11433  0C39  3079               	movlw	121
 11434  0C3A  3190  20BB  318B   	fcall	_EUSART_Write
 11435                           
 11436                           ;main.c: 54: } else
 11437  0C3D  2C47               	goto	l8215
 11438  0C3E                     l8205:	
 11439                           
 11440                           ;main.c: 55: {
 11441                           ;main.c: 56: EUSART_Write('z');
 11442  0C3E  307A               	movlw	122
 11443  0C3F  3190  20BB  318B   	fcall	_EUSART_Write
 11444                           
 11445                           ;main.c: 57: do { LATCbits.LATC0 = 0; } while(0); do { LATCbits.LATC1 = 0; } while(0); d
      +                          o { LATCbits.LATC2 = 0; } while(0); do { LATCbits.LATC3 = 0; } while(0);
 11446  0C42  0020               	movlb	0	; select bank0
 11447  0C43  1018               	bcf	24,0	;volatile
 11448  0C44  1098               	bcf	24,1	;volatile
 11449  0C45  1118               	bcf	24,2	;volatile
 11450  0C46  1198               	bcf	24,3	;volatile
 11451  0C47                     l8215:	
 11452                           
 11453                           ;main.c: 61: }
 11454                           ;main.c: 62: }
 11455                           ;main.c: 64: handleUARTCommands();
 11456  0C47  3185  2551  318B   	fcall	_handleUARTCommands
 11457                           
 11458                           ;main.c: 66: if (wipeTriggerFlag == 1)
 11459  0C4A  0021               	movlb	1	; select bank1
 11460  0C4B  0362               	decf	_wipeTriggerFlag^(0+128),w
 11461  0C4C  1D03               	btfss	3,2
 11462  0C4D  2C52               	goto	l8221
 11463                           
 11464                           ;main.c: 67: {
 11465                           ;main.c: 68: ir_handler();
 11466  0C4E  3182  223F  318B   	fcall	_ir_handler
 11467                           
 11468                           ;main.c: 69: continue;
 11469  0C51  2C0F               	goto	l8183
 11470  0C52                     l8221:	
 11471                           
 11472                           ;main.c: 70: }
 11473                           ;main.c: 72: handleGeneralTouchControls();
 11474  0C52  3196  26AE  318B   	fcall	_handleGeneralTouchControls
 11475                           
 11476                           ;main.c: 78: ir_handler();
 11477  0C55  3182  223F  318B   	fcall	_ir_handler
 11478  0C58  2C0F               	goto	l8183
 11479  0C59                     __end_of_main:	
 11480                           
 11481                           	psect	text1
 11482  023F                     __ptext1:	
 11483 ;; *************** function _ir_handler *****************
 11484 ;; Defined at:
 11485 ;;		line 81 in file "ir_handler.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;  ctrl            1   28[BANK0 ] PTR struct .
 11490 ;;		 -> controls(36), 
 11491 ;;  k               1   30[BANK0 ] unsigned char 
 11492 ;;  i               1   29[BANK0 ] unsigned char 
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      void 
 11495 ;; Registers used:
 11496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;Total ram usage:        5 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:   10
 11509 ;; This function calls:
 11510 ;;		_EUSART_Write
 11511 ;;		___bmul
 11512 ;;		_handleFanSpeedChange
 11513 ;;		_handleFanToggle
 11514 ;;		_processToggle
 11515 ;;		_syncFanToggleState
 11516 ;; This function is called by:
 11517 ;;		_main
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           
 11522                           ;psect for function _ir_handler
 11523  023F                     _ir_handler:	
 11524                           
 11525                           ;ir_handler.c: 82: if (sto == 1) {
 11526                           
 11527                           ;incstack = 0
 11528                           ; Regs used in _ir_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11529  023F  0021               	movlb	1	; select bank1
 11530  0240  0353               	decf	_sto^(0+128),w
 11531  0241  0454               	iorwf	(_sto+1)^(0+128),w
 11532  0242  1D03               	btfss	3,2
 11533  0243  0008               	return
 11534                           
 11535                           ;ir_handler.c: 84: if (t1 == 0 && a1 == d1 && a2 == d2 && c1 == 0 && c2 == 8) {
 11536  0244  083F               	movf	_t1^(0+128),w
 11537  0245  0440               	iorwf	(_t1+1)^(0+128),w
 11538  0246  1D03               	btfss	3,2
 11539  0247  2A7E               	goto	l7759
 11540  0248  083E               	movf	(_d1+1)^(0+128),w
 11541  0249  0020               	movlb	0	; select bank0
 11542  024A  0656               	xorwf	_a1+1,w
 11543  024B  1D03               	skipz
 11544  024C  2A51               	goto	u8185
 11545  024D  0021               	movlb	1	; select bank1
 11546  024E  083D               	movf	_d1^(0+128),w
 11547  024F  0020               	movlb	0	; select bank0
 11548  0250  0655               	xorwf	_a1,w
 11549  0251                     u8185:	
 11550  0251  1D03               	skipz
 11551  0252  2A7E               	goto	l7759
 11552  0253  0021               	movlb	1	; select bank1
 11553  0254  083C               	movf	(_d2+1)^(0+128),w
 11554  0255  0020               	movlb	0	; select bank0
 11555  0256  0654               	xorwf	_a2+1,w
 11556  0257  1D03               	skipz
 11557  0258  2A5D               	goto	u8195
 11558  0259  0021               	movlb	1	; select bank1
 11559  025A  083B               	movf	_d2^(0+128),w
 11560  025B  0020               	movlb	0	; select bank0
 11561  025C  0653               	xorwf	_a2,w
 11562  025D                     u8195:	
 11563  025D  1D03               	skipz
 11564  025E  2A7E               	goto	l7759
 11565  025F  0851               	movf	_c1,w
 11566  0260  0452               	iorwf	_c1+1,w
 11567  0261  1D03               	btfss	3,2
 11568  0262  2A7E               	goto	l7759
 11569  0263  3008               	movlw	8
 11570  0264  064F               	xorwf	_c2,w
 11571  0265  0450               	iorwf	_c2+1,w
 11572  0266  1D03               	btfss	3,2
 11573  0267  2A7E               	goto	l7759
 11574                           
 11575                           ;ir_handler.c: 85: wipeEnabled = !wipeEnabled;
 11576  0268  085A               	movf	_wipeEnabled,w
 11577  0269  1D03               	btfss	3,2
 11578  026A  2A6D               	goto	u8220
 11579  026B  3001               	movlw	1
 11580  026C  2A6E               	goto	u8230
 11581  026D                     u8220:	
 11582  026D  3000               	movlw	0
 11583  026E                     u8230:	
 11584  026E  00BA               	movwf	??_ir_handler
 11585  026F  083A               	movf	??_ir_handler,w
 11586  0270  00DA               	movwf	_wipeEnabled
 11587                           
 11588                           ;ir_handler.c: 86: wipeTriggerFlag = (wipeEnabled == 1) ? 1 : 0;
 11589  0271  035A               	decf	_wipeEnabled,w
 11590  0272  1D03               	btfss	3,2
 11591  0273  2A76               	goto	u8240
 11592  0274  3001               	movlw	1
 11593  0275  2A77               	goto	u8250
 11594  0276                     u8240:	
 11595  0276  3000               	movlw	0
 11596  0277                     u8250:	
 11597  0277  00BA               	movwf	??_ir_handler
 11598  0278  083A               	movf	??_ir_handler,w
 11599  0279  0021               	movlb	1	; select bank1
 11600  027A  00E2               	movwf	_wipeTriggerFlag^(0+128)
 11601                           
 11602                           ;ir_handler.c: 87: sto = 0;
 11603  027B  01D3               	clrf	_sto^(0+128)
 11604  027C  01D4               	clrf	(_sto+1)^(0+128)
 11605                           
 11606                           ;ir_handler.c: 88: return;
 11607  027D  0008               	return
 11608  027E                     l7759:	
 11609                           
 11610                           ;ir_handler.c: 89: }
 11611                           ;ir_handler.c: 92: if (t1 == 0 && a1 == d1 && a2 == d2 && c1 == 0 && c2 == 9) {
 11612  027E  0021               	movlb	1	; select bank1
 11613  027F  083F               	movf	_t1^(0+128),w
 11614  0280  0440               	iorwf	(_t1+1)^(0+128),w
 11615  0281  1D03               	btfss	3,2
 11616  0282  2AC0               	goto	l7787
 11617  0283  083E               	movf	(_d1+1)^(0+128),w
 11618  0284  0020               	movlb	0	; select bank0
 11619  0285  0656               	xorwf	_a1+1,w
 11620  0286  1D03               	skipz
 11621  0287  2A8C               	goto	u8275
 11622  0288  0021               	movlb	1	; select bank1
 11623  0289  083D               	movf	_d1^(0+128),w
 11624  028A  0020               	movlb	0	; select bank0
 11625  028B  0655               	xorwf	_a1,w
 11626  028C                     u8275:	
 11627  028C  1D03               	skipz
 11628  028D  2AC0               	goto	l7787
 11629  028E  0021               	movlb	1	; select bank1
 11630  028F  083C               	movf	(_d2+1)^(0+128),w
 11631  0290  0020               	movlb	0	; select bank0
 11632  0291  0654               	xorwf	_a2+1,w
 11633  0292  1D03               	skipz
 11634  0293  2A98               	goto	u8285
 11635  0294  0021               	movlb	1	; select bank1
 11636  0295  083B               	movf	_d2^(0+128),w
 11637  0296  0020               	movlb	0	; select bank0
 11638  0297  0653               	xorwf	_a2,w
 11639  0298                     u8285:	
 11640  0298  1D03               	skipz
 11641  0299  2AC0               	goto	l7787
 11642  029A  0851               	movf	_c1,w
 11643  029B  0452               	iorwf	_c1+1,w
 11644  029C  1D03               	btfss	3,2
 11645  029D  2AC0               	goto	l7787
 11646  029E  3009               	movlw	9
 11647  029F  064F               	xorwf	_c2,w
 11648  02A0  0450               	iorwf	_c2+1,w
 11649  02A1  1D03               	btfss	3,2
 11650  02A2  2AC0               	goto	l7787
 11651                           
 11652                           ;ir_handler.c: 93: mainToggleState = !mainToggleState;
 11653  02A3  0859               	movf	_mainToggleState,w
 11654  02A4  1D03               	btfss	3,2
 11655  02A5  2AA8               	goto	u8310
 11656  02A6  3001               	movlw	1
 11657  02A7  2AA9               	goto	u8320
 11658  02A8                     u8310:	
 11659  02A8  3000               	movlw	0
 11660  02A9                     u8320:	
 11661  02A9  00BA               	movwf	??_ir_handler
 11662  02AA  083A               	movf	??_ir_handler,w
 11663  02AB  00D9               	movwf	_mainToggleState
 11664                           
 11665                           ;ir_handler.c: 95: if (mainToggleState == 1) {
 11666  02AC  0359               	decf	_mainToggleState,w
 11667  02AD  1D03               	btfss	3,2
 11668  02AE  2AB4               	goto	l7773
 11669                           
 11670                           ;ir_handler.c: 96: EUSART_Write('y');
 11671  02AF  3079               	movlw	121
 11672  02B0  3190  20BB  3182   	fcall	_EUSART_Write
 11673                           
 11674                           ;ir_handler.c: 97: } else {
 11675  02B3  2ABC               	goto	l7783
 11676  02B4                     l7773:	
 11677                           
 11678                           ;ir_handler.c: 98: EUSART_Write('z');
 11679  02B4  307A               	movlw	122
 11680  02B5  3190  20BB         	fcall	_EUSART_Write
 11681                           
 11682                           ;ir_handler.c: 99: do { LATCbits.LATC0 = 0; } while(0);
 11683  02B7  0020               	movlb	0	; select bank0
 11684  02B8  1018               	bcf	24,0	;volatile
 11685                           
 11686                           ;ir_handler.c: 100: do { LATCbits.LATC1 = 0; } while(0);
 11687  02B9  1098               	bcf	24,1	;volatile
 11688                           
 11689                           ;ir_handler.c: 101: do { LATCbits.LATC2 = 0; } while(0);
 11690  02BA  1118               	bcf	24,2	;volatile
 11691                           
 11692                           ;ir_handler.c: 102: do { LATCbits.LATC3 = 0; } while(0);
 11693  02BB  1198               	bcf	24,3	;volatile
 11694  02BC                     l7783:	
 11695                           
 11696                           ;ir_handler.c: 108: }
 11697                           ;ir_handler.c: 110: sto = 0;
 11698  02BC  0021               	movlb	1	; select bank1
 11699  02BD  01D3               	clrf	_sto^(0+128)
 11700  02BE  01D4               	clrf	(_sto+1)^(0+128)
 11701                           
 11702                           ;ir_handler.c: 111: return;
 11703  02BF  0008               	return
 11704  02C0                     l7787:	
 11705                           
 11706                           ;ir_handler.c: 112: }
 11707                           ;ir_handler.c: 115: if (t1 == 0 && a1 == d1 && a2 == d2) {
 11708  02C0  0021               	movlb	1	; select bank1
 11709  02C1  083F               	movf	_t1^(0+128),w
 11710  02C2  0440               	iorwf	(_t1+1)^(0+128),w
 11711  02C3  1D03               	btfss	3,2
 11712  02C4  2BD4               	goto	l7861
 11713  02C5  083E               	movf	(_d1+1)^(0+128),w
 11714  02C6  0020               	movlb	0	; select bank0
 11715  02C7  0656               	xorwf	_a1+1,w
 11716  02C8  1D03               	skipz
 11717  02C9  2ACE               	goto	u8355
 11718  02CA  0021               	movlb	1	; select bank1
 11719  02CB  083D               	movf	_d1^(0+128),w
 11720  02CC  0020               	movlb	0	; select bank0
 11721  02CD  0655               	xorwf	_a1,w
 11722  02CE                     u8355:	
 11723  02CE  1D03               	skipz
 11724  02CF  2BD4               	goto	l7861
 11725  02D0  0021               	movlb	1	; select bank1
 11726  02D1  083C               	movf	(_d2+1)^(0+128),w
 11727  02D2  0020               	movlb	0	; select bank0
 11728  02D3  0654               	xorwf	_a2+1,w
 11729  02D4  1D03               	skipz
 11730  02D5  2ADA               	goto	u8365
 11731  02D6  0021               	movlb	1	; select bank1
 11732  02D7  083B               	movf	_d2^(0+128),w
 11733  02D8  0020               	movlb	0	; select bank0
 11734  02D9  0653               	xorwf	_a2,w
 11735  02DA                     u8365:	
 11736  02DA  1D03               	skipz
 11737  02DB  2BD4               	goto	l7861
 11738                           
 11739                           ;ir_handler.c: 116: for (uint8_t i = 0; i < 4; i++) {
 11740  02DC  01BD               	clrf	ir_handler@i
 11741  02DD  3004               	movlw	4
 11742  02DE  023D               	subwf	ir_handler@i,w
 11743  02DF  1803               	btfsc	3,0
 11744  02E0  2B2C               	goto	l7817
 11745  02E1                     l7799:	
 11746                           
 11747                           ;ir_handler.c: 117: TouchIRControl* ctrl = &controls[i];
 11748  02E1  3009               	movlw	9
 11749  02E2  00BA               	movwf	??_ir_handler
 11750  02E3  083A               	movf	??_ir_handler,w
 11751  02E4  00AA               	movwf	___bmul@multiplicand
 11752  02E5  083D               	movf	ir_handler@i,w
 11753  02E6  3191  219C  3182   	fcall	___bmul
 11754  02E9  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 11755  02EA  0020               	movlb	0	; select bank0
 11756  02EB  00BB               	movwf	??_ir_handler+1
 11757  02EC  083B               	movf	??_ir_handler+1,w
 11758  02ED  00BC               	movwf	ir_handler@ctrl
 11759                           
 11760                           ;ir_handler.c: 118: if (c1 == ctrl->c1 && c2 == ctrl->c2 && !ctrl->pressedLast) {
 11761  02EE  083C               	movf	ir_handler@ctrl,w
 11762  02EF  3E05               	addlw	5
 11763  02F0  0086               	movwf	6
 11764  02F1  3002               	movlw	2	; select bank4/5
 11765  02F2  0087               	movwf	7
 11766  02F3  3F40               	moviw [0]fsr1
 11767  02F4  00BA               	movwf	??_ir_handler
 11768  02F5  3F41               	moviw [1]fsr1
 11769  02F6  00BB               	movwf	??_ir_handler+1
 11770  02F7  0852               	movf	_c1+1,w
 11771  02F8  063B               	xorwf	??_ir_handler+1,w
 11772  02F9  1D03               	skipz
 11773  02FA  2AFD               	goto	u8385
 11774  02FB  0851               	movf	_c1,w
 11775  02FC  063A               	xorwf	??_ir_handler,w
 11776  02FD                     u8385:	
 11777  02FD  1D03               	skipz
 11778  02FE  2B23               	goto	l7813
 11779  02FF  083C               	movf	ir_handler@ctrl,w
 11780  0300  3E07               	addlw	7
 11781  0301  0086               	movwf	6
 11782  0302  3002               	movlw	2	; select bank4/5
 11783  0303  0087               	movwf	7
 11784  0304  3F40               	moviw [0]fsr1
 11785  0305  00BA               	movwf	??_ir_handler
 11786  0306  3F41               	moviw [1]fsr1
 11787  0307  00BB               	movwf	??_ir_handler+1
 11788  0308  0850               	movf	_c2+1,w
 11789  0309  063B               	xorwf	??_ir_handler+1,w
 11790  030A  1D03               	skipz
 11791  030B  2B0E               	goto	u8395
 11792  030C  084F               	movf	_c2,w
 11793  030D  063A               	xorwf	??_ir_handler,w
 11794  030E                     u8395:	
 11795  030E  1D03               	skipz
 11796  030F  2B23               	goto	l7813
 11797  0310  083C               	movf	ir_handler@ctrl,w
 11798  0311  3E04               	addlw	4
 11799  0312  0086               	movwf	6
 11800  0313  3002               	movlw	2	; select bank4/5
 11801  0314  0087               	movwf	7
 11802  0315  0801               	movf	1,w
 11803  0316  1D03               	btfss	3,2
 11804  0317  2B23               	goto	l7813
 11805                           
 11806                           ;ir_handler.c: 119: processToggle(ctrl, i);
 11807  0318  083D               	movf	ir_handler@i,w
 11808  0319  00BA               	movwf	??_ir_handler
 11809  031A  083A               	movf	??_ir_handler,w
 11810  031B  00B4               	movwf	processToggle@index
 11811  031C  083C               	movf	ir_handler@ctrl,w
 11812  031D  3196  2672         	fcall	_processToggle
 11813                           
 11814                           ;ir_handler.c: 120: sto = 0;
 11815  031F  0021               	movlb	1	; select bank1
 11816  0320  01D3               	clrf	_sto^(0+128)
 11817  0321  01D4               	clrf	(_sto+1)^(0+128)
 11818                           
 11819                           ;ir_handler.c: 121: return;
 11820  0322  0008               	return
 11821  0323                     l7813:	
 11822  0323  3001               	movlw	1
 11823  0324  0020               	movlb	0	; select bank0
 11824  0325  00BA               	movwf	??_ir_handler
 11825  0326  083A               	movf	??_ir_handler,w
 11826  0327  07BD               	addwf	ir_handler@i,f
 11827  0328  3004               	movlw	4
 11828  0329  023D               	subwf	ir_handler@i,w
 11829  032A  1C03               	skipc
 11830  032B  2AE1               	goto	l7799
 11831  032C                     l7817:	
 11832                           
 11833                           ;ir_handler.c: 122: }
 11834                           ;ir_handler.c: 123: }
 11835                           ;ir_handler.c: 126: for (uint8_t k = 0; k < 2; k++) {
 11836  032C  01BE               	clrf	ir_handler@k
 11837  032D  3002               	movlw	2
 11838  032E  023E               	subwf	ir_handler@k,w
 11839  032F  1803               	btfsc	3,0
 11840  0330  2B72               	goto	l1386
 11841  0331                     l7823:	
 11842                           
 11843                           ;ir_handler.c: 127: if (c1 == fans[k].toggle_c1 && c2 == fans[k].toggle_c2) {
 11844  0331  0E3E               	swapf	ir_handler@k,w
 11845  0332  39F0               	andlw	240
 11846  0333  073E               	addwf	ir_handler@k,w
 11847  0334  3E0B               	addlw	11
 11848  0335  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11849  0336  0086               	movwf	6
 11850  0337  3001               	movlw	1	; select bank3/4
 11851  0338  0087               	movwf	7
 11852  0339  0801               	movf	1,w
 11853  033A  00BA               	movwf	??_ir_handler
 11854  033B  01BB               	clrf	??_ir_handler+1
 11855  033C  0852               	movf	_c1+1,w
 11856  033D  063B               	xorwf	??_ir_handler+1,w
 11857  033E  1D03               	skipz
 11858  033F  2B42               	goto	u8435
 11859  0340  0851               	movf	_c1,w
 11860  0341  063A               	xorwf	??_ir_handler,w
 11861  0342                     u8435:	
 11862  0342  1D03               	skipz
 11863  0343  2B69               	goto	l7839
 11864  0344  0E3E               	swapf	ir_handler@k,w
 11865  0345  39F0               	andlw	240
 11866  0346  073E               	addwf	ir_handler@k,w
 11867  0347  3E0C               	addlw	12
 11868  0348  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11869  0349  0086               	movwf	6
 11870  034A  3001               	movlw	1	; select bank3/4
 11871  034B  0087               	movwf	7
 11872  034C  0801               	movf	1,w
 11873  034D  00BA               	movwf	??_ir_handler
 11874  034E  01BB               	clrf	??_ir_handler+1
 11875  034F  0850               	movf	_c2+1,w
 11876  0350  063B               	xorwf	??_ir_handler+1,w
 11877  0351  1D03               	skipz
 11878  0352  2B55               	goto	u8445
 11879  0353  084F               	movf	_c2,w
 11880  0354  063A               	xorwf	??_ir_handler,w
 11881  0355                     u8445:	
 11882  0355  1D03               	skipz
 11883  0356  2B69               	goto	l7839
 11884                           
 11885                           ;ir_handler.c: 130: }
 11886                           ;ir_handler.c: 131: handleFanToggle(&fans[k]);
 11887  0357  0E3E               	swapf	ir_handler@k,w
 11888  0358  39F0               	andlw	240
 11889  0359  073E               	addwf	ir_handler@k,w
 11890  035A  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11891  035B  318D  2579  3182   	fcall	_handleFanToggle
 11892                           
 11893                           ;ir_handler.c: 132: syncFanToggleState();
 11894  035E  3192  2295         	fcall	_syncFanToggleState
 11895                           
 11896                           ;ir_handler.c: 135: activeFanIR = k;
 11897  0360  0020               	movlb	0	; select bank0
 11898  0361  083E               	movf	ir_handler@k,w
 11899  0362  00BA               	movwf	??_ir_handler
 11900  0363  083A               	movf	??_ir_handler,w
 11901  0364  00E5               	movwf	_activeFanIR
 11902                           
 11903                           ;ir_handler.c: 136: sto = 0;
 11904  0365  0021               	movlb	1	; select bank1
 11905  0366  01D3               	clrf	_sto^(0+128)
 11906  0367  01D4               	clrf	(_sto+1)^(0+128)
 11907                           
 11908                           ;ir_handler.c: 137: return;
 11909  0368  0008               	return
 11910  0369                     l7839:	
 11911  0369  3001               	movlw	1
 11912  036A  0020               	movlb	0	; select bank0
 11913  036B  00BA               	movwf	??_ir_handler
 11914  036C  083A               	movf	??_ir_handler,w
 11915  036D  07BE               	addwf	ir_handler@k,f
 11916  036E  3002               	movlw	2
 11917  036F  023E               	subwf	ir_handler@k,w
 11918  0370  1C03               	skipc
 11919  0371  2B31               	goto	l7823
 11920  0372                     l1386:	
 11921                           
 11922                           ;ir_handler.c: 138: }
 11923                           ;ir_handler.c: 139: }
 11924                           ;ir_handler.c: 142: if (activeFanIR >= 0 && activeFanIR < 2) {
 11925  0372  1BE5               	btfsc	_activeFanIR,7
 11926  0373  2BD4               	goto	l7861
 11927  0374  0865               	movf	_activeFanIR,w
 11928  0375  3A80               	xorlw	128
 11929  0376  3E7E               	addlw	-130
 11930  0377  1803               	skipnc
 11931  0378  2BD4               	goto	l7861
 11932                           
 11933                           ;ir_handler.c: 143: if (c1 == fans[activeFanIR].speedup_c1 && c2 == fans[activeFanIR].sp
      +                          eedup_c2) {
 11934  0379  0E65               	swapf	_activeFanIR,w
 11935  037A  39F0               	andlw	240
 11936  037B  0765               	addwf	_activeFanIR,w
 11937  037C  3E0D               	addlw	13
 11938  037D  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11939  037E  0086               	movwf	6
 11940  037F  3001               	movlw	1	; select bank3/4
 11941  0380  0087               	movwf	7
 11942  0381  0801               	movf	1,w
 11943  0382  00BA               	movwf	??_ir_handler
 11944  0383  01BB               	clrf	??_ir_handler+1
 11945  0384  0852               	movf	_c1+1,w
 11946  0385  063B               	xorwf	??_ir_handler+1,w
 11947  0386  1D03               	skipz
 11948  0387  2B8A               	goto	u8485
 11949  0388  0851               	movf	_c1,w
 11950  0389  063A               	xorwf	??_ir_handler,w
 11951  038A                     u8485:	
 11952  038A  1D03               	skipz
 11953  038B  2BA2               	goto	l7853
 11954  038C  0E65               	swapf	_activeFanIR,w
 11955  038D  39F0               	andlw	240
 11956  038E  0765               	addwf	_activeFanIR,w
 11957  038F  3E0E               	addlw	14
 11958  0390  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11959  0391  0086               	movwf	6
 11960  0392  3001               	movlw	1	; select bank3/4
 11961  0393  0087               	movwf	7
 11962  0394  0801               	movf	1,w
 11963  0395  00BA               	movwf	??_ir_handler
 11964  0396  01BB               	clrf	??_ir_handler+1
 11965  0397  0850               	movf	_c2+1,w
 11966  0398  063B               	xorwf	??_ir_handler+1,w
 11967  0399  1D03               	skipz
 11968  039A  2B9D               	goto	u8495
 11969  039B  084F               	movf	_c2,w
 11970  039C  063A               	xorwf	??_ir_handler,w
 11971  039D                     u8495:	
 11972  039D  1D03               	skipz
 11973  039E  2BA2               	goto	l7853
 11974                           
 11975                           ;ir_handler.c: 144: handleFanSpeedChange(&fans[activeFanIR], 1);
 11976  039F  01AB               	clrf	handleFanSpeedChange@direction
 11977  03A0  0AAB               	incf	handleFanSpeedChange@direction,f
 11978  03A1  2BCB               	goto	L1
 11979  03A2                     l7853:	
 11980                           ;ir_handler.c: 146: } else if (c1 == fans[activeFanIR].speeddown_c1 && c2 == fans[active
      +                          FanIR].speeddown_c2) {
 11981                           
 11982                           ;ir_handler.c: 145: syncFanToggleState();
 11983                           
 11984  03A2  0020               	movlb	0	; select bank0
 11985  03A3  0E65               	swapf	_activeFanIR,w
 11986  03A4  39F0               	andlw	240
 11987  03A5  0765               	addwf	_activeFanIR,w
 11988  03A6  3E0F               	addlw	15
 11989  03A7  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 11990  03A8  0086               	movwf	6
 11991  03A9  3001               	movlw	1	; select bank3/4
 11992  03AA  0087               	movwf	7
 11993  03AB  0801               	movf	1,w
 11994  03AC  00BA               	movwf	??_ir_handler
 11995  03AD  01BB               	clrf	??_ir_handler+1
 11996  03AE  0852               	movf	_c1+1,w
 11997  03AF  063B               	xorwf	??_ir_handler+1,w
 11998  03B0  1D03               	skipz
 11999  03B1  2BB4               	goto	u8505
 12000  03B2  0851               	movf	_c1,w
 12001  03B3  063A               	xorwf	??_ir_handler,w
 12002  03B4                     u8505:	
 12003  03B4  1D03               	skipz
 12004  03B5  2BD4               	goto	l7861
 12005  03B6  0E65               	swapf	_activeFanIR,w
 12006  03B7  39F0               	andlw	240
 12007  03B8  0765               	addwf	_activeFanIR,w
 12008  03B9  3E10               	addlw	16
 12009  03BA  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 12010  03BB  0086               	movwf	6
 12011  03BC  3001               	movlw	1	; select bank3/4
 12012  03BD  0087               	movwf	7
 12013  03BE  0801               	movf	1,w
 12014  03BF  00BA               	movwf	??_ir_handler
 12015  03C0  01BB               	clrf	??_ir_handler+1
 12016  03C1  0850               	movf	_c2+1,w
 12017  03C2  063B               	xorwf	??_ir_handler+1,w
 12018  03C3  1D03               	skipz
 12019  03C4  2BC7               	goto	u8515
 12020  03C5  084F               	movf	_c2,w
 12021  03C6  063A               	xorwf	??_ir_handler,w
 12022  03C7                     u8515:	
 12023  03C7  1D03               	skipz
 12024  03C8  2BD4               	goto	l7861
 12025                           
 12026                           ;ir_handler.c: 147: handleFanSpeedChange(&fans[activeFanIR], -1);
 12027  03C9  01AB               	clrf	handleFanSpeedChange@direction
 12028  03CA  03AB               	decf	handleFanSpeedChange@direction,f
 12029  03CB                     L1:	
 12030  03CB  0E65               	swapf	_activeFanIR,w
 12031  03CC  39F0               	andlw	240
 12032  03CD  0765               	addwf	_activeFanIR,w
 12033  03CE  3ECD               	addlw	(low (_fans| (0+256)))& (0+255)
 12034  03CF  3188  20C0  3182   	fcall	_handleFanSpeedChange
 12035                           
 12036                           ;ir_handler.c: 148: syncFanToggleState();
 12037  03D2  3192  2295         	fcall	_syncFanToggleState
 12038  03D4                     l7861:	
 12039                           
 12040                           ;ir_handler.c: 149: }
 12041                           ;ir_handler.c: 150: }
 12042                           ;ir_handler.c: 151: }
 12043                           ;ir_handler.c: 153: sto = 0;
 12044  03D4  0021               	movlb	1	; select bank1
 12045  03D5  01D3               	clrf	_sto^(0+128)
 12046  03D6  01D4               	clrf	(_sto+1)^(0+128)
 12047  03D7  0008               	return
 12048  03D8                     __end_of_ir_handler:	
 12049                           
 12050                           	psect	text2
 12051  0D79                     __ptext2:	
 12052 ;; *************** function _handleFanToggle *****************
 12053 ;; Defined at:
 12054 ;;		line 61 in file "load_handler.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  fan             1    wreg     PTR struct .
 12057 ;;		 -> fans(34), 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  fan             1   16[BANK0 ] PTR struct .
 12060 ;;		 -> fans(34), 
 12061 ;;  index           1   15[BANK0 ] unsigned char 
 12062 ;; Return value:  Size  Location     Type
 12063 ;;                  1    wreg      void 
 12064 ;; Registers used:
 12065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12066 ;; Tracked objects:
 12067 ;;		On entry : 0/0
 12068 ;;		On exit  : 0/0
 12069 ;;		Unchanged: 0/0
 12070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;Total ram usage:        6 bytes
 12076 ;; Hardware stack levels used:    1
 12077 ;; Hardware stack levels required when called:    8
 12078 ;; This function calls:
 12079 ;;		_EUSART_Write
 12080 ;; This function is called by:
 12081 ;;		_ir_handler
 12082 ;;		_processFanToggle
 12083 ;;		_processFanSpeedControl
 12084 ;; This function uses a non-reentrant model
 12085 ;;
 12086                           
 12087                           
 12088                           ;psect for function _handleFanToggle
 12089  0D79                     _handleFanToggle:	
 12090                           
 12091                           ;incstack = 0
 12092                           ; Regs used in _handleFanToggle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12093                           ;handleFanToggle@fan stored from wreg
 12094  0D79  0020               	movlb	0	; select bank0
 12095  0D7A  00B0               	movwf	handleFanToggle@fan
 12096                           
 12097                           ;load_handler.c: 63: uint8_t index = (fan == &fans[1]) ? 1 : 0;
 12098  0D7B  0830               	movf	handleFanToggle@fan,w
 12099  0D7C  3ADE               	xorlw	(low ((_fans| (0+256)+17)))& (0+255)
 12100  0D7D  1D03               	btfss	3,2
 12101  0D7E  2D81               	goto	u7950
 12102  0D7F  3001               	movlw	1
 12103  0D80  2D82               	goto	u7960
 12104  0D81                     u7950:	
 12105  0D81  3000               	movlw	0
 12106  0D82                     u7960:	
 12107  0D82  00AB               	movwf	??_handleFanToggle
 12108  0D83  082B               	movf	??_handleFanToggle,w
 12109  0D84  00AF               	movwf	handleFanToggle@index
 12110                           
 12111                           ;load_handler.c: 65: if (*fan->state == 1) {
 12112  0D85  0830               	movf	handleFanToggle@fan,w
 12113  0D86  0086               	movwf	6
 12114  0D87  3001               	movlw	1	; select bank2/3
 12115  0D88  0087               	movwf	7
 12116  0D89  0801               	movf	1,w
 12117  0D8A  0086               	movwf	6
 12118  0D8B  0187               	clrf	7
 12119  0D8C  0301               	decf	1,w
 12120  0D8D  1D03               	btfss	3,2
 12121  0D8E  2DA9               	goto	l7613
 12122                           
 12123                           ;load_handler.c: 73: *fan->led = 0;
 12124  0D8F  0830               	movf	handleFanToggle@fan,w
 12125  0D90  3E09               	addlw	9
 12126  0D91  0086               	movwf	6
 12127  0D92  3001               	movlw	1	; select bank2/3
 12128  0D93  0087               	movwf	7
 12129  0D94  0801               	movf	1,w
 12130  0D95  3190  20BB         	fcall	_EUSART_Write
 12131                           
 12132                           ;load_handler.c: 76: *fan->state = 0;
 12133  0D97  0020               	movlb	0	; select bank0
 12134  0D98  0830               	movf	handleFanToggle@fan,w
 12135  0D99  3E02               	addlw	2
 12136  0D9A  0086               	movwf	6
 12137  0D9B  3001               	movlw	1	; select bank2/3
 12138  0D9C  0087               	movwf	7
 12139  0D9D  0801               	movf	1,w
 12140  0D9E  0086               	movwf	6
 12141  0D9F  0187               	clrf	7
 12142  0DA0  0801               	movf	1,w
 12143  0DA1  00AB               	movwf	??_handleFanToggle
 12144  0DA2  082F               	movf	handleFanToggle@index,w
 12145  0DA3  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 12146  0DA4  0086               	movwf	6
 12147  0DA5  0187               	clrf	7
 12148  0DA6  082B               	movf	??_handleFanToggle,w
 12149  0DA7  0081               	movwf	1
 12150                           
 12151                           ;load_handler.c: 77: } else {
 12152  0DA8  0008               	return
 12153  0DA9                     l7613:	
 12154                           ;load_handler.c: 79: *fan->fn = 1;
 12155                           
 12156                           
 12157                           ;load_handler.c: 81: if (*fan->fan < 1 || *fan->fan > 5) {
 12158  0DA9  0830               	movf	handleFanToggle@fan,w
 12159  0DAA  3E02               	addlw	2
 12160  0DAB  0086               	movwf	6
 12161  0DAC  3001               	movlw	1	; select bank2/3
 12162  0DAD  0087               	movwf	7
 12163  0DAE  0801               	movf	1,w
 12164  0DAF  0086               	movwf	6
 12165  0DB0  0187               	clrf	7
 12166  0DB1  0801               	movf	1,w
 12167  0DB2  1903               	btfsc	3,2
 12168  0DB3  2DC0               	goto	l7617
 12169  0DB4  0830               	movf	handleFanToggle@fan,w
 12170  0DB5  3E02               	addlw	2
 12171  0DB6  0086               	movwf	6
 12172  0DB7  3001               	movlw	1	; select bank2/3
 12173  0DB8  0087               	movwf	7
 12174  0DB9  0801               	movf	1,w
 12175  0DBA  0086               	movwf	6
 12176  0DBB  0187               	clrf	7
 12177  0DBC  3006               	movlw	6
 12178  0DBD  0201               	subwf	1,w
 12179  0DBE  1C03               	skipc
 12180  0DBF  2DDE               	goto	l1504
 12181  0DC0                     l7617:	
 12182                           
 12183                           ;load_handler.c: 82: *fan->fan = (lastFanSpeed[index] >= 1 && lastFanSpeed[index] <= 5) 
      +                          ? lastFanSpeed[index] : 1;
 12184  0DC0  082F               	movf	handleFanToggle@index,w
 12185  0DC1  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 12186  0DC2  0086               	movwf	6
 12187  0DC3  0187               	clrf	7
 12188  0DC4  0801               	movf	1,w
 12189  0DC5  1903               	btfsc	3,2
 12190  0DC6  2DCF               	goto	l7621
 12191  0DC7  082F               	movf	handleFanToggle@index,w
 12192  0DC8  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 12193  0DC9  0086               	movwf	6
 12194  0DCA  0187               	clrf	7
 12195  0DCB  3006               	movlw	6
 12196  0DCC  0201               	subwf	1,w
 12197  0DCD  1C03               	skipc
 12198  0DCE  2DD3               	goto	l7623
 12199  0DCF                     l7621:	
 12200  0DCF  3001               	movlw	1
 12201  0DD0  00AD               	movwf	_handleFanToggle$2042
 12202  0DD1  3000               	movlw	0
 12203  0DD2  2DDD               	goto	L2
 12204  0DD3                     l7623:	
 12205  0DD3  082F               	movf	handleFanToggle@index,w
 12206  0DD4  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 12207  0DD5  0086               	movwf	6
 12208  0DD6  0187               	clrf	7
 12209  0DD7  0801               	movf	1,w
 12210  0DD8  00AB               	movwf	??_handleFanToggle
 12211  0DD9  01AC               	clrf	??_handleFanToggle+1
 12212  0DDA  082B               	movf	??_handleFanToggle,w
 12213  0DDB  00AD               	movwf	_handleFanToggle$2042
 12214  0DDC  082C               	movf	??_handleFanToggle+1,w
 12215  0DDD                     L2:	
 12216  0DDD  00AE               	movwf	_handleFanToggle$2042+1
 12217  0DDE                     l1504:	
 12218                           
 12219                           ;load_handler.c: 86: *fan->led = *fan->fan;
 12220  0DDE  0830               	movf	handleFanToggle@fan,w
 12221  0DDF  3E02               	addlw	2
 12222  0DE0  0086               	movwf	6
 12223  0DE1  3001               	movlw	1	; select bank2/3
 12224  0DE2  0087               	movwf	7
 12225  0DE3  0801               	movf	1,w
 12226  0DE4  0086               	movwf	6
 12227  0DE5  0187               	clrf	7
 12228  0DE6  0801               	movf	1,w
 12229  0DE7  00AB               	movwf	??_handleFanToggle
 12230  0DE8  082F               	movf	handleFanToggle@index,w
 12231  0DE9  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 12232  0DEA  0086               	movwf	6
 12233  0DEB  0187               	clrf	7
 12234  0DEC  082B               	movf	??_handleFanToggle,w
 12235  0DED  0081               	movwf	1
 12236                           
 12237                           ;load_handler.c: 90: EUSART_Write(fan->toggleChar);
 12238  0DEE  0830               	movf	handleFanToggle@fan,w
 12239  0DEF  3E08               	addlw	8
 12240  0DF0  0086               	movwf	6
 12241  0DF1  3001               	movlw	1	; select bank2/3
 12242  0DF2  0087               	movwf	7
 12243  0DF3  0801               	movf	1,w
 12244  0DF4  3190  20BB  318D   	fcall	_EUSART_Write
 12245                           
 12246                           ;load_handler.c: 95: *fan->state = 1;
 12247  0DF7  0020               	movlb	0	; select bank0
 12248  0DF8  0830               	movf	handleFanToggle@fan,w
 12249  0DF9  3E0A               	addlw	10
 12250  0DFA  0086               	movwf	6
 12251  0DFB  3001               	movlw	1	; select bank2/3
 12252  0DFC  0087               	movwf	7
 12253  0DFD  0830               	movf	handleFanToggle@fan,w
 12254  0DFE  3E02               	addlw	2
 12255  0DFF  0084               	movwf	4
 12256  0E00  3001               	movlw	1	; select bank2/3
 12257  0E01  0085               	movwf	5
 12258  0E02  0800               	movf	0,w
 12259  0E03  0084               	movwf	4
 12260  0E04  0185               	clrf	5
 12261  0E05  0800               	movf	0,w
 12262  0E06  0701               	addwf	1,w
 12263  0E07  3EFF               	addlw	255
 12264  0E08  3190  20BB         	fcall	_EUSART_Write
 12265  0E0A  0008               	return
 12266  0E0B                     __end_of_handleFanToggle:	
 12267                           
 12268                           	psect	text3
 12269  08C0                     __ptext3:	
 12270 ;; *************** function _handleFanSpeedChange *****************
 12271 ;; Defined at:
 12272 ;;		line 129 in file "load_handler.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;  fan             1    wreg     PTR struct .
 12275 ;;		 -> fans(34), 
 12276 ;;  direction       1   11[BANK0 ] char 
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  fan             1   12[BANK0 ] PTR struct .
 12279 ;;		 -> fans(34), 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12289 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;Total ram usage:        2 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    8
 12296 ;; This function calls:
 12297 ;;		_EUSART_Write
 12298 ;; This function is called by:
 12299 ;;		_ir_handler
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           
 12304                           ;psect for function _handleFanSpeedChange
 12305  08C0                     _handleFanSpeedChange:	
 12306                           
 12307                           ;incstack = 0
 12308                           ; Regs used in _handleFanSpeedChange: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12309                           ;handleFanSpeedChange@fan stored from wreg
 12310  08C0  0020               	movlb	0	; select bank0
 12311  08C1  00AC               	movwf	handleFanSpeedChange@fan
 12312                           
 12313                           ;load_handler.c: 131: if (*fan->state == 1) {
 12314  08C2  082C               	movf	handleFanSpeedChange@fan,w
 12315  08C3  0086               	movwf	6
 12316  08C4  3001               	movlw	1	; select bank2/3
 12317  08C5  0087               	movwf	7
 12318  08C6  0801               	movf	1,w
 12319  08C7  0086               	movwf	6
 12320  08C8  0187               	clrf	7
 12321  08C9  0301               	decf	1,w
 12322  08CA  1D03               	btfss	3,2
 12323  08CB  0008               	return
 12324                           
 12325                           ;load_handler.c: 132: if ((direction > 0 && *fan->fan < 5) ||
 12326                           ;load_handler.c: 133: (direction < 0 && *fan->fan > 0)) {
 12327  08CC  082B               	movf	handleFanSpeedChange@direction,w
 12328  08CD  3A80               	xorlw	128
 12329  08CE  3E7F               	addlw	-129
 12330  08CF  1C03               	skipc
 12331  08D0  28DD               	goto	l1535
 12332  08D1  082C               	movf	handleFanSpeedChange@fan,w
 12333  08D2  3E02               	addlw	2
 12334  08D3  0086               	movwf	6
 12335  08D4  3001               	movlw	1	; select bank2/3
 12336  08D5  0087               	movwf	7
 12337  08D6  0801               	movf	1,w
 12338  08D7  0086               	movwf	6
 12339  08D8  0187               	clrf	7
 12340  08D9  3005               	movlw	5
 12341  08DA  0201               	subwf	1,w
 12342  08DB  1C03               	skipc
 12343  08DC  28EA               	goto	l7637
 12344  08DD                     l1535:	
 12345  08DD  1FAB               	btfss	handleFanSpeedChange@direction,7
 12346  08DE  0008               	return
 12347  08DF  082C               	movf	handleFanSpeedChange@fan,w
 12348  08E0  3E02               	addlw	2
 12349  08E1  0086               	movwf	6
 12350  08E2  3001               	movlw	1	; select bank2/3
 12351  08E3  0087               	movwf	7
 12352  08E4  0801               	movf	1,w
 12353  08E5  0086               	movwf	6
 12354  08E6  0187               	clrf	7
 12355  08E7  0801               	movf	1,w
 12356  08E8  1903               	btfsc	3,2
 12357  08E9  0008               	return
 12358  08EA                     l7637:	
 12359                           ;load_handler.c: 135: *fan->led = *fan->fan;
 12360                           
 12361                           
 12362                           ;load_handler.c: 136: if (ustate == 1)
 12363  08EA  0358               	decf	_ustate,w
 12364  08EB  1D03               	btfss	3,2
 12365  08EC  28EF               	goto	l7641
 12366                           
 12367                           ;load_handler.c: 137: {
 12368                           ;load_handler.c: 138: ustate =0;
 12369  08ED  01D8               	clrf	_ustate
 12370                           
 12371                           ;load_handler.c: 139: }
 12372  08EE  0008               	return
 12373  08EF                     l7641:	
 12374                           
 12375                           ;load_handler.c: 140: else
 12376                           ;load_handler.c: 141: {
 12377                           ;load_handler.c: 142: if (*fan->fan == 0 )
 12378  08EF  082C               	movf	handleFanSpeedChange@fan,w
 12379  08F0  3E02               	addlw	2
 12380  08F1  0086               	movwf	6
 12381  08F2  3001               	movlw	1	; select bank2/3
 12382  08F3  0087               	movwf	7
 12383  08F4  0801               	movf	1,w
 12384  08F5  0086               	movwf	6
 12385  08F6  0187               	clrf	7
 12386  08F7  0801               	movf	1,w
 12387  08F8  1D03               	btfss	3,2
 12388  08F9  2903               	goto	l7645
 12389                           
 12390                           ;load_handler.c: 143: {
 12391                           ;load_handler.c: 144: EUSART_Write(fan->offChar);
 12392  08FA  082C               	movf	handleFanSpeedChange@fan,w
 12393  08FB  3E09               	addlw	9
 12394  08FC  0086               	movwf	6
 12395  08FD  3001               	movlw	1	; select bank2/3
 12396  08FE  0087               	movwf	7
 12397  08FF  0801               	movf	1,w
 12398  0900  3190  20BB  3188   	fcall	_EUSART_Write
 12399  0903                     l7645:	
 12400                           
 12401                           ;load_handler.c: 145: }
 12402                           ;load_handler.c: 146: if(*fan->fan != 0)
 12403  0903  0020               	movlb	0	; select bank0
 12404  0904  082C               	movf	handleFanSpeedChange@fan,w
 12405  0905  3E02               	addlw	2
 12406  0906  0086               	movwf	6
 12407  0907  3001               	movlw	1	; select bank2/3
 12408  0908  0087               	movwf	7
 12409  0909  0801               	movf	1,w
 12410  090A  0086               	movwf	6
 12411  090B  0187               	clrf	7
 12412  090C  0801               	movf	1,w
 12413  090D  1903               	btfsc	3,2
 12414  090E  0008               	return
 12415                           
 12416                           ;load_handler.c: 147: {
 12417                           ;load_handler.c: 148: EUSART_Write(fan->baseChar + (*fan->fan - 1));
 12418  090F  082C               	movf	handleFanSpeedChange@fan,w
 12419  0910  3E0A               	addlw	10
 12420  0911  0086               	movwf	6
 12421  0912  3001               	movlw	1	; select bank2/3
 12422  0913  0087               	movwf	7
 12423  0914  082C               	movf	handleFanSpeedChange@fan,w
 12424  0915  3E02               	addlw	2
 12425  0916  0084               	movwf	4
 12426  0917  3001               	movlw	1	; select bank2/3
 12427  0918  0085               	movwf	5
 12428  0919  0800               	movf	0,w
 12429  091A  0084               	movwf	4
 12430  091B  0185               	clrf	5
 12431  091C  0800               	movf	0,w
 12432  091D  0701               	addwf	1,w
 12433  091E  3EFF               	addlw	255
 12434  091F  3190  20BB         	fcall	_EUSART_Write
 12435  0921  0008               	return
 12436  0922                     __end_of_handleFanSpeedChange:	
 12437                           
 12438                           	psect	text4
 12439  0551                     __ptext4:	
 12440 ;; *************** function _handleUARTCommands *****************
 12441 ;; Defined at:
 12442 ;;		line 15 in file "uart_handler.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;		None
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;  i               1   31[BANK0 ] unsigned char 
 12447 ;;  index           1   28[BANK0 ] unsigned char 
 12448 ;;  index           1   27[BANK0 ] unsigned char 
 12449 ;;  received        1   30[BANK0 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;Total ram usage:        8 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:   10
 12466 ;; This function calls:
 12467 ;;		_EUSART_Read
 12468 ;;		_EUSART_is_rx_ready
 12469 ;;		___bmul
 12470 ;;		_handleFanToggleU
 12471 ;;		_processFanSpeedControlU
 12472 ;;		_setLightState
 12473 ;;		_syncFanToggleState
 12474 ;;		_uartLight
 12475 ;; This function is called by:
 12476 ;;		_main
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           
 12481                           ;psect for function _handleUARTCommands
 12482  0551                     _handleUARTCommands:	
 12483                           
 12484                           ;uart_handler.c: 17: if ((EUSART_is_rx_ready()))
 12485                           
 12486                           ;incstack = 0
 12487                           ; Regs used in _handleUARTCommands: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12488  0551  319F  27E1  3185   	fcall	_EUSART_is_rx_ready
 12489  0554  3A00               	xorlw	0
 12490  0555  1903               	skipnz
 12491  0556  0008               	return
 12492                           
 12493                           ;uart_handler.c: 18: {
 12494                           ;uart_handler.c: 19: char received = EUSART_Read();
 12495  0557  3190  20F4  3185   	fcall	_EUSART_Read
 12496  055A  0020               	movlb	0	; select bank0
 12497  055B  00B8               	movwf	??_handleUARTCommands
 12498  055C  0838               	movf	??_handleUARTCommands,w
 12499  055D  00BE               	movwf	handleUARTCommands@received
 12500                           
 12501                           ;uart_handler.c: 20: switch (received)
 12502  055E  2E60               	goto	l7977
 12503  055F                     l7903:	
 12504                           ;uart_handler.c: 21: {
 12505                           ;uart_handler.c: 22: case 'q':
 12506                           
 12507                           
 12508                           ;uart_handler.c: 23: if (*fans[0].state == 0)
 12509  055F  0023               	movlb	3	; select bank3
 12510  0560  084D               	movf	_fans^(0+384),w
 12511  0561  0086               	movwf	6
 12512  0562  0187               	clrf	7
 12513  0563  0801               	movf	1,w
 12514  0564  1D03               	btfss	3,2
 12515  0565  2D6D               	goto	l7909
 12516                           
 12517                           ;uart_handler.c: 24: {
 12518                           ;uart_handler.c: 25: ustate=1;
 12519  0566  0020               	movlb	0	; select bank0
 12520  0567  01D8               	clrf	_ustate
 12521  0568  0AD8               	incf	_ustate,f
 12522                           
 12523                           ;uart_handler.c: 26: handleFanToggleU(&fans[0]);
 12524  0569  30CD               	movlw	(low (_fans| (0+256)))& (0+255)
 12525  056A  3189  21F5  3185   	fcall	_handleFanToggleU
 12526  056D                     l7909:	
 12527                           
 12528                           ;uart_handler.c: 27: }
 12529                           ;uart_handler.c: 28: syncFanToggleState();
 12530  056D  3192  2295         	fcall	_syncFanToggleState
 12531                           
 12532                           ;uart_handler.c: 29: break;
 12533  056F  0008               	return
 12534  0570                     l7911:	
 12535                           ;uart_handler.c: 31: case 'r':
 12536                           
 12537                           
 12538                           ;uart_handler.c: 32: if (*fans[0].state == 1)
 12539  0570  0023               	movlb	3	; select bank3
 12540  0571  084D               	movf	_fans^(0+384),w
 12541  0572  0086               	movwf	6
 12542  0573  0187               	clrf	7
 12543  0574  0301               	decf	1,w
 12544  0575  1D03               	btfss	3,2
 12545  0576  2D7E               	goto	l7917
 12546                           
 12547                           ;uart_handler.c: 33: {
 12548                           ;uart_handler.c: 34: ustate=1;
 12549  0577  0020               	movlb	0	; select bank0
 12550  0578  01D8               	clrf	_ustate
 12551  0579  0AD8               	incf	_ustate,f
 12552                           
 12553                           ;uart_handler.c: 35: handleFanToggleU(&fans[0]);
 12554  057A  30CD               	movlw	(low (_fans| (0+256)))& (0+255)
 12555  057B  3189  21F5  3185   	fcall	_handleFanToggleU
 12556  057E                     l7917:	
 12557                           
 12558                           ;uart_handler.c: 36: }
 12559                           ;uart_handler.c: 37: syncFanToggleState();
 12560  057E  3192  2295         	fcall	_syncFanToggleState
 12561                           
 12562                           ;uart_handler.c: 38: break;
 12563  0580  0008               	return
 12564  0581                     l7919:	
 12565                           ;uart_handler.c: 40: case 's':
 12566                           
 12567                           
 12568                           ;uart_handler.c: 41: if (*fans[1].state == 0)
 12569  0581  0023               	movlb	3	; select bank3
 12570  0582  085E               	movf	(low ((_fans| (0+256)+17)))^(0+128),w
 12571  0583  0086               	movwf	6
 12572  0584  0187               	clrf	7
 12573  0585  0801               	movf	1,w
 12574  0586  1D03               	btfss	3,2
 12575  0587  2D8F               	goto	l7925
 12576                           
 12577                           ;uart_handler.c: 42: {
 12578                           ;uart_handler.c: 43: ustate=1;
 12579  0588  0020               	movlb	0	; select bank0
 12580  0589  01D8               	clrf	_ustate
 12581  058A  0AD8               	incf	_ustate,f
 12582                           
 12583                           ;uart_handler.c: 44: handleFanToggleU(&fans[1]);
 12584  058B  30DE               	movlw	(low ((_fans| (0+256)+17)))& (0+255)
 12585  058C  3189  21F5  3185   	fcall	_handleFanToggleU
 12586  058F                     l7925:	
 12587                           
 12588                           ;uart_handler.c: 45: }
 12589                           ;uart_handler.c: 47: syncFanToggleState();
 12590  058F  3192  2295         	fcall	_syncFanToggleState
 12591                           
 12592                           ;uart_handler.c: 48: break;
 12593  0591  0008               	return
 12594  0592                     l7927:	
 12595                           ;uart_handler.c: 50: case 't':
 12596                           
 12597                           
 12598                           ;uart_handler.c: 51: if (*fans[1].state == 1)
 12599  0592  0023               	movlb	3	; select bank3
 12600  0593  085E               	movf	(low ((_fans| (0+256)+17)))^(0+128),w
 12601  0594  0086               	movwf	6
 12602  0595  0187               	clrf	7
 12603  0596  0301               	decf	1,w
 12604  0597  1D03               	btfss	3,2
 12605  0598  2DA0               	goto	l7933
 12606                           
 12607                           ;uart_handler.c: 52: {
 12608                           ;uart_handler.c: 53: ustate=1;
 12609  0599  0020               	movlb	0	; select bank0
 12610  059A  01D8               	clrf	_ustate
 12611  059B  0AD8               	incf	_ustate,f
 12612                           
 12613                           ;uart_handler.c: 54: handleFanToggleU(&fans[1]);
 12614  059C  30DE               	movlw	(low ((_fans| (0+256)+17)))& (0+255)
 12615  059D  3189  21F5  3185   	fcall	_handleFanToggleU
 12616  05A0                     l7933:	
 12617                           
 12618                           ;uart_handler.c: 55: }
 12619                           ;uart_handler.c: 56: syncFanToggleState();
 12620  05A0  3192  2295         	fcall	_syncFanToggleState
 12621                           
 12622                           ;uart_handler.c: 57: break;
 12623  05A2  0008               	return
 12624  05A3                     l7935:	
 12625                           ;uart_handler.c: 59: case '0': case '1': case '2': case '3': case '4': {
 12626                           
 12627                           
 12628                           ;uart_handler.c: 60: uint8_t index = received - '0';
 12629  05A3  0020               	movlb	0	; select bank0
 12630  05A4  083E               	movf	handleUARTCommands@received,w
 12631  05A5  3ED0               	addlw	208
 12632  05A6  00B8               	movwf	??_handleUARTCommands
 12633  05A7  0838               	movf	??_handleUARTCommands,w
 12634  05A8  00BB               	movwf	handleUARTCommands@index
 12635                           
 12636                           ;uart_handler.c: 61: ustate = 1;
 12637  05A9  01D8               	clrf	_ustate
 12638  05AA  0AD8               	incf	_ustate,f
 12639                           
 12640                           ;uart_handler.c: 65: *(fanToggles[0].toggleState) = *fans[0].state;
 12641  05AB  3007               	movlw	7
 12642  05AC  00B8               	movwf	??_handleUARTCommands
 12643  05AD  0838               	movf	??_handleUARTCommands,w
 12644  05AE  00AA               	movwf	___bmul@multiplicand
 12645  05AF  083B               	movf	handleUARTCommands@index,w
 12646  05B0  3191  219C  3185   	fcall	___bmul
 12647  05B3  3EA0               	addlw	(low (_fanSpeedControls| (0+512)))& (0+255)
 12648  05B4  0020               	movlb	0	; select bank0
 12649  05B5  00B9               	movwf	??_handleUARTCommands+1
 12650  05B6  0839               	movf	??_handleUARTCommands+1,w
 12651  05B7  00BD               	movwf	_handleUARTCommands$3294
 12652                           
 12653                           ;uart_handler.c: 65: *(fanToggles[0].toggleState) = *fans[0].state;
 12654  05B8  083B               	movf	handleUARTCommands@index,w
 12655  05B9  00B8               	movwf	??_handleUARTCommands
 12656  05BA  0838               	movf	??_handleUARTCommands,w
 12657  05BB  00B2               	movwf	processFanSpeedControlU@index
 12658  05BC  083D               	movf	_handleUARTCommands$3294,w
 12659  05BD  3196  26EB  3185   	fcall	_processFanSpeedControlU
 12660                           
 12661                           ;uart_handler.c: 66: syncFanToggleState();
 12662  05C0  3192  2295         	fcall	_syncFanToggleState
 12663                           
 12664                           ;uart_handler.c: 67: break;
 12665  05C2  0008               	return
 12666  05C3                     l7945:	
 12667                           ;uart_handler.c: 68: }
 12668                           ;uart_handler.c: 70: case '5': case '6': case '7': case '8': case '9':
 12669                           
 12670                           
 12671                           ;uart_handler.c: 71: {
 12672                           ;uart_handler.c: 72: uint8_t index = (received - '5') + 5;
 12673  05C3  0020               	movlb	0	; select bank0
 12674  05C4  083E               	movf	handleUARTCommands@received,w
 12675  05C5  3ED0               	addlw	208
 12676  05C6  00B8               	movwf	??_handleUARTCommands
 12677  05C7  0838               	movf	??_handleUARTCommands,w
 12678  05C8  00BC               	movwf	handleUARTCommands@index_2479
 12679                           
 12680                           ;uart_handler.c: 73: ustate = 1;
 12681  05C9  01D8               	clrf	_ustate
 12682  05CA  0AD8               	incf	_ustate,f
 12683                           
 12684                           ;uart_handler.c: 76: *(fanToggles[1].toggleState) = *fans[1].state;
 12685  05CB  3007               	movlw	7
 12686  05CC  00B8               	movwf	??_handleUARTCommands
 12687  05CD  0838               	movf	??_handleUARTCommands,w
 12688  05CE  00AA               	movwf	___bmul@multiplicand
 12689  05CF  083C               	movf	handleUARTCommands@index_2479,w
 12690  05D0  3191  219C  3185   	fcall	___bmul
 12691  05D3  3EA0               	addlw	(low (_fanSpeedControls| (0+512)))& (0+255)
 12692  05D4  0020               	movlb	0	; select bank0
 12693  05D5  00B9               	movwf	??_handleUARTCommands+1
 12694  05D6  0839               	movf	??_handleUARTCommands+1,w
 12695  05D7  00BD               	movwf	_handleUARTCommands$3294
 12696                           
 12697                           ;uart_handler.c: 76: *(fanToggles[1].toggleState) = *fans[1].state;
 12698  05D8  083C               	movf	handleUARTCommands@index_2479,w
 12699  05D9  00B8               	movwf	??_handleUARTCommands
 12700  05DA  0838               	movf	??_handleUARTCommands,w
 12701  05DB  00B2               	movwf	processFanSpeedControlU@index
 12702  05DC  083D               	movf	_handleUARTCommands$3294,w
 12703  05DD  3196  26EB  3185   	fcall	_processFanSpeedControlU
 12704                           
 12705                           ;uart_handler.c: 77: syncFanToggleState();
 12706  05E0  3192  2295         	fcall	_syncFanToggleState
 12707                           
 12708                           ;uart_handler.c: 78: break;
 12709  05E2  0008               	return
 12710  05E3                     l7955:	
 12711                           ;uart_handler.c: 79: }
 12712                           ;uart_handler.c: 80: default:
 12713                           
 12714                           
 12715                           ;uart_handler.c: 81: for (uint8_t i = 0; i < 4; i++)
 12716  05E3  0020               	movlb	0	; select bank0
 12717  05E4  01BF               	clrf	handleUARTCommands@i
 12718  05E5                     L3:	
 12719  05E5  3004               	movlw	4
 12720  05E6  023F               	subwf	handleUARTCommands@i,w
 12721  05E7  1803               	btfsc	3,0
 12722  05E8  0008               	return
 12723                           
 12724                           ;uart_handler.c: 82: {
 12725                           ;uart_handler.c: 83: if (received == controls[i].uartOn || received == controls[i].uartO
      +                          ff) {
 12726  05E9  3009               	movlw	9
 12727  05EA  00B8               	movwf	??_handleUARTCommands
 12728  05EB  0838               	movf	??_handleUARTCommands,w
 12729  05EC  00AA               	movwf	___bmul@multiplicand
 12730  05ED  083F               	movf	handleUARTCommands@i,w
 12731  05EE  3191  219C  3185   	fcall	___bmul
 12732  05F1  3E01               	addlw	1
 12733  05F2  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12734  05F3  0086               	movwf	6
 12735  05F4  3002               	movlw	2	; select bank4/5
 12736  05F5  0087               	movwf	7
 12737  05F6  0801               	movf	1,w
 12738  05F7  0020               	movlb	0	; select bank0
 12739  05F8  063E               	xorwf	handleUARTCommands@received,w
 12740  05F9  1903               	skipnz
 12741  05FA  2E0D               	goto	l7965
 12742  05FB  3009               	movlw	9
 12743  05FC  00B8               	movwf	??_handleUARTCommands
 12744  05FD  0838               	movf	??_handleUARTCommands,w
 12745  05FE  00AA               	movwf	___bmul@multiplicand
 12746  05FF  083F               	movf	handleUARTCommands@i,w
 12747  0600  3191  219C  3185   	fcall	___bmul
 12748  0603  3E02               	addlw	2
 12749  0604  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12750  0605  0086               	movwf	6
 12751  0606  3002               	movlw	2	; select bank4/5
 12752  0607  0087               	movwf	7
 12753  0608  0801               	movf	1,w
 12754  0609  0020               	movlb	0	; select bank0
 12755  060A  063E               	xorwf	handleUARTCommands@received,w
 12756  060B  1D03               	skipz
 12757  060C  2E5A               	goto	l7971
 12758  060D                     l7965:	
 12759                           
 12760                           ;uart_handler.c: 84: uartLight(received);
 12761  060D  083E               	movf	handleUARTCommands@received,w
 12762  060E  3196  263E  3185   	fcall	_uartLight
 12763                           
 12764                           ;uart_handler.c: 85: controls[i].toggle = (received == controls[i].uartOn);
 12765  0611  3009               	movlw	9
 12766  0612  0020               	movlb	0	; select bank0
 12767  0613  00B8               	movwf	??_handleUARTCommands
 12768  0614  0838               	movf	??_handleUARTCommands,w
 12769  0615  00AA               	movwf	___bmul@multiplicand
 12770  0616  083F               	movf	handleUARTCommands@i,w
 12771  0617  3191  219C  3185   	fcall	___bmul
 12772  061A  3E01               	addlw	1
 12773  061B  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12774  061C  0086               	movwf	6
 12775  061D  3002               	movlw	2	; select bank4/5
 12776  061E  0087               	movwf	7
 12777  061F  0801               	movf	1,w
 12778  0620  0020               	movlb	0	; select bank0
 12779  0621  063E               	xorwf	handleUARTCommands@received,w
 12780  0622  1D03               	btfss	3,2
 12781  0623  2E26               	goto	u8670
 12782  0624  3001               	movlw	1
 12783  0625  2E27               	goto	u8680
 12784  0626                     u8670:	
 12785  0626  3000               	movlw	0
 12786  0627                     u8680:	
 12787  0627  00B9               	movwf	??_handleUARTCommands+1
 12788  0628  3009               	movlw	9
 12789  0629  00BA               	movwf	??_handleUARTCommands+2
 12790  062A  083A               	movf	??_handleUARTCommands+2,w
 12791  062B  00AA               	movwf	___bmul@multiplicand
 12792  062C  083F               	movf	handleUARTCommands@i,w
 12793  062D  3191  219C  3185   	fcall	___bmul
 12794  0630  3E03               	addlw	3
 12795  0631  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12796  0632  0086               	movwf	6
 12797  0633  3002               	movlw	2	; select bank4/5
 12798  0634  0087               	movwf	7
 12799  0635  0020               	movlb	0	; select bank0
 12800  0636  0839               	movf	??_handleUARTCommands+1,w
 12801  0637  0081               	movwf	1
 12802                           
 12803                           ;uart_handler.c: 86: setLightState(controls[i].touchID, controls[i].toggle);
 12804  0638  3009               	movlw	9
 12805  0639  00B8               	movwf	??_handleUARTCommands
 12806  063A  0838               	movf	??_handleUARTCommands,w
 12807  063B  00AA               	movwf	___bmul@multiplicand
 12808  063C  083F               	movf	handleUARTCommands@i,w
 12809  063D  3191  219C  3185   	fcall	___bmul
 12810  0640  3E03               	addlw	3
 12811  0641  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12812  0642  0086               	movwf	6
 12813  0643  3002               	movlw	2	; select bank4/5
 12814  0644  0087               	movwf	7
 12815  0645  0801               	movf	1,w
 12816  0646  0020               	movlb	0	; select bank0
 12817  0647  00B9               	movwf	??_handleUARTCommands+1
 12818  0648  0839               	movf	??_handleUARTCommands+1,w
 12819  0649  00AE               	movwf	setLightState@state
 12820  064A  3009               	movlw	9
 12821  064B  00BA               	movwf	??_handleUARTCommands+2
 12822  064C  083A               	movf	??_handleUARTCommands+2,w
 12823  064D  00AA               	movwf	___bmul@multiplicand
 12824  064E  083F               	movf	handleUARTCommands@i,w
 12825  064F  3191  219C  3185   	fcall	___bmul
 12826  0652  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 12827  0653  0086               	movwf	6
 12828  0654  3002               	movlw	2	; select bank4/5
 12829  0655  0087               	movwf	7
 12830  0656  0801               	movf	1,w
 12831  0657  3195  254F         	fcall	_setLightState
 12832                           
 12833                           ;uart_handler.c: 88: break;
 12834  0659  0008               	return
 12835  065A                     l7971:	
 12836  065A  3001               	movlw	1
 12837  065B  0020               	movlb	0	; select bank0
 12838  065C  00B8               	movwf	??_handleUARTCommands
 12839  065D  0838               	movf	??_handleUARTCommands,w
 12840  065E  07BF               	addwf	handleUARTCommands@i,f
 12841  065F  2DE5               	goto	L3
 12842  0660                     l7977:	
 12843                           ;uart_handler.c: 92: }
 12844                           
 12845                           ;uart_handler.c: 89: }
 12846                           ;uart_handler.c: 90: }
 12847                           ;uart_handler.c: 91: break;
 12848                           
 12849  0660  083E               	movf	handleUARTCommands@received,w
 12850                           
 12851                           ; Switch size 1, requested type "space"
 12852                           ; Number of cases is 14, Range of values is 48 to 116
 12853                           ; switch strategies available:
 12854                           ; Name         Instructions Cycles
 12855                           ; simple_byte           43    22 (average)
 12856                           ; direct_byte          147     9 (fixed)
 12857                           ; jumptable            263     9 (fixed)
 12858                           ;	Chosen strategy is simple_byte
 12859  0661  3A30               	xorlw	48	; case 48
 12860  0662  1903               	skipnz
 12861  0663  2DA3               	goto	l7935
 12862  0664  3A01               	xorlw	1	; case 49
 12863  0665  1903               	skipnz
 12864  0666  2DA3               	goto	l7935
 12865  0667  3A03               	xorlw	3	; case 50
 12866  0668  1903               	skipnz
 12867  0669  2DA3               	goto	l7935
 12868  066A  3A01               	xorlw	1	; case 51
 12869  066B  1903               	skipnz
 12870  066C  2DA3               	goto	l7935
 12871  066D  3A07               	xorlw	7	; case 52
 12872  066E  1903               	skipnz
 12873  066F  2DA3               	goto	l7935
 12874  0670  3A01               	xorlw	1	; case 53
 12875  0671  1903               	skipnz
 12876  0672  2DC3               	goto	l7945
 12877  0673  3A03               	xorlw	3	; case 54
 12878  0674  1903               	skipnz
 12879  0675  2DC3               	goto	l7945
 12880  0676  3A01               	xorlw	1	; case 55
 12881  0677  1903               	skipnz
 12882  0678  2DC3               	goto	l7945
 12883  0679  3A0F               	xorlw	15	; case 56
 12884  067A  1903               	skipnz
 12885  067B  2DC3               	goto	l7945
 12886  067C  3A01               	xorlw	1	; case 57
 12887  067D  1903               	skipnz
 12888  067E  2DC3               	goto	l7945
 12889  067F  3A48               	xorlw	72	; case 113
 12890  0680  1903               	skipnz
 12891  0681  2D5F               	goto	l7903
 12892  0682  3A03               	xorlw	3	; case 114
 12893  0683  1903               	skipnz
 12894  0684  2D70               	goto	l7911
 12895  0685  3A01               	xorlw	1	; case 115
 12896  0686  1903               	skipnz
 12897  0687  2D81               	goto	l7919
 12898  0688  3A07               	xorlw	7	; case 116
 12899  0689  1903               	skipnz
 12900  068A  2D92               	goto	l7927
 12901  068B  2DE3               	goto	l7955
 12902  068C  0008               	return
 12903  068D                     __end_of_handleUARTCommands:	
 12904                           
 12905                           	psect	text5
 12906  163E                     __ptext5:	
 12907 ;; *************** function _uartLight *****************
 12908 ;; Defined at:
 12909 ;;		line 30 in file "load_handler.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;  received        1    wreg     unsigned char 
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;  received        1   10[BANK0 ] unsigned char 
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      void 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;Total ram usage:        1 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    7
 12930 ;; This function calls:
 12931 ;;		Nothing
 12932 ;; This function is called by:
 12933 ;;		_handleUARTCommands
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           
 12938                           ;psect for function _uartLight
 12939  163E                     _uartLight:	
 12940                           
 12941                           ;incstack = 0
 12942                           ; Regs used in _uartLight: [wreg-fsr0h+status,2+status,0]
 12943                           ;uartLight@received stored from wreg
 12944  163E  0020               	movlb	0	; select bank0
 12945  163F  00AA               	movwf	uartLight@received
 12946                           
 12947                           ;load_handler.c: 31: switch (received) {
 12948  1640  2E51               	goto	l7653
 12949  1641                     l1472:	
 12950                           ;load_handler.c: 32: case 'a': do { LATCbits.LATC0 = 1; } while(0); break;
 12951                           
 12952  1641  1418               	bsf	24,0	;volatile
 12953  1642  0008               	return
 12954  1643                     l1476:	
 12955                           ;load_handler.c: 33: case 'b': do { LATCbits.LATC0 = 0; } while(0); break;
 12956                           
 12957  1643  1018               	bcf	24,0	;volatile
 12958  1644  0008               	return
 12959  1645                     l1479:	
 12960                           ;load_handler.c: 34: case 'c': do { LATCbits.LATC1 = 1; } while(0); break;
 12961                           
 12962  1645  1498               	bsf	24,1	;volatile
 12963  1646  0008               	return
 12964  1647                     l1482:	
 12965                           ;load_handler.c: 35: case 'd': do { LATCbits.LATC1 = 0; } while(0); break;
 12966                           
 12967  1647  1098               	bcf	24,1	;volatile
 12968  1648  0008               	return
 12969  1649                     l1485:	
 12970                           ;load_handler.c: 36: case 'e': do { LATCbits.LATC2 = 1; } while(0); break;
 12971                           
 12972  1649  1518               	bsf	24,2	;volatile
 12973  164A  0008               	return
 12974  164B                     l1488:	
 12975                           ;load_handler.c: 37: case 'f': do { LATCbits.LATC2 = 0; } while(0); break;
 12976                           
 12977  164B  1118               	bcf	24,2	;volatile
 12978  164C  0008               	return
 12979  164D                     l1491:	
 12980                           ;load_handler.c: 38: case 'g': do { LATCbits.LATC3 = 1; } while(0); break;
 12981                           
 12982  164D  1598               	bsf	24,3	;volatile
 12983  164E  0008               	return
 12984  164F                     l1494:	
 12985                           ;load_handler.c: 39: case 'h': do { LATCbits.LATC3 = 0; } while(0); break;
 12986                           
 12987  164F  1198               	bcf	24,3	;volatile
 12988                           
 12989                           ;load_handler.c: 58: }
 12990                           
 12991                           ;load_handler.c: 57: default: break;
 12992                           
 12993                           ;load_handler.c: 53: case 'z':
 12994                           ;load_handler.c: 56: break;
 12995                           
 12996                           ;load_handler.c: 52: case 'y':
 12997  1650  0008               	return
 12998  1651                     l7653:	
 12999  1651  082A               	movf	uartLight@received,w
 13000                           
 13001                           ; Switch size 1, requested type "space"
 13002                           ; Number of cases is 10, Range of values is 97 to 122
 13003                           ; switch strategies available:
 13004                           ; Name         Instructions Cycles
 13005                           ; simple_byte           31    16 (average)
 13006                           ; direct_byte           61     9 (fixed)
 13007                           ; jumptable            263     9 (fixed)
 13008                           ;	Chosen strategy is simple_byte
 13009  1652  3A61               	xorlw	97	; case 97
 13010  1653  1903               	skipnz
 13011  1654  2E41               	goto	l1472
 13012  1655  3A03               	xorlw	3	; case 98
 13013  1656  1903               	skipnz
 13014  1657  2E43               	goto	l1476
 13015  1658  3A01               	xorlw	1	; case 99
 13016  1659  1903               	skipnz
 13017  165A  2E45               	goto	l1479
 13018  165B  3A07               	xorlw	7	; case 100
 13019  165C  1903               	skipnz
 13020  165D  2E47               	goto	l1482
 13021  165E  3A01               	xorlw	1	; case 101
 13022  165F  1903               	skipnz
 13023  1660  2E49               	goto	l1485
 13024  1661  3A03               	xorlw	3	; case 102
 13025  1662  1903               	skipnz
 13026  1663  2E4B               	goto	l1488
 13027  1664  3A01               	xorlw	1	; case 103
 13028  1665  1903               	skipnz
 13029  1666  2E4D               	goto	l1491
 13030  1667  3A0F               	xorlw	15	; case 104
 13031  1668  1903               	skipnz
 13032  1669  2E4F               	goto	l1494
 13033  166A  3A11               	xorlw	17	; case 121
 13034  166B  1903               	skipnz
 13035  166C  2E71               	goto	l1499
 13036  166D  3A03               	xorlw	3	; case 122
 13037  166E  1903               	skipnz
 13038  166F  2E71               	goto	l1499
 13039  1670  2E71               	goto	l1499
 13040  1671                     l1499:	
 13041  1671  0008               	return
 13042  1672                     __end_of_uartLight:	
 13043                           
 13044                           	psect	text6
 13045  16EB                     __ptext6:	
 13046 ;; *************** function _processFanSpeedControlU *****************
 13047 ;; Defined at:
 13048 ;;		line 116 in file "touch_handler.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;  fc              1    wreg     PTR struct .
 13051 ;;		 -> fanSpeedControls(70), 
 13052 ;;  index           1   18[BANK0 ] unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;  fc              1   22[BANK0 ] PTR struct .
 13055 ;;		 -> fanSpeedControls(70), 
 13056 ;;  fan             1   23[BANK0 ] PTR struct .
 13057 ;;		 -> fans(34), 
 13058 ;; Return value:  Size  Location     Type
 13059 ;;                  1    wreg      void 
 13060 ;; Registers used:
 13061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13062 ;; Tracked objects:
 13063 ;;		On entry : 0/0
 13064 ;;		On exit  : 0/0
 13065 ;;		Unchanged: 0/0
 13066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13067 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;Total ram usage:        6 bytes
 13072 ;; Hardware stack levels used:    1
 13073 ;; Hardware stack levels required when called:    9
 13074 ;; This function calls:
 13075 ;;		___awmod
 13076 ;;		_handleFanToggleU
 13077 ;;		_syncFanToggleState
 13078 ;; This function is called by:
 13079 ;;		_handleUARTCommands
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           
 13084                           ;psect for function _processFanSpeedControlU
 13085  16EB                     _processFanSpeedControlU:	
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _processFanSpeedControlU: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13089                           ;processFanSpeedControlU@fc stored from wreg
 13090  16EB  0020               	movlb	0	; select bank0
 13091  16EC  00B6               	movwf	processFanSpeedControlU@fc
 13092                           
 13093                           ;touch_handler.c: 118: *(fc->ledStatus) = *(fc->fanSpeed);
 13094  16ED  3005               	movlw	5
 13095  16EE  00AA               	movwf	___awmod@divisor
 13096  16EF  3000               	movlw	0
 13097  16F0  00AB               	movwf	___awmod@divisor+1
 13098  16F1  0832               	movf	processFanSpeedControlU@index,w
 13099  16F2  00B3               	movwf	??_processFanSpeedControlU
 13100  16F3  01B4               	clrf	??_processFanSpeedControlU+1
 13101  16F4  0833               	movf	??_processFanSpeedControlU,w
 13102  16F5  00AC               	movwf	___awmod@dividend
 13103  16F6  0834               	movf	??_processFanSpeedControlU+1,w
 13104  16F7  00AD               	movwf	___awmod@dividend+1
 13105  16F8  3197  2771  3196   	fcall	___awmod
 13106  16FB  0020               	movlb	0	; select bank0
 13107  16FC  082A               	movf	?___awmod,w
 13108  16FD  3E01               	addlw	1
 13109  16FE  00B5               	movwf	??_processFanSpeedControlU+2
 13110  16FF  0836               	movf	processFanSpeedControlU@fc,w
 13111  1700  3E02               	addlw	2
 13112  1701  0086               	movwf	6
 13113  1702  3002               	movlw	2	; select bank4/5
 13114  1703  0087               	movwf	7
 13115  1704  0801               	movf	1,w
 13116  1705  0086               	movwf	6
 13117  1706  0187               	clrf	7
 13118  1707  0835               	movf	??_processFanSpeedControlU+2,w
 13119  1708  0081               	movwf	1
 13120                           
 13121                           ;touch_handler.c: 119: FanControl* fan = (fc->fanSpeed == fans[0].fan) ? &fans[0] : &fan
      +                          s[1];
 13122  1709  0836               	movf	processFanSpeedControlU@fc,w
 13123  170A  3E02               	addlw	2
 13124  170B  0086               	movwf	6
 13125  170C  3002               	movlw	2	; select bank4/5
 13126  170D  0087               	movwf	7
 13127  170E  0801               	movf	1,w
 13128  170F  0023               	movlb	3	; select bank3
 13129  1710  064F               	xorwf	(low ((_fans| (0+256)+2)))^(0+128),w
 13130  1711  1903               	skipnz
 13131  1712  2F15               	goto	l7661
 13132  1713  30DE               	movlw	(low ((_fans| (0+256)+17)))& (0+255)
 13133  1714  2F16               	goto	L4
 13134  1715                     l7661:	
 13135  1715  30CD               	movlw	(low (_fans| (0+256)))& (0+255)
 13136  1716                     L4:	
 13137  1716  0020               	movlb	0	; select bank0
 13138  1717  00B3               	movwf	??_processFanSpeedControlU
 13139  1718  0833               	movf	??_processFanSpeedControlU,w
 13140  1719  00B7               	movwf	processFanSpeedControlU@fan
 13141                           
 13142                           ;touch_handler.c: 120: if (*fan->state == 0)
 13143  171A  0837               	movf	processFanSpeedControlU@fan,w
 13144  171B  0086               	movwf	6
 13145  171C  3001               	movlw	1	; select bank2/3
 13146  171D  0087               	movwf	7
 13147  171E  0801               	movf	1,w
 13148  171F  0086               	movwf	6
 13149  1720  0187               	clrf	7
 13150  1721  0801               	movf	1,w
 13151  1722  1D03               	btfss	3,2
 13152  1723  2F28               	goto	l7667
 13153                           
 13154                           ;touch_handler.c: 121: {
 13155                           ;touch_handler.c: 122: handleFanToggleU(fan);
 13156  1724  0837               	movf	processFanSpeedControlU@fan,w
 13157  1725  3189  21F5  3196   	fcall	_handleFanToggleU
 13158  1728                     l7667:	
 13159                           
 13160                           ;touch_handler.c: 124: }
 13161                           ;touch_handler.c: 126: syncFanToggleState();
 13162  1728  3192  2295         	fcall	_syncFanToggleState
 13163  172A  0008               	return
 13164  172B                     __end_of_processFanSpeedControlU:	
 13165                           
 13166                           	psect	text7
 13167  1295                     __ptext7:	
 13168 ;; *************** function _syncFanToggleState *****************
 13169 ;; Defined at:
 13170 ;;		line 147 in file "touch_handler.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;  ft              1   16[BANK0 ] PTR struct .
 13175 ;;		 -> fanToggles(14), 
 13176 ;;  i               1   17[BANK0 ] unsigned char 
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  1    wreg      void 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0, pclath, cstack
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;Total ram usage:        4 bytes
 13191 ;; Hardware stack levels used:    1
 13192 ;; Hardware stack levels required when called:    8
 13193 ;; This function calls:
 13194 ;;		___bmul
 13195 ;; This function is called by:
 13196 ;;		_ir_handler
 13197 ;;		_processFanSpeedControlU
 13198 ;;		_handleUARTCommands
 13199 ;;		_processFanSpeedControl
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function _syncFanToggleState
 13205  1295                     _syncFanToggleState:	
 13206                           
 13207                           ;touch_handler.c: 148: for (uint8_t i = 0; i < 2; i++) {
 13208                           
 13209                           ;incstack = 0
 13210                           ; Regs used in _syncFanToggleState: [wreg+status,2+status,0+pclath+cstack]
 13211  1295  0020               	movlb	0	; select bank0
 13212  1296  01B1               	clrf	syncFanToggleState@i
 13213  1297                     L5:	
 13214  1297  3002               	movlw	2
 13215  1298  0231               	subwf	syncFanToggleState@i,w
 13216  1299  1803               	btfsc	3,0
 13217  129A  0008               	return
 13218                           
 13219                           ;touch_handler.c: 151: *(ft->toggleFlag) = 0;
 13220  129B  3007               	movlw	7
 13221  129C  00AE               	movwf	??_syncFanToggleState
 13222  129D  082E               	movf	??_syncFanToggleState,w
 13223  129E  00AA               	movwf	___bmul@multiplicand
 13224  129F  0831               	movf	syncFanToggleState@i,w
 13225  12A0  3191  219C  3192   	fcall	___bmul
 13226  12A3  3E57               	addlw	(low (_fanToggles| (0+256)))& (0+255)
 13227  12A4  0020               	movlb	0	; select bank0
 13228  12A5  00AF               	movwf	??_syncFanToggleState+1
 13229  12A6  082F               	movf	??_syncFanToggleState+1,w
 13230  12A7  00B0               	movwf	syncFanToggleState@ft
 13231  12A8  3001               	movlw	1
 13232  12A9  00AE               	movwf	??_syncFanToggleState
 13233  12AA  082E               	movf	??_syncFanToggleState,w
 13234  12AB  07B1               	addwf	syncFanToggleState@i,f
 13235  12AC  2A97               	goto	L5
 13236  12AD                     __end_of_syncFanToggleState:	
 13237                           
 13238                           	psect	text8
 13239  09F5                     __ptext8:	
 13240 ;; *************** function _handleFanToggleU *****************
 13241 ;; Defined at:
 13242 ;;		line 101 in file "load_handler.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  fan             1    wreg     PTR struct .
 13245 ;;		 -> fans(34), 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  fan             1   15[BANK0 ] PTR struct .
 13248 ;;		 -> fans(34), 
 13249 ;;  index           1   14[BANK0 ] unsigned char 
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  1    wreg      void 
 13252 ;; Registers used:
 13253 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;Total ram usage:        6 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    7
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_processFanSpeedControlU
 13270 ;;		_handleUARTCommands
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _handleFanToggleU
 13276  09F5                     _handleFanToggleU:	
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _handleFanToggleU: [wreg+fsr1l+fsr1h+status,2+status,0]
 13280                           ;handleFanToggleU@fan stored from wreg
 13281  09F5  0020               	movlb	0	; select bank0
 13282  09F6  00AF               	movwf	handleFanToggleU@fan
 13283                           
 13284                           ;load_handler.c: 103: uint8_t index = (fan == &fans[1]) ? 1 : 0;
 13285  09F7  082F               	movf	handleFanToggleU@fan,w
 13286  09F8  3ADE               	xorlw	(low ((_fans| (0+256)+17)))& (0+255)
 13287  09F9  1D03               	btfss	3,2
 13288  09FA  29FD               	goto	u7680
 13289  09FB  3001               	movlw	1
 13290  09FC  29FE               	goto	u7690
 13291  09FD                     u7680:	
 13292  09FD  3000               	movlw	0
 13293  09FE                     u7690:	
 13294  09FE  00AA               	movwf	??_handleFanToggleU
 13295  09FF  082A               	movf	??_handleFanToggleU,w
 13296  0A00  00AE               	movwf	handleFanToggleU@index
 13297                           
 13298                           ;load_handler.c: 109: *fan->led = 0;
 13299  0A01  082F               	movf	handleFanToggleU@fan,w
 13300  0A02  0086               	movwf	6
 13301  0A03  3001               	movlw	1	; select bank2/3
 13302  0A04  0087               	movwf	7
 13303  0A05  0801               	movf	1,w
 13304  0A06  0086               	movwf	6
 13305  0A07  0187               	clrf	7
 13306  0A08  0301               	decf	1,w
 13307  0A09  1D03               	btfss	3,2
 13308  0A0A  2A1C               	goto	l7407
 13309                           
 13310                           ;load_handler.c: 112: *fan->state = 0;
 13311  0A0B  082F               	movf	handleFanToggleU@fan,w
 13312  0A0C  3E02               	addlw	2
 13313  0A0D  0086               	movwf	6
 13314  0A0E  3001               	movlw	1	; select bank2/3
 13315  0A0F  0087               	movwf	7
 13316  0A10  0801               	movf	1,w
 13317  0A11  0086               	movwf	6
 13318  0A12  0187               	clrf	7
 13319  0A13  0801               	movf	1,w
 13320  0A14  00AA               	movwf	??_handleFanToggleU
 13321  0A15  082E               	movf	handleFanToggleU@index,w
 13322  0A16  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 13323  0A17  0086               	movwf	6
 13324  0A18  0187               	clrf	7
 13325  0A19  082A               	movf	??_handleFanToggleU,w
 13326  0A1A  0081               	movwf	1
 13327                           
 13328                           ;load_handler.c: 113: } else {
 13329  0A1B  0008               	return
 13330  0A1C                     l7407:	
 13331                           ;load_handler.c: 115: *fan->fn = 1;
 13332                           
 13333                           
 13334                           ;load_handler.c: 117: if (*fan->fan < 1 || *fan->fan > 5) {
 13335  0A1C  082F               	movf	handleFanToggleU@fan,w
 13336  0A1D  3E02               	addlw	2
 13337  0A1E  0086               	movwf	6
 13338  0A1F  3001               	movlw	1	; select bank2/3
 13339  0A20  0087               	movwf	7
 13340  0A21  0801               	movf	1,w
 13341  0A22  0086               	movwf	6
 13342  0A23  0187               	clrf	7
 13343  0A24  0801               	movf	1,w
 13344  0A25  1903               	btfsc	3,2
 13345  0A26  2A33               	goto	l7411
 13346  0A27  082F               	movf	handleFanToggleU@fan,w
 13347  0A28  3E02               	addlw	2
 13348  0A29  0086               	movwf	6
 13349  0A2A  3001               	movlw	1	; select bank2/3
 13350  0A2B  0087               	movwf	7
 13351  0A2C  0801               	movf	1,w
 13352  0A2D  0086               	movwf	6
 13353  0A2E  0187               	clrf	7
 13354  0A2F  3006               	movlw	6
 13355  0A30  0201               	subwf	1,w
 13356  0A31  1C03               	skipc
 13357  0A32  2A51               	goto	l1518
 13358  0A33                     l7411:	
 13359                           
 13360                           ;load_handler.c: 118: *fan->fan = (lastFanSpeed[index] >= 1 && lastFanSpeed[index] <= 5)
      +                           ? lastFanSpeed[index] : 1;
 13361  0A33  082E               	movf	handleFanToggleU@index,w
 13362  0A34  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 13363  0A35  0086               	movwf	6
 13364  0A36  0187               	clrf	7
 13365  0A37  0801               	movf	1,w
 13366  0A38  1903               	btfsc	3,2
 13367  0A39  2A42               	goto	l7415
 13368  0A3A  082E               	movf	handleFanToggleU@index,w
 13369  0A3B  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 13370  0A3C  0086               	movwf	6
 13371  0A3D  0187               	clrf	7
 13372  0A3E  3006               	movlw	6
 13373  0A3F  0201               	subwf	1,w
 13374  0A40  1C03               	skipc
 13375  0A41  2A46               	goto	l7417
 13376  0A42                     l7415:	
 13377  0A42  3001               	movlw	1
 13378  0A43  00AC               	movwf	_handleFanToggleU$2059
 13379  0A44  3000               	movlw	0
 13380  0A45  2A50               	goto	L6
 13381  0A46                     l7417:	
 13382  0A46  082E               	movf	handleFanToggleU@index,w
 13383  0A47  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 13384  0A48  0086               	movwf	6
 13385  0A49  0187               	clrf	7
 13386  0A4A  0801               	movf	1,w
 13387  0A4B  00AA               	movwf	??_handleFanToggleU
 13388  0A4C  01AB               	clrf	??_handleFanToggleU+1
 13389  0A4D  082A               	movf	??_handleFanToggleU,w
 13390  0A4E  00AC               	movwf	_handleFanToggleU$2059
 13391  0A4F  082B               	movf	??_handleFanToggleU+1,w
 13392  0A50                     L6:	
 13393  0A50  00AD               	movwf	_handleFanToggleU$2059+1
 13394  0A51                     l1518:	
 13395                           
 13396                           ;load_handler.c: 123: *fan->state = 1;
 13397  0A51  082F               	movf	handleFanToggleU@fan,w
 13398  0A52  3E02               	addlw	2
 13399  0A53  0086               	movwf	6
 13400  0A54  3001               	movlw	1	; select bank2/3
 13401  0A55  0087               	movwf	7
 13402  0A56  0801               	movf	1,w
 13403  0A57  0086               	movwf	6
 13404  0A58  0187               	clrf	7
 13405  0A59  0801               	movf	1,w
 13406  0A5A  00AA               	movwf	??_handleFanToggleU
 13407  0A5B  082E               	movf	handleFanToggleU@index,w
 13408  0A5C  3E63               	addlw	(low (_lastFanSpeed| 0))& (0+255)
 13409  0A5D  0086               	movwf	6
 13410  0A5E  0187               	clrf	7
 13411  0A5F  082A               	movf	??_handleFanToggleU,w
 13412  0A60  0081               	movwf	1
 13413  0A61  0008               	return
 13414  0A62                     __end_of_handleFanToggleU:	
 13415                           
 13416                           	psect	text9
 13417  1771                     __ptext9:	
 13418 ;; *************** function ___awmod *****************
 13419 ;; Defined at:
 13420 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  divisor         2   10[BANK0 ] int 
 13423 ;;  dividend        2   12[BANK0 ] int 
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;  sign            1   16[BANK0 ] unsigned char 
 13426 ;;  counter         1   15[BANK0 ] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  2   10[BANK0 ] int 
 13429 ;; Registers used:
 13430 ;;		wreg, status,2, status,0
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13436 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;Total ram usage:        7 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    7
 13443 ;; This function calls:
 13444 ;;		Nothing
 13445 ;; This function is called by:
 13446 ;;		_processFanSpeedControlU
 13447 ;;		_processFanSpeedControl
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           
 13452                           ;psect for function ___awmod
 13453  1771                     ___awmod:	
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 13457  1771  0020               	movlb	0	; select bank0
 13458  1772  01B0               	clrf	___awmod@sign
 13459  1773  1FAD               	btfss	___awmod@dividend+1,7
 13460  1774  2F7C               	goto	l7427
 13461  1775  09AC               	comf	___awmod@dividend,f
 13462  1776  09AD               	comf	___awmod@dividend+1,f
 13463  1777  0AAC               	incf	___awmod@dividend,f
 13464  1778  1903               	skipnz
 13465  1779  0AAD               	incf	___awmod@dividend+1,f
 13466  177A  01B0               	clrf	___awmod@sign
 13467  177B  0AB0               	incf	___awmod@sign,f
 13468  177C                     l7427:	
 13469  177C  1FAB               	btfss	___awmod@divisor+1,7
 13470  177D  2F83               	goto	l7431
 13471  177E  09AA               	comf	___awmod@divisor,f
 13472  177F  09AB               	comf	___awmod@divisor+1,f
 13473  1780  0AAA               	incf	___awmod@divisor,f
 13474  1781  1903               	skipnz
 13475  1782  0AAB               	incf	___awmod@divisor+1,f
 13476  1783                     l7431:	
 13477  1783  082A               	movf	___awmod@divisor,w
 13478  1784  042B               	iorwf	___awmod@divisor+1,w
 13479  1785  1903               	btfsc	3,2
 13480  1786  2FAA               	goto	l7449
 13481  1787  01AF               	clrf	___awmod@counter
 13482  1788  0AAF               	incf	___awmod@counter,f
 13483  1789                     l7439:	
 13484  1789  1BAB               	btfsc	___awmod@divisor+1,7
 13485  178A  2F95               	goto	l7441
 13486  178B  3001               	movlw	1
 13487  178C                     u7785:	
 13488  178C  35AA               	lslf	___awmod@divisor,f
 13489  178D  0DAB               	rlf	___awmod@divisor+1,f
 13490  178E  0B89               	decfsz	9,f
 13491  178F  2F8C               	goto	u7785
 13492  1790  3001               	movlw	1
 13493  1791  00AE               	movwf	??___awmod
 13494  1792  082E               	movf	??___awmod,w
 13495  1793  07AF               	addwf	___awmod@counter,f
 13496  1794  2F89               	goto	l7439
 13497  1795                     l7441:	
 13498  1795  082B               	movf	___awmod@divisor+1,w
 13499  1796  022D               	subwf	___awmod@dividend+1,w
 13500  1797  1D03               	skipz
 13501  1798  2F9B               	goto	u7805
 13502  1799  082A               	movf	___awmod@divisor,w
 13503  179A  022C               	subwf	___awmod@dividend,w
 13504  179B                     u7805:	
 13505  179B  1C03               	skipc
 13506  179C  2FA1               	goto	l7445
 13507  179D  082A               	movf	___awmod@divisor,w
 13508  179E  02AC               	subwf	___awmod@dividend,f
 13509  179F  082B               	movf	___awmod@divisor+1,w
 13510  17A0  3BAD               	subwfb	___awmod@dividend+1,f
 13511  17A1                     l7445:	
 13512  17A1  3001               	movlw	1
 13513  17A2                     u7815:	
 13514  17A2  36AB               	lsrf	___awmod@divisor+1,f
 13515  17A3  0CAA               	rrf	___awmod@divisor,f
 13516  17A4  0B89               	decfsz	9,f
 13517  17A5  2FA2               	goto	u7815
 13518  17A6  3001               	movlw	1
 13519  17A7  02AF               	subwf	___awmod@counter,f
 13520  17A8  1D03               	btfss	3,2
 13521  17A9  2F95               	goto	l7441
 13522  17AA                     l7449:	
 13523  17AA  0830               	movf	___awmod@sign,w
 13524  17AB  1903               	btfsc	3,2
 13525  17AC  2FB2               	goto	l7453
 13526  17AD  09AC               	comf	___awmod@dividend,f
 13527  17AE  09AD               	comf	___awmod@dividend+1,f
 13528  17AF  0AAC               	incf	___awmod@dividend,f
 13529  17B0  1903               	skipnz
 13530  17B1  0AAD               	incf	___awmod@dividend+1,f
 13531  17B2                     l7453:	
 13532  17B2  082D               	movf	___awmod@dividend+1,w
 13533  17B3  00AB               	movwf	?___awmod+1
 13534  17B4  082C               	movf	___awmod@dividend,w
 13535  17B5  00AA               	movwf	?___awmod
 13536  17B6  0008               	return
 13537  17B7                     __end_of___awmod:	
 13538                           
 13539                           	psect	text10
 13540  1FE1                     __ptext10:	
 13541 ;; *************** function _EUSART_is_rx_ready *****************
 13542 ;; Defined at:
 13543 ;;		line 99 in file "mcc_generated_files/eusart.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      unsigned char 
 13550 ;; Registers used:
 13551 ;;		wreg, status,2, status,0
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    7
 13564 ;; This function calls:
 13565 ;;		Nothing
 13566 ;; This function is called by:
 13567 ;;		_handleUARTCommands
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _EUSART_is_rx_ready
 13573  1FE1                     _EUSART_is_rx_ready:	
 13574                           
 13575                           ;eusart.c: 101: return (bool)(PIR3bits.RCIF);
 13576                           
 13577                           ;incstack = 0
 13578                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
 13579  1FE1  002E               	movlb	14	; select bank14
 13580  1FE2  0E0F               	swapf	15,w	;volatile
 13581  1FE3  0C89               	rrf	9,f
 13582  1FE4  3901               	andlw	1
 13583  1FE5  0008               	return
 13584  1FE6                     __end_of_EUSART_is_rx_ready:	
 13585                           
 13586                           	psect	text11
 13587  10F4                     __ptext11:	
 13588 ;; *************** function _EUSART_Read *****************
 13589 ;; Defined at:
 13590 ;;		line 113 in file "mcc_generated_files/eusart.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;		None
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;		None
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      unsigned char 
 13597 ;; Registers used:
 13598 ;;		wreg, status,2
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;Total ram usage:        0 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    7
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_handleUARTCommands
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           
 13619                           ;psect for function _EUSART_Read
 13620  10F4                     _EUSART_Read:	
 13621  10F4                     l1180:	
 13622                           ;eusart.c: 116: {
 13623                           
 13624                           ;eusart.c: 115: while(!PIR3bits.RCIF)
 13625                           
 13626                           ;incstack = 0
 13627                           ; Regs used in _EUSART_Read: [wreg+status,2]
 13628                           
 13629  10F4  002E               	movlb	14	; select bank14
 13630  10F5  1E8F               	btfss	15,5	;volatile
 13631  10F6  28F4               	goto	l1180
 13632                           
 13633                           ;eusart.c: 117: }
 13634                           ;eusart.c: 119: eusartRxLastError.status = 0;
 13635  10F7  0021               	movlb	1	; select bank1
 13636  10F8  01E3               	clrf	_eusartRxLastError^(0+128)	;volatile
 13637                           
 13638                           ;eusart.c: 121: if(1 == RC1STAbits.OERR)
 13639  10F9  0022               	movlb	2	; select bank2
 13640  10FA  1C9D               	btfss	29,1	;volatile
 13641  10FB  28FE               	goto	l7589
 13642                           
 13643                           ;eusart.c: 122: {
 13644                           ;eusart.c: 125: RC1STAbits.CREN = 0;
 13645  10FC  121D               	bcf	29,4	;volatile
 13646                           
 13647                           ;eusart.c: 126: RC1STAbits.CREN = 1;
 13648  10FD  161D               	bsf	29,4	;volatile
 13649  10FE                     l7589:	
 13650                           
 13651                           ;eusart.c: 127: }
 13652                           ;eusart.c: 129: return RC1REG;
 13653  10FE  0819               	movf	25,w	;volatile
 13654  10FF  0008               	return
 13655  1100                     __end_of_EUSART_Read:	
 13656                           
 13657                           	psect	text12
 13658  16AE                     __ptext12:	
 13659 ;; *************** function _handleGeneralTouchControls *****************
 13660 ;; Defined at:
 13661 ;;		line 54 in file "touch_handler.c"
 13662 ;; Parameters:    Size  Location     Type
 13663 ;;		None
 13664 ;; Auto vars:     Size  Location     Type
 13665 ;;  ctrl            1   28[BANK0 ] PTR struct .
 13666 ;;		 -> controls(36), 
 13667 ;;  i               1   29[BANK0 ] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;                  1    wreg      void 
 13670 ;; Registers used:
 13671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;Total ram usage:        4 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; Hardware stack levels required when called:   10
 13684 ;; This function calls:
 13685 ;;		_MTOUCH_Button_isPressed
 13686 ;;		___bmul
 13687 ;;		_processToggle
 13688 ;; This function is called by:
 13689 ;;		_main
 13690 ;; This function uses a non-reentrant model
 13691 ;;
 13692                           
 13693                           
 13694                           ;psect for function _handleGeneralTouchControls
 13695  16AE                     _handleGeneralTouchControls:	
 13696                           
 13697                           ;touch_handler.c: 55: for (uint8_t i = 0; i < 4; i++) {
 13698                           
 13699                           ;incstack = 0
 13700                           ; Regs used in _handleGeneralTouchControls: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13701  16AE  0020               	movlb	0	; select bank0
 13702  16AF  01BD               	clrf	handleGeneralTouchControls@i
 13703  16B0                     L7:	
 13704  16B0  3004               	movlw	4
 13705  16B1  023D               	subwf	handleGeneralTouchControls@i,w
 13706  16B2  1803               	btfsc	3,0
 13707  16B3  0008               	return
 13708                           
 13709                           ;touch_handler.c: 56: TouchIRControl* ctrl = &controls[i];
 13710  16B4  3009               	movlw	9
 13711  16B5  00BA               	movwf	??_handleGeneralTouchControls
 13712  16B6  083A               	movf	??_handleGeneralTouchControls,w
 13713  16B7  00AA               	movwf	___bmul@multiplicand
 13714  16B8  083D               	movf	handleGeneralTouchControls@i,w
 13715  16B9  3191  219C  3196   	fcall	___bmul
 13716  16BC  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 13717  16BD  0020               	movlb	0	; select bank0
 13718  16BE  00BB               	movwf	??_handleGeneralTouchControls+1
 13719  16BF  083B               	movf	??_handleGeneralTouchControls+1,w
 13720  16C0  00BC               	movwf	handleGeneralTouchControls@ctrl
 13721                           
 13722                           ;touch_handler.c: 58: if (MTOUCH_Button_isPressed(ctrl->touchID)) {
 13723  16C1  083C               	movf	handleGeneralTouchControls@ctrl,w
 13724  16C2  0086               	movwf	6
 13725  16C3  3002               	movlw	2	; select bank4/5
 13726  16C4  0087               	movwf	7
 13727  16C5  0801               	movf	1,w
 13728  16C6  3195  25AC  3196   	fcall	_MTOUCH_Button_isPressed
 13729  16C9  3A00               	xorlw	0
 13730  16CA  1903               	skipnz
 13731  16CB  2EDE               	goto	l7993
 13732                           
 13733                           ;touch_handler.c: 59: if (!ctrl->pressedLast) {
 13734  16CC  0020               	movlb	0	; select bank0
 13735  16CD  083C               	movf	handleGeneralTouchControls@ctrl,w
 13736  16CE  3E04               	addlw	4
 13737  16CF  0086               	movwf	6
 13738  16D0  3002               	movlw	2	; select bank4/5
 13739  16D1  0087               	movwf	7
 13740  16D2  0801               	movf	1,w
 13741  16D3  1D03               	btfss	3,2
 13742  16D4  2EE5               	goto	l7995
 13743                           
 13744                           ;touch_handler.c: 60: processToggle(ctrl, i);
 13745  16D5  083D               	movf	handleGeneralTouchControls@i,w
 13746  16D6  00BA               	movwf	??_handleGeneralTouchControls
 13747  16D7  083A               	movf	??_handleGeneralTouchControls,w
 13748  16D8  00B4               	movwf	processToggle@index
 13749  16D9  083C               	movf	handleGeneralTouchControls@ctrl,w
 13750  16DA  3196  2672  3196   	fcall	_processToggle
 13751                           
 13752                           ;touch_handler.c: 61: }
 13753                           ;touch_handler.c: 62: } else {
 13754  16DD  2EE5               	goto	l7995
 13755  16DE                     l7993:	
 13756                           
 13757                           ;touch_handler.c: 64: ctrl->pressedLast = 0;
 13758  16DE  0020               	movlb	0	; select bank0
 13759  16DF  083C               	movf	handleGeneralTouchControls@ctrl,w
 13760  16E0  3E04               	addlw	4
 13761  16E1  0086               	movwf	6
 13762  16E2  3002               	movlw	2	; select bank4/5
 13763  16E3  0087               	movwf	7
 13764  16E4  0181               	clrf	1
 13765  16E5                     l7995:	
 13766  16E5  3001               	movlw	1
 13767  16E6  0020               	movlb	0	; select bank0
 13768  16E7  00BA               	movwf	??_handleGeneralTouchControls
 13769  16E8  083A               	movf	??_handleGeneralTouchControls,w
 13770  16E9  07BD               	addwf	handleGeneralTouchControls@i,f
 13771  16EA  2EB0               	goto	L7
 13772  16EB                     __end_of_handleGeneralTouchControls:	
 13773                           
 13774                           	psect	text13
 13775  1672                     __ptext13:	
 13776 ;; *************** function _processToggle *****************
 13777 ;; Defined at:
 13778 ;;		line 45 in file "touch_handler.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;  ctrl            1    wreg     PTR struct .
 13781 ;;		 -> controls(36), 
 13782 ;;  index           1   20[BANK0 ] unsigned char 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  ctrl            1   25[BANK0 ] PTR struct .
 13785 ;;		 -> controls(36), 
 13786 ;; Return value:  Size  Location     Type
 13787 ;;                  1    wreg      void 
 13788 ;; Registers used:
 13789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13790 ;; Tracked objects:
 13791 ;;		On entry : 0/0
 13792 ;;		On exit  : 0/0
 13793 ;;		Unchanged: 0/0
 13794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13795 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;Total ram usage:        6 bytes
 13800 ;; Hardware stack levels used:    1
 13801 ;; Hardware stack levels required when called:    9
 13802 ;; This function calls:
 13803 ;;		_EUSART_Write
 13804 ;;		_updateLight
 13805 ;; This function is called by:
 13806 ;;		_ir_handler
 13807 ;;		_handleGeneralTouchControls
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           
 13812                           ;psect for function _processToggle
 13813  1672                     _processToggle:	
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in _processToggle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13817                           ;processToggle@ctrl stored from wreg
 13818  1672  0020               	movlb	0	; select bank0
 13819  1673  00B9               	movwf	processToggle@ctrl
 13820                           
 13821                           ;touch_handler.c: 46: ctrl->toggle = !ctrl->toggle;
 13822  1674  0839               	movf	processToggle@ctrl,w
 13823  1675  3E03               	addlw	3
 13824  1676  0086               	movwf	6
 13825  1677  3002               	movlw	2	; select bank4/5
 13826  1678  0087               	movwf	7
 13827  1679  0801               	movf	1,w
 13828  167A  1D03               	btfss	3,2
 13829  167B  2E7E               	goto	u7920
 13830  167C  3001               	movlw	1
 13831  167D  2E7F               	goto	u7930
 13832  167E                     u7920:	
 13833  167E  3000               	movlw	0
 13834  167F                     u7930:	
 13835  167F  00B5               	movwf	??_processToggle
 13836  1680  0839               	movf	processToggle@ctrl,w
 13837  1681  3E03               	addlw	3
 13838  1682  0086               	movwf	6
 13839  1683  3002               	movlw	2	; select bank4/5
 13840  1684  0087               	movwf	7
 13841  1685  0835               	movf	??_processToggle,w
 13842  1686  0081               	movwf	1
 13843                           
 13844                           ;touch_handler.c: 47: EUSART_Write(ctrl->toggle ? ctrl->uartOn : ctrl->uartOff);
 13845  1687  0839               	movf	processToggle@ctrl,w
 13846  1688  3E03               	addlw	3
 13847  1689  0086               	movwf	6
 13848  168A  3002               	movlw	2	; select bank4/5
 13849  168B  0087               	movwf	7
 13850  168C  0801               	movf	1,w
 13851  168D  1D03               	btfss	3,2
 13852  168E  2E92               	goto	l7597
 13853  168F  0839               	movf	processToggle@ctrl,w
 13854  1690  3E02               	addlw	2
 13855  1691  2E93               	goto	L8
 13856  1692                     l7597:	
 13857  1692  0A39               	incf	processToggle@ctrl,w
 13858  1693                     L8:	
 13859  1693  0086               	movwf	6
 13860  1694  3002               	movlw	2	; select bank4/5
 13861  1695  0087               	movwf	7
 13862  1696  0801               	movf	1,w
 13863  1697  00B5               	movwf	??_processToggle
 13864  1698  01B6               	clrf	??_processToggle+1
 13865  1699  0835               	movf	??_processToggle,w
 13866  169A  00B7               	movwf	_processToggle$2288
 13867  169B  0836               	movf	??_processToggle+1,w
 13868  169C  00B8               	movwf	_processToggle$2288+1
 13869  169D  0837               	movf	_processToggle$2288,w
 13870  169E  3190  20BB  3196   	fcall	_EUSART_Write
 13871                           
 13872                           ;touch_handler.c: 48: updateLight(index);
 13873  16A1  0020               	movlb	0	; select bank0
 13874  16A2  0834               	movf	processToggle@index,w
 13875  16A3  3193  23BF         	fcall	_updateLight
 13876                           
 13877                           ;touch_handler.c: 49: ctrl->pressedLast = 1;
 13878  16A5  0020               	movlb	0	; select bank0
 13879  16A6  0839               	movf	processToggle@ctrl,w
 13880  16A7  3E04               	addlw	4
 13881  16A8  0086               	movwf	6
 13882  16A9  3002               	movlw	2	; select bank4/5
 13883  16AA  0087               	movwf	7
 13884  16AB  0181               	clrf	1
 13885  16AC  0A81               	incf	1,f
 13886  16AD  0008               	return
 13887  16AE                     __end_of_processToggle:	
 13888                           
 13889                           	psect	text14
 13890  13BF                     __ptext14:	
 13891 ;; *************** function _updateLight *****************
 13892 ;; Defined at:
 13893 ;;		line 25 in file "load_handler.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  i               1    wreg     unsigned char 
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  i               1   19[BANK0 ] unsigned char 
 13898 ;; Return value:  Size  Location     Type
 13899 ;;                  1    wreg      void 
 13900 ;; Registers used:
 13901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13902 ;; Tracked objects:
 13903 ;;		On entry : 0/0
 13904 ;;		On exit  : 0/0
 13905 ;;		Unchanged: 0/0
 13906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;Total ram usage:        4 bytes
 13912 ;; Hardware stack levels used:    1
 13913 ;; Hardware stack levels required when called:    8
 13914 ;; This function calls:
 13915 ;;		___bmul
 13916 ;;		_setLightState
 13917 ;; This function is called by:
 13918 ;;		_processToggle
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           
 13923                           ;psect for function _updateLight
 13924  13BF                     _updateLight:	
 13925                           
 13926                           ;incstack = 0
 13927                           ; Regs used in _updateLight: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13928                           ;updateLight@i stored from wreg
 13929  13BF  0020               	movlb	0	; select bank0
 13930  13C0  00B3               	movwf	updateLight@i
 13931                           
 13932                           ;load_handler.c: 26: setLightState(controls[i].touchID, controls[i].toggle);
 13933  13C1  3009               	movlw	9
 13934  13C2  00B0               	movwf	??_updateLight
 13935  13C3  0830               	movf	??_updateLight,w
 13936  13C4  00AA               	movwf	___bmul@multiplicand
 13937  13C5  0833               	movf	updateLight@i,w
 13938  13C6  3191  219C  3193   	fcall	___bmul
 13939  13C9  3E03               	addlw	3
 13940  13CA  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 13941  13CB  0086               	movwf	6
 13942  13CC  3002               	movlw	2	; select bank4/5
 13943  13CD  0087               	movwf	7
 13944  13CE  0801               	movf	1,w
 13945  13CF  0020               	movlb	0	; select bank0
 13946  13D0  00B1               	movwf	??_updateLight+1
 13947  13D1  0831               	movf	??_updateLight+1,w
 13948  13D2  00AE               	movwf	setLightState@state
 13949  13D3  3009               	movlw	9
 13950  13D4  00B2               	movwf	??_updateLight+2
 13951  13D5  0832               	movf	??_updateLight+2,w
 13952  13D6  00AA               	movwf	___bmul@multiplicand
 13953  13D7  0833               	movf	updateLight@i,w
 13954  13D8  3191  219C  3193   	fcall	___bmul
 13955  13DB  3E20               	addlw	(low (_controls| (0+512)))& (0+255)
 13956  13DC  0086               	movwf	6
 13957  13DD  3002               	movlw	2	; select bank4/5
 13958  13DE  0087               	movwf	7
 13959  13DF  0801               	movf	1,w
 13960  13E0  3195  254F         	fcall	_setLightState
 13961  13E2  0008               	return
 13962  13E3                     __end_of_updateLight:	
 13963                           
 13964                           	psect	text15
 13965  154F                     __ptext15:	
 13966 ;; *************** function _setLightState *****************
 13967 ;; Defined at:
 13968 ;;		line 12 in file "load_handler.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  touchID         1    wreg     unsigned char 
 13971 ;;  state           1   14[BANK0 ] unsigned char 
 13972 ;; Auto vars:     Size  Location     Type
 13973 ;;  touchID         1   15[BANK0 ] unsigned char 
 13974 ;; Return value:  Size  Location     Type
 13975 ;;                  1    wreg      void 
 13976 ;; Registers used:
 13977 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13983 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;Total ram usage:        2 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; Hardware stack levels required when called:    7
 13990 ;; This function calls:
 13991 ;;		Nothing
 13992 ;; This function is called by:
 13993 ;;		_updateLight
 13994 ;;		_handleUARTCommands
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998                           
 13999                           ;psect for function _setLightState
 14000  154F                     _setLightState:	
 14001                           
 14002                           ;incstack = 0
 14003                           ; Regs used in _setLightState: [wreg-fsr0h+status,2+status,0]
 14004                           ;setLightState@touchID stored from wreg
 14005  154F  0020               	movlb	0	; select bank0
 14006  1550  00AF               	movwf	setLightState@touchID
 14007                           
 14008                           ;load_handler.c: 13: switch (touchID) {
 14009  1551  2D6E               	goto	l7165
 14010  1552                     l7155:	
 14011                           ;load_handler.c: 14: case T1: if (state) do { LATCbits.LATC0 = 1; } while(0); else do { 
      +                          LATCbits.LATC0 = 0; } while(0); break;
 14012                           
 14013  1552  082E               	movf	setLightState@state,w
 14014  1553  1903               	btfsc	3,2
 14015  1554  2D57               	goto	l1439
 14016  1555  1418               	bsf	24,0	;volatile
 14017  1556  0008               	return
 14018  1557                     l1439:	
 14019  1557  1018               	bcf	24,0	;volatile
 14020  1558  0008               	return
 14021  1559                     l7157:	
 14022                           ;load_handler.c: 15: case T2: if (state) do { LATCbits.LATC1 = 1; } while(0); else do { 
      +                          LATCbits.LATC1 = 0; } while(0); break;
 14023                           
 14024  1559  082E               	movf	setLightState@state,w
 14025  155A  1903               	btfsc	3,2
 14026  155B  2D5E               	goto	l1447
 14027  155C  1498               	bsf	24,1	;volatile
 14028  155D  0008               	return
 14029  155E                     l1447:	
 14030  155E  1098               	bcf	24,1	;volatile
 14031  155F  0008               	return
 14032  1560                     l7159:	
 14033                           ;load_handler.c: 16: case T3: if (state) do { LATCbits.LATC2 = 1; } while(0); else do { 
      +                          LATCbits.LATC2 = 0; } while(0); break;
 14034                           
 14035  1560  082E               	movf	setLightState@state,w
 14036  1561  1903               	btfsc	3,2
 14037  1562  2D65               	goto	l1454
 14038  1563  1518               	bsf	24,2	;volatile
 14039  1564  0008               	return
 14040  1565                     l1454:	
 14041  1565  1118               	bcf	24,2	;volatile
 14042  1566  0008               	return
 14043  1567                     l7161:	
 14044                           ;load_handler.c: 17: case T4: if (state) do { LATCbits.LATC3 = 1; } while(0); else do { 
      +                          LATCbits.LATC3 = 0; } while(0); break;
 14045                           
 14046  1567  082E               	movf	setLightState@state,w
 14047  1568  1903               	btfsc	3,2
 14048  1569  2D6C               	goto	l1461
 14049  156A  1598               	bsf	24,3	;volatile
 14050  156B  0008               	return
 14051  156C                     l1461:	
 14052  156C  1198               	bcf	24,3	;volatile
 14053                           
 14054                           ;load_handler.c: 23: }
 14055                           
 14056                           ;load_handler.c: 22: default: break;
 14057  156D  0008               	return
 14058  156E                     l7165:	
 14059  156E  082F               	movf	setLightState@touchID,w
 14060                           
 14061                           ; Switch size 1, requested type "space"
 14062                           ; Number of cases is 4, Range of values is 0 to 3
 14063                           ; switch strategies available:
 14064                           ; Name         Instructions Cycles
 14065                           ; simple_byte           13     7 (average)
 14066                           ; direct_byte           14     6 (fixed)
 14067                           ; jumptable            260     6 (fixed)
 14068                           ;	Chosen strategy is simple_byte
 14069  156F  3A00               	xorlw	0	; case 0
 14070  1570  1903               	skipnz
 14071  1571  2D67               	goto	l7161
 14072  1572  3A01               	xorlw	1	; case 1
 14073  1573  1903               	skipnz
 14074  1574  2D59               	goto	l7157
 14075  1575  3A03               	xorlw	3	; case 2
 14076  1576  1903               	skipnz
 14077  1577  2D60               	goto	l7159
 14078  1578  3A01               	xorlw	1	; case 3
 14079  1579  1903               	skipnz
 14080  157A  2D52               	goto	l7155
 14081  157B  2D7C               	goto	l1464
 14082  157C                     l1464:	
 14083  157C  0008               	return
 14084  157D                     __end_of_setLightState:	
 14085                           
 14086                           	psect	text16
 14087  15AC                     __ptext16:	
 14088 ;; *************** function _MTOUCH_Button_isPressed *****************
 14089 ;; Defined at:
 14090 ;;		line 401 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14091 ;; Parameters:    Size  Location     Type
 14092 ;;  name            1    wreg     enum E14424
 14093 ;; Auto vars:     Size  Location     Type
 14094 ;;  name            1   22[BANK0 ] enum E14424
 14095 ;; Return value:  Size  Location     Type
 14096 ;;                  1    wreg      unsigned char 
 14097 ;; Registers used:
 14098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14099 ;; Tracked objects:
 14100 ;;		On entry : 0/0
 14101 ;;		On exit  : 0/0
 14102 ;;		Unchanged: 0/0
 14103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;Total ram usage:        7 bytes
 14109 ;; Hardware stack levels used:    1
 14110 ;; Hardware stack levels required when called:    8
 14111 ;; This function calls:
 14112 ;;		___wmul
 14113 ;; This function is called by:
 14114 ;;		_main
 14115 ;;		_handleGeneralTouchControls
 14116 ;;		_touch_example
 14117 ;;		_MTOUCH_Button_Buttonmask_Get
 14118 ;;		_handleFanToggleControls
 14119 ;;		_handleFanSpeedControl
 14120 ;; This function uses a non-reentrant model
 14121 ;;
 14122                           
 14123                           
 14124                           ;psect for function _MTOUCH_Button_isPressed
 14125  15AC                     _MTOUCH_Button_isPressed:	
 14126                           
 14127                           ;incstack = 0
 14128                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14129                           ;MTOUCH_Button_isPressed@name stored from wreg
 14130  15AC  0020               	movlb	0	; select bank0
 14131  15AD  00B6               	movwf	MTOUCH_Button_isPressed@name
 14132                           
 14133                           ;mtouch_button.c: 403: if(name < 5u)
 14134  15AE  3005               	movlw	5
 14135  15AF  0236               	subwf	MTOUCH_Button_isPressed@name,w
 14136  15B0  1803               	skipnc
 14137  15B1  2DD9               	goto	l7465
 14138                           
 14139                           ;mtouch_button.c: 404: return (bool)((mtouch_button[name].state == MTOUCH_BUTTON_STATE_p
      +                          ressed) ? 1 : 0);
 14140  15B2  0836               	movf	MTOUCH_Button_isPressed@name,w
 14141  15B3  00B0               	movwf	??_MTOUCH_Button_isPressed
 14142  15B4  01B1               	clrf	??_MTOUCH_Button_isPressed+1
 14143  15B5  0830               	movf	??_MTOUCH_Button_isPressed,w
 14144  15B6  00AA               	movwf	___wmul@multiplier
 14145  15B7  0831               	movf	??_MTOUCH_Button_isPressed+1,w
 14146  15B8  00AB               	movwf	___wmul@multiplier+1
 14147  15B9  3011               	movlw	17
 14148  15BA  00AC               	movwf	___wmul@multiplicand
 14149  15BB  3000               	movlw	0
 14150  15BC  00AD               	movwf	___wmul@multiplicand+1
 14151  15BD  3188  2002  3195   	fcall	___wmul
 14152  15C0  0020               	movlb	0	; select bank0
 14153  15C1  082A               	movf	?___wmul,w
 14154  15C2  3E02               	addlw	2
 14155  15C3  00B2               	movwf	??_MTOUCH_Button_isPressed+2
 14156  15C4  3000               	movlw	0
 14157  15C5  3D2B               	addwfc	?___wmul+1,w
 14158  15C6  00B3               	movwf	??_MTOUCH_Button_isPressed+3
 14159  15C7  309B               	movlw	155
 14160  15C8  00B4               	movwf	??_MTOUCH_Button_isPressed+4
 14161  15C9  3023               	movlw	35
 14162  15CA  00B5               	movwf	??_MTOUCH_Button_isPressed+5
 14163  15CB  0832               	movf	??_MTOUCH_Button_isPressed+2,w
 14164  15CC  0734               	addwf	??_MTOUCH_Button_isPressed+4,w
 14165  15CD  0086               	movwf	6
 14166  15CE  0833               	movf	??_MTOUCH_Button_isPressed+3,w
 14167  15CF  3D35               	addwfc	??_MTOUCH_Button_isPressed+5,w
 14168  15D0  0087               	movwf	7
 14169  15D1  3002               	movlw	2
 14170  15D2  0601               	xorwf	1,w
 14171  15D3  1D03               	btfss	3,2
 14172  15D4  2DD7               	goto	u7850
 14173  15D5  3001               	movlw	1
 14174  15D6  0008               	return
 14175  15D7                     u7850:	
 14176  15D7  3000               	movlw	0
 14177  15D8  0008               	return
 14178  15D9                     l7465:	
 14179                           
 14180                           ;mtouch_button.c: 405: else
 14181                           ;mtouch_button.c: 406: return 0;
 14182  15D9  3000               	movlw	0
 14183  15DA  0008               	return
 14184  15DB                     __end_of_MTOUCH_Button_isPressed:	
 14185                           
 14186                           	psect	text17
 14187  11C0                     __ptext17:	
 14188 ;; *************** function _SYSTEM_Initialize *****************
 14189 ;; Defined at:
 14190 ;;		line 50 in file "mcc_generated_files/mcc.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;		None
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  1    wreg      void 
 14197 ;; Registers used:
 14198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        0 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:   12
 14211 ;; This function calls:
 14212 ;;		_ADCC_Initialize
 14213 ;;		_EUSART_Initialize
 14214 ;;		_MTOUCH_Initialize
 14215 ;;		_OSCILLATOR_Initialize
 14216 ;;		_PIN_MANAGER_Initialize
 14217 ;;		_PMD_Initialize
 14218 ;; This function is called by:
 14219 ;;		_main
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           
 14224                           ;psect for function _SYSTEM_Initialize
 14225  11C0                     _SYSTEM_Initialize:	
 14226                           
 14227                           ;mcc.c: 52: PMD_Initialize();
 14228                           
 14229                           ;incstack = 0
 14230                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14231  11C0  3190  2073  3191   	fcall	_PMD_Initialize
 14232                           
 14233                           ;mcc.c: 53: PIN_MANAGER_Initialize();
 14234  11C3  3195  2522  3191   	fcall	_PIN_MANAGER_Initialize
 14235                           
 14236                           ;mcc.c: 54: OSCILLATOR_Initialize();
 14237  11C6  3187  27F7  3191   	fcall	_OSCILLATOR_Initialize
 14238                           
 14239                           ;mcc.c: 55: ADCC_Initialize();
 14240  11C9  3193  239C  3191   	fcall	_ADCC_Initialize
 14241                           
 14242                           ;mcc.c: 56: EUSART_Initialize();
 14243  11CC  3194  2407  3191   	fcall	_EUSART_Initialize
 14244                           
 14245                           ;mcc.c: 57: MTOUCH_Initialize();
 14246  11CF  3190  20E8         	fcall	_MTOUCH_Initialize
 14247  11D1  0008               	return
 14248  11D2                     __end_of_SYSTEM_Initialize:	
 14249                           
 14250                           	psect	text18
 14251  1073                     __ptext18:	
 14252 ;; *************** function _PMD_Initialize *****************
 14253 ;; Defined at:
 14254 ;;		line 74 in file "mcc_generated_files/mcc.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;		None
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;		None
 14259 ;; Return value:  Size  Location     Type
 14260 ;;                  1    wreg      void 
 14261 ;; Registers used:
 14262 ;;		status,2
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;Total ram usage:        0 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    7
 14275 ;; This function calls:
 14276 ;;		Nothing
 14277 ;; This function is called by:
 14278 ;;		_SYSTEM_Initialize
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function _PMD_Initialize
 14284  1073                     _PMD_Initialize:	
 14285                           
 14286                           ;mcc.c: 77: PMD0 = 0x00;
 14287                           
 14288                           ;incstack = 0
 14289                           ; Regs used in _PMD_Initialize: [status,2]
 14290  1073  002F               	movlb	15	; select bank15
 14291  1074  0196               	clrf	22	;volatile
 14292                           
 14293                           ;mcc.c: 79: PMD1 = 0x00;
 14294  1075  0197               	clrf	23	;volatile
 14295                           
 14296                           ;mcc.c: 81: PMD2 = 0x00;
 14297  1076  0198               	clrf	24	;volatile
 14298                           
 14299                           ;mcc.c: 83: PMD3 = 0x00;
 14300  1077  0199               	clrf	25	;volatile
 14301                           
 14302                           ;mcc.c: 85: PMD4 = 0x00;
 14303  1078  019A               	clrf	26	;volatile
 14304                           
 14305                           ;mcc.c: 87: PMD5 = 0x00;
 14306  1079  019B               	clrf	27	;volatile
 14307  107A  0008               	return
 14308  107B                     __end_of_PMD_Initialize:	
 14309                           
 14310                           	psect	text19
 14311  1522                     __ptext19:	
 14312 ;; *************** function _PIN_MANAGER_Initialize *****************
 14313 ;; Defined at:
 14314 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;		None
 14317 ;; Auto vars:     Size  Location     Type
 14318 ;;		None
 14319 ;; Return value:  Size  Location     Type
 14320 ;;                  1    wreg      void 
 14321 ;; Registers used:
 14322 ;;		wreg, status,2
 14323 ;; Tracked objects:
 14324 ;;		On entry : 0/0
 14325 ;;		On exit  : 0/0
 14326 ;;		Unchanged: 0/0
 14327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;Total ram usage:        0 bytes
 14333 ;; Hardware stack levels used:    1
 14334 ;; Hardware stack levels required when called:    7
 14335 ;; This function calls:
 14336 ;;		Nothing
 14337 ;; This function is called by:
 14338 ;;		_SYSTEM_Initialize
 14339 ;; This function uses a non-reentrant model
 14340 ;;
 14341                           
 14342                           
 14343                           ;psect for function _PIN_MANAGER_Initialize
 14344  1522                     _PIN_MANAGER_Initialize:	
 14345                           
 14346                           ;pin_manager.c: 60: LATA = 0x00;
 14347                           
 14348                           ;incstack = 0
 14349                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 14350  1522  0020               	movlb	0	; select bank0
 14351  1523  0196               	clrf	22	;volatile
 14352                           
 14353                           ;pin_manager.c: 61: LATB = 0x00;
 14354  1524  0197               	clrf	23	;volatile
 14355                           
 14356                           ;pin_manager.c: 62: LATC = 0x00;
 14357  1525  0198               	clrf	24	;volatile
 14358                           
 14359                           ;pin_manager.c: 67: TRISA = 0xC0;
 14360  1526  30C0               	movlw	192
 14361  1527  0091               	movwf	17	;volatile
 14362                           
 14363                           ;pin_manager.c: 68: TRISB = 0xFF;
 14364  1528  30FF               	movlw	255
 14365  1529  0092               	movwf	18	;volatile
 14366                           
 14367                           ;pin_manager.c: 69: TRISC = 0xB0;
 14368  152A  30B0               	movlw	176
 14369  152B  0093               	movwf	19	;volatile
 14370                           
 14371                           ;pin_manager.c: 74: ANSELC = 0x7F;
 14372  152C  307F               	movlw	127
 14373  152D  003E               	movlb	30	; select bank30
 14374  152E  00CE               	movwf	78	;volatile
 14375                           
 14376                           ;pin_manager.c: 75: ANSELB = 0xFE;
 14377  152F  30FE               	movlw	254
 14378  1530  00C3               	movwf	67	;volatile
 14379                           
 14380                           ;pin_manager.c: 76: ANSELA = 0xC0;
 14381  1531  30C0               	movlw	192
 14382  1532  00B8               	movwf	56	;volatile
 14383                           
 14384                           ;pin_manager.c: 81: WPUE = 0x00;
 14385  1533  01E5               	clrf	101	;volatile
 14386                           
 14387                           ;pin_manager.c: 82: WPUB = 0x00;
 14388  1534  01C4               	clrf	68	;volatile
 14389                           
 14390                           ;pin_manager.c: 83: WPUA = 0x00;
 14391  1535  01B9               	clrf	57	;volatile
 14392                           
 14393                           ;pin_manager.c: 84: WPUC = 0x00;
 14394  1536  01CF               	clrf	79	;volatile
 14395                           
 14396                           ;pin_manager.c: 89: ODCONA = 0x00;
 14397  1537  01BA               	clrf	58	;volatile
 14398                           
 14399                           ;pin_manager.c: 90: ODCONB = 0x00;
 14400  1538  01C5               	clrf	69	;volatile
 14401                           
 14402                           ;pin_manager.c: 91: ODCONC = 0x00;
 14403  1539  01D0               	clrf	80	;volatile
 14404                           
 14405                           ;pin_manager.c: 96: SLRCONA = 0xFF;
 14406  153A  30FF               	movlw	255
 14407  153B  00BB               	movwf	59	;volatile
 14408                           
 14409                           ;pin_manager.c: 97: SLRCONB = 0xFF;
 14410  153C  30FF               	movlw	255
 14411  153D  00C6               	movwf	70	;volatile
 14412                           
 14413                           ;pin_manager.c: 98: SLRCONC = 0xFF;
 14414  153E  30FF               	movlw	255
 14415  153F  00D1               	movwf	81	;volatile
 14416                           
 14417                           ;pin_manager.c: 103: INLVLA = 0xFF;
 14418  1540  30FF               	movlw	255
 14419  1541  00BC               	movwf	60	;volatile
 14420                           
 14421                           ;pin_manager.c: 104: INLVLB = 0xFF;
 14422  1542  30FF               	movlw	255
 14423  1543  00C7               	movwf	71	;volatile
 14424                           
 14425                           ;pin_manager.c: 105: INLVLC = 0xFF;
 14426  1544  30FF               	movlw	255
 14427  1545  00D2               	movwf	82	;volatile
 14428                           
 14429                           ;pin_manager.c: 106: INLVLE = 0x08;
 14430  1546  3008               	movlw	8
 14431  1547  00E8               	movwf	104	;volatile
 14432                           
 14433                           ;pin_manager.c: 115: RXPPS = 0x17;
 14434  1548  3017               	movlw	23
 14435  1549  003D               	movlb	29	; select bank29
 14436  154A  00CB               	movwf	75	;volatile
 14437                           
 14438                           ;pin_manager.c: 116: RC6PPS = 0x10;
 14439  154B  3010               	movlw	16
 14440  154C  003E               	movlb	30	; select bank30
 14441  154D  00A6               	movwf	38	;volatile
 14442  154E  0008               	return
 14443  154F                     __end_of_PIN_MANAGER_Initialize:	
 14444                           
 14445                           	psect	text20
 14446  07F7                     __ptext20:	
 14447 ;; *************** function _OSCILLATOR_Initialize *****************
 14448 ;; Defined at:
 14449 ;;		line 60 in file "mcc_generated_files/mcc.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;		None
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;		None
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  1    wreg      void 
 14456 ;; Registers used:
 14457 ;;		wreg, status,2
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;Total ram usage:        0 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    7
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_SYSTEM_Initialize
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           
 14478                           ;psect for function _OSCILLATOR_Initialize
 14479  07F7                     _OSCILLATOR_Initialize:	
 14480                           
 14481                           ;mcc.c: 63: OSCCON1 = 0x60;
 14482                           
 14483                           ;incstack = 0
 14484                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 14485  07F7  3060               	movlw	96
 14486  07F8  0031               	movlb	17	; select bank17
 14487  07F9  008D               	movwf	13	;volatile
 14488                           
 14489                           ;mcc.c: 65: OSCCON3 = 0x00;
 14490  07FA  018F               	clrf	15	;volatile
 14491                           
 14492                           ;mcc.c: 67: OSCEN = 0x00;
 14493  07FB  0191               	clrf	17	;volatile
 14494                           
 14495                           ;mcc.c: 69: OSCFRQ = 0x06;
 14496  07FC  3006               	movlw	6
 14497  07FD  0093               	movwf	19	;volatile
 14498                           
 14499                           ;mcc.c: 71: OSCTUNE = 0x00;
 14500  07FE  0192               	clrf	18	;volatile
 14501  07FF  0008               	return
 14502  0800                     __end_of_OSCILLATOR_Initialize:	
 14503                           
 14504                           	psect	text21
 14505  1407                     __ptext21:	
 14506 ;; *************** function _EUSART_Initialize *****************
 14507 ;; Defined at:
 14508 ;;		line 66 in file "mcc_generated_files/eusart.c"
 14509 ;; Parameters:    Size  Location     Type
 14510 ;;		None
 14511 ;; Auto vars:     Size  Location     Type
 14512 ;;		None
 14513 ;; Return value:  Size  Location     Type
 14514 ;;                  1    wreg      void 
 14515 ;; Registers used:
 14516 ;;		wreg, status,2, status,0, pclath, cstack
 14517 ;; Tracked objects:
 14518 ;;		On entry : 0/0
 14519 ;;		On exit  : 0/0
 14520 ;;		Unchanged: 0/0
 14521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;Total ram usage:        0 bytes
 14527 ;; Hardware stack levels used:    1
 14528 ;; Hardware stack levels required when called:    8
 14529 ;; This function calls:
 14530 ;;		_EUSART_SetErrorHandler
 14531 ;;		_EUSART_SetFramingErrorHandler
 14532 ;;		_EUSART_SetOverrunErrorHandler
 14533 ;; This function is called by:
 14534 ;;		_SYSTEM_Initialize
 14535 ;; This function uses a non-reentrant model
 14536 ;;
 14537                           
 14538                           
 14539                           ;psect for function _EUSART_Initialize
 14540  1407                     _EUSART_Initialize:	
 14541                           
 14542                           ;eusart.c: 71: BAUD1CON = 0x08;
 14543                           
 14544                           ;incstack = 0
 14545                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 14546  1407  3008               	movlw	8
 14547  1408  0022               	movlb	2	; select bank2
 14548  1409  009F               	movwf	31	;volatile
 14549                           
 14550                           ;eusart.c: 74: RC1STA = 0x90;
 14551  140A  3090               	movlw	144
 14552  140B  009D               	movwf	29	;volatile
 14553                           
 14554                           ;eusart.c: 77: TX1STA = 0x24;
 14555  140C  3024               	movlw	36
 14556  140D  009E               	movwf	30	;volatile
 14557                           
 14558                           ;eusart.c: 80: SP1BRGL = 0x40;
 14559  140E  3040               	movlw	64
 14560  140F  009B               	movwf	27	;volatile
 14561                           
 14562                           ;eusart.c: 83: SP1BRGH = 0x03;
 14563  1410  3003               	movlw	3
 14564  1411  009C               	movwf	28	;volatile
 14565                           
 14566                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
 14567  1412  3000               	movlw	0
 14568  1413  0020               	movlb	0	; select bank0
 14569  1414  00AA               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 14570  1415  3000               	movlw	0
 14571  1416  00AB               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 14572  1417  3190  209F  3194   	fcall	_EUSART_SetFramingErrorHandler
 14573                           
 14574                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
 14575  141A  3000               	movlw	0
 14576  141B  0020               	movlb	0	; select bank0
 14577  141C  00AA               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 14578  141D  3000               	movlw	0
 14579  141E  00AB               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 14580  141F  3190  20A8  3194   	fcall	_EUSART_SetOverrunErrorHandler
 14581                           
 14582                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
 14583  1422  3000               	movlw	0
 14584  1423  0020               	movlb	0	; select bank0
 14585  1424  00AA               	movwf	EUSART_SetErrorHandler@interruptHandler
 14586  1425  3000               	movlw	0
 14587  1426  00AB               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 14588  1427  3190  2096         	fcall	_EUSART_SetErrorHandler
 14589                           
 14590                           ;eusart.c: 90: eusartRxLastError.status = 0;
 14591  1429  0021               	movlb	1	; select bank1
 14592  142A  01E3               	clrf	_eusartRxLastError^(0+128)	;volatile
 14593  142B  0008               	return
 14594  142C                     __end_of_EUSART_Initialize:	
 14595                           
 14596                           	psect	text22
 14597  10A8                     __ptext22:	
 14598 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 14599 ;; Defined at:
 14600 ;;		line 161 in file "mcc_generated_files/eusart.c"
 14601 ;; Parameters:    Size  Location     Type
 14602 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
 14603 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;		None
 14606 ;; Return value:  Size  Location     Type
 14607 ;;                  1    wreg      void 
 14608 ;; Registers used:
 14609 ;;		wreg
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;Total ram usage:        2 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    7
 14622 ;; This function calls:
 14623 ;;		Nothing
 14624 ;; This function is called by:
 14625 ;;		_EUSART_Initialize
 14626 ;; This function uses a non-reentrant model
 14627 ;;
 14628                           
 14629                           
 14630                           ;psect for function _EUSART_SetOverrunErrorHandler
 14631  10A8                     _EUSART_SetOverrunErrorHandler:	
 14632                           
 14633                           ;eusart.c: 162: EUSART_OverrunErrorHandler = interruptHandler;
 14634                           
 14635                           ;incstack = 0
 14636                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 14637  10A8  0020               	movlb	0	; select bank0
 14638  10A9  082B               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 14639  10AA  0024               	movlb	4	; select bank4
 14640  10AB  00C7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+512)
 14641  10AC  0020               	movlb	0	; select bank0
 14642  10AD  082A               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 14643  10AE  0024               	movlb	4	; select bank4
 14644  10AF  00C6               	movwf	_EUSART_OverrunErrorHandler^(0+512)
 14645  10B0  0008               	return
 14646  10B1                     __end_of_EUSART_SetOverrunErrorHandler:	
 14647                           
 14648                           	psect	text23
 14649  109F                     __ptext23:	
 14650 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 14651 ;; Defined at:
 14652 ;;		line 157 in file "mcc_generated_files/eusart.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
 14655 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;		None
 14658 ;; Return value:  Size  Location     Type
 14659 ;;                  1    wreg      void 
 14660 ;; Registers used:
 14661 ;;		wreg
 14662 ;; Tracked objects:
 14663 ;;		On entry : 0/0
 14664 ;;		On exit  : 0/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14667 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;Total ram usage:        2 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; Hardware stack levels required when called:    7
 14674 ;; This function calls:
 14675 ;;		Nothing
 14676 ;; This function is called by:
 14677 ;;		_EUSART_Initialize
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           
 14682                           ;psect for function _EUSART_SetFramingErrorHandler
 14683  109F                     _EUSART_SetFramingErrorHandler:	
 14684                           
 14685                           ;eusart.c: 158: EUSART_FramingErrorHandler = interruptHandler;
 14686                           
 14687                           ;incstack = 0
 14688                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 14689  109F  0020               	movlb	0	; select bank0
 14690  10A0  082B               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 14691  10A1  0022               	movlb	2	; select bank2
 14692  10A2  00EC               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 14693  10A3  0020               	movlb	0	; select bank0
 14694  10A4  082A               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 14695  10A5  0022               	movlb	2	; select bank2
 14696  10A6  00EB               	movwf	_EUSART_FramingErrorHandler^(0+256)
 14697  10A7  0008               	return
 14698  10A8                     __end_of_EUSART_SetFramingErrorHandler:	
 14699                           
 14700                           	psect	text24
 14701  1096                     __ptext24:	
 14702 ;; *************** function _EUSART_SetErrorHandler *****************
 14703 ;; Defined at:
 14704 ;;		line 165 in file "mcc_generated_files/eusart.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;  interruptHan    2   10[BANK0 ] PTR FTN()void 
 14707 ;;		 -> EUSART_DefaultErrorHandler(1), 
 14708 ;; Auto vars:     Size  Location     Type
 14709 ;;		None
 14710 ;; Return value:  Size  Location     Type
 14711 ;;                  1    wreg      void 
 14712 ;; Registers used:
 14713 ;;		wreg
 14714 ;; Tracked objects:
 14715 ;;		On entry : 0/0
 14716 ;;		On exit  : 0/0
 14717 ;;		Unchanged: 0/0
 14718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14719 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;Total ram usage:        2 bytes
 14724 ;; Hardware stack levels used:    1
 14725 ;; Hardware stack levels required when called:    7
 14726 ;; This function calls:
 14727 ;;		Nothing
 14728 ;; This function is called by:
 14729 ;;		_EUSART_Initialize
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           
 14734                           ;psect for function _EUSART_SetErrorHandler
 14735  1096                     _EUSART_SetErrorHandler:	
 14736                           
 14737                           ;eusart.c: 166: EUSART_ErrorHandler = interruptHandler;
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 14741  1096  0020               	movlb	0	; select bank0
 14742  1097  082B               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 14743  1098  0024               	movlb	4	; select bank4
 14744  1099  00C5               	movwf	(_EUSART_ErrorHandler+1)^(0+512)
 14745  109A  0020               	movlb	0	; select bank0
 14746  109B  082A               	movf	EUSART_SetErrorHandler@interruptHandler,w
 14747  109C  0024               	movlb	4	; select bank4
 14748  109D  00C4               	movwf	_EUSART_ErrorHandler^(0+512)
 14749  109E  0008               	return
 14750  109F                     __end_of_EUSART_SetErrorHandler:	
 14751                           
 14752                           	psect	text25
 14753  139C                     __ptext25:	
 14754 ;; *************** function _ADCC_Initialize *****************
 14755 ;; Defined at:
 14756 ;;		line 64 in file "mcc_generated_files/adcc.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;		None
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;		None
 14761 ;; Return value:  Size  Location     Type
 14762 ;;                  1    wreg      void 
 14763 ;; Registers used:
 14764 ;;		wreg, status,2, status,0, pclath, cstack
 14765 ;; Tracked objects:
 14766 ;;		On entry : 0/0
 14767 ;;		On exit  : 0/0
 14768 ;;		Unchanged: 0/0
 14769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;Total ram usage:        0 bytes
 14775 ;; Hardware stack levels used:    1
 14776 ;; Hardware stack levels required when called:    8
 14777 ;; This function calls:
 14778 ;;		_ADCC_SetADTIInterruptHandler
 14779 ;; This function is called by:
 14780 ;;		_SYSTEM_Initialize
 14781 ;; This function uses a non-reentrant model
 14782 ;;
 14783                           
 14784                           
 14785                           ;psect for function _ADCC_Initialize
 14786  139C                     _ADCC_Initialize:	
 14787                           
 14788                           ;adcc.c: 68: ADLTHL = 0x00;
 14789                           
 14790                           ;incstack = 0
 14791                           ; Regs used in _ADCC_Initialize: [wreg+status,2+status,0+pclath+cstack]
 14792  139C  0022               	movlb	2	; select bank2
 14793  139D  018E               	clrf	14	;volatile
 14794                           
 14795                           ;adcc.c: 70: ADLTHH = 0x00;
 14796  139E  018F               	clrf	15	;volatile
 14797                           
 14798                           ;adcc.c: 72: ADUTHL = 0x00;
 14799  139F  0190               	clrf	16	;volatile
 14800                           
 14801                           ;adcc.c: 74: ADUTHH = 0x00;
 14802  13A0  0191               	clrf	17	;volatile
 14803                           
 14804                           ;adcc.c: 76: ADSTPTL = 0x00;
 14805  13A1  0192               	clrf	18	;volatile
 14806                           
 14807                           ;adcc.c: 78: ADSTPTH = 0x00;
 14808  13A2  0193               	clrf	19	;volatile
 14809                           
 14810                           ;adcc.c: 80: ADRPT = 0x00;
 14811  13A3  018D               	clrf	13	;volatile
 14812                           
 14813                           ;adcc.c: 82: ADPCH = 0x00;
 14814  13A4  0021               	movlb	1	; select bank1
 14815  13A5  019E               	clrf	30	;volatile
 14816                           
 14817                           ;adcc.c: 84: ADCAP = 0x00;
 14818  13A6  019B               	clrf	27	;volatile
 14819                           
 14820                           ;adcc.c: 86: ADPRE = 0x00;
 14821  13A7  019C               	clrf	28	;volatile
 14822                           
 14823                           ;adcc.c: 88: ADCON1 = 0x00;
 14824  13A8  0194               	clrf	20	;volatile
 14825                           
 14826                           ;adcc.c: 90: ADCON2 = 0x00;
 14827  13A9  0195               	clrf	21	;volatile
 14828                           
 14829                           ;adcc.c: 92: ADCON3 = 0x00;
 14830  13AA  0196               	clrf	22	;volatile
 14831                           
 14832                           ;adcc.c: 94: ADSTAT = 0x00;
 14833  13AB  0197               	clrf	23	;volatile
 14834                           
 14835                           ;adcc.c: 96: ADREF = 0x00;
 14836  13AC  019A               	clrf	26	;volatile
 14837                           
 14838                           ;adcc.c: 98: ADACT = 0x00;
 14839  13AD  0199               	clrf	25	;volatile
 14840                           
 14841                           ;adcc.c: 100: ADCLK = 0x0F;
 14842  13AE  300F               	movlw	15
 14843  13AF  0098               	movwf	24	;volatile
 14844                           
 14845                           ;adcc.c: 102: ADCON0 = 0x84;
 14846  13B0  3084               	movlw	132
 14847  13B1  0093               	movwf	19	;volatile
 14848                           
 14849                           ;adcc.c: 104: ADACQ = 0x64;
 14850  13B2  3064               	movlw	100
 14851  13B3  009D               	movwf	29	;volatile
 14852                           
 14853                           ;adcc.c: 108: PIR1bits.ADTIF = 0;
 14854  13B4  002E               	movlb	14	; select bank14
 14855  13B5  108D               	bcf	13,1	;volatile
 14856                           
 14857                           ;adcc.c: 110: PIE1bits.ADTIE = 1;
 14858  13B6  1497               	bsf	23,1	;volatile
 14859                           
 14860                           ;adcc.c: 112: ADCC_SetADTIInterruptHandler(ADCC_DefaultInterruptHandler);
 14861  13B7  3001               	movlw	low _ADCC_DefaultInterruptHandler
 14862  13B8  0020               	movlb	0	; select bank0
 14863  13B9  00AA               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler
 14864  13BA  3008               	movlw	high _ADCC_DefaultInterruptHandler
 14865  13BB  00AB               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler+1
 14866  13BC  3190  208D         	fcall	_ADCC_SetADTIInterruptHandler
 14867  13BE  0008               	return
 14868  13BF                     __end_of_ADCC_Initialize:	
 14869                           
 14870                           	psect	text26
 14871  0922                     __ptext26:	
 14872 ;; *************** function _OnHold *****************
 14873 ;; Defined at:
 14874 ;;		line 13 in file "touch_handler.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;  touch           1    wreg     unsigned char 
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;  touch           1   13[BANK0 ] unsigned char 
 14879 ;; Return value:  Size  Location     Type
 14880 ;;                  1    wreg      void 
 14881 ;; Registers used:
 14882 ;;		wreg, status,2, status,0, pclath, cstack
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;Total ram usage:        3 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; Hardware stack levels required when called:    8
 14895 ;; This function calls:
 14896 ;;		_EUSART_Write
 14897 ;; This function is called by:
 14898 ;;		_main
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           
 14903                           ;psect for function _OnHold
 14904  0922                     _OnHold:	
 14905                           
 14906                           ;incstack = 0
 14907                           ; Regs used in _OnHold: [wreg+status,2+status,0+pclath+cstack]
 14908                           ;OnHold@touch stored from wreg
 14909  0922  0020               	movlb	0	; select bank0
 14910  0923  00AD               	movwf	OnHold@touch
 14911                           
 14912                           ;touch_handler.c: 14: static uint8_t irTriggered = 0;
 14913                           ;touch_handler.c: 15: static uint8_t matterTriggered = 0;
 14914                           ;touch_handler.c: 17: if (touch) {
 14915  0924  082D               	movf	OnHold@touch,w
 14916  0925  1903               	btfsc	3,2
 14917  0926  2982               	goto	l7897
 14918                           
 14919                           ;touch_handler.c: 18: holdCounter++;
 14920  0927  3001               	movlw	1
 14921  0928  0021               	movlb	1	; select bank1
 14922  0929  07C3               	addwf	_holdCounter^(0+128),f
 14923  092A  3000               	movlw	0
 14924  092B  3DC4               	addwfc	(_holdCounter+1)^(0+128),f
 14925                           
 14926                           ;touch_handler.c: 19: if (holdCounter == 10000 && !irTriggered) {
 14927  092C  3010               	movlw	16
 14928  092D  0643               	xorwf	_holdCounter^(0+128),w
 14929  092E  3027               	movlw	39
 14930  092F  1903               	skipnz
 14931  0930  0644               	xorwf	(_holdCounter+1)^(0+128),w
 14932  0931  1D03               	btfss	3,2
 14933  0932  294F               	goto	l7879
 14934  0933  0020               	movlb	0	; select bank0
 14935  0934  0857               	movf	OnHold@irTriggered,w
 14936  0935  1D03               	btfss	3,2
 14937  0936  294F               	goto	l7879
 14938                           
 14939                           ;touch_handler.c: 20: d = 1;
 14940  0937  3001               	movlw	1
 14941  0938  0021               	movlb	1	; select bank1
 14942  0939  00C1               	movwf	_d^(0+128)
 14943  093A  3000               	movlw	0
 14944  093B  00C2               	movwf	(_d^(0+128)+1)
 14945                           
 14946                           ;touch_handler.c: 21: EUSART_Write('U');
 14947  093C  3055               	movlw	85
 14948  093D  3190  20BB  3189   	fcall	_EUSART_Write
 14949                           
 14950                           ;touch_handler.c: 22: _delay((unsigned long)((1000)*(32000000/4000.0)));
 14951  0940  3029               	movlw	41
 14952  0941  0020               	movlb	0	; select bank0
 14953  0942  00AC               	movwf	??_OnHold+1
 14954  0943  3096               	movlw	150
 14955  0944  00AB               	movwf	??_OnHold
 14956  0945  307F               	movlw	127
 14957  0946                     u9257:	
 14958  0946  0B89               	decfsz	9,f
 14959  0947  2946               	goto	u9257
 14960  0948  0BAB               	decfsz	??_OnHold,f
 14961  0949  2946               	goto	u9257
 14962  094A  0BAC               	decfsz	??_OnHold+1,f
 14963  094B  2946               	goto	u9257
 14964                           
 14965                           ;touch_handler.c: 23: irTriggered = 1;
 14966  094C  0020               	movlb	0	; select bank0
 14967  094D  01D7               	clrf	OnHold@irTriggered
 14968  094E  0AD7               	incf	OnHold@irTriggered,f
 14969  094F                     l7879:	
 14970                           
 14971                           ;touch_handler.c: 24: }
 14972                           ;touch_handler.c: 25: if(holdCounter == 15000 && irTriggered) {
 14973  094F  3098               	movlw	152
 14974  0950  0021               	movlb	1	; select bank1
 14975  0951  0643               	xorwf	_holdCounter^(0+128),w
 14976  0952  303A               	movlw	58
 14977  0953  1903               	skipnz
 14978  0954  0644               	xorwf	(_holdCounter+1)^(0+128),w
 14979  0955  1D03               	btfss	3,2
 14980  0956  2962               	goto	l7887
 14981  0957  0020               	movlb	0	; select bank0
 14982  0958  0857               	movf	OnHold@irTriggered,w
 14983  0959  1903               	btfsc	3,2
 14984  095A  2962               	goto	l7887
 14985                           
 14986                           ;touch_handler.c: 26: EUSART_Write('V');
 14987  095B  3056               	movlw	86
 14988  095C  3190  20BB  3189   	fcall	_EUSART_Write
 14989                           
 14990                           ;touch_handler.c: 27: d = 0;
 14991  095F  0021               	movlb	1	; select bank1
 14992  0960  01C1               	clrf	_d^(0+128)
 14993  0961  01C2               	clrf	(_d+1)^(0+128)
 14994  0962                     l7887:	
 14995                           
 14996                           ;touch_handler.c: 28: }
 14997                           ;touch_handler.c: 29: if (holdCounter >= 20000 && !matterTriggered) {
 14998  0962  304E               	movlw	78
 14999  0963  0021               	movlb	1	; select bank1
 15000  0964  0244               	subwf	(_holdCounter+1)^(0+128),w
 15001  0965  3020               	movlw	32
 15002  0966  1903               	skipnz
 15003  0967  0243               	subwf	_holdCounter^(0+128),w
 15004  0968  1C03               	skipc
 15005  0969  0008               	return
 15006  096A  0859               	movf	OnHold@matterTriggered^(0+128),w
 15007  096B  1D03               	btfss	3,2
 15008  096C  0008               	return
 15009                           
 15010                           ;touch_handler.c: 30: EUSART_Write('T');
 15011  096D  3054               	movlw	84
 15012  096E  3190  20BB  3189   	fcall	_EUSART_Write
 15013                           
 15014                           ;touch_handler.c: 31: _delay((unsigned long)((3000)*(32000000/4000.0)));
 15015  0971  307A               	movlw	122
 15016  0972  0020               	movlb	0	; select bank0
 15017  0973  00AC               	movwf	??_OnHold+1
 15018  0974  30C1               	movlw	193
 15019  0975  00AB               	movwf	??_OnHold
 15020  0976  3081               	movlw	129
 15021  0977                     u9267:	
 15022  0977  0B89               	decfsz	9,f
 15023  0978  2977               	goto	u9267
 15024  0979  0BAB               	decfsz	??_OnHold,f
 15025  097A  2977               	goto	u9267
 15026  097B  0BAC               	decfsz	??_OnHold+1,f
 15027  097C  2977               	goto	u9267
 15028  097D  3200               	nop2
 15029                           
 15030                           ;touch_handler.c: 32: matterTriggered = 1;
 15031  097E  0021               	movlb	1	; select bank1
 15032  097F  01D9               	clrf	OnHold@matterTriggered^(0+128)
 15033  0980  0AD9               	incf	OnHold@matterTriggered^(0+128),f
 15034                           
 15035                           ;touch_handler.c: 33: }
 15036                           ;touch_handler.c: 34: } else {
 15037  0981  0008               	return
 15038  0982                     l7897:	
 15039                           
 15040                           ;touch_handler.c: 35: holdCounter = 0;
 15041  0982  0021               	movlb	1	; select bank1
 15042  0983  01C3               	clrf	_holdCounter^(0+128)
 15043  0984  01C4               	clrf	(_holdCounter+1)^(0+128)
 15044                           
 15045                           ;touch_handler.c: 36: irTriggered = 0;
 15046  0985  0020               	movlb	0	; select bank0
 15047  0986  01D7               	clrf	OnHold@irTriggered
 15048                           
 15049                           ;touch_handler.c: 37: matterTriggered = 0;
 15050  0987  0021               	movlb	1	; select bank1
 15051  0988  01D9               	clrf	OnHold@matterTriggered^(0+128)
 15052  0989  0008               	return
 15053  098A                     __end_of_OnHold:	
 15054                           
 15055                           	psect	text27
 15056  10BB                     __ptext27:	
 15057 ;; *************** function _EUSART_Write *****************
 15058 ;; Defined at:
 15059 ;;		line 132 in file "mcc_generated_files/eusart.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;  txData          1    wreg     unsigned char 
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  txData          1   10[BANK0 ] unsigned char 
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      void 
 15066 ;; Registers used:
 15067 ;;		wreg
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;Total ram usage:        1 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:    7
 15080 ;; This function calls:
 15081 ;;		Nothing
 15082 ;; This function is called by:
 15083 ;;		_ir_handler
 15084 ;;		_handleFanToggle
 15085 ;;		_handleFanSpeedChange
 15086 ;;		_main
 15087 ;;		_OnHold
 15088 ;;		_processToggle
 15089 ;;		_processFanSpeedControl
 15090 ;; This function uses a non-reentrant model
 15091 ;;
 15092                           
 15093                           
 15094                           ;psect for function _EUSART_Write
 15095  10BB                     _EUSART_Write:	
 15096                           
 15097                           ;incstack = 0
 15098                           ; Regs used in _EUSART_Write: [wreg]
 15099                           ;EUSART_Write@txData stored from wreg
 15100  10BB  0020               	movlb	0	; select bank0
 15101  10BC  00AA               	movwf	EUSART_Write@txData
 15102  10BD                     l1187:	
 15103                           ;eusart.c: 135: {
 15104                           
 15105                           ;eusart.c: 134: while(0 == PIR3bits.TXIF)
 15106                           
 15107  10BD  002E               	movlb	14	; select bank14
 15108  10BE  1E0F               	btfss	15,4	;volatile
 15109  10BF  28BD               	goto	l1187
 15110                           
 15111                           ;eusart.c: 136: }
 15112                           ;eusart.c: 138: TX1REG = txData;
 15113  10C0  0020               	movlb	0	; select bank0
 15114  10C1  082A               	movf	EUSART_Write@txData,w
 15115  10C2  0022               	movlb	2	; select bank2
 15116  10C3  009A               	movwf	26	;volatile
 15117  10C4  0008               	return
 15118  10C5                     __end_of_EUSART_Write:	
 15119                           
 15120                           	psect	text28
 15121  14CC                     __ptext28:	
 15122 ;; *************** function _MTOUCH_Service_Mainloop *****************
 15123 ;; Defined at:
 15124 ;;		line 99 in file "mcc_generated_files/mtouch/mtouch.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;		None
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;  mask            1   40[BANK0 ] unsigned char 
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      unsigned char 
 15131 ;; Registers used:
 15132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;Total ram usage:        2 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:   13
 15145 ;; This function calls:
 15146 ;;		_MTOUCH_Button_ServiceAll
 15147 ;;		_MTOUCH_Initialize
 15148 ;;		_MTOUCH_Sensor_SampleAll
 15149 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 15150 ;;		_MTOUCH_Tick
 15151 ;;		_MTOUCH_needReburst
 15152 ;; This function is called by:
 15153 ;;		_main
 15154 ;;		_touch_example
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           
 15159                           ;psect for function _MTOUCH_Service_Mainloop
 15160  14CC                     _MTOUCH_Service_Mainloop:	
 15161                           
 15162                           ;mtouch.c: 101: uint8_t mask = 0u;
 15163                           
 15164                           ;incstack = 0
 15165                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15166  14CC  0020               	movlb	0	; select bank0
 15167  14CD  01C8               	clrf	MTOUCH_Service_Mainloop@mask
 15168                           
 15169                           ;mtouch.c: 102: if(mtouch_request_init)
 15170  14CE  0861               	movf	_mtouch_request_init,w
 15171  14CF  1903               	btfsc	3,2
 15172  14D0  2CD6               	goto	l7677
 15173                           
 15174                           ;mtouch.c: 103: {
 15175                           ;mtouch.c: 104: MTOUCH_Initialize();
 15176  14D1  3190  20E8  3194   	fcall	_MTOUCH_Initialize
 15177                           
 15178                           ;mtouch.c: 105: mtouch_request_init = 0;
 15179  14D4  0020               	movlb	0	; select bank0
 15180  14D5  01E1               	clrf	_mtouch_request_init
 15181  14D6                     l7677:	
 15182                           
 15183                           ;mtouch.c: 106: }
 15184                           ;mtouch.c: 108: mtouch_time_toScan = 1;
 15185  14D6  01E2               	clrf	_mtouch_time_toScan
 15186  14D7  0AE2               	incf	_mtouch_time_toScan,f
 15187                           
 15188                           ;mtouch.c: 110: if(mtouch_time_toScan)
 15189  14D8  0862               	movf	_mtouch_time_toScan,w
 15190  14D9  1903               	btfsc	3,2
 15191  14DA  2CF4               	goto	l7701
 15192                           
 15193                           ;mtouch.c: 111: {
 15194                           ;mtouch.c: 112: if(MTOUCH_Sensor_SampleAll() == 0)
 15195  14DB  3191  216C  3194   	fcall	_MTOUCH_Sensor_SampleAll
 15196  14DE  3A00               	xorlw	0
 15197  14DF  1D03               	skipz
 15198  14E0  2CE3               	goto	l7687
 15199                           
 15200                           ;mtouch.c: 113: {
 15201                           ;mtouch.c: 114: return 0;
 15202  14E1  3000               	movlw	0
 15203  14E2  0008               	return
 15204  14E3                     l7687:	
 15205                           
 15206                           ;mtouch.c: 115: }
 15207                           ;mtouch.c: 117: MTOUCH_Button_ServiceAll();
 15208  14E3  3191  217B  3194   	fcall	_MTOUCH_Button_ServiceAll
 15209                           
 15210                           ;mtouch.c: 119: mtouch_time_toScan = MTOUCH_needReburst();
 15211  14E6  319F  27D8  3194   	fcall	_MTOUCH_needReburst
 15212  14E9  0020               	movlb	0	; select bank0
 15213  14EA  00C7               	movwf	??_MTOUCH_Service_Mainloop
 15214  14EB  0847               	movf	??_MTOUCH_Service_Mainloop,w
 15215  14EC  00E2               	movwf	_mtouch_time_toScan
 15216                           
 15217                           ;mtouch.c: 120: MTOUCH_Sensor_Sampled_ResetAll();
 15218  14ED  3192  220E  3194   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
 15219                           
 15220                           ;mtouch.c: 121: MTOUCH_Tick();
 15221  14F0  319F  27D2         	fcall	_MTOUCH_Tick
 15222                           
 15223                           ;mtouch.c: 122: return 1;
 15224  14F2  3001               	movlw	1
 15225                           
 15226                           ;mtouch.c: 123: }
 15227  14F3  0008               	return
 15228  14F4                     l7701:	
 15229                           
 15230                           ;mtouch.c: 124: else
 15231                           ;mtouch.c: 125: {
 15232                           ;mtouch.c: 126: return 0;
 15233  14F4  3000               	movlw	0
 15234  14F5  0008               	return
 15235  14F6                     __end_of_MTOUCH_Service_Mainloop:	
 15236                           
 15237                           	psect	text29
 15238  1FD8                     __ptext29:	
 15239 ;; *************** function _MTOUCH_needReburst *****************
 15240 ;; Defined at:
 15241 ;;		line 147 in file "mcc_generated_files/mtouch/mtouch.c"
 15242 ;; Parameters:    Size  Location     Type
 15243 ;;		None
 15244 ;; Auto vars:     Size  Location     Type
 15245 ;;  needReburst     1   10[BANK0 ] unsigned char 
 15246 ;; Return value:  Size  Location     Type
 15247 ;;                  1    wreg      unsigned char 
 15248 ;; Registers used:
 15249 ;;		wreg, status,2
 15250 ;; Tracked objects:
 15251 ;;		On entry : 0/0
 15252 ;;		On exit  : 0/0
 15253 ;;		Unchanged: 0/0
 15254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;Total ram usage:        1 bytes
 15260 ;; Hardware stack levels used:    1
 15261 ;; Hardware stack levels required when called:    7
 15262 ;; This function calls:
 15263 ;;		Nothing
 15264 ;; This function is called by:
 15265 ;;		_MTOUCH_Service_Mainloop
 15266 ;; This function uses a non-reentrant model
 15267 ;;
 15268                           
 15269                           
 15270                           ;psect for function _MTOUCH_needReburst
 15271  1FD8                     _MTOUCH_needReburst:	
 15272                           
 15273                           ;mtouch.c: 149: bool needReburst = 0;
 15274                           
 15275                           ;incstack = 0
 15276                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
 15277  1FD8  0020               	movlb	0	; select bank0
 15278  1FD9  01AA               	clrf	MTOUCH_needReburst@needReburst
 15279                           
 15280                           ;mtouch.c: 151: return needReburst;
 15281  1FDA  082A               	movf	MTOUCH_needReburst@needReburst,w
 15282  1FDB  0008               	return
 15283  1FDC                     __end_of_MTOUCH_needReburst:	
 15284                           
 15285                           	psect	text30
 15286  1FD2                     __ptext30:	
 15287 ;; *************** function _MTOUCH_Tick *****************
 15288 ;; Defined at:
 15289 ;;		line 135 in file "mcc_generated_files/mtouch/mtouch.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;		None
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;		None
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  1    wreg      void 
 15296 ;; Registers used:
 15297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;Total ram usage:        0 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    9
 15310 ;; This function calls:
 15311 ;;		_MTOUCH_Button_Tick
 15312 ;; This function is called by:
 15313 ;;		_MTOUCH_Service_Mainloop
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _MTOUCH_Tick
 15319  1FD2                     _MTOUCH_Tick:	
 15320                           
 15321                           ;mtouch.c: 138: MTOUCH_Button_Tick();
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15325  1FD2  3194  247A         	fcall	_MTOUCH_Button_Tick
 15326  1FD4  0008               	return
 15327  1FD5                     __end_of_MTOUCH_Tick:	
 15328                           
 15329                           	psect	text31
 15330  147A                     __ptext31:	
 15331 ;; *************** function _MTOUCH_Button_Tick *****************
 15332 ;; Defined at:
 15333 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;  i               1   24[BANK0 ] unsigned char 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;Total ram usage:        5 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    8
 15354 ;; This function calls:
 15355 ;;		_Button_Tick_helper
 15356 ;;		___wmul
 15357 ;; This function is called by:
 15358 ;;		_MTOUCH_Tick
 15359 ;; This function uses a non-reentrant model
 15360 ;;
 15361                           
 15362                           
 15363                           ;psect for function _MTOUCH_Button_Tick
 15364  147A                     _MTOUCH_Button_Tick:	
 15365                           
 15366                           ;mtouch_button.c: 326: uint8_t i;
 15367                           ;mtouch_button.c: 327: for (i = 0; i < 5u; i++)
 15368                           
 15369                           ;incstack = 0
 15370                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15371  147A  0020               	movlb	0	; select bank0
 15372  147B  01B8               	clrf	MTOUCH_Button_Tick@i
 15373  147C                     L9:	
 15374  147C  3005               	movlw	5
 15375  147D  0238               	subwf	MTOUCH_Button_Tick@i,w
 15376  147E  1803               	btfsc	3,0
 15377  147F  0008               	return
 15378                           
 15379                           ;mtouch_button.c: 328: {
 15380                           ;mtouch_button.c: 329: Button_Tick_helper(&mtouch_button[i]);
 15381  1480  0838               	movf	MTOUCH_Button_Tick@i,w
 15382  1481  00B4               	movwf	??_MTOUCH_Button_Tick
 15383  1482  01B5               	clrf	??_MTOUCH_Button_Tick+1
 15384  1483  0834               	movf	??_MTOUCH_Button_Tick,w
 15385  1484  00AA               	movwf	___wmul@multiplier
 15386  1485  0835               	movf	??_MTOUCH_Button_Tick+1,w
 15387  1486  00AB               	movwf	___wmul@multiplier+1
 15388  1487  3011               	movlw	17
 15389  1488  00AC               	movwf	___wmul@multiplicand
 15390  1489  3000               	movlw	0
 15391  148A  00AD               	movwf	___wmul@multiplicand+1
 15392  148B  3188  2002  3194   	fcall	___wmul
 15393  148E  309B               	movlw	155
 15394  148F  0020               	movlb	0	; select bank0
 15395  1490  00B6               	movwf	??_MTOUCH_Button_Tick+2
 15396  1491  3023               	movlw	35
 15397  1492  00B7               	movwf	??_MTOUCH_Button_Tick+3
 15398  1493  082A               	movf	?___wmul,w
 15399  1494  0736               	addwf	??_MTOUCH_Button_Tick+2,w
 15400  1495  00B0               	movwf	Button_Tick_helper@button
 15401  1496  082B               	movf	?___wmul+1,w
 15402  1497  3D37               	addwfc	??_MTOUCH_Button_Tick+3,w
 15403  1498  00B1               	movwf	Button_Tick_helper@button+1
 15404  1499  3194  2453  3194   	fcall	_Button_Tick_helper
 15405  149C  3001               	movlw	1
 15406  149D  0020               	movlb	0	; select bank0
 15407  149E  00B4               	movwf	??_MTOUCH_Button_Tick
 15408  149F  0834               	movf	??_MTOUCH_Button_Tick,w
 15409  14A0  07B8               	addwf	MTOUCH_Button_Tick@i,f
 15410  14A1  2C7C               	goto	L9
 15411  14A2                     __end_of_MTOUCH_Button_Tick:	
 15412                           
 15413                           	psect	text32
 15414  1453                     __ptext32:	
 15415 ;; *************** function _Button_Tick_helper *****************
 15416 ;; Defined at:
 15417 ;;		line 332 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;  button          2   16[BANK0 ] PTR struct .
 15420 ;;		 -> mtouch_button(85), 
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;		None
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      void 
 15425 ;; Registers used:
 15426 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        4 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    7
 15439 ;; This function calls:
 15440 ;;		Nothing
 15441 ;; This function is called by:
 15442 ;;		_MTOUCH_Button_Tick
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           
 15447                           ;psect for function _Button_Tick_helper
 15448  1453                     _Button_Tick_helper:	
 15449                           
 15450                           ;mtouch_button.c: 335: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
 15451                           
 15452                           ;incstack = 0
 15453                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
 15454  1453  0020               	movlb	0	; select bank0
 15455  1454  0830               	movf	Button_Tick_helper@button,w
 15456  1455  0086               	movwf	6
 15457  1456  0831               	movf	Button_Tick_helper@button+1,w
 15458  1457  0087               	movwf	7
 15459  1458  3142               	addfsr 1,2
 15460  1459  3002               	movlw	2
 15461  145A  0601               	xorwf	1,w
 15462  145B  1D03               	btfss	3,2
 15463  145C  0008               	return
 15464                           
 15465                           ;mtouch_button.c: 336: {
 15466                           ;mtouch_button.c: 337: (button->counter)++;
 15467  145D  0830               	movf	Button_Tick_helper@button,w
 15468  145E  0086               	movwf	6
 15469  145F  0831               	movf	Button_Tick_helper@button+1,w
 15470  1460  0087               	movwf	7
 15471  1461  314A               	addfsr 1,10
 15472  1462  3001               	movlw	1
 15473  1463  0781               	addwf	1,f
 15474  1464  3141               	addfsr 1,1
 15475  1465  1803               	skipnc
 15476  1466  0A81               	incf	1,f
 15477                           
 15478                           ;mtouch_button.c: 338: if (button->counter == (mtouch_button_statecounter_t)0)
 15479  1467  0830               	movf	Button_Tick_helper@button,w
 15480  1468  0086               	movwf	6
 15481  1469  0831               	movf	Button_Tick_helper@button+1,w
 15482  146A  0087               	movwf	7
 15483  146B  314A               	addfsr 1,10
 15484  146C  0016               	moviw fsr1++
 15485  146D  0401               	iorwf	1,w
 15486  146E  1D03               	btfss	3,2
 15487  146F  0008               	return
 15488                           
 15489                           ;mtouch_button.c: 339: {
 15490                           ;mtouch_button.c: 340: button->counter = (mtouch_button_statecounter_t)0xFFFF;
 15491  1470  0830               	movf	Button_Tick_helper@button,w
 15492  1471  0086               	movwf	6
 15493  1472  0831               	movf	Button_Tick_helper@button+1,w
 15494  1473  0087               	movwf	7
 15495  1474  314A               	addfsr 1,10
 15496  1475  30FF               	movlw	255
 15497  1476  3FC0               	movwi [0]fsr1
 15498  1477  30FF               	movlw	255
 15499  1478  3FC1               	movwi [1]fsr1
 15500  1479  0008               	return
 15501  147A                     __end_of_Button_Tick_helper:	
 15502                           
 15503                           	psect	text33
 15504  116C                     __ptext33:	
 15505 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
 15506 ;; Defined at:
 15507 ;;		line 345 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15508 ;; Parameters:    Size  Location     Type
 15509 ;;		None
 15510 ;; Auto vars:     Size  Location     Type
 15511 ;;		None
 15512 ;; Return value:  Size  Location     Type
 15513 ;;                  1    wreg      unsigned char 
 15514 ;; Registers used:
 15515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15516 ;; Tracked objects:
 15517 ;;		On entry : 0/0
 15518 ;;		On exit  : 0/0
 15519 ;;		Unchanged: 0/0
 15520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;Total ram usage:        0 bytes
 15526 ;; Hardware stack levels used:    1
 15527 ;; Hardware stack levels required when called:   11
 15528 ;; This function calls:
 15529 ;;		_MTOUCH_Sensor_isSamplingComplete
 15530 ;;		_MTOUCH_Sensor_postAcquisitionProcess
 15531 ;;		_Sensor_FrequencyHopping
 15532 ;; This function is called by:
 15533 ;;		_MTOUCH_Service_Mainloop
 15534 ;; This function uses a non-reentrant model
 15535 ;;
 15536                           
 15537                           
 15538                           ;psect for function _MTOUCH_Sensor_SampleAll
 15539  116C                     _MTOUCH_Sensor_SampleAll:	
 15540                           
 15541                           ;mtouch_sensor.c: 347: if(MTOUCH_Sensor_isSamplingComplete() == 0)
 15542                           
 15543                           ;incstack = 0
 15544                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15545  116C  3194  24A2  3191   	fcall	_MTOUCH_Sensor_isSamplingComplete
 15546  116F  3A00               	xorlw	0
 15547  1170  1D03               	skipz
 15548  1171  2974               	goto	l7481
 15549                           
 15550                           ;mtouch_sensor.c: 348: {
 15551                           ;mtouch_sensor.c: 349: return 0;
 15552  1172  3000               	movlw	0
 15553  1173  0008               	return
 15554  1174                     l7481:	
 15555                           
 15556                           ;mtouch_sensor.c: 350: }
 15557                           ;mtouch_sensor.c: 353: Sensor_FrequencyHopping();
 15558  1174  319F  27EC  3191   	fcall	_Sensor_FrequencyHopping
 15559                           
 15560                           ;mtouch_sensor.c: 354: MTOUCH_Sensor_postAcquisitionProcess();
 15561  1177  3196  260B         	fcall	_MTOUCH_Sensor_postAcquisitionProcess
 15562                           
 15563                           ;mtouch_sensor.c: 356: return 1;
 15564  1179  3001               	movlw	1
 15565  117A  0008               	return
 15566  117B                     __end_of_MTOUCH_Sensor_SampleAll:	
 15567                           
 15568                           	psect	text34
 15569  1FEC                     __ptext34:	
 15570 ;; *************** function _Sensor_FrequencyHopping *****************
 15571 ;; Defined at:
 15572 ;;		line 706 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;		None
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      void 
 15579 ;; Registers used:
 15580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;Total ram usage:        0 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    9
 15593 ;; This function calls:
 15594 ;;		_Sensor_FrequencyHopping_Autotune_Process
 15595 ;;		_Sensor_setSamplePeriod
 15596 ;; This function is called by:
 15597 ;;		_MTOUCH_Sensor_SampleAll
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _Sensor_FrequencyHopping
 15603  1FEC                     _Sensor_FrequencyHopping:	
 15604                           
 15605                           ;mtouch_sensor.c: 709: Sensor_FrequencyHopping_Autotune_Process();
 15606                           
 15607                           ;incstack = 0
 15608                           ; Regs used in _Sensor_FrequencyHopping: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15609  1FEC  3186  268D  319F   	fcall	_Sensor_FrequencyHopping_Autotune_Process
 15610                           
 15611                           ;mtouch_sensor.c: 711: Sensor_setSamplePeriod();
 15612  1FEF  3191  21AE         	fcall	_Sensor_setSamplePeriod
 15613  1FF1  0008               	return
 15614  1FF2                     __end_of_Sensor_FrequencyHopping:	
 15615                           
 15616                           	psect	text35
 15617  11AE                     __ptext35:	
 15618 ;; *************** function _Sensor_setSamplePeriod *****************
 15619 ;; Defined at:
 15620 ;;		line 617 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;		None
 15623 ;; Auto vars:     Size  Location     Type
 15624 ;;		None
 15625 ;; Return value:  Size  Location     Type
 15626 ;;                  1    wreg      void 
 15627 ;; Registers used:
 15628 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15629 ;; Tracked objects:
 15630 ;;		On entry : 0/0
 15631 ;;		On exit  : 0/0
 15632 ;;		Unchanged: 0/0
 15633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;Total ram usage:        1 bytes
 15639 ;; Hardware stack levels used:    1
 15640 ;; Hardware stack levels required when called:    7
 15641 ;; This function calls:
 15642 ;;		Nothing
 15643 ;; This function is called by:
 15644 ;;		_Sensor_FrequencyHopping
 15645 ;; This function uses a non-reentrant model
 15646 ;;
 15647                           
 15648                           
 15649                           ;psect for function _Sensor_setSamplePeriod
 15650  11AE                     _Sensor_setSamplePeriod:	
 15651                           
 15652                           ;mtouch_sensor.c: 619: if(++freq_index >= sizeof(freq_hop) )
 15653                           
 15654                           ;incstack = 0
 15655                           ; Regs used in _Sensor_setSamplePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 15656  11AE  3001               	movlw	1
 15657  11AF  0020               	movlb	0	; select bank0
 15658  11B0  00AA               	movwf	??_Sensor_setSamplePeriod
 15659  11B1  082A               	movf	??_Sensor_setSamplePeriod,w
 15660  11B2  07DC               	addwf	_freq_index,f
 15661  11B3  3003               	movlw	3
 15662  11B4  025C               	subwf	_freq_index,w
 15663  11B5  1803               	btfsc	3,0
 15664                           
 15665                           ;mtouch_sensor.c: 620: freq_index = 0;
 15666  11B6  01DC               	clrf	_freq_index
 15667                           
 15668                           ;mtouch_sensor.c: 622: sample_delay = freq_hop[freq_index];
 15669  11B7  085C               	movf	_freq_index,w
 15670  11B8  3EE4               	addlw	(low (_freq_hop| 0))& (0+255)
 15671  11B9  0086               	movwf	6
 15672  11BA  0187               	clrf	7
 15673  11BB  0801               	movf	1,w
 15674  11BC  00AA               	movwf	??_Sensor_setSamplePeriod
 15675  11BD  082A               	movf	??_Sensor_setSamplePeriod,w
 15676  11BE  00DB               	movwf	_sample_delay
 15677  11BF  0008               	return
 15678  11C0                     __end_of_Sensor_setSamplePeriod:	
 15679                           
 15680                           	psect	text36
 15681  068D                     __ptext36:	
 15682 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
 15683 ;; Defined at:
 15684 ;;		line 720 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15685 ;; Parameters:    Size  Location     Type
 15686 ;;		None
 15687 ;; Auto vars:     Size  Location     Type
 15688 ;;  maxVariance     2   26[BANK0 ] unsigned int 
 15689 ;;  variance        2   24[BANK0 ] unsigned int 
 15690 ;;  frequencyInd    1   30[BANK0 ] unsigned char 
 15691 ;;  selectedFreq    1   29[BANK0 ] unsigned char 
 15692 ;;  sensor          1   28[BANK0 ] enum E14537
 15693 ;;  newfrequency    1   23[BANK0 ] unsigned char 
 15694 ;; Return value:  Size  Location     Type
 15695 ;;                  1    wreg      void 
 15696 ;; Registers used:
 15697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15698 ;; Tracked objects:
 15699 ;;		On entry : 0/0
 15700 ;;		On exit  : 0/0
 15701 ;;		Unchanged: 0/0
 15702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;Total ram usage:       13 bytes
 15708 ;; Hardware stack levels used:    1
 15709 ;; Hardware stack levels required when called:    8
 15710 ;; This function calls:
 15711 ;;		___bmul
 15712 ;;		_abs
 15713 ;; This function is called by:
 15714 ;;		_Sensor_FrequencyHopping
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           
 15719                           ;psect for function _Sensor_FrequencyHopping_Autotune_Process
 15720  068D                     _Sensor_FrequencyHopping_Autotune_Process:	
 15721                           
 15722                           ;mtouch_sensor.c: 722: enum mtouch_sensor_names sensor;
 15723                           ;mtouch_sensor.c: 723: uint8_t frequencyIndex;
 15724                           ;mtouch_sensor.c: 724: uint8_t newfrequencyFound,selectedFrequency;
 15725                           ;mtouch_sensor.c: 725: uint16_t variance,maxVariance;
 15726                           ;mtouch_sensor.c: 728: static uint8_t varianceOverLimitCounter[3] = {0,0,0};
 15727                           ;mtouch_sensor.c: 730: maxVariance = 0;
 15728                           
 15729                           ;incstack = 0
 15730                           ; Regs used in _Sensor_FrequencyHopping_Autotune_Process: [wreg-fsr1h+status,2+status,0+
      +                          pclath+cstack]
 15731  068D  0020               	movlb	0	; select bank0
 15732  068E  01BA               	clrf	Sensor_FrequencyHopping_Autotune_Process@maxVariance
 15733  068F  01BB               	clrf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1
 15734                           
 15735                           ;mtouch_sensor.c: 732: for(sensor = 0; sensor < (5u); sensor++)
 15736  0690  01BC               	clrf	Sensor_FrequencyHopping_Autotune_Process@sensor
 15737  0691  3005               	movlw	5
 15738  0692  023C               	subwf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 15739  0693  1803               	btfsc	3,0
 15740  0694  2EDB               	goto	l7097
 15741  0695                     l7087:	
 15742                           
 15743                           ;mtouch_sensor.c: 733: {
 15744                           ;mtouch_sensor.c: 734: variance = (mtouch_sensor_packetsample_t)abs(packet_sample[sensor
      +                          ] - sensor_medianBuffer[sensor][freq_index]);
 15745  0695  353C               	lslf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 15746  0696  3E3E               	addlw	(low (_packet_sample| (0+256)))& (0+255)
 15747  0697  0086               	movwf	6
 15748  0698  3001               	movlw	1	; select bank2/3
 15749  0699  0087               	movwf	7
 15750  069A  085C               	movf	_freq_index,w
 15751  069B  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15752  069C  3001               	movlw	1
 15753  069D                     u7095:	
 15754  069D  35B2               	lslf	??_Sensor_FrequencyHopping_Autotune_Process,f
 15755  069E  0B89               	decfsz	9,f
 15756  069F  2E9D               	goto	u7095
 15757  06A0  3006               	movlw	6
 15758  06A1  00B3               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+1
 15759  06A2  0833               	movf	??_Sensor_FrequencyHopping_Autotune_Process+1,w
 15760  06A3  00AA               	movwf	___bmul@multiplicand
 15761  06A4  083C               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 15762  06A5  3191  219C  3186   	fcall	___bmul
 15763  06A8  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 15764  06A9  0020               	movlb	0	; select bank0
 15765  06AA  0732               	addwf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15766  06AB  00B4               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+2
 15767  06AC  0834               	movf	??_Sensor_FrequencyHopping_Autotune_Process+2,w
 15768  06AD  0084               	movwf	4
 15769  06AE  3001               	movlw	1	; select bank2/3
 15770  06AF  0085               	movwf	5
 15771  06B0  3F00               	moviw [0]fsr0
 15772  06B1  00B5               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+3
 15773  06B2  3F01               	moviw [1]fsr0
 15774  06B3  00B6               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+4
 15775  06B4  09B5               	comf	??_Sensor_FrequencyHopping_Autotune_Process+3,f
 15776  06B5  09B6               	comf	??_Sensor_FrequencyHopping_Autotune_Process+4,f
 15777  06B6  0AB5               	incf	??_Sensor_FrequencyHopping_Autotune_Process+3,f
 15778  06B7  1903               	skipnz
 15779  06B8  0AB6               	incf	??_Sensor_FrequencyHopping_Autotune_Process+4,f
 15780  06B9  3F40               	moviw [0]fsr1
 15781  06BA  0735               	addwf	??_Sensor_FrequencyHopping_Autotune_Process+3,w
 15782  06BB  00AE               	movwf	abs@a
 15783  06BC  3F41               	moviw [1]fsr1
 15784  06BD  3D36               	addwfc	??_Sensor_FrequencyHopping_Autotune_Process+4,w
 15785  06BE  00AF               	movwf	abs@a+1
 15786  06BF  3191  215D  3186   	fcall	_abs
 15787  06C2  0020               	movlb	0	; select bank0
 15788  06C3  082F               	movf	?_abs+1,w
 15789  06C4  00B9               	movwf	Sensor_FrequencyHopping_Autotune_Process@variance+1
 15790  06C5  082E               	movf	?_abs,w
 15791  06C6  00B8               	movwf	Sensor_FrequencyHopping_Autotune_Process@variance
 15792                           
 15793                           ;mtouch_sensor.c: 735: if(variance > maxVariance)
 15794  06C7  0839               	movf	Sensor_FrequencyHopping_Autotune_Process@variance+1,w
 15795  06C8  023B               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 15796  06C9  1D03               	skipz
 15797  06CA  2ECD               	goto	u7105
 15798  06CB  0838               	movf	Sensor_FrequencyHopping_Autotune_Process@variance,w
 15799  06CC  023A               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 15800  06CD                     u7105:	
 15801  06CD  1803               	skipnc
 15802  06CE  2ED3               	goto	l7093
 15803                           
 15804                           ;mtouch_sensor.c: 736: maxVariance = variance;
 15805  06CF  0839               	movf	Sensor_FrequencyHopping_Autotune_Process@variance+1,w
 15806  06D0  00BB               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1
 15807  06D1  0838               	movf	Sensor_FrequencyHopping_Autotune_Process@variance,w
 15808  06D2  00BA               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance
 15809  06D3                     l7093:	
 15810  06D3  3001               	movlw	1
 15811  06D4  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15812  06D5  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15813  06D6  07BC               	addwf	Sensor_FrequencyHopping_Autotune_Process@sensor,f
 15814  06D7  3005               	movlw	5
 15815  06D8  023C               	subwf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 15816  06D9  1C03               	skipc
 15817  06DA  2E95               	goto	l7087
 15818  06DB                     l7097:	
 15819                           
 15820                           ;mtouch_sensor.c: 737: }
 15821                           ;mtouch_sensor.c: 739: if(maxVariance > (mtouch_sensor_packetsample_t)100)
 15822  06DB  3000               	movlw	0
 15823  06DC  023B               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 15824  06DD  3065               	movlw	101
 15825  06DE  1903               	skipnz
 15826  06DF  023A               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 15827  06E0  1C03               	skipc
 15828  06E1  2F37               	goto	l7147
 15829                           
 15830                           ;mtouch_sensor.c: 740: {
 15831                           ;mtouch_sensor.c: 741: if(++varianceOverLimitCounter[freq_index] >= (uint8_t)6)
 15832  06E2  3001               	movlw	1
 15833  06E3  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15834  06E4  085C               	movf	_freq_index,w
 15835  06E5  3EB0               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 15836  06E6  0086               	movwf	6
 15837  06E7  0187               	clrf	7
 15838  06E8  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15839  06E9  0781               	addwf	1,f
 15840  06EA  3006               	movlw	6
 15841  06EB  0201               	subwf	1,w
 15842  06EC  1C03               	skipc
 15843  06ED  0008               	return
 15844                           
 15845                           ;mtouch_sensor.c: 742: {
 15846                           ;mtouch_sensor.c: 743: newfrequencyFound = 0;
 15847  06EE  01B7               	clrf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound
 15848                           
 15849                           ;mtouch_sensor.c: 744: selectedFrequency = freq_hop[freq_index];
 15850  06EF  085C               	movf	_freq_index,w
 15851  06F0  3EE4               	addlw	(low (_freq_hop| 0))& (0+255)
 15852  06F1  0086               	movwf	6
 15853  06F2  0187               	clrf	7
 15854  06F3  0801               	movf	1,w
 15855  06F4  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15856  06F5  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15857  06F6  00BD               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency
 15858  06F7                     l7105:	
 15859                           ;mtouch_sensor.c: 745: do
 15860                           
 15861                           
 15862                           ;mtouch_sensor.c: 746: {
 15863                           ;mtouch_sensor.c: 747: if(selectedFrequency > ((uint8_t)((mtouch_sensor_time_t)0 << (uin
      +                          t8_t)2) + ((mtouch_sensor_time_t)1 << (uint8_t)2)))
 15864  06F7  3005               	movlw	5
 15865  06F8  023D               	subwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 15866  06F9  1C03               	skipc
 15867  06FA  2EFE               	goto	l7109
 15868                           
 15869                           ;mtouch_sensor.c: 748: selectedFrequency = selectedFrequency - ((mtouch_sensor_time_t)1 
      +                          << (uint8_t)2);
 15870  06FB  083D               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 15871  06FC  3EFC               	addlw	252
 15872  06FD  2EFF               	goto	L10
 15873  06FE                     l7109:	
 15874                           
 15875                           ;mtouch_sensor.c: 749: else
 15876                           ;mtouch_sensor.c: 750: selectedFrequency = (uint8_t)((mtouch_sensor_time_t)15 << (uint8_
      +                          t)2);
 15877  06FE  303C               	movlw	60
 15878  06FF                     L10:	
 15879  06FF  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15880  0700  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15881  0701  00BD               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency
 15882                           
 15883                           ;mtouch_sensor.c: 752: newfrequencyFound = 1;
 15884  0702  01B7               	clrf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound
 15885  0703  0AB7               	incf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound,f
 15886                           
 15887                           ;mtouch_sensor.c: 754: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
 15888  0704  01BE               	clrf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex
 15889  0705  3003               	movlw	3
 15890  0706  023E               	subwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15891  0707  1803               	btfsc	3,0
 15892  0708  2F1D               	goto	l7131
 15893  0709                     l7119:	
 15894                           
 15895                           ;mtouch_sensor.c: 755: {
 15896                           ;mtouch_sensor.c: 756: if(frequencyIndex == freq_index)
 15897  0709  083E               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15898  070A  065C               	xorwf	_freq_index,w
 15899  070B  1903               	btfsc	3,2
 15900  070C  2F15               	goto	l7127
 15901                           
 15902                           ;mtouch_sensor.c: 760: else if(selectedFrequency==freq_hop[frequencyIndex])
 15903                           
 15904                           ;mtouch_sensor.c: 757: {
 15905                           ;mtouch_sensor.c: 759: }
 15906  070D  083E               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15907  070E  3EE4               	addlw	(low (_freq_hop| 0))& (0+255)
 15908  070F  0086               	movwf	6
 15909  0710  0187               	clrf	7
 15910  0711  0801               	movf	1,w
 15911  0712  063D               	xorwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 15912  0713  1903               	btfsc	3,2
 15913                           
 15914                           ;mtouch_sensor.c: 761: {
 15915                           ;mtouch_sensor.c: 762: newfrequencyFound = 0;
 15916  0714  01B7               	clrf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound
 15917  0715                     l7127:	
 15918                           ;mtouch_sensor.c: 764: else
 15919                           ;mtouch_sensor.c: 765: {
 15920                           
 15921                           ;mtouch_sensor.c: 763: }
 15922                           
 15923  0715  3001               	movlw	1
 15924  0716  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15925  0717  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15926  0718  07BE               	addwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,f
 15927  0719  3003               	movlw	3
 15928  071A  023E               	subwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15929  071B  1C03               	skipc
 15930  071C  2F09               	goto	l7119
 15931  071D                     l7131:	
 15932                           
 15933                           ;mtouch_sensor.c: 767: }
 15934                           ;mtouch_sensor.c: 768: }
 15935                           ;mtouch_sensor.c: 770: }while(!newfrequencyFound);
 15936  071D  0837               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound,w
 15937  071E  1903               	btfsc	3,2
 15938  071F  2EF7               	goto	l7105
 15939                           
 15940                           ;mtouch_sensor.c: 772: freq_hop[freq_index] = selectedFrequency;
 15941  0720  083D               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 15942  0721  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15943  0722  085C               	movf	_freq_index,w
 15944  0723  3EE4               	addlw	(low (_freq_hop| 0))& (0+255)
 15945  0724  0086               	movwf	6
 15946  0725  0187               	clrf	7
 15947  0726  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15948  0727  0081               	movwf	1
 15949                           
 15950                           ;mtouch_sensor.c: 774: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
 15951  0728  01BE               	clrf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex
 15952  0729                     L11:	
 15953  0729  3003               	movlw	3
 15954  072A  023E               	subwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15955  072B  1803               	btfsc	3,0
 15956  072C  0008               	return
 15957                           
 15958                           ;mtouch_sensor.c: 775: {
 15959                           ;mtouch_sensor.c: 776: varianceOverLimitCounter[frequencyIndex] = 0;
 15960  072D  083E               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 15961  072E  3EB0               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 15962  072F  0086               	movwf	6
 15963  0730  0187               	clrf	7
 15964  0731  0181               	clrf	1
 15965  0732  3001               	movlw	1
 15966  0733  00B2               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 15967  0734  0832               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 15968  0735  07BE               	addwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,f
 15969  0736  2F29               	goto	L11
 15970  0737                     l7147:	
 15971                           ;mtouch_sensor.c: 777: }
 15972                           ;mtouch_sensor.c: 778: }
 15973                           ;mtouch_sensor.c: 779: }
 15974                           
 15975                           
 15976                           ;mtouch_sensor.c: 780: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
 15977  0737  3000               	movlw	0
 15978  0738  023B               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 15979  0739  3032               	movlw	50
 15980  073A  1903               	skipnz
 15981  073B  023A               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 15982  073C  1803               	skipnc
 15983  073D  0008               	return
 15984                           
 15985                           ;mtouch_sensor.c: 781: {
 15986                           ;mtouch_sensor.c: 783: if(varianceOverLimitCounter[freq_index] > 0)
 15987  073E  085C               	movf	_freq_index,w
 15988  073F  3EB0               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 15989  0740  0086               	movwf	6
 15990  0741  0187               	clrf	7
 15991  0742  0801               	movf	1,w
 15992  0743  1903               	btfsc	3,2
 15993  0744  0008               	return
 15994                           
 15995                           ;mtouch_sensor.c: 784: varianceOverLimitCounter[freq_index]--;
 15996  0745  085C               	movf	_freq_index,w
 15997  0746  3EB0               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 15998  0747  0086               	movwf	6
 15999  0748  0187               	clrf	7
 16000  0749  3001               	movlw	1
 16001  074A  0281               	subwf	1,f
 16002                           
 16003                           ;mtouch_sensor.c: 786: else
 16004                           ;mtouch_sensor.c: 787: {
 16005                           
 16006                           ;mtouch_sensor.c: 785: }
 16007  074B  0008               	return
 16008  074C                     __end_of_Sensor_FrequencyHopping_Autotune_Process:	
 16009                           
 16010                           	psect	text37
 16011  115D                     __ptext37:	
 16012 ;; *************** function _abs *****************
 16013 ;; Defined at:
 16014 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\abs.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;  a               2   14[BANK0 ] int 
 16017 ;; Auto vars:     Size  Location     Type
 16018 ;;		None
 16019 ;; Return value:  Size  Location     Type
 16020 ;;                  2   14[BANK0 ] int 
 16021 ;; Registers used:
 16022 ;;		wreg, status,2, status,0
 16023 ;; Tracked objects:
 16024 ;;		On entry : 0/0
 16025 ;;		On exit  : 0/0
 16026 ;;		Unchanged: 0/0
 16027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;Total ram usage:        4 bytes
 16033 ;; Hardware stack levels used:    1
 16034 ;; Hardware stack levels required when called:    7
 16035 ;; This function calls:
 16036 ;;		Nothing
 16037 ;; This function is called by:
 16038 ;;		_Sensor_FrequencyHopping_Autotune_Process
 16039 ;; This function uses a non-reentrant model
 16040 ;;
 16041                           
 16042                           
 16043                           ;psect for function _abs
 16044  115D                     _abs:	
 16045                           
 16046                           ;incstack = 0
 16047                           ; Regs used in _abs: [wreg+status,2+status,0]
 16048  115D  0020               	movlb	0	; select bank0
 16049  115E  1FAF               	btfss	abs@a+1,7
 16050  115F  0008               	return
 16051  1160  092E               	comf	abs@a,w
 16052  1161  00B0               	movwf	??_abs
 16053  1162  092F               	comf	abs@a+1,w
 16054  1163  00B1               	movwf	??_abs+1
 16055  1164  0AB0               	incf	??_abs,f
 16056  1165  1903               	skipnz
 16057  1166  0AB1               	incf	??_abs+1,f
 16058  1167  0830               	movf	??_abs,w
 16059  1168  00AE               	movwf	?_abs
 16060  1169  0831               	movf	??_abs+1,w
 16061  116A  00AF               	movwf	?_abs+1
 16062  116B  0008               	return
 16063  116C                     __end_of_abs:	
 16064                           
 16065                           	psect	text38
 16066  160B                     __ptext38:	
 16067 ;; *************** function _MTOUCH_Sensor_postAcquisitionProcess *****************
 16068 ;; Defined at:
 16069 ;;		line 526 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16070 ;; Parameters:    Size  Location     Type
 16071 ;;		None
 16072 ;; Auto vars:     Size  Location     Type
 16073 ;;  name            1   27[BANK0 ] enum E14537
 16074 ;; Return value:  Size  Location     Type
 16075 ;;                  1    wreg      void 
 16076 ;; Registers used:
 16077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16078 ;; Tracked objects:
 16079 ;;		On entry : 0/0
 16080 ;;		On exit  : 0/0
 16081 ;;		Unchanged: 0/0
 16082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;Total ram usage:        2 bytes
 16088 ;; Hardware stack levels used:    1
 16089 ;; Hardware stack levels required when called:   10
 16090 ;; This function calls:
 16091 ;;		_Sensor_DefaultCallback
 16092 ;;		_Sensor_RawSample_Update
 16093 ;;		___bmul
 16094 ;; This function is called by:
 16095 ;;		_MTOUCH_Sensor_SampleAll
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           
 16100                           ;psect for function _MTOUCH_Sensor_postAcquisitionProcess
 16101  160B                     _MTOUCH_Sensor_postAcquisitionProcess:	
 16102                           
 16103                           ;mtouch_sensor.c: 528: enum mtouch_sensor_names name;
 16104                           ;mtouch_sensor.c: 530: for (name = 0; name < (5u); name++)
 16105                           
 16106                           ;incstack = 0
 16107                           ; Regs used in _MTOUCH_Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16108  160B  0020               	movlb	0	; select bank0
 16109  160C  01BB               	clrf	MTOUCH_Sensor_postAcquisitionProcess@name
 16110  160D                     L12:	
 16111  160D  3005               	movlw	5
 16112  160E  023B               	subwf	MTOUCH_Sensor_postAcquisitionProcess@name,w
 16113  160F  1803               	btfsc	3,0
 16114  1610  0008               	return
 16115                           
 16116                           ;mtouch_sensor.c: 531: {
 16117                           ;mtouch_sensor.c: 532: if(mtouch_sensor[name].sampled)
 16118  1611  3009               	movlw	9
 16119  1612  00BA               	movwf	??_MTOUCH_Sensor_postAcquisitionProcess
 16120  1613  083A               	movf	??_MTOUCH_Sensor_postAcquisitionProcess,w
 16121  1614  00AA               	movwf	___bmul@multiplicand
 16122  1615  083B               	movf	MTOUCH_Sensor_postAcquisitionProcess@name,w
 16123  1616  3191  219C  3196   	fcall	___bmul
 16124  1619  3E08               	addlw	8
 16125  161A  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 16126  161B  0086               	movwf	6
 16127  161C  3001               	movlw	1	; select bank3/4
 16128  161D  0087               	movwf	7
 16129  161E  1C81               	btfss	1,1
 16130  161F  2E38               	goto	l7345
 16131                           
 16132                           ;mtouch_sensor.c: 533: {
 16133                           ;mtouch_sensor.c: 534: Sensor_RawSample_Update(&mtouch_sensor[name]);
 16134  1620  3009               	movlw	9
 16135  1621  0020               	movlb	0	; select bank0
 16136  1622  00BA               	movwf	??_MTOUCH_Sensor_postAcquisitionProcess
 16137  1623  083A               	movf	??_MTOUCH_Sensor_postAcquisitionProcess,w
 16138  1624  00AA               	movwf	___bmul@multiplicand
 16139  1625  083B               	movf	MTOUCH_Sensor_postAcquisitionProcess@name,w
 16140  1626  3191  219C  3196   	fcall	___bmul
 16141  1629  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 16142  162A  3194  242C  3196   	fcall	_Sensor_RawSample_Update
 16143                           
 16144                           ;mtouch_sensor.c: 535: callback_sampled(name);
 16145  162D  0020               	movlb	0	; select bank0
 16146  162E  083B               	movf	MTOUCH_Sensor_postAcquisitionProcess@name,w
 16147  162F  00BA               	movwf	??_MTOUCH_Sensor_postAcquisitionProcess
 16148  1630  083A               	movf	??_MTOUCH_Sensor_postAcquisitionProcess,w
 16149  1631  00AA               	movwf	Sensor_DefaultCallback@sensor
 16150  1632  0021               	movlb	1	; select bank1
 16151  1633  086A               	movf	(_callback_sampled+1)^(0+128),w
 16152  1634  008A               	movwf	10
 16153  1635  0869               	movf	_callback_sampled^(0+128),w
 16154  1636  000A               	callw
 16155  1637  3196               	pagesel	$
 16156  1638                     l7345:	
 16157  1638  3001               	movlw	1
 16158  1639  0020               	movlb	0	; select bank0
 16159  163A  00BA               	movwf	??_MTOUCH_Sensor_postAcquisitionProcess
 16160  163B  083A               	movf	??_MTOUCH_Sensor_postAcquisitionProcess,w
 16161  163C  07BB               	addwf	MTOUCH_Sensor_postAcquisitionProcess@name,f
 16162  163D  2E0D               	goto	L12
 16163  163E                     __end_of_MTOUCH_Sensor_postAcquisitionProcess:	
 16164                           
 16165                           	psect	text39
 16166  142C                     __ptext39:	
 16167 ;; *************** function _Sensor_RawSample_Update *****************
 16168 ;; Defined at:
 16169 ;;		line 648 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16170 ;; Parameters:    Size  Location     Type
 16171 ;;  sensor          1    wreg     PTR struct .
 16172 ;;		 -> mtouch_sensor(45), 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;  sensor          1   25[BANK0 ] PTR struct .
 16175 ;;		 -> mtouch_sensor(45), 
 16176 ;;  result          2   23[BANK0 ] unsigned int 
 16177 ;; Return value:  Size  Location     Type
 16178 ;;                  1    wreg      void 
 16179 ;; Registers used:
 16180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16181 ;; Tracked objects:
 16182 ;;		On entry : 0/0
 16183 ;;		On exit  : 0/0
 16184 ;;		Unchanged: 0/0
 16185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16190 ;;Total ram usage:        3 bytes
 16191 ;; Hardware stack levels used:    1
 16192 ;; Hardware stack levels required when called:    9
 16193 ;; This function calls:
 16194 ;;		_medianFilter
 16195 ;; This function is called by:
 16196 ;;		_MTOUCH_Sensor_postAcquisitionProcess
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           
 16201                           ;psect for function _Sensor_RawSample_Update
 16202  142C                     _Sensor_RawSample_Update:	
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16206                           ;Sensor_RawSample_Update@sensor stored from wreg
 16207  142C  0020               	movlb	0	; select bank0
 16208  142D  00B9               	movwf	Sensor_RawSample_Update@sensor
 16209                           
 16210                           ;mtouch_sensor.c: 650: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
 16211  142E  0839               	movf	Sensor_RawSample_Update@sensor,w
 16212  142F  0086               	movwf	6
 16213  1430  3001               	movlw	1	; select bank2/3
 16214  1431  0087               	movwf	7
 16215  1432  0801               	movf	1,w
 16216  1433  3183  23D8  3194   	fcall	_medianFilter
 16217  1436  0020               	movlb	0	; select bank0
 16218  1437  082F               	movf	?_medianFilter+1,w
 16219  1438  00B8               	movwf	Sensor_RawSample_Update@result+1
 16220  1439  082E               	movf	?_medianFilter,w
 16221  143A  00B7               	movwf	Sensor_RawSample_Update@result
 16222                           
 16223                           ;mtouch_sensor.c: 652: if (GIE == (uint8_t)1)
 16224  143B  1F8B               	btfss	11,7	;volatile
 16225  143C  2C49               	goto	l7073
 16226                           
 16227                           ;mtouch_sensor.c: 653: {
 16228                           ;mtouch_sensor.c: 654: GIE = (uint8_t)0;
 16229  143D  138B               	bcf	11,7	;volatile
 16230                           
 16231                           ;mtouch_sensor.c: 655: sensor->rawSample = result;
 16232  143E  0839               	movf	Sensor_RawSample_Update@sensor,w
 16233  143F  3E06               	addlw	6
 16234  1440  0086               	movwf	6
 16235  1441  3001               	movlw	1	; select bank2/3
 16236  1442  0087               	movwf	7
 16237  1443  0837               	movf	Sensor_RawSample_Update@result,w
 16238  1444  3FC0               	movwi [0]fsr1
 16239  1445  0838               	movf	Sensor_RawSample_Update@result+1,w
 16240  1446  3FC1               	movwi [1]fsr1
 16241                           
 16242                           ;mtouch_sensor.c: 656: GIE = (uint8_t)1;
 16243  1447  178B               	bsf	11,7	;volatile
 16244                           
 16245                           ;mtouch_sensor.c: 657: }
 16246  1448  0008               	return
 16247  1449                     l7073:	
 16248                           
 16249                           ;mtouch_sensor.c: 658: else
 16250                           ;mtouch_sensor.c: 659: {
 16251                           ;mtouch_sensor.c: 660: sensor->rawSample = result;
 16252  1449  0839               	movf	Sensor_RawSample_Update@sensor,w
 16253  144A  3E06               	addlw	6
 16254  144B  0086               	movwf	6
 16255  144C  3001               	movlw	1	; select bank2/3
 16256  144D  0087               	movwf	7
 16257  144E  0837               	movf	Sensor_RawSample_Update@result,w
 16258  144F  3FC0               	movwi [0]fsr1
 16259  1450  0838               	movf	Sensor_RawSample_Update@result+1,w
 16260  1451  3FC1               	movwi [1]fsr1
 16261  1452  0008               	return
 16262  1453                     __end_of_Sensor_RawSample_Update:	
 16263                           
 16264                           	psect	text40
 16265  03D8                     __ptext40:	
 16266 ;; *************** function _medianFilter *****************
 16267 ;; Defined at:
 16268 ;;		line 665 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;  sensor          1    wreg     enum E14537
 16271 ;; Auto vars:     Size  Location     Type
 16272 ;;  sensor          1   22[BANK0 ] enum E14537
 16273 ;; Return value:  Size  Location     Type
 16274 ;;                  2   14[BANK0 ] unsigned int 
 16275 ;; Registers used:
 16276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16277 ;; Tracked objects:
 16278 ;;		On entry : 0/0
 16279 ;;		On exit  : 0/0
 16280 ;;		Unchanged: 0/0
 16281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;Total ram usage:        9 bytes
 16287 ;; Hardware stack levels used:    1
 16288 ;; Hardware stack levels required when called:    8
 16289 ;; This function calls:
 16290 ;;		___bmul
 16291 ;; This function is called by:
 16292 ;;		_Sensor_RawSample_Update
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           
 16297                           ;psect for function _medianFilter
 16298  03D8                     _medianFilter:	
 16299                           
 16300                           ;incstack = 0
 16301                           ; Regs used in _medianFilter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16302                           ;medianFilter@sensor stored from wreg
 16303  03D8  0020               	movlb	0	; select bank0
 16304  03D9  00B6               	movwf	medianFilter@sensor
 16305                           
 16306                           ;mtouch_sensor.c: 667: static uint8_t bufferIndex[(5u)];
 16307                           ;mtouch_sensor.c: 669: sensor_medianBuffer[sensor][bufferIndex[sensor]++] = packet_sampl
      +                          e[sensor];
 16308  03DA  3536               	lslf	medianFilter@sensor,w
 16309  03DB  3E3E               	addlw	(low (_packet_sample| (0+256)))& (0+255)
 16310  03DC  0086               	movwf	6
 16311  03DD  3001               	movlw	1	; select bank2/3
 16312  03DE  0087               	movwf	7
 16313  03DF  0836               	movf	medianFilter@sensor,w
 16314  03E0  3E48               	addlw	(low (medianFilter@bufferIndex| (0+256)))& (0+255)
 16315  03E1  0084               	movwf	4
 16316  03E2  3001               	movlw	1	; select bank2/3
 16317  03E3  0085               	movwf	5
 16318  03E4  0800               	movf	0,w
 16319  03E5  0A80               	incf	0,f
 16320  03E6  00B0               	movwf	??_medianFilter
 16321  03E7  3001               	movlw	1
 16322  03E8                     u6705:	
 16323  03E8  35B0               	lslf	??_medianFilter,f
 16324  03E9  0B89               	decfsz	9,f
 16325  03EA  2BE8               	goto	u6705
 16326  03EB  3006               	movlw	6
 16327  03EC  00B1               	movwf	??_medianFilter+1
 16328  03ED  0831               	movf	??_medianFilter+1,w
 16329  03EE  00AA               	movwf	___bmul@multiplicand
 16330  03EF  0836               	movf	medianFilter@sensor,w
 16331  03F0  3191  219C  3183   	fcall	___bmul
 16332  03F3  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16333  03F4  0020               	movlb	0	; select bank0
 16334  03F5  0730               	addwf	??_medianFilter,w
 16335  03F6  00B2               	movwf	??_medianFilter+2
 16336  03F7  0832               	movf	??_medianFilter+2,w
 16337  03F8  0084               	movwf	4
 16338  03F9  3001               	movlw	1	; select bank2/3
 16339  03FA  0085               	movwf	5
 16340  03FB  3F40               	moviw [0]fsr1
 16341  03FC  3F80               	movwi [0]fsr0
 16342  03FD  3F41               	moviw [1]fsr1
 16343  03FE  3F81               	movwi [1]fsr0
 16344                           
 16345                           ;mtouch_sensor.c: 671: if(bufferIndex[sensor]>=3)
 16346  03FF  0836               	movf	medianFilter@sensor,w
 16347  0400  3E48               	addlw	(low (medianFilter@bufferIndex| (0+256)))& (0+255)
 16348  0401  0086               	movwf	6
 16349  0402  3001               	movlw	1	; select bank2/3
 16350  0403  0087               	movwf	7
 16351  0404  3003               	movlw	3
 16352  0405  0201               	subwf	1,w
 16353  0406  1C03               	skipc
 16354  0407  2C0E               	goto	l6819
 16355                           
 16356                           ;mtouch_sensor.c: 672: bufferIndex[sensor] = 0;
 16357  0408  0836               	movf	medianFilter@sensor,w
 16358  0409  3E48               	addlw	(low (medianFilter@bufferIndex| (0+256)))& (0+255)
 16359  040A  0086               	movwf	6
 16360  040B  3001               	movlw	1	; select bank2/3
 16361  040C  0087               	movwf	7
 16362  040D  0181               	clrf	1
 16363  040E                     l6819:	
 16364                           
 16365                           ;mtouch_sensor.c: 674: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
 16366  040E  3006               	movlw	6
 16367  040F  00B0               	movwf	??_medianFilter
 16368  0410  0830               	movf	??_medianFilter,w
 16369  0411  00AA               	movwf	___bmul@multiplicand
 16370  0412  0836               	movf	medianFilter@sensor,w
 16371  0413  3191  219C  3183   	fcall	___bmul
 16372  0416  3E02               	addlw	2
 16373  0417  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16374  0418  0086               	movwf	6
 16375  0419  3001               	movlw	1	; select bank2/3
 16376  041A  0087               	movwf	7
 16377  041B  3F40               	moviw [0]fsr1
 16378  041C  0020               	movlb	0	; select bank0
 16379  041D  00B1               	movwf	??_medianFilter+1
 16380  041E  3F41               	moviw [1]fsr1
 16381  041F  00B2               	movwf	??_medianFilter+2
 16382  0420  3006               	movlw	6
 16383  0421  00B3               	movwf	??_medianFilter+3
 16384  0422  0833               	movf	??_medianFilter+3,w
 16385  0423  00AA               	movwf	___bmul@multiplicand
 16386  0424  0836               	movf	medianFilter@sensor,w
 16387  0425  3191  219C  3183   	fcall	___bmul
 16388  0428  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16389  0429  0086               	movwf	6
 16390  042A  3001               	movlw	1	; select bank2/3
 16391  042B  0087               	movwf	7
 16392  042C  3F40               	moviw [0]fsr1
 16393  042D  0020               	movlb	0	; select bank0
 16394  042E  00B4               	movwf	??_medianFilter+4
 16395  042F  3F41               	moviw [1]fsr1
 16396  0430  00B5               	movwf	??_medianFilter+5
 16397  0431  0832               	movf	??_medianFilter+2,w
 16398  0432  0235               	subwf	??_medianFilter+5,w
 16399  0433  1D03               	skipz
 16400  0434  2C37               	goto	u6725
 16401  0435  0831               	movf	??_medianFilter+1,w
 16402  0436  0234               	subwf	??_medianFilter+4,w
 16403  0437                     u6725:	
 16404  0437  1C03               	skipc
 16405  0438  2CC5               	goto	l6841
 16406                           
 16407                           ;mtouch_sensor.c: 675: {
 16408                           ;mtouch_sensor.c: 676: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
 16409  0439  3006               	movlw	6
 16410  043A  00B0               	movwf	??_medianFilter
 16411  043B  0830               	movf	??_medianFilter,w
 16412  043C  00AA               	movwf	___bmul@multiplicand
 16413  043D  0836               	movf	medianFilter@sensor,w
 16414  043E  3191  219C  3183   	fcall	___bmul
 16415  0441  3E04               	addlw	4
 16416  0442  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16417  0443  0086               	movwf	6
 16418  0444  3001               	movlw	1	; select bank2/3
 16419  0445  0087               	movwf	7
 16420  0446  3F40               	moviw [0]fsr1
 16421  0447  0020               	movlb	0	; select bank0
 16422  0448  00B1               	movwf	??_medianFilter+1
 16423  0449  3F41               	moviw [1]fsr1
 16424  044A  00B2               	movwf	??_medianFilter+2
 16425  044B  3006               	movlw	6
 16426  044C  00B3               	movwf	??_medianFilter+3
 16427  044D  0833               	movf	??_medianFilter+3,w
 16428  044E  00AA               	movwf	___bmul@multiplicand
 16429  044F  0836               	movf	medianFilter@sensor,w
 16430  0450  3191  219C  3183   	fcall	___bmul
 16431  0453  3E02               	addlw	2
 16432  0454  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16433  0455  0086               	movwf	6
 16434  0456  3001               	movlw	1	; select bank2/3
 16435  0457  0087               	movwf	7
 16436  0458  3F40               	moviw [0]fsr1
 16437  0459  0020               	movlb	0	; select bank0
 16438  045A  00B4               	movwf	??_medianFilter+4
 16439  045B  3F41               	moviw [1]fsr1
 16440  045C  00B5               	movwf	??_medianFilter+5
 16441  045D  0832               	movf	??_medianFilter+2,w
 16442  045E  0235               	subwf	??_medianFilter+5,w
 16443  045F  1D03               	skipz
 16444  0460  2C63               	goto	u6735
 16445  0461  0831               	movf	??_medianFilter+1,w
 16446  0462  0234               	subwf	??_medianFilter+4,w
 16447  0463                     u6735:	
 16448  0463  1C03               	skipc
 16449  0464  2C77               	goto	l6829
 16450                           
 16451                           ;mtouch_sensor.c: 677: return sensor_medianBuffer[sensor][1];
 16452  0465  3006               	movlw	6
 16453  0466  00B0               	movwf	??_medianFilter
 16454  0467  0830               	movf	??_medianFilter,w
 16455  0468  00AA               	movwf	___bmul@multiplicand
 16456  0469  0836               	movf	medianFilter@sensor,w
 16457  046A  3191  219C         	fcall	___bmul
 16458  046C  3E02               	addlw	2
 16459  046D  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16460  046E  0086               	movwf	6
 16461  046F  3001               	movlw	1	; select bank2/3
 16462  0470  0087               	movwf	7
 16463  0471  3F40               	moviw [0]fsr1
 16464  0472  0020               	movlb	0	; select bank0
 16465  0473  00AE               	movwf	?_medianFilter
 16466  0474  3F41               	moviw [1]fsr1
 16467  0475  00AF               	movwf	?_medianFilter+1
 16468  0476  0008               	return
 16469  0477                     l6829:	
 16470                           
 16471                           ;mtouch_sensor.c: 678: else
 16472                           ;mtouch_sensor.c: 679: {
 16473                           ;mtouch_sensor.c: 680: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
 16474  0477  3006               	movlw	6
 16475  0478  00B0               	movwf	??_medianFilter
 16476  0479  0830               	movf	??_medianFilter,w
 16477  047A  00AA               	movwf	___bmul@multiplicand
 16478  047B  0836               	movf	medianFilter@sensor,w
 16479  047C  3191  219C  3183   	fcall	___bmul
 16480  047F  3E04               	addlw	4
 16481  0480  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16482  0481  0086               	movwf	6
 16483  0482  3001               	movlw	1	; select bank2/3
 16484  0483  0087               	movwf	7
 16485  0484  3F40               	moviw [0]fsr1
 16486  0485  0020               	movlb	0	; select bank0
 16487  0486  00B1               	movwf	??_medianFilter+1
 16488  0487  3F41               	moviw [1]fsr1
 16489  0488  00B2               	movwf	??_medianFilter+2
 16490  0489  3006               	movlw	6
 16491  048A  00B3               	movwf	??_medianFilter+3
 16492  048B  0833               	movf	??_medianFilter+3,w
 16493  048C  00AA               	movwf	___bmul@multiplicand
 16494  048D  0836               	movf	medianFilter@sensor,w
 16495  048E  3191  219C  3183   	fcall	___bmul
 16496  0491  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16497  0492  0086               	movwf	6
 16498  0493  3001               	movlw	1	; select bank2/3
 16499  0494  0087               	movwf	7
 16500  0495  3F40               	moviw [0]fsr1
 16501  0496  0020               	movlb	0	; select bank0
 16502  0497  00B4               	movwf	??_medianFilter+4
 16503  0498  3F41               	moviw [1]fsr1
 16504  0499  00B5               	movwf	??_medianFilter+5
 16505  049A  0832               	movf	??_medianFilter+2,w
 16506  049B  0235               	subwf	??_medianFilter+5,w
 16507  049C  1D03               	skipz
 16508  049D  2CA0               	goto	u6745
 16509  049E  0831               	movf	??_medianFilter+1,w
 16510  049F  0234               	subwf	??_medianFilter+4,w
 16511  04A0                     u6745:	
 16512  04A0  1C03               	skipc
 16513  04A1  2CB4               	goto	l6837
 16514                           
 16515                           ;mtouch_sensor.c: 681: return sensor_medianBuffer[sensor][2];
 16516  04A2  3006               	movlw	6
 16517  04A3  00B0               	movwf	??_medianFilter
 16518  04A4  0830               	movf	??_medianFilter,w
 16519  04A5  00AA               	movwf	___bmul@multiplicand
 16520  04A6  0836               	movf	medianFilter@sensor,w
 16521  04A7  3191  219C         	fcall	___bmul
 16522  04A9  3E04               	addlw	4
 16523  04AA  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16524  04AB  0086               	movwf	6
 16525  04AC  3001               	movlw	1	; select bank2/3
 16526  04AD  0087               	movwf	7
 16527  04AE  3F40               	moviw [0]fsr1
 16528  04AF  0020               	movlb	0	; select bank0
 16529  04B0  00AE               	movwf	?_medianFilter
 16530  04B1  3F41               	moviw [1]fsr1
 16531  04B2  00AF               	movwf	?_medianFilter+1
 16532  04B3  0008               	return
 16533  04B4                     l6837:	
 16534                           
 16535                           ;mtouch_sensor.c: 682: else
 16536                           ;mtouch_sensor.c: 683: return sensor_medianBuffer[sensor][0];
 16537  04B4  3006               	movlw	6
 16538  04B5  00B0               	movwf	??_medianFilter
 16539  04B6  0830               	movf	??_medianFilter,w
 16540  04B7  00AA               	movwf	___bmul@multiplicand
 16541  04B8  0836               	movf	medianFilter@sensor,w
 16542  04B9  3191  219C         	fcall	___bmul
 16543  04BB  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16544  04BC  0086               	movwf	6
 16545  04BD  3001               	movlw	1	; select bank2/3
 16546  04BE  0087               	movwf	7
 16547  04BF  3F40               	moviw [0]fsr1
 16548  04C0  0020               	movlb	0	; select bank0
 16549  04C1  00AE               	movwf	?_medianFilter
 16550  04C2  3F41               	moviw [1]fsr1
 16551  04C3  00AF               	movwf	?_medianFilter+1
 16552                           
 16553                           ;mtouch_sensor.c: 684: }
 16554                           ;mtouch_sensor.c: 686: }
 16555  04C4  0008               	return
 16556  04C5                     l6841:	
 16557                           
 16558                           ;mtouch_sensor.c: 687: else
 16559                           ;mtouch_sensor.c: 688: {
 16560                           ;mtouch_sensor.c: 689: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
 16561  04C5  3006               	movlw	6
 16562  04C6  00B0               	movwf	??_medianFilter
 16563  04C7  0830               	movf	??_medianFilter,w
 16564  04C8  00AA               	movwf	___bmul@multiplicand
 16565  04C9  0836               	movf	medianFilter@sensor,w
 16566  04CA  3191  219C  3183   	fcall	___bmul
 16567  04CD  3E04               	addlw	4
 16568  04CE  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16569  04CF  0086               	movwf	6
 16570  04D0  3001               	movlw	1	; select bank2/3
 16571  04D1  0087               	movwf	7
 16572  04D2  3F40               	moviw [0]fsr1
 16573  04D3  0020               	movlb	0	; select bank0
 16574  04D4  00B1               	movwf	??_medianFilter+1
 16575  04D5  3F41               	moviw [1]fsr1
 16576  04D6  00B2               	movwf	??_medianFilter+2
 16577  04D7  3006               	movlw	6
 16578  04D8  00B3               	movwf	??_medianFilter+3
 16579  04D9  0833               	movf	??_medianFilter+3,w
 16580  04DA  00AA               	movwf	___bmul@multiplicand
 16581  04DB  0836               	movf	medianFilter@sensor,w
 16582  04DC  3191  219C  3183   	fcall	___bmul
 16583  04DF  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16584  04E0  0086               	movwf	6
 16585  04E1  3001               	movlw	1	; select bank2/3
 16586  04E2  0087               	movwf	7
 16587  04E3  3F40               	moviw [0]fsr1
 16588  04E4  0020               	movlb	0	; select bank0
 16589  04E5  00B4               	movwf	??_medianFilter+4
 16590  04E6  3F41               	moviw [1]fsr1
 16591  04E7  00B5               	movwf	??_medianFilter+5
 16592  04E8  0832               	movf	??_medianFilter+2,w
 16593  04E9  0235               	subwf	??_medianFilter+5,w
 16594  04EA  1D03               	skipz
 16595  04EB  2CEE               	goto	u6755
 16596  04EC  0831               	movf	??_medianFilter+1,w
 16597  04ED  0234               	subwf	??_medianFilter+4,w
 16598  04EE                     u6755:	
 16599  04EE  1C03               	skipc
 16600  04EF  2D01               	goto	l6849
 16601                           
 16602                           ;mtouch_sensor.c: 690: return sensor_medianBuffer[sensor][0];
 16603  04F0  3006               	movlw	6
 16604  04F1  00B0               	movwf	??_medianFilter
 16605  04F2  0830               	movf	??_medianFilter,w
 16606  04F3  00AA               	movwf	___bmul@multiplicand
 16607  04F4  0836               	movf	medianFilter@sensor,w
 16608  04F5  3191  219C         	fcall	___bmul
 16609  04F7  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16610  04F8  0086               	movwf	6
 16611  04F9  3001               	movlw	1	; select bank2/3
 16612  04FA  0087               	movwf	7
 16613  04FB  3F40               	moviw [0]fsr1
 16614  04FC  0020               	movlb	0	; select bank0
 16615  04FD  00AE               	movwf	?_medianFilter
 16616  04FE  3F41               	moviw [1]fsr1
 16617  04FF  00AF               	movwf	?_medianFilter+1
 16618  0500  0008               	return
 16619  0501                     l6849:	
 16620                           
 16621                           ;mtouch_sensor.c: 691: else
 16622                           ;mtouch_sensor.c: 692: {
 16623                           ;mtouch_sensor.c: 693: if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
 16624  0501  3006               	movlw	6
 16625  0502  00B0               	movwf	??_medianFilter
 16626  0503  0830               	movf	??_medianFilter,w
 16627  0504  00AA               	movwf	___bmul@multiplicand
 16628  0505  0836               	movf	medianFilter@sensor,w
 16629  0506  3191  219C  3183   	fcall	___bmul
 16630  0509  3E04               	addlw	4
 16631  050A  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16632  050B  0086               	movwf	6
 16633  050C  3001               	movlw	1	; select bank2/3
 16634  050D  0087               	movwf	7
 16635  050E  3F40               	moviw [0]fsr1
 16636  050F  0020               	movlb	0	; select bank0
 16637  0510  00B1               	movwf	??_medianFilter+1
 16638  0511  3F41               	moviw [1]fsr1
 16639  0512  00B2               	movwf	??_medianFilter+2
 16640  0513  3006               	movlw	6
 16641  0514  00B3               	movwf	??_medianFilter+3
 16642  0515  0833               	movf	??_medianFilter+3,w
 16643  0516  00AA               	movwf	___bmul@multiplicand
 16644  0517  0836               	movf	medianFilter@sensor,w
 16645  0518  3191  219C  3183   	fcall	___bmul
 16646  051B  3E02               	addlw	2
 16647  051C  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16648  051D  0086               	movwf	6
 16649  051E  3001               	movlw	1	; select bank2/3
 16650  051F  0087               	movwf	7
 16651  0520  3F40               	moviw [0]fsr1
 16652  0521  0020               	movlb	0	; select bank0
 16653  0522  00B4               	movwf	??_medianFilter+4
 16654  0523  3F41               	moviw [1]fsr1
 16655  0524  00B5               	movwf	??_medianFilter+5
 16656  0525  0832               	movf	??_medianFilter+2,w
 16657  0526  0235               	subwf	??_medianFilter+5,w
 16658  0527  1D03               	skipz
 16659  0528  2D2B               	goto	u6765
 16660  0529  0831               	movf	??_medianFilter+1,w
 16661  052A  0234               	subwf	??_medianFilter+4,w
 16662  052B                     u6765:	
 16663  052B  1C03               	skipc
 16664  052C  2D3F               	goto	l6857
 16665                           
 16666                           ;mtouch_sensor.c: 694: return sensor_medianBuffer[sensor][2];
 16667  052D  3006               	movlw	6
 16668  052E  00B0               	movwf	??_medianFilter
 16669  052F  0830               	movf	??_medianFilter,w
 16670  0530  00AA               	movwf	___bmul@multiplicand
 16671  0531  0836               	movf	medianFilter@sensor,w
 16672  0532  3191  219C         	fcall	___bmul
 16673  0534  3E04               	addlw	4
 16674  0535  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16675  0536  0086               	movwf	6
 16676  0537  3001               	movlw	1	; select bank2/3
 16677  0538  0087               	movwf	7
 16678  0539  3F40               	moviw [0]fsr1
 16679  053A  0020               	movlb	0	; select bank0
 16680  053B  00AE               	movwf	?_medianFilter
 16681  053C  3F41               	moviw [1]fsr1
 16682  053D  00AF               	movwf	?_medianFilter+1
 16683  053E  0008               	return
 16684  053F                     l6857:	
 16685                           
 16686                           ;mtouch_sensor.c: 695: else
 16687                           ;mtouch_sensor.c: 696: return sensor_medianBuffer[sensor][1];
 16688  053F  3006               	movlw	6
 16689  0540  00B0               	movwf	??_medianFilter
 16690  0541  0830               	movf	??_medianFilter,w
 16691  0542  00AA               	movwf	___bmul@multiplicand
 16692  0543  0836               	movf	medianFilter@sensor,w
 16693  0544  3191  219C         	fcall	___bmul
 16694  0546  3E02               	addlw	2
 16695  0547  3E20               	addlw	(low (_sensor_medianBuffer| (0+256)))& (0+255)
 16696  0548  0086               	movwf	6
 16697  0549  3001               	movlw	1	; select bank2/3
 16698  054A  0087               	movwf	7
 16699  054B  3F40               	moviw [0]fsr1
 16700  054C  0020               	movlb	0	; select bank0
 16701  054D  00AE               	movwf	?_medianFilter
 16702  054E  3F41               	moviw [1]fsr1
 16703  054F  00AF               	movwf	?_medianFilter+1
 16704  0550  0008               	return
 16705  0551                     __end_of_medianFilter:	
 16706                           
 16707                           	psect	text41
 16708  0003                     __ptext41:	
 16709 ;; *************** function _Sensor_DefaultCallback *****************
 16710 ;; Defined at:
 16711 ;;		line 797 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;  sensor          1   10[BANK0 ] enum E14537
 16714 ;; Auto vars:     Size  Location     Type
 16715 ;;		None
 16716 ;; Return value:  Size  Location     Type
 16717 ;;                  1    wreg      void 
 16718 ;; Registers used:
 16719 ;;		None
 16720 ;; Tracked objects:
 16721 ;;		On entry : 0/0
 16722 ;;		On exit  : 0/0
 16723 ;;		Unchanged: 0/0
 16724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16725 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;Total ram usage:        1 bytes
 16730 ;; Hardware stack levels used:    1
 16731 ;; Hardware stack levels required when called:    7
 16732 ;; This function calls:
 16733 ;;		Nothing
 16734 ;; This function is called by:
 16735 ;;		_MTOUCH_Sensor_postAcquisitionProcess
 16736 ;; This function uses a non-reentrant model
 16737 ;;
 16738                           
 16739                           
 16740                           ;psect for function _Sensor_DefaultCallback
 16741  0003                     _Sensor_DefaultCallback:	
 16742                           
 16743                           ;incstack = 0
 16744                           ; Regs used in _Sensor_DefaultCallback: []
 16745  0003  0008               	return
 16746  0004                     __end_of_Sensor_DefaultCallback:	
 16747                           
 16748                           	psect	text42
 16749  14A2                     __ptext42:	
 16750 ;; *************** function _MTOUCH_Sensor_isSamplingComplete *****************
 16751 ;; Defined at:
 16752 ;;		line 325 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;		None
 16755 ;; Auto vars:     Size  Location     Type
 16756 ;;  sensor          1   22[BANK0 ] enum E14537
 16757 ;; Return value:  Size  Location     Type
 16758 ;;                  1    wreg      unsigned char 
 16759 ;; Registers used:
 16760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16761 ;; Tracked objects:
 16762 ;;		On entry : 0/0
 16763 ;;		On exit  : 0/0
 16764 ;;		Unchanged: 0/0
 16765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;Total ram usage:        2 bytes
 16771 ;; Hardware stack levels used:    1
 16772 ;; Hardware stack levels required when called:   10
 16773 ;; This function calls:
 16774 ;;		_MTOUCH_Sensor_isEnabled
 16775 ;;		_MTOUCH_Sensor_isSampling
 16776 ;;		_MTOUCH_Sensor_wasSampled
 16777 ;;		_Sensor_scheduleNextScan
 16778 ;; This function is called by:
 16779 ;;		_MTOUCH_Sensor_SampleAll
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783                           
 16784                           ;psect for function _MTOUCH_Sensor_isSamplingComplete
 16785  14A2                     _MTOUCH_Sensor_isSamplingComplete:	
 16786                           
 16787                           ;mtouch_sensor.c: 327: enum mtouch_sensor_names sensor;
 16788                           ;mtouch_sensor.c: 329: for (sensor = 0; sensor < (5u); sensor++)
 16789                           
 16790                           ;incstack = 0
 16791                           ; Regs used in _MTOUCH_Sensor_isSamplingComplete: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16792  14A2  0020               	movlb	0	; select bank0
 16793  14A3  01B6               	clrf	MTOUCH_Sensor_isSamplingComplete@sensor
 16794  14A4  3005               	movlw	5
 16795  14A5  0236               	subwf	MTOUCH_Sensor_isSamplingComplete@sensor,w
 16796  14A6  1803               	btfsc	3,0
 16797  14A7  2CCA               	goto	l7325
 16798  14A8                     l7309:	
 16799                           
 16800                           ;mtouch_sensor.c: 330: {
 16801                           ;mtouch_sensor.c: 331: if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
 16802  14A8  0836               	movf	MTOUCH_Sensor_isSamplingComplete@sensor,w
 16803  14A9  3192  224F  3194   	fcall	_MTOUCH_Sensor_wasSampled
 16804  14AC  3A00               	xorlw	0
 16805  14AD  1D03               	skipz
 16806  14AE  2CC1               	goto	l7321
 16807  14AF  0020               	movlb	0	; select bank0
 16808  14B0  0836               	movf	MTOUCH_Sensor_isSamplingComplete@sensor,w
 16809  14B1  3192  2266  3194   	fcall	_MTOUCH_Sensor_isEnabled
 16810  14B4  3A00               	xorlw	0
 16811  14B5  1903               	skipnz
 16812  14B6  2CC1               	goto	l7321
 16813                           
 16814                           ;mtouch_sensor.c: 332: {
 16815                           ;mtouch_sensor.c: 333: if(MTOUCH_Sensor_isSampling() == 0)
 16816  14B7  319F  27CF  3194   	fcall	_MTOUCH_Sensor_isSampling
 16817  14BA  3A00               	xorlw	0
 16818  14BB  1D03               	skipz
 16819  14BC  2CBF               	goto	l7317
 16820                           
 16821                           ;mtouch_sensor.c: 334: {
 16822                           ;mtouch_sensor.c: 335: Sensor_scheduleNextScan();
 16823  14BD  318F  2747         	fcall	_Sensor_scheduleNextScan
 16824  14BF                     l7317:	
 16825                           
 16826                           ;mtouch_sensor.c: 336: }
 16827                           ;mtouch_sensor.c: 337: return 0;
 16828  14BF  3000               	movlw	0
 16829  14C0  0008               	return
 16830  14C1                     l7321:	
 16831  14C1  3001               	movlw	1
 16832  14C2  0020               	movlb	0	; select bank0
 16833  14C3  00B5               	movwf	??_MTOUCH_Sensor_isSamplingComplete
 16834  14C4  0835               	movf	??_MTOUCH_Sensor_isSamplingComplete,w
 16835  14C5  07B6               	addwf	MTOUCH_Sensor_isSamplingComplete@sensor,f
 16836  14C6  3005               	movlw	5
 16837  14C7  0236               	subwf	MTOUCH_Sensor_isSamplingComplete@sensor,w
 16838  14C8  1C03               	skipc
 16839  14C9  2CA8               	goto	l7309
 16840  14CA                     l7325:	
 16841                           
 16842                           ;mtouch_sensor.c: 338: }
 16843                           ;mtouch_sensor.c: 339: }
 16844                           ;mtouch_sensor.c: 341: return 1;
 16845  14CA  3001               	movlw	1
 16846  14CB  0008               	return
 16847  14CC                     __end_of_MTOUCH_Sensor_isSamplingComplete:	
 16848                           
 16849                           	psect	text43
 16850  0F47                     __ptext43:	
 16851 ;; *************** function _Sensor_scheduleNextScan *****************
 16852 ;; Defined at:
 16853 ;;		line 414 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;		None
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;  sensor          1   20[BANK0 ] PTR struct .
 16858 ;;		 -> mtouch_sensor(45), 
 16859 ;;  skipScan        1   19[BANK0 ] unsigned char 
 16860 ;;  state           1   18[BANK0 ] unsigned char 
 16861 ;; Return value:  Size  Location     Type
 16862 ;;                  1    wreg      void 
 16863 ;; Registers used:
 16864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16865 ;; Tracked objects:
 16866 ;;		On entry : 0/0
 16867 ;;		On exit  : 0/0
 16868 ;;		Unchanged: 0/0
 16869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;Total ram usage:        5 bytes
 16875 ;; Hardware stack levels used:    1
 16876 ;; Hardware stack levels required when called:    9
 16877 ;; This function calls:
 16878 ;;		_MTOUCH_Sensor_isEnabled
 16879 ;;		_MTOUCH_Sensor_wasSampled
 16880 ;;		_Sensor_SetTrisBit
 16881 ;;		_Sensor_isCalibrated
 16882 ;;		_Sensor_isCalibratingAcqTime
 16883 ;;		___bmul
 16884 ;; This function is called by:
 16885 ;;		_MTOUCH_Sensor_isSamplingComplete
 16886 ;; This function uses a non-reentrant model
 16887 ;;
 16888                           
 16889                           
 16890                           ;psect for function _Sensor_scheduleNextScan
 16891  0F47                     _Sensor_scheduleNextScan:	
 16892                           
 16893                           ;mtouch_sensor.c: 416: mtouch_sensor_t* sensor;
 16894                           ;mtouch_sensor.c: 417: bool skipScan = (bool)0;
 16895                           
 16896                           ;incstack = 0
 16897                           ; Regs used in _Sensor_scheduleNextScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16898  0F47  0020               	movlb	0	; select bank0
 16899  0F48  01B3               	clrf	Sensor_scheduleNextScan@skipScan
 16900                           
 16901                           ;mtouch_sensor.c: 418: bool state = (bool)GIE;
 16902  0F49  3000               	movlw	0
 16903  0F4A  1B8B               	btfsc	11,7	;volatile
 16904  0F4B  3001               	movlw	1
 16905  0F4C  00B2               	movwf	Sensor_scheduleNextScan@state
 16906  0F4D                     l7023:	
 16907                           ;mtouch_sensor.c: 421: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 16908                           
 16909  0F4D  0860               	movf	_currentScanSensor,w
 16910  0F4E  3192  224F  318F   	fcall	_MTOUCH_Sensor_wasSampled
 16911  0F51  3A00               	xorlw	0
 16912  0F52  1903               	btfsc	3,2
 16913  0F53  2F62               	goto	l7025
 16914  0F54                     l7017:	
 16915                           
 16916                           ;mtouch_sensor.c: 422: {
 16917                           ;mtouch_sensor.c: 423: if(++currentScanSensor == (5u))
 16918  0F54  3001               	movlw	1
 16919  0F55  0020               	movlb	0	; select bank0
 16920  0F56  00B0               	movwf	??_Sensor_scheduleNextScan
 16921  0F57  0830               	movf	??_Sensor_scheduleNextScan,w
 16922  0F58  07E0               	addwf	_currentScanSensor,f
 16923  0F59  3005               	movlw	5
 16924  0F5A  0660               	xorwf	_currentScanSensor,w
 16925  0F5B  1D03               	btfss	3,2
 16926  0F5C  2F4D               	goto	l7023
 16927                           
 16928                           ;mtouch_sensor.c: 424: {
 16929                           ;mtouch_sensor.c: 425: currentScanSensor = 0;
 16930  0F5D  01E0               	clrf	_currentScanSensor
 16931                           
 16932                           ;mtouch_sensor.c: 426: sampling_flag = 0;
 16933  0F5E  01DF               	clrf	_sampling_flag
 16934                           
 16935                           ;mtouch_sensor.c: 427: skipScan = 1;
 16936  0F5F  01B3               	clrf	Sensor_scheduleNextScan@skipScan
 16937  0F60  0AB3               	incf	Sensor_scheduleNextScan@skipScan,f
 16938                           
 16939                           ;mtouch_sensor.c: 428: break;
 16940  0F61  2F6A               	goto	l7027
 16941  0F62                     l7025:	
 16942  0F62  0020               	movlb	0	; select bank0
 16943  0F63  0860               	movf	_currentScanSensor,w
 16944  0F64  3192  2266  318F   	fcall	_MTOUCH_Sensor_isEnabled
 16945  0F67  3A00               	xorlw	0
 16946  0F68  1903               	skipnz
 16947  0F69  2F54               	goto	l7017
 16948  0F6A                     l7027:	
 16949                           
 16950                           ;mtouch_sensor.c: 429: }
 16951                           ;mtouch_sensor.c: 430: }
 16952                           ;mtouch_sensor.c: 432: if(skipScan==0)
 16953  0F6A  0020               	movlb	0	; select bank0
 16954  0F6B  0833               	movf	Sensor_scheduleNextScan@skipScan,w
 16955  0F6C  1D03               	btfss	3,2
 16956  0F6D  0008               	return
 16957                           
 16958                           ;mtouch_sensor.c: 433: {
 16959                           ;mtouch_sensor.c: 434: sensor = &mtouch_sensor[currentScanSensor];
 16960  0F6E  3009               	movlw	9
 16961  0F6F  00B0               	movwf	??_Sensor_scheduleNextScan
 16962  0F70  0830               	movf	??_Sensor_scheduleNextScan,w
 16963  0F71  00AA               	movwf	___bmul@multiplicand
 16964  0F72  0860               	movf	_currentScanSensor,w
 16965  0F73  3191  219C  318F   	fcall	___bmul
 16966  0F76  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 16967  0F77  0020               	movlb	0	; select bank0
 16968  0F78  00B1               	movwf	??_Sensor_scheduleNextScan+1
 16969  0F79  0831               	movf	??_Sensor_scheduleNextScan+1,w
 16970  0F7A  00B4               	movwf	Sensor_scheduleNextScan@sensor
 16971                           
 16972                           ;mtouch_sensor.c: 435: if(Sensor_isCalibrated(sensor))
 16973  0F7B  0834               	movf	Sensor_scheduleNextScan@sensor,w
 16974  0F7C  3191  2125  318F   	fcall	_Sensor_isCalibrated
 16975  0F7F  3A00               	xorlw	0
 16976  0F80  1903               	skipnz
 16977  0F81  2F95               	goto	l7035
 16978                           
 16979                           ;mtouch_sensor.c: 436: {
 16980                           ;mtouch_sensor.c: 437: ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
 16981  0F82  0020               	movlb	0	; select bank0
 16982  0F83  0834               	movf	Sensor_scheduleNextScan@sensor,w
 16983  0F84  0086               	movwf	6
 16984  0F85  3001               	movlw	1	; select bank2/3
 16985  0F86  0087               	movwf	7
 16986  0F87  3001               	movlw	1	; select bank2/3
 16987  0F88  3F43               	moviw [3]fsr1
 16988  0F89  0021               	movlb	1	; select bank1
 16989  0F8A  009D               	movwf	29	;volatile
 16990                           
 16991                           ;mtouch_sensor.c: 438: ADPRE = (mtouch_sensor_time_t)sensor->precharge_time;
 16992  0F8B  0020               	movlb	0	; select bank0
 16993  0F8C  0834               	movf	Sensor_scheduleNextScan@sensor,w
 16994  0F8D  0086               	movwf	6
 16995  0F8E  3001               	movlw	1	; select bank2/3
 16996  0F8F  0087               	movwf	7
 16997  0F90  3001               	movlw	1	; select bank2/3
 16998  0F91  3F42               	moviw [2]fsr1
 16999  0F92  0021               	movlb	1	; select bank1
 17000  0F93  009C               	movwf	28	;volatile
 17001                           
 17002                           ;mtouch_sensor.c: 439: }
 17003  0F94  2FB4               	goto	l7041
 17004  0F95                     l7035:	
 17005                           
 17006                           ;mtouch_sensor.c: 440: else
 17007                           ;mtouch_sensor.c: 441: {
 17008                           ;mtouch_sensor.c: 442: if(Sensor_isCalibratingAcqTime(sensor))
 17009  0F95  0020               	movlb	0	; select bank0
 17010  0F96  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17011  0F97  3190  20B1  318F   	fcall	_Sensor_isCalibratingAcqTime
 17012  0F9A  3A00               	xorlw	0
 17013  0F9B  1903               	skipnz
 17014  0F9C  2FAF               	goto	l7039
 17015                           
 17016                           ;mtouch_sensor.c: 443: {
 17017                           ;mtouch_sensor.c: 444: ADPRE = (mtouch_sensor_time_t)sensor->precharge_time;
 17018  0F9D  0020               	movlb	0	; select bank0
 17019  0F9E  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17020  0F9F  0086               	movwf	6
 17021  0FA0  3001               	movlw	1	; select bank2/3
 17022  0FA1  0087               	movwf	7
 17023  0FA2  3001               	movlw	1	; select bank2/3
 17024  0FA3  3F42               	moviw [2]fsr1
 17025  0FA4  0021               	movlb	1	; select bank1
 17026  0FA5  009C               	movwf	28	;volatile
 17027                           
 17028                           ;mtouch_sensor.c: 445: ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
 17029  0FA6  0020               	movlb	0	; select bank0
 17030  0FA7  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17031  0FA8  0086               	movwf	6
 17032  0FA9  3001               	movlw	1	; select bank2/3
 17033  0FAA  0087               	movwf	7
 17034  0FAB  3001               	movlw	1	; select bank2/3
 17035  0FAC  3F43               	moviw [3]fsr1
 17036  0FAD  0021               	movlb	1	; select bank1
 17037  0FAE  2FB3               	goto	L13
 17038  0FAF                     l7039:	
 17039                           ;mtouch_sensor.c: 446: }
 17040                           
 17041                           
 17042                           ;mtouch_sensor.c: 447: else
 17043                           ;mtouch_sensor.c: 448: {
 17044                           ;mtouch_sensor.c: 449: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)2));
 17045  0FAF  30C0               	movlw	192
 17046  0FB0  0021               	movlb	1	; select bank1
 17047  0FB1  009C               	movwf	28	;volatile
 17048                           
 17049                           ;mtouch_sensor.c: 450: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)2));
 17050  0FB2  30C0               	movlw	192
 17051  0FB3                     L13:	
 17052  0FB3  009D               	movwf	29	;volatile
 17053  0FB4                     l7041:	
 17054                           
 17055                           ;mtouch_sensor.c: 451: }
 17056                           ;mtouch_sensor.c: 452: }
 17057                           ;mtouch_sensor.c: 454: ADPRE +=(uint8_t)sample_delay;
 17058  0FB4  0020               	movlb	0	; select bank0
 17059  0FB5  085B               	movf	_sample_delay,w
 17060  0FB6  00B0               	movwf	??_Sensor_scheduleNextScan
 17061  0FB7  0830               	movf	??_Sensor_scheduleNextScan,w
 17062  0FB8  0021               	movlb	1	; select bank1
 17063  0FB9  079C               	addwf	28,f	;volatile
 17064                           
 17065                           ;mtouch_sensor.c: 455: ADPCH = (uint8_t)sensor->adpch;
 17066  0FBA  0020               	movlb	0	; select bank0
 17067  0FBB  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17068  0FBC  0086               	movwf	6
 17069  0FBD  3001               	movlw	1	; select bank2/3
 17070  0FBE  0087               	movwf	7
 17071  0FBF  3001               	movlw	1	; select bank2/3
 17072  0FC0  3F41               	moviw [1]fsr1
 17073  0FC1  0021               	movlb	1	; select bank1
 17074  0FC2  009E               	movwf	30	;volatile
 17075                           
 17076                           ;mtouch_sensor.c: 456: ADRPT = (uint8_t)(sensor->oversampling>>1);
 17077  0FC3  0020               	movlb	0	; select bank0
 17078  0FC4  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17079  0FC5  3E04               	addlw	4
 17080  0FC6  0086               	movwf	6
 17081  0FC7  3001               	movlw	1	; select bank2/3
 17082  0FC8  0087               	movwf	7
 17083  0FC9  3601               	lsrf	1,w
 17084  0FCA  0022               	movlb	2	; select bank2
 17085  0FCB  008D               	movwf	13	;volatile
 17086                           
 17087                           ;mtouch_sensor.c: 457: ADCAP = (uint8_t)sensor->addcap;
 17088  0FCC  0020               	movlb	0	; select bank0
 17089  0FCD  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17090  0FCE  0086               	movwf	6
 17091  0FCF  3001               	movlw	1	; select bank2/3
 17092  0FD0  0087               	movwf	7
 17093  0FD1  3001               	movlw	1	; select bank2/3
 17094  0FD2  3F45               	moviw [5]fsr1
 17095  0FD3  0021               	movlb	1	; select bank1
 17096  0FD4  009B               	movwf	27	;volatile
 17097                           
 17098                           ;mtouch_sensor.c: 458: ADCON0bits.ADON = 1;
 17099  0FD5  1793               	bsf	19,7	;volatile
 17100                           
 17101                           ;mtouch_sensor.c: 459: sampling_flag= 1;
 17102  0FD6  0020               	movlb	0	; select bank0
 17103  0FD7  01DF               	clrf	_sampling_flag
 17104  0FD8  0ADF               	incf	_sampling_flag,f
 17105                           
 17106                           ;mtouch_sensor.c: 460: Sensor_SetTrisBit(currentScanSensor,1);
 17107  0FD9  01AA               	clrf	Sensor_SetTrisBit@TrisBit
 17108  0FDA  0AAA               	incf	Sensor_SetTrisBit@TrisBit,f
 17109  0FDB  0860               	movf	_currentScanSensor,w
 17110  0FDC  3194  24F6  318F   	fcall	_Sensor_SetTrisBit
 17111                           
 17112                           ;mtouch_sensor.c: 461: GIE = 0;
 17113  0FDF  138B               	bcf	11,7	;volatile
 17114                           
 17115                           ;mtouch_sensor.c: 462: ADCON0bits.GO = 1;
 17116  0FE0  0021               	movlb	1	; select bank1
 17117  0FE1  1413               	bsf	19,0	;volatile
 17118                           
 17119                           ;mtouch_sensor.c: 463: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 17120  0FE2  0020               	movlb	0	; select bank0
 17121  0FE3  0834               	movf	Sensor_scheduleNextScan@sensor,w
 17122  0FE4  3E04               	addlw	4
 17123  0FE5  0086               	movwf	6
 17124  0FE6  3001               	movlw	1	; select bank2/3
 17125  0FE7  0087               	movwf	7
 17126  0FE8  0801               	movf	1,w
 17127  0FE9  00B0               	movwf	??_Sensor_scheduleNextScan
 17128  0FEA  01B1               	clrf	??_Sensor_scheduleNextScan+1
 17129  0FEB  3009               	movlw	9
 17130  0FEC                     u7035:	
 17131  0FEC  35B0               	lslf	??_Sensor_scheduleNextScan,f
 17132  0FED  0DB1               	rlf	??_Sensor_scheduleNextScan+1,f
 17133  0FEE  0B89               	decfsz	9,f
 17134  0FEF  2FEC               	goto	u7035
 17135  0FF0  0830               	movf	??_Sensor_scheduleNextScan,w
 17136  0FF1  0021               	movlb	1	; select bank1
 17137  0FF2  0090               	movwf	16	;volatile
 17138  0FF3  0020               	movlb	0	; select bank0
 17139  0FF4  0831               	movf	??_Sensor_scheduleNextScan+1,w
 17140  0FF5  0021               	movlb	1	; select bank1
 17141  0FF6  0091               	movwf	17	;volatile
 17142                           
 17143                           ;mtouch_sensor.c: 464: GIE = state;
 17144  0FF7  0020               	movlb	0	; select bank0
 17145  0FF8  1C32               	btfss	Sensor_scheduleNextScan@state,0
 17146  0FF9  2FFC               	goto	u7040
 17147  0FFA  178B               	bsf	11,7	;volatile
 17148  0FFB  2FFD               	goto	l7061
 17149  0FFC                     u7040:	
 17150  0FFC  138B               	bcf	11,7	;volatile
 17151  0FFD                     l7061:	
 17152                           
 17153                           ;mtouch_sensor.c: 465: scanInterrupted = 0;
 17154  0FFD  0020               	movlb	0	; select bank0
 17155  0FFE  01DE               	clrf	_scanInterrupted	;volatile
 17156  0FFF  0008               	return
 17157  1000                     __end_of_Sensor_scheduleNextScan:	
 17158                           
 17159                           	psect	text44
 17160  10B1                     __ptext44:	
 17161 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 17162 ;; Defined at:
 17163 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;  sensor          1    wreg     PTR struct .
 17166 ;;		 -> mtouch_sensor(45), 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  sensor          1   10[BANK0 ] PTR struct .
 17169 ;;		 -> mtouch_sensor(45), 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  1    wreg      unsigned char 
 17172 ;; Registers used:
 17173 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;Total ram usage:        1 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    7
 17186 ;; This function calls:
 17187 ;;		Nothing
 17188 ;; This function is called by:
 17189 ;;		_Sensor_scheduleNextScan
 17190 ;; This function uses a non-reentrant model
 17191 ;;
 17192                           
 17193                           
 17194                           ;psect for function _Sensor_isCalibratingAcqTime
 17195  10B1                     _Sensor_isCalibratingAcqTime:	
 17196                           
 17197                           ;incstack = 0
 17198                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 17199                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 17200  10B1  0020               	movlb	0	; select bank0
 17201  10B2  00AA               	movwf	Sensor_isCalibratingAcqTime@sensor
 17202                           
 17203                           ;mtouch_sensor.c: 916: return (bool)sensor->acqTime_cal;
 17204  10B3  082A               	movf	Sensor_isCalibratingAcqTime@sensor,w
 17205  10B4  3E08               	addlw	8
 17206  10B5  0086               	movwf	6
 17207  10B6  3001               	movlw	1	; select bank2/3
 17208  10B7  0087               	movwf	7
 17209  10B8  0E01               	swapf	1,w
 17210  10B9  3901               	andlw	1
 17211  10BA  0008               	return
 17212  10BB                     __end_of_Sensor_isCalibratingAcqTime:	
 17213                           
 17214                           	psect	text45
 17215  1125                     __ptext45:	
 17216 ;; *************** function _Sensor_isCalibrated *****************
 17217 ;; Defined at:
 17218 ;;		line 896 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  sensor          1    wreg     PTR struct .
 17221 ;;		 -> mtouch_sensor(45), 
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;  sensor          1   11[BANK0 ] PTR struct .
 17224 ;;		 -> mtouch_sensor(45), 
 17225 ;; Return value:  Size  Location     Type
 17226 ;;                  1    wreg      unsigned char 
 17227 ;; Registers used:
 17228 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17229 ;; Tracked objects:
 17230 ;;		On entry : 0/0
 17231 ;;		On exit  : 0/0
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;Total ram usage:        2 bytes
 17239 ;; Hardware stack levels used:    1
 17240 ;; Hardware stack levels required when called:    7
 17241 ;; This function calls:
 17242 ;;		Nothing
 17243 ;; This function is called by:
 17244 ;;		_Sensor_scheduleNextScan
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           
 17249                           ;psect for function _Sensor_isCalibrated
 17250  1125                     _Sensor_isCalibrated:	
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 17254                           ;Sensor_isCalibrated@sensor stored from wreg
 17255  1125  0020               	movlb	0	; select bank0
 17256  1126  00AB               	movwf	Sensor_isCalibrated@sensor
 17257                           
 17258                           ;mtouch_sensor.c: 898: return (bool)sensor->calibrated;
 17259  1127  082B               	movf	Sensor_isCalibrated@sensor,w
 17260  1128  3E08               	addlw	8
 17261  1129  0086               	movwf	6
 17262  112A  3001               	movlw	1	; select bank2/3
 17263  112B  0087               	movwf	7
 17264  112C  0C01               	rrf	1,w
 17265  112D  00AA               	movwf	??_Sensor_isCalibrated
 17266  112E  0CAA               	rrf	??_Sensor_isCalibrated,f
 17267  112F  0C2A               	rrf	??_Sensor_isCalibrated,w
 17268  1130  3901               	andlw	1
 17269  1131  0008               	return
 17270  1132                     __end_of_Sensor_isCalibrated:	
 17271                           
 17272                           	psect	text46
 17273  14F6                     __ptext46:	
 17274 ;; *************** function _Sensor_SetTrisBit *****************
 17275 ;; Defined at:
 17276 ;;		line 240 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17277 ;; Parameters:    Size  Location     Type
 17278 ;;  sensor          1    wreg     enum E14537
 17279 ;;  TrisBit         1   10[BANK0 ] unsigned char 
 17280 ;; Auto vars:     Size  Location     Type
 17281 ;;  sensor          1   11[BANK0 ] enum E14537
 17282 ;; Return value:  Size  Location     Type
 17283 ;;                  1    wreg      void 
 17284 ;; Registers used:
 17285 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 0/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17291 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;Total ram usage:        2 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    7
 17298 ;; This function calls:
 17299 ;;		Nothing
 17300 ;; This function is called by:
 17301 ;;		_Sensor_scheduleNextScan
 17302 ;; This function uses a non-reentrant model
 17303 ;;
 17304                           
 17305                           
 17306                           ;psect for function _Sensor_SetTrisBit
 17307  14F6                     _Sensor_SetTrisBit:	
 17308                           
 17309                           ;incstack = 0
 17310                           ; Regs used in _Sensor_SetTrisBit: [wreg-fsr0h+status,2+status,0]
 17311                           ;Sensor_SetTrisBit@sensor stored from wreg
 17312  14F6  0020               	movlb	0	; select bank0
 17313  14F7  00AB               	movwf	Sensor_SetTrisBit@sensor
 17314                           
 17315                           ;mtouch_sensor.c: 242: switch(sensor)
 17316  14F8  2D17               	goto	l6777
 17317  14F9                     l6765:	
 17318                           ;mtouch_sensor.c: 243: {
 17319                           ;mtouch_sensor.c: 244: case 0:
 17320                           
 17321                           
 17322                           ;mtouch_sensor.c: 245: TRISAbits.TRISA0 = TrisBit;
 17323  14F9  0C2A               	rrf	Sensor_SetTrisBit@TrisBit,w
 17324  14FA  1C03               	skipc
 17325  14FB  1011               	bcf	17,0	;volatile
 17326  14FC  1803               	skipnc
 17327  14FD  1411               	bsf	17,0	;volatile
 17328                           
 17329                           ;mtouch_sensor.c: 246: break;
 17330  14FE  0008               	return
 17331  14FF                     l6767:	
 17332                           ;mtouch_sensor.c: 247: case 1:
 17333                           
 17334                           
 17335                           ;mtouch_sensor.c: 248: TRISAbits.TRISA1 = TrisBit;
 17336  14FF  0C2A               	rrf	Sensor_SetTrisBit@TrisBit,w
 17337  1500  1C03               	skipc
 17338  1501  1091               	bcf	17,1	;volatile
 17339  1502  1803               	skipnc
 17340  1503  1491               	bsf	17,1	;volatile
 17341                           
 17342                           ;mtouch_sensor.c: 249: break;
 17343  1504  0008               	return
 17344  1505                     l6769:	
 17345                           ;mtouch_sensor.c: 250: case 2:
 17346                           
 17347                           
 17348                           ;mtouch_sensor.c: 251: TRISAbits.TRISA2 = TrisBit;
 17349  1505  0C2A               	rrf	Sensor_SetTrisBit@TrisBit,w
 17350  1506  1C03               	skipc
 17351  1507  1111               	bcf	17,2	;volatile
 17352  1508  1803               	skipnc
 17353  1509  1511               	bsf	17,2	;volatile
 17354                           
 17355                           ;mtouch_sensor.c: 252: break;
 17356  150A  0008               	return
 17357  150B                     l6771:	
 17358                           ;mtouch_sensor.c: 253: case 3:
 17359                           
 17360                           
 17361                           ;mtouch_sensor.c: 254: TRISAbits.TRISA3 = TrisBit;
 17362  150B  0C2A               	rrf	Sensor_SetTrisBit@TrisBit,w
 17363  150C  1C03               	skipc
 17364  150D  1191               	bcf	17,3	;volatile
 17365  150E  1803               	skipnc
 17366  150F  1591               	bsf	17,3	;volatile
 17367                           
 17368                           ;mtouch_sensor.c: 255: break;
 17369  1510  0008               	return
 17370  1511                     l6773:	
 17371                           ;mtouch_sensor.c: 256: case 4:
 17372                           
 17373                           
 17374                           ;mtouch_sensor.c: 257: TRISAbits.TRISA4 = TrisBit;
 17375  1511  0C2A               	rrf	Sensor_SetTrisBit@TrisBit,w
 17376  1512  1C03               	skipc
 17377  1513  1211               	bcf	17,4	;volatile
 17378  1514  1803               	skipnc
 17379  1515  1611               	bsf	17,4	;volatile
 17380                           
 17381                           ;mtouch_sensor.c: 260: }
 17382                           
 17383                           ;mtouch_sensor.c: 259: default: break;
 17384                           
 17385                           ;mtouch_sensor.c: 258: break;
 17386  1516  0008               	return
 17387  1517                     l6777:	
 17388  1517  082B               	movf	Sensor_SetTrisBit@sensor,w
 17389                           
 17390                           ; Switch size 1, requested type "space"
 17391                           ; Number of cases is 5, Range of values is 0 to 4
 17392                           ; switch strategies available:
 17393                           ; Name         Instructions Cycles
 17394                           ; direct_byte           16     6 (fixed)
 17395                           ; simple_byte           16     9 (average)
 17396                           ; jumptable            260     6 (fixed)
 17397                           ;	Chosen strategy is direct_byte
 17398  1518  0084               	movwf	4
 17399  1519  3005               	movlw	5
 17400  151A  0204               	subwf	4,w
 17401  151B  1803               	skipnc
 17402  151C  0008               	return
 17403  151D  3190               	movlp	high S8313
 17404  151E  3504               	lslf	4,w
 17405  151F  3E55               	addlw	low S8313
 17406  1520  0082               	movwf	2
 17407  1521  0008               	return
 17408  1522                     __end_of_Sensor_SetTrisBit:	
 17409                           
 17410                           	psect	swtext1
 17411  1055                     __pswtext1:	
 17412  1055                     S8313:	
 17413  1055  3194  2CF9         	ljmp	l6765
 17414  1057  3194  2CFF         	ljmp	l6767
 17415  1059  3195  2D05         	ljmp	l6769
 17416  105B  3195  2D0B         	ljmp	l6771
 17417  105D  3195  2D11         	ljmp	l6773
 17418                           
 17419                           	psect	text47
 17420  1266                     __ptext47:	
 17421 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
 17422 ;; Defined at:
 17423 ;;		line 824 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17424 ;; Parameters:    Size  Location     Type
 17425 ;;  sensor          1    wreg     enum E14537
 17426 ;; Auto vars:     Size  Location     Type
 17427 ;;  sensor          1   15[BANK0 ] enum E14537
 17428 ;; Return value:  Size  Location     Type
 17429 ;;                  1    wreg      unsigned char 
 17430 ;; Registers used:
 17431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17432 ;; Tracked objects:
 17433 ;;		On entry : 0/0
 17434 ;;		On exit  : 0/0
 17435 ;;		Unchanged: 0/0
 17436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;Total ram usage:        2 bytes
 17442 ;; Hardware stack levels used:    1
 17443 ;; Hardware stack levels required when called:    8
 17444 ;; This function calls:
 17445 ;;		___bmul
 17446 ;; This function is called by:
 17447 ;;		_MTOUCH_Sensor_isSamplingComplete
 17448 ;;		_Sensor_scheduleNextScan
 17449 ;; This function uses a non-reentrant model
 17450 ;;
 17451                           
 17452                           
 17453                           ;psect for function _MTOUCH_Sensor_isEnabled
 17454  1266                     _MTOUCH_Sensor_isEnabled:	
 17455                           
 17456                           ;incstack = 0
 17457                           ; Regs used in _MTOUCH_Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17458                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
 17459  1266  0020               	movlb	0	; select bank0
 17460  1267  00AF               	movwf	MTOUCH_Sensor_isEnabled@sensor
 17461                           
 17462                           ;mtouch_sensor.c: 826: if(sensor < (5u))
 17463  1268  3005               	movlw	5
 17464  1269  022F               	subwf	MTOUCH_Sensor_isEnabled@sensor,w
 17465  126A  1803               	skipnc
 17466  126B  2A7B               	goto	l6795
 17467                           
 17468                           ;mtouch_sensor.c: 827: return (bool)mtouch_sensor[sensor].enabled;
 17469  126C  3009               	movlw	9
 17470  126D  00AE               	movwf	??_MTOUCH_Sensor_isEnabled
 17471  126E  082E               	movf	??_MTOUCH_Sensor_isEnabled,w
 17472  126F  00AA               	movwf	___bmul@multiplicand
 17473  1270  082F               	movf	MTOUCH_Sensor_isEnabled@sensor,w
 17474  1271  3191  219C         	fcall	___bmul
 17475  1273  3E08               	addlw	8
 17476  1274  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 17477  1275  0086               	movwf	6
 17478  1276  3001               	movlw	1	; select bank3/4
 17479  1277  0087               	movwf	7
 17480  1278  0801               	movf	1,w
 17481  1279  3901               	andlw	1
 17482  127A  0008               	return
 17483  127B                     l6795:	
 17484                           
 17485                           ;mtouch_sensor.c: 828: else
 17486                           ;mtouch_sensor.c: 829: return 0;
 17487  127B  3000               	movlw	0
 17488  127C  0008               	return
 17489  127D                     __end_of_MTOUCH_Sensor_isEnabled:	
 17490                           
 17491                           	psect	text48
 17492  1FCF                     __ptext48:	
 17493 ;; *************** function _MTOUCH_Sensor_isSampling *****************
 17494 ;; Defined at:
 17495 ;;		line 954 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17496 ;; Parameters:    Size  Location     Type
 17497 ;;		None
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;		None
 17500 ;; Return value:  Size  Location     Type
 17501 ;;                  1    wreg      unsigned char 
 17502 ;; Registers used:
 17503 ;;		wreg
 17504 ;; Tracked objects:
 17505 ;;		On entry : 0/0
 17506 ;;		On exit  : 0/0
 17507 ;;		Unchanged: 0/0
 17508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;Total ram usage:        0 bytes
 17514 ;; Hardware stack levels used:    1
 17515 ;; Hardware stack levels required when called:    7
 17516 ;; This function calls:
 17517 ;;		Nothing
 17518 ;; This function is called by:
 17519 ;;		_MTOUCH_Sensor_isSamplingComplete
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           
 17524                           ;psect for function _MTOUCH_Sensor_isSampling
 17525  1FCF                     _MTOUCH_Sensor_isSampling:	
 17526                           
 17527                           ;mtouch_sensor.c: 956: return sampling_flag;
 17528                           
 17529                           ;incstack = 0
 17530                           ; Regs used in _MTOUCH_Sensor_isSampling: [wreg]
 17531  1FCF  0020               	movlb	0	; select bank0
 17532  1FD0  085F               	movf	_sampling_flag,w
 17533  1FD1  0008               	return
 17534  1FD2                     __end_of_MTOUCH_Sensor_isSampling:	
 17535                           
 17536                           	psect	text49
 17537  10E8                     __ptext49:	
 17538 ;; *************** function _MTOUCH_Initialize *****************
 17539 ;; Defined at:
 17540 ;;		line 82 in file "mcc_generated_files/mtouch/mtouch.c"
 17541 ;; Parameters:    Size  Location     Type
 17542 ;;		None
 17543 ;; Auto vars:     Size  Location     Type
 17544 ;;		None
 17545 ;; Return value:  Size  Location     Type
 17546 ;;                  1    wreg      void 
 17547 ;; Registers used:
 17548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17549 ;; Tracked objects:
 17550 ;;		On entry : 0/0
 17551 ;;		On exit  : 0/0
 17552 ;;		Unchanged: 0/0
 17553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;Total ram usage:        0 bytes
 17559 ;; Hardware stack levels used:    1
 17560 ;; Hardware stack levels required when called:   11
 17561 ;; This function calls:
 17562 ;;		_MTOUCH_Button_InitializeAll
 17563 ;;		_MTOUCH_Sensor_InitializeAll
 17564 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 17565 ;;		_MTOUCH_Sensor_Scan_Initialize
 17566 ;; This function is called by:
 17567 ;;		_MTOUCH_Service_Mainloop
 17568 ;;		_SYSTEM_Initialize
 17569 ;; This function uses a non-reentrant model
 17570 ;;
 17571                           
 17572                           
 17573                           ;psect for function _MTOUCH_Initialize
 17574  10E8                     _MTOUCH_Initialize:	
 17575                           
 17576                           ;mtouch.c: 84: MTOUCH_Sensor_InitializeAll();
 17577                           
 17578                           ;incstack = 0
 17579                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17580  10E8  3193  237A  3190   	fcall	_MTOUCH_Sensor_InitializeAll
 17581                           
 17582                           ;mtouch.c: 86: MTOUCH_Button_InitializeAll();
 17583  10EB  3193  2358  3190   	fcall	_MTOUCH_Button_InitializeAll
 17584                           
 17585                           ;mtouch.c: 88: MTOUCH_Sensor_Sampled_ResetAll();
 17586  10EE  3192  220E  3190   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
 17587                           
 17588                           ;mtouch.c: 89: MTOUCH_Sensor_Scan_Initialize();
 17589  10F1  3193  2319         	fcall	_MTOUCH_Sensor_Scan_Initialize
 17590  10F3  0008               	return
 17591  10F4                     __end_of_MTOUCH_Initialize:	
 17592                           
 17593                           	psect	text50
 17594  1319                     __ptext50:	
 17595 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 17596 ;; Defined at:
 17597 ;;		line 389 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17598 ;; Parameters:    Size  Location     Type
 17599 ;;		None
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;  state           1   12[BANK0 ] unsigned char 
 17602 ;; Return value:  Size  Location     Type
 17603 ;;                  1    wreg      void 
 17604 ;; Registers used:
 17605 ;;		wreg, status,2, status,0, pclath, cstack
 17606 ;; Tracked objects:
 17607 ;;		On entry : 0/0
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17615 ;;Total ram usage:        1 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    9
 17618 ;; This function calls:
 17619 ;;		_MTOUCH_Sensor_ADCC_Initialize
 17620 ;; This function is called by:
 17621 ;;		_MTOUCH_Initialize
 17622 ;; This function uses a non-reentrant model
 17623 ;;
 17624                           
 17625                           
 17626                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 17627  1319                     _MTOUCH_Sensor_Scan_Initialize:	
 17628                           
 17629                           ;mtouch_sensor.c: 391: MTOUCH_Sensor_ADCC_Initialize();
 17630                           
 17631                           ;incstack = 0
 17632                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17633  1319  3193  2338  3193   	fcall	_MTOUCH_Sensor_ADCC_Initialize
 17634                           
 17635                           ;mtouch_sensor.c: 393: bool state = (bool)GIE;
 17636  131C  3000               	movlw	0
 17637  131D  1B8B               	btfsc	11,7	;volatile
 17638  131E  3001               	movlw	1
 17639  131F  0020               	movlb	0	; select bank0
 17640  1320  00AC               	movwf	MTOUCH_Sensor_Scan_Initialize@state
 17641                           
 17642                           ;mtouch_sensor.c: 394: GIE = 0;
 17643  1321  138B               	bcf	11,7	;volatile
 17644                           
 17645                           ;mtouch_sensor.c: 395: PPSLOCK = 0x55;
 17646  1322  3055               	movlw	85
 17647  1323  003D               	movlb	29	; select bank29
 17648  1324  008F               	movwf	15	;volatile
 17649                           
 17650                           ;mtouch_sensor.c: 396: PPSLOCK = 0xAA;
 17651  1325  30AA               	movlw	170
 17652  1326  008F               	movwf	15	;volatile
 17653                           
 17654                           ;mtouch_sensor.c: 397: PPSLOCKbits.PPSLOCKED = 0x00;
 17655  1327  100F               	bcf	15,0	;volatile
 17656                           
 17657                           ;mtouch_sensor.c: 399: RA5PPS = 0x24;
 17658  1328  3024               	movlw	36
 17659  1329  003E               	movlb	30	; select bank30
 17660  132A  0095               	movwf	21	;volatile
 17661                           
 17662                           ;mtouch_sensor.c: 401: PPSLOCK = 0x55;
 17663  132B  3055               	movlw	85
 17664  132C  003D               	movlb	29	; select bank29
 17665  132D  008F               	movwf	15	;volatile
 17666                           
 17667                           ;mtouch_sensor.c: 402: PPSLOCK = 0xAA;
 17668  132E  30AA               	movlw	170
 17669  132F  008F               	movwf	15	;volatile
 17670                           
 17671                           ;mtouch_sensor.c: 403: PPSLOCKbits.PPSLOCKED = 0x01;
 17672  1330  140F               	bsf	15,0	;volatile
 17673                           
 17674                           ;mtouch_sensor.c: 405: GIE = state;
 17675  1331  0020               	movlb	0	; select bank0
 17676  1332  1C2C               	btfss	MTOUCH_Sensor_Scan_Initialize@state,0
 17677  1333  2B36               	goto	u7450
 17678  1334  178B               	bsf	11,7	;volatile
 17679  1335  0008               	return
 17680  1336                     u7450:	
 17681  1336  138B               	bcf	11,7	;volatile
 17682  1337  0008               	return
 17683  1338                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 17684                           
 17685                           	psect	text51
 17686  1338                     __ptext51:	
 17687 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
 17688 ;; Defined at:
 17689 ;;		line 269 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17690 ;; Parameters:    Size  Location     Type
 17691 ;;		None
 17692 ;; Auto vars:     Size  Location     Type
 17693 ;;		None
 17694 ;; Return value:  Size  Location     Type
 17695 ;;                  1    wreg      void 
 17696 ;; Registers used:
 17697 ;;		wreg, status,2, status,0, pclath, cstack
 17698 ;; Tracked objects:
 17699 ;;		On entry : 0/0
 17700 ;;		On exit  : 0/0
 17701 ;;		Unchanged: 0/0
 17702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17707 ;;Total ram usage:        0 bytes
 17708 ;; Hardware stack levels used:    1
 17709 ;; Hardware stack levels required when called:    8
 17710 ;; This function calls:
 17711 ;;		_ADCC_SetADTIInterruptHandler
 17712 ;; This function is called by:
 17713 ;;		_MTOUCH_Sensor_Scan_Initialize
 17714 ;; This function uses a non-reentrant model
 17715 ;;
 17716                           
 17717                           
 17718                           ;psect for function _MTOUCH_Sensor_ADCC_Initialize
 17719  1338                     _MTOUCH_Sensor_ADCC_Initialize:	
 17720                           
 17721                           ;mtouch_sensor.c: 273: ADCLK = 0x0f;
 17722                           
 17723                           ;incstack = 0
 17724                           ; Regs used in _MTOUCH_Sensor_ADCC_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17725  1338  300F               	movlw	15
 17726  1339  0021               	movlb	1	; select bank1
 17727  133A  0098               	movwf	24	;volatile
 17728                           
 17729                           ;mtouch_sensor.c: 275: ADREF = 0x00;
 17730  133B  019A               	clrf	26	;volatile
 17731                           
 17732                           ;mtouch_sensor.c: 277: ADCAP = 0x00;
 17733  133C  019B               	clrf	27	;volatile
 17734                           
 17735                           ;mtouch_sensor.c: 279: ADLTHL = 0x00;
 17736  133D  0022               	movlb	2	; select bank2
 17737  133E  018E               	clrf	14	;volatile
 17738                           
 17739                           ;mtouch_sensor.c: 281: ADLTHH = 0x00;
 17740  133F  018F               	clrf	15	;volatile
 17741                           
 17742                           ;mtouch_sensor.c: 283: ADUTHL = 0x00;
 17743  1340  0190               	clrf	16	;volatile
 17744                           
 17745                           ;mtouch_sensor.c: 285: ADUTHH = 0x00;
 17746  1341  0191               	clrf	17	;volatile
 17747                           
 17748                           ;mtouch_sensor.c: 287: ADSTPTL = 0x00;
 17749  1342  0192               	clrf	18	;volatile
 17750                           
 17751                           ;mtouch_sensor.c: 289: ADSTPTH = 0x00;
 17752  1343  0193               	clrf	19	;volatile
 17753                           
 17754                           ;mtouch_sensor.c: 292: ADCON1 = 0x41;
 17755  1344  3041               	movlw	65
 17756  1345  0021               	movlb	1	; select bank1
 17757  1346  0094               	movwf	20	;volatile
 17758                           
 17759                           ;mtouch_sensor.c: 294: ADCON2 = 0x8B;
 17760  1347  308B               	movlw	139
 17761  1348  0095               	movwf	21	;volatile
 17762                           
 17763                           ;mtouch_sensor.c: 297: ADCON3 = 0x0F;
 17764  1349  300F               	movlw	15
 17765  134A  0096               	movwf	22	;volatile
 17766                           
 17767                           ;mtouch_sensor.c: 300: ADCON0 = 0xC4;
 17768  134B  30C4               	movlw	196
 17769  134C  0093               	movwf	19	;volatile
 17770                           
 17771                           ;mtouch_sensor.c: 303: PIR1bits.ADTIF = 0;
 17772  134D  002E               	movlb	14	; select bank14
 17773  134E  108D               	bcf	13,1	;volatile
 17774                           
 17775                           ;mtouch_sensor.c: 305: PIE1bits.ADTIE = 1;
 17776  134F  1497               	bsf	23,1	;volatile
 17777                           
 17778                           ;mtouch_sensor.c: 307: ADCC_SetADTIInterruptHandler(ADCC_ThresholdISR_mTouch);
 17779  1350  30DC               	movlw	low _ADCC_ThresholdISR_mTouch
 17780  1351  0020               	movlb	0	; select bank0
 17781  1352  00AA               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler
 17782  1353  301F               	movlw	high _ADCC_ThresholdISR_mTouch
 17783  1354  00AB               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler+1
 17784  1355  3190  208D         	fcall	_ADCC_SetADTIInterruptHandler
 17785  1357  0008               	return
 17786  1358                     __end_of_MTOUCH_Sensor_ADCC_Initialize:	
 17787                           
 17788                           	psect	text52
 17789  108D                     __ptext52:	
 17790 ;; *************** function _ADCC_SetADTIInterruptHandler *****************
 17791 ;; Defined at:
 17792 ;;		line 316 in file "mcc_generated_files/adcc.c"
 17793 ;; Parameters:    Size  Location     Type
 17794 ;;  InterruptHan    2   10[BANK0 ] PTR FTN()void 
 17795 ;;		 -> ADCC_DefaultInterruptHandler(1), ADCC_ThresholdISR_mTouch(1), 
 17796 ;; Auto vars:     Size  Location     Type
 17797 ;;		None
 17798 ;; Return value:  Size  Location     Type
 17799 ;;                  1    wreg      void 
 17800 ;; Registers used:
 17801 ;;		wreg
 17802 ;; Tracked objects:
 17803 ;;		On entry : 0/0
 17804 ;;		On exit  : 0/0
 17805 ;;		Unchanged: 0/0
 17806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;Total ram usage:        2 bytes
 17812 ;; Hardware stack levels used:    1
 17813 ;; Hardware stack levels required when called:    7
 17814 ;; This function calls:
 17815 ;;		Nothing
 17816 ;; This function is called by:
 17817 ;;		_MTOUCH_Sensor_ADCC_Initialize
 17818 ;;		_ADCC_Initialize
 17819 ;; This function uses a non-reentrant model
 17820 ;;
 17821                           
 17822                           
 17823                           ;psect for function _ADCC_SetADTIInterruptHandler
 17824  108D                     _ADCC_SetADTIInterruptHandler:	
 17825                           
 17826                           ;adcc.c: 317: ADCC_ADTI_InterruptHandler = InterruptHandler;
 17827                           
 17828                           ;incstack = 0
 17829                           ; Regs used in _ADCC_SetADTIInterruptHandler: [wreg]
 17830  108D  0020               	movlb	0	; select bank0
 17831  108E  082B               	movf	ADCC_SetADTIInterruptHandler@InterruptHandler+1,w
 17832  108F  0022               	movlb	2	; select bank2
 17833  1090  00EE               	movwf	(_ADCC_ADTI_InterruptHandler+1)^(0+256)
 17834  1091  0020               	movlb	0	; select bank0
 17835  1092  082A               	movf	ADCC_SetADTIInterruptHandler@InterruptHandler,w
 17836  1093  0022               	movlb	2	; select bank2
 17837  1094  00ED               	movwf	_ADCC_ADTI_InterruptHandler^(0+256)
 17838  1095  0008               	return
 17839  1096                     __end_of_ADCC_SetADTIInterruptHandler:	
 17840                           
 17841                           	psect	text53
 17842  120E                     __ptext53:	
 17843 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
 17844 ;; Defined at:
 17845 ;;		line 927 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;		None
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  sensor          1   12[BANK0 ] PTR struct .
 17850 ;;		 -> mtouch_sensor(45), 
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  1    wreg      void 
 17853 ;; Registers used:
 17854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;Total ram usage:        2 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    8
 17867 ;; This function calls:
 17868 ;;		_Sensor_Sampled_Reset
 17869 ;; This function is called by:
 17870 ;;		_MTOUCH_Initialize
 17871 ;;		_MTOUCH_Service_Mainloop
 17872 ;; This function uses a non-reentrant model
 17873 ;;
 17874                           
 17875                           
 17876                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
 17877  120E                     _MTOUCH_Sensor_Sampled_ResetAll:	
 17878                           
 17879                           ;mtouch_sensor.c: 929: mtouch_sensor_t* sensor;
 17880                           ;mtouch_sensor.c: 930: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[(5u)-1];se
      +                          nsor++)
 17881                           
 17882                           ;incstack = 0
 17883                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 17884  120E  30A0               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 17885  120F  0020               	movlb	0	; select bank0
 17886  1210  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 17887  1211  082B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 17888  1212  00AC               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
 17889  1213                     L14:	
 17890  1213  30C4               	movlw	(low ((_mtouch_sensor| (0+256)+36)))& (0+255)
 17891  1214  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 17892  1215  082C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 17893  1216  022B               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 17894  1217  1C03               	btfss	3,0
 17895  1218  0008               	return
 17896                           
 17897                           ;mtouch_sensor.c: 931: {
 17898                           ;mtouch_sensor.c: 932: Sensor_Sampled_Reset(sensor);
 17899  1219  082C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 17900  121A  3190  2084  3192   	fcall	_Sensor_Sampled_Reset
 17901  121D  3009               	movlw	9
 17902  121E  0020               	movlb	0	; select bank0
 17903  121F  00AB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 17904  1220  082B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 17905  1221  07AC               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
 17906  1222  2A13               	goto	L14
 17907  1223                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
 17908                           
 17909                           	psect	text54
 17910  137A                     __ptext54:	
 17911 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
 17912 ;; Defined at:
 17913 ;;		line 312 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17914 ;; Parameters:    Size  Location     Type
 17915 ;;		None
 17916 ;; Auto vars:     Size  Location     Type
 17917 ;;  sensor          1   19[BANK0 ] enum E14537
 17918 ;; Return value:  Size  Location     Type
 17919 ;;                  1    wreg      void 
 17920 ;; Registers used:
 17921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17922 ;; Tracked objects:
 17923 ;;		On entry : 0/0
 17924 ;;		On exit  : 0/0
 17925 ;;		Unchanged: 0/0
 17926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17930 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17931 ;;Total ram usage:        2 bytes
 17932 ;; Hardware stack levels used:    1
 17933 ;; Hardware stack levels required when called:   10
 17934 ;; This function calls:
 17935 ;;		_MTOUCH_Sensor_Initialize
 17936 ;; This function is called by:
 17937 ;;		_MTOUCH_Initialize
 17938 ;; This function uses a non-reentrant model
 17939 ;;
 17940                           
 17941                           
 17942                           ;psect for function _MTOUCH_Sensor_InitializeAll
 17943  137A                     _MTOUCH_Sensor_InitializeAll:	
 17944                           
 17945                           ;mtouch_sensor.c: 314: enum mtouch_sensor_names sensor;
 17946                           ;mtouch_sensor.c: 316: __builtin_memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_s
      +                          ensor_init));
 17947                           
 17948                           ;incstack = 0
 17949                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17950  137A  30A0               	movlw	low (_mtouch_sensor| (0+256))
 17951  137B  0086               	movwf	6
 17952  137C  3001               	movlw	1	; select bank3/4
 17953  137D  0087               	movwf	7
 17954  137E  3000               	movlw	low (_mtouch_sensor_init| (0+32768))
 17955  137F  0084               	movwf	4
 17956  1380  3098               	movlw	high (_mtouch_sensor_init| (0+32768))
 17957  1381  0085               	movwf	5
 17958  1382  302D               	movlw	45
 17959  1383  0020               	movlb	0	; select bank0
 17960  1384  00B2               	movwf	??_MTOUCH_Sensor_InitializeAll
 17961  1385  0832               	movf	??_MTOUCH_Sensor_InitializeAll,w
 17962  1386  1903               	skipnz
 17963  1387  2B8C               	goto	l7219
 17964  1388                     u737m0:	
 17965  1388  0012               	moviw fsr0++
 17966  1389  001E               	movwi fsr1++
 17967  138A  0BB2               	decfsz	??_MTOUCH_Sensor_InitializeAll,f
 17968  138B  2B88               	goto	u737m0
 17969  138C                     l7219:	
 17970                           
 17971                           ;mtouch_sensor.c: 318: for (sensor = 0; sensor < (5u); sensor++)
 17972  138C  0020               	movlb	0	; select bank0
 17973  138D  01B3               	clrf	MTOUCH_Sensor_InitializeAll@sensor
 17974  138E                     L15:	
 17975  138E  3005               	movlw	5
 17976  138F  0233               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
 17977  1390  1803               	btfsc	3,0
 17978  1391  0008               	return
 17979                           
 17980                           ;mtouch_sensor.c: 319: {
 17981                           ;mtouch_sensor.c: 320: MTOUCH_Sensor_Initialize(sensor);
 17982  1392  0833               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
 17983  1393  3192  227D  3193   	fcall	_MTOUCH_Sensor_Initialize
 17984  1396  3001               	movlw	1
 17985  1397  0020               	movlb	0	; select bank0
 17986  1398  00B2               	movwf	??_MTOUCH_Sensor_InitializeAll
 17987  1399  0832               	movf	??_MTOUCH_Sensor_InitializeAll,w
 17988  139A  07B3               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
 17989  139B  2B8E               	goto	L15
 17990  139C                     __end_of_MTOUCH_Sensor_InitializeAll:	
 17991                           
 17992                           	psect	text55
 17993  127D                     __ptext55:	
 17994 ;; *************** function _MTOUCH_Sensor_Initialize *****************
 17995 ;; Defined at:
 17996 ;;		line 231 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;  sensor          1    wreg     enum E14537
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  sensor          1   17[BANK0 ] enum E14537
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  1    wreg      enum E14543
 18003 ;; Registers used:
 18004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;Total ram usage:        2 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    9
 18017 ;; This function calls:
 18018 ;;		_MTOUCH_Sensor_Calibrate
 18019 ;;		_MTOUCH_Sensor_Enable
 18020 ;;		_Sensor_Sampled_Reset
 18021 ;;		___bmul
 18022 ;; This function is called by:
 18023 ;;		_MTOUCH_Sensor_InitializeAll
 18024 ;; This function uses a non-reentrant model
 18025 ;;
 18026                           
 18027                           
 18028                           ;psect for function _MTOUCH_Sensor_Initialize
 18029  127D                     _MTOUCH_Sensor_Initialize:	
 18030                           
 18031                           ;incstack = 0
 18032                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 18033                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
 18034  127D  0020               	movlb	0	; select bank0
 18035  127E  00B1               	movwf	MTOUCH_Sensor_Initialize@sensor
 18036                           
 18037                           ;mtouch_sensor.c: 233: MTOUCH_Sensor_Enable(sensor);
 18038  127F  0831               	movf	MTOUCH_Sensor_Initialize@sensor,w
 18039  1280  3191  21FA  3192   	fcall	_MTOUCH_Sensor_Enable
 18040                           
 18041                           ;mtouch_sensor.c: 234: MTOUCH_Sensor_Calibrate(sensor);
 18042  1283  0020               	movlb	0	; select bank0
 18043  1284  0831               	movf	MTOUCH_Sensor_Initialize@sensor,w
 18044  1285  3191  21E6  3192   	fcall	_MTOUCH_Sensor_Calibrate
 18045                           
 18046                           ;mtouch_sensor.c: 235: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
 18047  1288  3009               	movlw	9
 18048  1289  0020               	movlb	0	; select bank0
 18049  128A  00B0               	movwf	??_MTOUCH_Sensor_Initialize
 18050  128B  0830               	movf	??_MTOUCH_Sensor_Initialize,w
 18051  128C  00AA               	movwf	___bmul@multiplicand
 18052  128D  0831               	movf	MTOUCH_Sensor_Initialize@sensor,w
 18053  128E  3191  219C  3192   	fcall	___bmul
 18054  1291  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 18055  1292  3190  2084         	fcall	_Sensor_Sampled_Reset
 18056  1294  0008               	return
 18057  1295                     __end_of_MTOUCH_Sensor_Initialize:	
 18058                           ;mtouch_sensor.c: 237: return MTOUCH_SENSOR_ERROR_none;
 18059                           ;	Return value of _MTOUCH_Sensor_Initialize is never used
 18060                           
 18061                           
 18062                           	psect	text56
 18063  1084                     __ptext56:	
 18064 ;; *************** function _Sensor_Sampled_Reset *****************
 18065 ;; Defined at:
 18066 ;;		line 944 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 18067 ;; Parameters:    Size  Location     Type
 18068 ;;  sensor          1    wreg     PTR struct .
 18069 ;;		 -> mtouch_sensor(45), 
 18070 ;; Auto vars:     Size  Location     Type
 18071 ;;  sensor          1   10[BANK0 ] PTR struct .
 18072 ;;		 -> mtouch_sensor(45), 
 18073 ;; Return value:  Size  Location     Type
 18074 ;;                  1    wreg      void 
 18075 ;; Registers used:
 18076 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;Total ram usage:        1 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    7
 18089 ;; This function calls:
 18090 ;;		Nothing
 18091 ;; This function is called by:
 18092 ;;		_MTOUCH_Sensor_Initialize
 18093 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           
 18098                           ;psect for function _Sensor_Sampled_Reset
 18099  1084                     _Sensor_Sampled_Reset:	
 18100                           
 18101                           ;incstack = 0
 18102                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 18103                           ;Sensor_Sampled_Reset@sensor stored from wreg
 18104  1084  0020               	movlb	0	; select bank0
 18105  1085  00AA               	movwf	Sensor_Sampled_Reset@sensor
 18106                           
 18107                           ;mtouch_sensor.c: 946: sensor->sampled = 0;
 18108  1086  082A               	movf	Sensor_Sampled_Reset@sensor,w
 18109  1087  3E08               	addlw	8
 18110  1088  0086               	movwf	6
 18111  1089  3001               	movlw	1	; select bank2/3
 18112  108A  0087               	movwf	7
 18113  108B  1081               	bcf	1,1
 18114  108C  0008               	return
 18115  108D                     __end_of_Sensor_Sampled_Reset:	
 18116                           
 18117                           	psect	text57
 18118  11FA                     __ptext57:	
 18119 ;; *************** function _MTOUCH_Sensor_Enable *****************
 18120 ;; Defined at:
 18121 ;;		line 818 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;  sensor          1    wreg     enum E14537
 18124 ;; Auto vars:     Size  Location     Type
 18125 ;;  sensor          1   15[BANK0 ] enum E14537
 18126 ;; Return value:  Size  Location     Type
 18127 ;;                  1    wreg      void 
 18128 ;; Registers used:
 18129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18130 ;; Tracked objects:
 18131 ;;		On entry : 0/0
 18132 ;;		On exit  : 0/0
 18133 ;;		Unchanged: 0/0
 18134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;Total ram usage:        2 bytes
 18140 ;; Hardware stack levels used:    1
 18141 ;; Hardware stack levels required when called:    8
 18142 ;; This function calls:
 18143 ;;		___bmul
 18144 ;; This function is called by:
 18145 ;;		_MTOUCH_Sensor_Initialize
 18146 ;; This function uses a non-reentrant model
 18147 ;;
 18148                           
 18149                           
 18150                           ;psect for function _MTOUCH_Sensor_Enable
 18151  11FA                     _MTOUCH_Sensor_Enable:	
 18152                           
 18153                           ;incstack = 0
 18154                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18155                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
 18156  11FA  0020               	movlb	0	; select bank0
 18157  11FB  00AF               	movwf	MTOUCH_Sensor_Enable@sensor
 18158                           
 18159                           ;mtouch_sensor.c: 820: if(sensor < (5u))
 18160  11FC  3005               	movlw	5
 18161  11FD  022F               	subwf	MTOUCH_Sensor_Enable@sensor,w
 18162  11FE  1803               	skipnc
 18163  11FF  0008               	return
 18164                           
 18165                           ;mtouch_sensor.c: 821: mtouch_sensor[sensor].enabled = 1;
 18166  1200  3009               	movlw	9
 18167  1201  00AE               	movwf	??_MTOUCH_Sensor_Enable
 18168  1202  082E               	movf	??_MTOUCH_Sensor_Enable,w
 18169  1203  00AA               	movwf	___bmul@multiplicand
 18170  1204  082F               	movf	MTOUCH_Sensor_Enable@sensor,w
 18171  1205  3191  219C         	fcall	___bmul
 18172  1207  3E08               	addlw	8
 18173  1208  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 18174  1209  0086               	movwf	6
 18175  120A  3001               	movlw	1	; select bank3/4
 18176  120B  0087               	movwf	7
 18177  120C  1401               	bsf	1,0
 18178  120D  0008               	return
 18179  120E                     __end_of_MTOUCH_Sensor_Enable:	
 18180                           
 18181                           	psect	text58
 18182  1358                     __ptext58:	
 18183 ;; *************** function _MTOUCH_Button_InitializeAll *****************
 18184 ;; Defined at:
 18185 ;;		line 198 in file "mcc_generated_files/mtouch/mtouch_button.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;		None
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;  button          1   24[BANK0 ] enum E14424
 18190 ;; Return value:  Size  Location     Type
 18191 ;;                  1    wreg      void 
 18192 ;; Registers used:
 18193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/0
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;Total ram usage:        2 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:   10
 18206 ;; This function calls:
 18207 ;;		_MTOUCH_Button_Initialize
 18208 ;; This function is called by:
 18209 ;;		_MTOUCH_Initialize
 18210 ;; This function uses a non-reentrant model
 18211 ;;
 18212                           
 18213                           
 18214                           ;psect for function _MTOUCH_Button_InitializeAll
 18215  1358                     _MTOUCH_Button_InitializeAll:	
 18216                           
 18217                           ;mtouch_button.c: 200: enum mtouch_button_names button;
 18218                           ;mtouch_button.c: 202: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_b
      +                          utton_init));
 18219                           
 18220                           ;incstack = 0
 18221                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18222  1358  309B               	movlw	155
 18223  1359  0086               	movwf	6
 18224  135A  3023               	movlw	35
 18225  135B  0087               	movwf	7
 18226  135C  3000               	movlw	low (_mtouch_button_init| (0+32768))
 18227  135D  0084               	movwf	4
 18228  135E  3090               	movlw	high (_mtouch_button_init| (0+32768))
 18229  135F  0085               	movwf	5
 18230  1360  3055               	movlw	85
 18231  1361  0020               	movlb	0	; select bank0
 18232  1362  00B7               	movwf	??_MTOUCH_Button_InitializeAll
 18233  1363  0837               	movf	??_MTOUCH_Button_InitializeAll,w
 18234  1364  1903               	skipnz
 18235  1365  2B6A               	goto	l7233
 18236  1366                     u740m0:	
 18237  1366  0012               	moviw fsr0++
 18238  1367  001E               	movwi fsr1++
 18239  1368  0BB7               	decfsz	??_MTOUCH_Button_InitializeAll,f
 18240  1369  2B66               	goto	u740m0
 18241  136A                     l7233:	
 18242                           
 18243                           ;mtouch_button.c: 204: for (button = 0; button < 5u; button++)
 18244  136A  0020               	movlb	0	; select bank0
 18245  136B  01B8               	clrf	MTOUCH_Button_InitializeAll@button
 18246  136C                     L16:	
 18247  136C  3005               	movlw	5
 18248  136D  0238               	subwf	MTOUCH_Button_InitializeAll@button,w
 18249  136E  1803               	btfsc	3,0
 18250  136F  0008               	return
 18251                           
 18252                           ;mtouch_button.c: 205: {
 18253                           ;mtouch_button.c: 206: MTOUCH_Button_Initialize(button);
 18254  1370  0838               	movf	MTOUCH_Button_InitializeAll@button,w
 18255  1371  3197  27B7  3193   	fcall	_MTOUCH_Button_Initialize
 18256  1374  3001               	movlw	1
 18257  1375  0020               	movlb	0	; select bank0
 18258  1376  00B7               	movwf	??_MTOUCH_Button_InitializeAll
 18259  1377  0837               	movf	??_MTOUCH_Button_InitializeAll,w
 18260  1378  07B8               	addwf	MTOUCH_Button_InitializeAll@button,f
 18261  1379  2B6C               	goto	L16
 18262  137A                     __end_of_MTOUCH_Button_InitializeAll:	
 18263                           
 18264                           	psect	text59
 18265  117B                     __ptext59:	
 18266 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 18267 ;; Defined at:
 18268 ;;		line 216 in file "mcc_generated_files/mtouch/mtouch_button.c"
 18269 ;; Parameters:    Size  Location     Type
 18270 ;;		None
 18271 ;; Auto vars:     Size  Location     Type
 18272 ;;  button          1   38[BANK0 ] enum E14424
 18273 ;; Return value:  Size  Location     Type
 18274 ;;                  1    wreg      void 
 18275 ;; Registers used:
 18276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18277 ;; Tracked objects:
 18278 ;;		On entry : 0/0
 18279 ;;		On exit  : 0/0
 18280 ;;		Unchanged: 0/0
 18281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18286 ;;Total ram usage:        2 bytes
 18287 ;; Hardware stack levels used:    1
 18288 ;; Hardware stack levels required when called:   12
 18289 ;; This function calls:
 18290 ;;		_Button_Service
 18291 ;; This function is called by:
 18292 ;;		_MTOUCH_Service_Mainloop
 18293 ;; This function uses a non-reentrant model
 18294 ;;
 18295                           
 18296                           
 18297                           ;psect for function _MTOUCH_Button_ServiceAll
 18298  117B                     _MTOUCH_Button_ServiceAll:	
 18299                           
 18300                           ;mtouch_button.c: 218: enum mtouch_button_names button;
 18301                           ;mtouch_button.c: 221: for (button = 0; button < 5u; button++)
 18302                           
 18303                           ;incstack = 0
 18304                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18305  117B  0020               	movlb	0	; select bank0
 18306  117C  01C6               	clrf	MTOUCH_Button_ServiceAll@button
 18307  117D                     L17:	
 18308  117D  3005               	movlw	5
 18309  117E  0246               	subwf	MTOUCH_Button_ServiceAll@button,w
 18310  117F  1803               	btfsc	3,0
 18311  1180  0008               	return
 18312                           
 18313                           ;mtouch_button.c: 222: {
 18314                           ;mtouch_button.c: 223: Button_Service(button);
 18315  1181  0846               	movf	MTOUCH_Button_ServiceAll@button,w
 18316  1182  3189  218A  3191   	fcall	_Button_Service
 18317  1185  3001               	movlw	1
 18318  1186  0020               	movlb	0	; select bank0
 18319  1187  00C5               	movwf	??_MTOUCH_Button_ServiceAll
 18320  1188  0845               	movf	??_MTOUCH_Button_ServiceAll,w
 18321  1189  07C6               	addwf	MTOUCH_Button_ServiceAll@button,f
 18322  118A  297D               	goto	L17
 18323  118B                     __end_of_MTOUCH_Button_ServiceAll:	
 18324                           
 18325                           	psect	text60
 18326  098A                     __ptext60:	
 18327 ;; *************** function _Button_Service *****************
 18328 ;; Defined at:
 18329 ;;		line 227 in file "mcc_generated_files/mtouch/mtouch_button.c"
 18330 ;; Parameters:    Size  Location     Type
 18331 ;;  name            1    wreg     enum E14424
 18332 ;; Auto vars:     Size  Location     Type
 18333 ;;  name            1   34[BANK0 ] enum E14424
 18334 ;;  button          2   35[BANK0 ] PTR struct .
 18335 ;;		 -> mtouch_button(85), 
 18336 ;; Return value:  Size  Location     Type
 18337 ;;                  1    wreg      void 
 18338 ;; Registers used:
 18339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18340 ;; Tracked objects:
 18341 ;;		On entry : 0/0
 18342 ;;		On exit  : 0/0
 18343 ;;		Unchanged: 0/0
 18344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18346 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18347 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18349 ;;Total ram usage:        7 bytes
 18350 ;; Hardware stack levels used:    1
 18351 ;; Hardware stack levels required when called:   11
 18352 ;; This function calls:
 18353 ;;		_Button_Deviation_Update
 18354 ;;		_Button_Reading_Update
 18355 ;;		_Button_State_Initializing
 18356 ;;		_Button_State_NotPressed
 18357 ;;		_Button_State_Pressed
 18358 ;;		_MTOUCH_Button_Initialize
 18359 ;;		_MTOUCH_Sensor_isCalibrated
 18360 ;;		_MTOUCH_Sensor_wasSampled
 18361 ;;		___wmul
 18362 ;; This function is called by:
 18363 ;;		_MTOUCH_Button_ServiceAll
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           
 18368                           ;psect for function _Button_Service
 18369  098A                     _Button_Service:	
 18370                           
 18371                           ;incstack = 0
 18372                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18373                           ;Button_Service@name stored from wreg
 18374  098A  0020               	movlb	0	; select bank0
 18375  098B  00C2               	movwf	Button_Service@name
 18376                           
 18377                           ;mtouch_button.c: 229: mtouch_button_t* button = &mtouch_button[name];
 18378  098C  0842               	movf	Button_Service@name,w
 18379  098D  00BE               	movwf	??_Button_Service
 18380  098E  01BF               	clrf	??_Button_Service+1
 18381  098F  083E               	movf	??_Button_Service,w
 18382  0990  00AA               	movwf	___wmul@multiplier
 18383  0991  083F               	movf	??_Button_Service+1,w
 18384  0992  00AB               	movwf	___wmul@multiplier+1
 18385  0993  3011               	movlw	17
 18386  0994  00AC               	movwf	___wmul@multiplicand
 18387  0995  3000               	movlw	0
 18388  0996  00AD               	movwf	___wmul@multiplicand+1
 18389  0997  3188  2002  3189   	fcall	___wmul
 18390  099A  309B               	movlw	155
 18391  099B  0020               	movlb	0	; select bank0
 18392  099C  00C0               	movwf	??_Button_Service+2
 18393  099D  3023               	movlw	35
 18394  099E  00C1               	movwf	??_Button_Service+3
 18395  099F  082A               	movf	?___wmul,w
 18396  09A0  0740               	addwf	??_Button_Service+2,w
 18397  09A1  00C3               	movwf	Button_Service@button
 18398  09A2  082B               	movf	?___wmul+1,w
 18399  09A3  3D41               	addwfc	??_Button_Service+3,w
 18400  09A4  00C4               	movwf	Button_Service@button+1
 18401                           
 18402                           ;mtouch_button.c: 231: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
 18403  09A5  0843               	movf	Button_Service@button,w
 18404  09A6  0086               	movwf	6
 18405  09A7  0844               	movf	Button_Service@button+1,w
 18406  09A8  0087               	movwf	7
 18407  09A9  3141               	addfsr 1,1
 18408  09AA  0801               	movf	1,w
 18409  09AB  3192  224F  3189   	fcall	_MTOUCH_Sensor_wasSampled
 18410  09AE  3A00               	xorlw	0
 18411  09AF  1903               	skipnz
 18412  09B0  0008               	return
 18413  09B1  0020               	movlb	0	; select bank0
 18414  09B2  0843               	movf	Button_Service@button,w
 18415  09B3  0086               	movwf	6
 18416  09B4  0844               	movf	Button_Service@button+1,w
 18417  09B5  0087               	movwf	7
 18418  09B6  3141               	addfsr 1,1
 18419  09B7  0801               	movf	1,w
 18420  09B8  3192  22E2  3189   	fcall	_MTOUCH_Sensor_isCalibrated
 18421  09BB  3A00               	xorlw	0
 18422  09BC  1903               	skipnz
 18423  09BD  0008               	return
 18424                           
 18425                           ;mtouch_button.c: 232: {
 18426                           ;mtouch_button.c: 233: Button_Reading_Update(button);
 18427  09BE  0020               	movlb	0	; select bank0
 18428  09BF  0844               	movf	Button_Service@button+1,w
 18429  09C0  00B7               	movwf	Button_Reading_Update@button+1
 18430  09C1  0843               	movf	Button_Service@button,w
 18431  09C2  00B6               	movwf	Button_Reading_Update@button
 18432  09C3  3191  21D2  3189   	fcall	_Button_Reading_Update
 18433                           
 18434                           ;mtouch_button.c: 234: Button_Deviation_Update(button);
 18435  09C6  0020               	movlb	0	; select bank0
 18436  09C7  0844               	movf	Button_Service@button+1,w
 18437  09C8  00AB               	movwf	Button_Deviation_Update@button+1
 18438  09C9  0843               	movf	Button_Service@button,w
 18439  09CA  00AA               	movwf	Button_Deviation_Update@button
 18440  09CB  318E  260B  3189   	fcall	_Button_Deviation_Update
 18441                           
 18442                           ;mtouch_button.c: 236: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
 18443  09CE  0020               	movlb	0	; select bank0
 18444  09CF  0843               	movf	Button_Service@button,w
 18445  09D0  0086               	movwf	6
 18446  09D1  0844               	movf	Button_Service@button+1,w
 18447  09D2  0087               	movwf	7
 18448  09D3  3142               	addfsr 1,2
 18449  09D4  3003               	movlw	3
 18450  09D5  0201               	subwf	1,w
 18451  09D6  1C03               	skipc
 18452  09D7  29E0               	goto	l7301
 18453                           
 18454                           ;mtouch_button.c: 237: {
 18455                           ;mtouch_button.c: 238: MTOUCH_Button_Initialize(button->name);
 18456  09D8  0843               	movf	Button_Service@button,w
 18457  09D9  0086               	movwf	6
 18458  09DA  0844               	movf	Button_Service@button+1,w
 18459  09DB  0087               	movwf	7
 18460  09DC  0801               	movf	1,w
 18461  09DD  3197  27B7  3189   	fcall	_MTOUCH_Button_Initialize
 18462  09E0                     l7301:	
 18463                           
 18464                           ;mtouch_button.c: 239: }
 18465                           ;mtouch_button.c: 240: Button_StateMachine[(uint8_t)button->state](button);
 18466  09E0  0020               	movlb	0	; select bank0
 18467  09E1  0844               	movf	Button_Service@button+1,w
 18468  09E2  00B9               	movwf	Button_State_Pressed@button+1
 18469  09E3  0843               	movf	Button_Service@button,w
 18470  09E4  00B8               	movwf	Button_State_Pressed@button
 18471  09E5  0843               	movf	Button_Service@button,w
 18472  09E6  0086               	movwf	6
 18473  09E7  0844               	movf	Button_Service@button+1,w
 18474  09E8  0087               	movwf	7
 18475  09E9  3142               	addfsr 1,2
 18476  09EA  3501               	lslf	1,w
 18477  09EB  3E65               	addlw	(low (_Button_StateMachine| (0+256)))& (0+255)
 18478  09EC  0086               	movwf	6
 18479  09ED  3001               	movlw	1	; select bank2/3
 18480  09EE  0087               	movwf	7
 18481  09EF  3F41               	moviw [1]fsr1
 18482  09F0  008A               	movwf	10
 18483  09F1  3F40               	moviw [0]fsr1
 18484  09F2  000A               	callw
 18485  09F3  3189               	pagesel	$
 18486  09F4  0008               	return
 18487  09F5                     __end_of_Button_Service:	
 18488                           
 18489                           	psect	text61
 18490  124F                     __ptext61:	
 18491 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 18492 ;; Defined at:
 18493 ;;		line 936 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 18494 ;; Parameters:    Size  Location     Type
 18495 ;;  sensor          1    wreg     enum E14537
 18496 ;; Auto vars:     Size  Location     Type
 18497 ;;  sensor          1   15[BANK0 ] enum E14537
 18498 ;; Return value:  Size  Location     Type
 18499 ;;                  1    wreg      unsigned char 
 18500 ;; Registers used:
 18501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18502 ;; Tracked objects:
 18503 ;;		On entry : 0/0
 18504 ;;		On exit  : 0/0
 18505 ;;		Unchanged: 0/0
 18506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18511 ;;Total ram usage:        2 bytes
 18512 ;; Hardware stack levels used:    1
 18513 ;; Hardware stack levels required when called:    8
 18514 ;; This function calls:
 18515 ;;		___bmul
 18516 ;; This function is called by:
 18517 ;;		_Button_Service
 18518 ;;		_MTOUCH_Sensor_isSamplingComplete
 18519 ;;		_Sensor_scheduleNextScan
 18520 ;; This function uses a non-reentrant model
 18521 ;;
 18522                           
 18523                           
 18524                           ;psect for function _MTOUCH_Sensor_wasSampled
 18525  124F                     _MTOUCH_Sensor_wasSampled:	
 18526                           
 18527                           ;incstack = 0
 18528                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 18529                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 18530  124F  0020               	movlb	0	; select bank0
 18531  1250  00AF               	movwf	MTOUCH_Sensor_wasSampled@sensor
 18532                           
 18533                           ;mtouch_sensor.c: 938: if(sensor < (5u))
 18534  1251  3005               	movlw	5
 18535  1252  022F               	subwf	MTOUCH_Sensor_wasSampled@sensor,w
 18536  1253  1803               	skipnc
 18537  1254  2A64               	goto	l6727
 18538                           
 18539                           ;mtouch_sensor.c: 939: return (bool)mtouch_sensor[sensor].sampled;
 18540  1255  3009               	movlw	9
 18541  1256  00AE               	movwf	??_MTOUCH_Sensor_wasSampled
 18542  1257  082E               	movf	??_MTOUCH_Sensor_wasSampled,w
 18543  1258  00AA               	movwf	___bmul@multiplicand
 18544  1259  082F               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 18545  125A  3191  219C         	fcall	___bmul
 18546  125C  3E08               	addlw	8
 18547  125D  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 18548  125E  0086               	movwf	6
 18549  125F  3001               	movlw	1	; select bank3/4
 18550  1260  0087               	movwf	7
 18551  1261  0C01               	rrf	1,w
 18552  1262  3901               	andlw	1
 18553  1263  0008               	return
 18554  1264                     l6727:	
 18555                           
 18556                           ;mtouch_sensor.c: 940: else
 18557                           ;mtouch_sensor.c: 941: return 0;
 18558  1264  3000               	movlw	0
 18559  1265  0008               	return
 18560  1266                     __end_of_MTOUCH_Sensor_wasSampled:	
 18561                           
 18562                           	psect	text62
 18563  12E2                     __ptext62:	
 18564 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 18565 ;; Defined at:
 18566 ;;		line 888 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 18567 ;; Parameters:    Size  Location     Type
 18568 ;;  sensor          1    wreg     enum E14537
 18569 ;; Auto vars:     Size  Location     Type
 18570 ;;  sensor          1   16[BANK0 ] enum E14537
 18571 ;; Return value:  Size  Location     Type
 18572 ;;                  1    wreg      unsigned char 
 18573 ;; Registers used:
 18574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18575 ;; Tracked objects:
 18576 ;;		On entry : 0/0
 18577 ;;		On exit  : 0/0
 18578 ;;		Unchanged: 0/0
 18579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18582 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18583 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;Total ram usage:        3 bytes
 18585 ;; Hardware stack levels used:    1
 18586 ;; Hardware stack levels required when called:    8
 18587 ;; This function calls:
 18588 ;;		___bmul
 18589 ;; This function is called by:
 18590 ;;		_Button_Service
 18591 ;; This function uses a non-reentrant model
 18592 ;;
 18593                           
 18594                           
 18595                           ;psect for function _MTOUCH_Sensor_isCalibrated
 18596  12E2                     _MTOUCH_Sensor_isCalibrated:	
 18597                           
 18598                           ;incstack = 0
 18599                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18600                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 18601  12E2  0020               	movlb	0	; select bank0
 18602  12E3  00B0               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 18603                           
 18604                           ;mtouch_sensor.c: 890: if(sensor < (5u))
 18605  12E4  3005               	movlw	5
 18606  12E5  0230               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 18607  12E6  1803               	skipnc
 18608  12E7  2AFB               	goto	l6893
 18609                           
 18610                           ;mtouch_sensor.c: 891: return (bool)mtouch_sensor[sensor].calibrated;
 18611  12E8  3009               	movlw	9
 18612  12E9  00AE               	movwf	??_MTOUCH_Sensor_isCalibrated
 18613  12EA  082E               	movf	??_MTOUCH_Sensor_isCalibrated,w
 18614  12EB  00AA               	movwf	___bmul@multiplicand
 18615  12EC  0830               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 18616  12ED  3191  219C         	fcall	___bmul
 18617  12EF  3E08               	addlw	8
 18618  12F0  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 18619  12F1  0086               	movwf	6
 18620  12F2  3001               	movlw	1	; select bank3/4
 18621  12F3  0087               	movwf	7
 18622  12F4  0C01               	rrf	1,w
 18623  12F5  0020               	movlb	0	; select bank0
 18624  12F6  00AF               	movwf	??_MTOUCH_Sensor_isCalibrated+1
 18625  12F7  0CAF               	rrf	??_MTOUCH_Sensor_isCalibrated+1,f
 18626  12F8  0C2F               	rrf	??_MTOUCH_Sensor_isCalibrated+1,w
 18627  12F9  3901               	andlw	1
 18628  12FA  0008               	return
 18629  12FB                     l6893:	
 18630                           
 18631                           ;mtouch_sensor.c: 892: else
 18632                           ;mtouch_sensor.c: 893: return 0;
 18633  12FB  3000               	movlw	0
 18634  12FC  0008               	return
 18635  12FD                     __end_of_MTOUCH_Sensor_isCalibrated:	
 18636                           
 18637                           	psect	text63
 18638  074C                     __ptext63:	
 18639 ;; *************** function _Button_State_NotPressed *****************
 18640 ;; Defined at:
 18641 ;;		line 264 in file "mcc_generated_files/mtouch/mtouch_button.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  button          2   24[BANK0 ] PTR struct .
 18644 ;;		 -> mtouch_button(85), 
 18645 ;; Auto vars:     Size  Location     Type
 18646 ;;		None
 18647 ;; Return value:  Size  Location     Type
 18648 ;;                  1    wreg      void 
 18649 ;; Registers used:
 18650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18651 ;; Tracked objects:
 18652 ;;		On entry : 0/0
 18653 ;;		On exit  : 0/0
 18654 ;;		Unchanged: 0/0
 18655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18659 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18660 ;;Total ram usage:        4 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:   10
 18663 ;; This function calls:
 18664 ;;		_Button_Baseline_Update
 18665 ;;		_Button_DefaultCallback
 18666 ;;		_MTOUCH_Button_Initialize
 18667 ;; This function is called by:
 18668 ;;		_Button_Service
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           
 18673                           ;psect for function _Button_State_NotPressed
 18674  074C                     _Button_State_NotPressed:	
 18675                           
 18676                           ;mtouch_button.c: 267: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
 18677                           
 18678                           ;incstack = 0
 18679                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18680  074C  0020               	movlb	0	; select bank0
 18681  074D  0838               	movf	Button_State_NotPressed@button,w
 18682  074E  0086               	movwf	6
 18683  074F  0839               	movf	Button_State_NotPressed@button+1,w
 18684  0750  0087               	movwf	7
 18685  0751  3149               	addfsr 1,9
 18686  0752  0801               	movf	1,w
 18687  0753  3A80               	xorlw	128
 18688  0754  00BA               	movwf	??_Button_State_NotPressed
 18689  0755  0838               	movf	Button_State_NotPressed@button,w
 18690  0756  0086               	movwf	6
 18691  0757  0839               	movf	Button_State_NotPressed@button+1,w
 18692  0758  0087               	movwf	7
 18693  0759  314E               	addfsr 1,14
 18694  075A  0301               	decf	1,w
 18695  075B  3AFF               	xorlw	255
 18696  075C  3A80               	xorlw	128
 18697  075D  02BA               	subwf	??_Button_State_NotPressed,f
 18698  075E  1803               	skipnc
 18699  075F  2F8B               	goto	l6943
 18700                           
 18701                           ;mtouch_button.c: 268: {
 18702                           ;mtouch_button.c: 269: (button->counter)++;
 18703  0760  0838               	movf	Button_State_NotPressed@button,w
 18704  0761  0086               	movwf	6
 18705  0762  0839               	movf	Button_State_NotPressed@button+1,w
 18706  0763  0087               	movwf	7
 18707  0764  314A               	addfsr 1,10
 18708  0765  3001               	movlw	1
 18709  0766  0781               	addwf	1,f
 18710  0767  3141               	addfsr 1,1
 18711  0768  1803               	skipnc
 18712  0769  0A81               	incf	1,f
 18713                           
 18714                           ;mtouch_button.c: 270: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64u))
 18715  076A  0838               	movf	Button_State_NotPressed@button,w
 18716  076B  0086               	movwf	6
 18717  076C  0839               	movf	Button_State_NotPressed@button+1,w
 18718  076D  0087               	movwf	7
 18719  076E  314A               	addfsr 1,10
 18720  076F  3F40               	moviw [0]fsr1
 18721  0770  00BA               	movwf	??_Button_State_NotPressed
 18722  0771  3F41               	moviw [1]fsr1
 18723  0772  00BB               	movwf	??_Button_State_NotPressed+1
 18724  0773  3000               	movlw	0
 18725  0774  023B               	subwf	??_Button_State_NotPressed+1,w
 18726  0775  3041               	movlw	65
 18727  0776  1903               	skipnz
 18728  0777  023A               	subwf	??_Button_State_NotPressed,w
 18729  0778  1C03               	skipc
 18730  0779  2FD1               	goto	l6953
 18731                           
 18732                           ;mtouch_button.c: 271: {
 18733                           ;mtouch_button.c: 272: button->counter = (mtouch_button_statecounter_t)0;
 18734  077A  0838               	movf	Button_State_NotPressed@button,w
 18735  077B  0086               	movwf	6
 18736  077C  0839               	movf	Button_State_NotPressed@button+1,w
 18737  077D  0087               	movwf	7
 18738  077E  314A               	addfsr 1,10
 18739  077F  3000               	movlw	0
 18740  0780  3FC0               	movwi [0]fsr1
 18741  0781  3FC1               	movwi [1]fsr1
 18742                           
 18743                           ;mtouch_button.c: 273: MTOUCH_Button_Initialize(button->name);
 18744  0782  0838               	movf	Button_State_NotPressed@button,w
 18745  0783  0086               	movwf	6
 18746  0784  0839               	movf	Button_State_NotPressed@button+1,w
 18747  0785  0087               	movwf	7
 18748  0786  0801               	movf	1,w
 18749  0787  3197  27B7  3187   	fcall	_MTOUCH_Button_Initialize
 18750                           
 18751                           ;mtouch_button.c: 274: }
 18752                           ;mtouch_button.c: 275: }
 18753  078A  2FD1               	goto	l6953
 18754  078B                     l6943:	
 18755                           
 18756                           ;mtouch_button.c: 277: else if ((button->deviation) > (button->threshold))
 18757  078B  0020               	movlb	0	; select bank0
 18758  078C  0838               	movf	Button_State_NotPressed@button,w
 18759  078D  0086               	movwf	6
 18760  078E  0839               	movf	Button_State_NotPressed@button+1,w
 18761  078F  0087               	movwf	7
 18762  0790  3149               	addfsr 1,9
 18763  0791  0801               	movf	1,w
 18764  0792  00BA               	movwf	??_Button_State_NotPressed
 18765  0793  01BB               	clrf	??_Button_State_NotPressed+1
 18766  0794  1BBA               	btfsc	??_Button_State_NotPressed,7
 18767  0795  03BB               	decf	??_Button_State_NotPressed+1,f
 18768  0796  0838               	movf	Button_State_NotPressed@button,w
 18769  0797  0086               	movwf	6
 18770  0798  0839               	movf	Button_State_NotPressed@button+1,w
 18771  0799  0087               	movwf	7
 18772  079A  314E               	addfsr 1,14
 18773  079B  083B               	movf	??_Button_State_NotPressed+1,w
 18774  079C  3A80               	xorlw	128
 18775  079D  3C80               	sublw	128
 18776  079E  1D03               	skipz
 18777  079F  2FA2               	goto	u6905
 18778  07A0  083A               	movf	??_Button_State_NotPressed,w
 18779  07A1  0201               	subwf	1,w
 18780  07A2                     u6905:	
 18781  07A2  1803               	skipnc
 18782  07A3  2FC8               	goto	l6951
 18783                           
 18784                           ;mtouch_button.c: 278: {
 18785                           ;mtouch_button.c: 280: button->state = MTOUCH_BUTTON_STATE_pressed;
 18786  07A4  0020               	movlb	0	; select bank0
 18787  07A5  0838               	movf	Button_State_NotPressed@button,w
 18788  07A6  3E02               	addlw	2
 18789  07A7  00BA               	movwf	??_Button_State_NotPressed
 18790  07A8  3000               	movlw	0
 18791  07A9  3D39               	addwfc	Button_State_NotPressed@button+1,w
 18792  07AA  00BB               	movwf	??_Button_State_NotPressed+1
 18793  07AB  083A               	movf	??_Button_State_NotPressed,w
 18794  07AC  0086               	movwf	6
 18795  07AD  083B               	movf	??_Button_State_NotPressed+1,w
 18796  07AE  0087               	movwf	7
 18797  07AF  3002               	movlw	2
 18798  07B0  0081               	movwf	1
 18799                           
 18800                           ;mtouch_button.c: 281: button->counter = (mtouch_button_statecounter_t)0;
 18801  07B1  0838               	movf	Button_State_NotPressed@button,w
 18802  07B2  0086               	movwf	6
 18803  07B3  0839               	movf	Button_State_NotPressed@button+1,w
 18804  07B4  0087               	movwf	7
 18805  07B5  314A               	addfsr 1,10
 18806  07B6  3000               	movlw	0
 18807  07B7  3FC0               	movwi [0]fsr1
 18808  07B8  3FC1               	movwi [1]fsr1
 18809                           
 18810                           ;mtouch_button.c: 282: callback_pressed(button->name);
 18811  07B9  0838               	movf	Button_State_NotPressed@button,w
 18812  07BA  0086               	movwf	6
 18813  07BB  0839               	movf	Button_State_NotPressed@button+1,w
 18814  07BC  0087               	movwf	7
 18815  07BD  0801               	movf	1,w
 18816  07BE  00BA               	movwf	??_Button_State_NotPressed
 18817  07BF  083A               	movf	??_Button_State_NotPressed,w
 18818  07C0  00AA               	movwf	Button_DefaultCallback@button
 18819  07C1  0021               	movlb	1	; select bank1
 18820  07C2  086E               	movf	(_callback_pressed+1)^(0+128),w
 18821  07C3  008A               	movwf	10
 18822  07C4  086D               	movf	_callback_pressed^(0+128),w
 18823  07C5  000A               	callw
 18824  07C6  3187               	pagesel	$
 18825                           
 18826                           ;mtouch_button.c: 283: }
 18827  07C7  2FD1               	goto	l6953
 18828  07C8                     l6951:	
 18829                           
 18830                           ;mtouch_button.c: 284: else
 18831                           ;mtouch_button.c: 285: {
 18832                           ;mtouch_button.c: 287: button->counter = (mtouch_button_statecounter_t)0;
 18833  07C8  0020               	movlb	0	; select bank0
 18834  07C9  0838               	movf	Button_State_NotPressed@button,w
 18835  07CA  0086               	movwf	6
 18836  07CB  0839               	movf	Button_State_NotPressed@button+1,w
 18837  07CC  0087               	movwf	7
 18838  07CD  314A               	addfsr 1,10
 18839  07CE  3000               	movlw	0
 18840  07CF  3FC0               	movwi [0]fsr1
 18841  07D0  3FC1               	movwi [1]fsr1
 18842  07D1                     l6953:	
 18843                           
 18844                           ;mtouch_button.c: 288: }
 18845                           ;mtouch_button.c: 292: (button->baseline_count)++;
 18846  07D1  0020               	movlb	0	; select bank0
 18847  07D2  0838               	movf	Button_State_NotPressed@button,w
 18848  07D3  0086               	movwf	6
 18849  07D4  0839               	movf	Button_State_NotPressed@button+1,w
 18850  07D5  0087               	movwf	7
 18851  07D6  314C               	addfsr 1,12
 18852  07D7  3001               	movlw	1
 18853  07D8  0781               	addwf	1,f
 18854  07D9  3141               	addfsr 1,1
 18855  07DA  1803               	skipnc
 18856  07DB  0A81               	incf	1,f
 18857                           
 18858                           ;mtouch_button.c: 293: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64u))
 18859  07DC  0838               	movf	Button_State_NotPressed@button,w
 18860  07DD  0086               	movwf	6
 18861  07DE  0839               	movf	Button_State_NotPressed@button+1,w
 18862  07DF  0087               	movwf	7
 18863  07E0  314C               	addfsr 1,12
 18864  07E1  0016               	moviw fsr1++
 18865  07E2  3A40               	xorlw	64
 18866  07E3  00BA               	movwf	??_Button_State_NotPressed
 18867  07E4  0016               	moviw fsr1++
 18868  07E5  04BA               	iorwf	??_Button_State_NotPressed,f
 18869  07E6  1D03               	btfss	3,2
 18870  07E7  0008               	return
 18871                           
 18872                           ;mtouch_button.c: 294: {
 18873                           ;mtouch_button.c: 295: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 18874  07E8  0838               	movf	Button_State_NotPressed@button,w
 18875  07E9  0086               	movwf	6
 18876  07EA  0839               	movf	Button_State_NotPressed@button+1,w
 18877  07EB  0087               	movwf	7
 18878  07EC  314C               	addfsr 1,12
 18879  07ED  3000               	movlw	0
 18880  07EE  3FC0               	movwi [0]fsr1
 18881  07EF  3FC1               	movwi [1]fsr1
 18882                           
 18883                           ;mtouch_button.c: 296: Button_Baseline_Update(button);
 18884  07F0  0839               	movf	Button_State_NotPressed@button+1,w
 18885  07F1  00AB               	movwf	Button_Baseline_Update@button+1
 18886  07F2  0838               	movf	Button_State_NotPressed@button,w
 18887  07F3  00AA               	movwf	Button_Baseline_Update@button
 18888  07F4  318C  24E9         	fcall	_Button_Baseline_Update
 18889  07F6  0008               	return
 18890  07F7                     __end_of_Button_State_NotPressed:	
 18891                           
 18892                           	psect	text64
 18893  0A62                     __ptext64:	
 18894 ;; *************** function _Button_State_Initializing *****************
 18895 ;; Defined at:
 18896 ;;		line 244 in file "mcc_generated_files/mtouch/mtouch_button.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;  button          2   24[BANK0 ] PTR struct .
 18899 ;;		 -> mtouch_button(85), 
 18900 ;; Auto vars:     Size  Location     Type
 18901 ;;		None
 18902 ;; Return value:  Size  Location     Type
 18903 ;;                  1    wreg      void 
 18904 ;; Registers used:
 18905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18906 ;; Tracked objects:
 18907 ;;		On entry : 0/0
 18908 ;;		On exit  : 0/0
 18909 ;;		Unchanged: 0/0
 18910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18911 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;Total ram usage:        6 bytes
 18916 ;; Hardware stack levels used:    1
 18917 ;; Hardware stack levels required when called:   10
 18918 ;; This function calls:
 18919 ;;		_Button_Baseline_Initialize
 18920 ;;		_Button_Baseline_Update
 18921 ;; This function is called by:
 18922 ;;		_Button_Service
 18923 ;; This function uses a non-reentrant model
 18924 ;;
 18925                           
 18926                           
 18927                           ;psect for function _Button_State_Initializing
 18928  0A62                     _Button_State_Initializing:	
 18929                           
 18930                           ;mtouch_button.c: 247: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16u)/2)
 18931                           
 18932                           ;incstack = 0
 18933                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 18934  0A62  0020               	movlb	0	; select bank0
 18935  0A63  0838               	movf	Button_State_Initializing@button,w
 18936  0A64  0086               	movwf	6
 18937  0A65  0839               	movf	Button_State_Initializing@button+1,w
 18938  0A66  0087               	movwf	7
 18939  0A67  314A               	addfsr 1,10
 18940  0A68  3F40               	moviw [0]fsr1
 18941  0A69  00BA               	movwf	??_Button_State_Initializing
 18942  0A6A  3F41               	moviw [1]fsr1
 18943  0A6B  00BB               	movwf	??_Button_State_Initializing+1
 18944  0A6C  3000               	movlw	0
 18945  0A6D  023B               	subwf	??_Button_State_Initializing+1,w
 18946  0A6E  3009               	movlw	9
 18947  0A6F  1903               	skipnz
 18948  0A70  023A               	subwf	??_Button_State_Initializing,w
 18949  0A71  1803               	skipnc
 18950  0A72  2A7B               	goto	l6923
 18951                           
 18952                           ;mtouch_button.c: 248: {
 18953                           ;mtouch_button.c: 249: Button_Baseline_Initialize(button);
 18954  0A73  0839               	movf	Button_State_Initializing@button+1,w
 18955  0A74  00B3               	movwf	Button_Baseline_Initialize@button+1
 18956  0A75  0838               	movf	Button_State_Initializing@button,w
 18957  0A76  00B2               	movwf	Button_Baseline_Initialize@button
 18958  0A77  3195  257D  318A   	fcall	_Button_Baseline_Initialize
 18959                           
 18960                           ;mtouch_button.c: 250: } else {
 18961  0A7A  2A83               	goto	l6925
 18962  0A7B                     l6923:	
 18963                           
 18964                           ;mtouch_button.c: 251: Button_Baseline_Update(button);
 18965  0A7B  0020               	movlb	0	; select bank0
 18966  0A7C  0839               	movf	Button_State_Initializing@button+1,w
 18967  0A7D  00AB               	movwf	Button_Baseline_Update@button+1
 18968  0A7E  0838               	movf	Button_State_Initializing@button,w
 18969  0A7F  00AA               	movwf	Button_Baseline_Update@button
 18970  0A80  318C  24E9  318A   	fcall	_Button_Baseline_Update
 18971  0A83                     l6925:	
 18972                           
 18973                           ;mtouch_button.c: 252: }
 18974                           ;mtouch_button.c: 255: (button->counter)++;
 18975  0A83  0020               	movlb	0	; select bank0
 18976  0A84  0838               	movf	Button_State_Initializing@button,w
 18977  0A85  0086               	movwf	6
 18978  0A86  0839               	movf	Button_State_Initializing@button+1,w
 18979  0A87  0087               	movwf	7
 18980  0A88  314A               	addfsr 1,10
 18981  0A89  3001               	movlw	1
 18982  0A8A  0781               	addwf	1,f
 18983  0A8B  3141               	addfsr 1,1
 18984  0A8C  1803               	skipnc
 18985  0A8D  0A81               	incf	1,f
 18986                           
 18987                           ;mtouch_button.c: 256: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16u))
 18988  0A8E  0838               	movf	Button_State_Initializing@button,w
 18989  0A8F  0086               	movwf	6
 18990  0A90  0839               	movf	Button_State_Initializing@button+1,w
 18991  0A91  0087               	movwf	7
 18992  0A92  314A               	addfsr 1,10
 18993  0A93  3F40               	moviw [0]fsr1
 18994  0A94  00BA               	movwf	??_Button_State_Initializing
 18995  0A95  3F41               	moviw [1]fsr1
 18996  0A96  00BB               	movwf	??_Button_State_Initializing+1
 18997  0A97  3000               	movlw	0
 18998  0A98  023B               	subwf	??_Button_State_Initializing+1,w
 18999  0A99  3010               	movlw	16
 19000  0A9A  1903               	skipnz
 19001  0A9B  023A               	subwf	??_Button_State_Initializing,w
 19002  0A9C  1C03               	skipc
 19003  0A9D  0008               	return
 19004                           
 19005                           ;mtouch_button.c: 257: {
 19006                           ;mtouch_button.c: 258: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4u));
 19007  0A9E  0838               	movf	Button_State_Initializing@button,w
 19008  0A9F  0086               	movwf	6
 19009  0AA0  0839               	movf	Button_State_Initializing@button+1,w
 19010  0AA1  0087               	movwf	7
 19011  0AA2  3145               	addfsr 1,5
 19012  0AA3  3F40               	moviw [0]fsr1
 19013  0AA4  00BA               	movwf	??_Button_State_Initializing
 19014  0AA5  3F41               	moviw [1]fsr1
 19015  0AA6  00BB               	movwf	??_Button_State_Initializing+1
 19016  0AA7  3F42               	moviw [2]fsr1
 19017  0AA8  00BC               	movwf	??_Button_State_Initializing+2
 19018  0AA9  3F43               	moviw [3]fsr1
 19019  0AAA  00BD               	movwf	??_Button_State_Initializing+3
 19020  0AAB  3004               	movlw	4
 19021  0AAC                     u6875:	
 19022  0AAC  36BD               	lsrf	??_Button_State_Initializing+3,f
 19023  0AAD  0CBC               	rrf	??_Button_State_Initializing+2,f
 19024  0AAE  0CBB               	rrf	??_Button_State_Initializing+1,f
 19025  0AAF  0CBA               	rrf	??_Button_State_Initializing,f
 19026  0AB0  0B89               	decfsz	9,f
 19027  0AB1  2AAC               	goto	u6875
 19028  0AB2  0838               	movf	Button_State_Initializing@button,w
 19029  0AB3  0086               	movwf	6
 19030  0AB4  0839               	movf	Button_State_Initializing@button+1,w
 19031  0AB5  0087               	movwf	7
 19032  0AB6  3143               	addfsr 1,3
 19033  0AB7  083A               	movf	??_Button_State_Initializing,w
 19034  0AB8  3FC0               	movwi [0]fsr1
 19035  0AB9  083B               	movf	??_Button_State_Initializing+1,w
 19036  0ABA  3FC1               	movwi [1]fsr1
 19037                           
 19038                           ;mtouch_button.c: 259: button->state = MTOUCH_BUTTON_STATE_notPressed;
 19039  0ABB  0838               	movf	Button_State_Initializing@button,w
 19040  0ABC  3E02               	addlw	2
 19041  0ABD  00BA               	movwf	??_Button_State_Initializing
 19042  0ABE  3000               	movlw	0
 19043  0ABF  3D39               	addwfc	Button_State_Initializing@button+1,w
 19044  0AC0  00BB               	movwf	??_Button_State_Initializing+1
 19045  0AC1  083A               	movf	??_Button_State_Initializing,w
 19046  0AC2  0086               	movwf	6
 19047  0AC3  083B               	movf	??_Button_State_Initializing+1,w
 19048  0AC4  0087               	movwf	7
 19049  0AC5  3001               	movlw	1
 19050  0AC6  0081               	movwf	1
 19051                           
 19052                           ;mtouch_button.c: 260: button->counter = (mtouch_button_statecounter_t)0;
 19053  0AC7  0838               	movf	Button_State_Initializing@button,w
 19054  0AC8  0086               	movwf	6
 19055  0AC9  0839               	movf	Button_State_Initializing@button+1,w
 19056  0ACA  0087               	movwf	7
 19057  0ACB  314A               	addfsr 1,10
 19058  0ACC  3000               	movlw	0
 19059  0ACD  3FC0               	movwi [0]fsr1
 19060  0ACE  3FC1               	movwi [1]fsr1
 19061  0ACF  0008               	return
 19062  0AD0                     __end_of_Button_State_Initializing:	
 19063                           
 19064                           	psect	text65
 19065  0AD0                     __ptext65:	
 19066 ;; *************** function _Button_State_Pressed *****************
 19067 ;; Defined at:
 19068 ;;		line 300 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19069 ;; Parameters:    Size  Location     Type
 19070 ;;  button          2   24[BANK0 ] PTR struct .
 19071 ;;		 -> mtouch_button(85), 
 19072 ;; Auto vars:     Size  Location     Type
 19073 ;;		None
 19074 ;; Return value:  Size  Location     Type
 19075 ;;                  1    wreg      void 
 19076 ;; Registers used:
 19077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19078 ;; Tracked objects:
 19079 ;;		On entry : 0/0
 19080 ;;		On exit  : 0/0
 19081 ;;		Unchanged: 0/0
 19082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19083 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;Total ram usage:        4 bytes
 19088 ;; Hardware stack levels used:    1
 19089 ;; Hardware stack levels required when called:   10
 19090 ;; This function calls:
 19091 ;;		_Button_DefaultCallback
 19092 ;;		_MTOUCH_Button_Initialize
 19093 ;; This function is called by:
 19094 ;;		_Button_Service
 19095 ;; This function uses a non-reentrant model
 19096 ;;
 19097                           
 19098                           
 19099                           ;psect for function _Button_State_Pressed
 19100  0AD0                     _Button_State_Pressed:	
 19101                           
 19102                           ;mtouch_button.c: 303: if ((button->counter) >= ((mtouch_button_statecounter_t)1000u))
 19103                           
 19104                           ;incstack = 0
 19105                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19106  0AD0  0020               	movlb	0	; select bank0
 19107  0AD1  0838               	movf	Button_State_Pressed@button,w
 19108  0AD2  0086               	movwf	6
 19109  0AD3  0839               	movf	Button_State_Pressed@button+1,w
 19110  0AD4  0087               	movwf	7
 19111  0AD5  314A               	addfsr 1,10
 19112  0AD6  3F40               	moviw [0]fsr1
 19113  0AD7  00BA               	movwf	??_Button_State_Pressed
 19114  0AD8  3F41               	moviw [1]fsr1
 19115  0AD9  00BB               	movwf	??_Button_State_Pressed+1
 19116  0ADA  3003               	movlw	3
 19117  0ADB  023B               	subwf	??_Button_State_Pressed+1,w
 19118  0ADC  30E8               	movlw	232
 19119  0ADD  1903               	skipnz
 19120  0ADE  023A               	subwf	??_Button_State_Pressed,w
 19121  0ADF  1C03               	skipc
 19122  0AE0  2AF9               	goto	l6965
 19123                           
 19124                           ;mtouch_button.c: 304: {
 19125                           ;mtouch_button.c: 305: MTOUCH_Button_Initialize(button->name);
 19126  0AE1  0838               	movf	Button_State_Pressed@button,w
 19127  0AE2  0086               	movwf	6
 19128  0AE3  0839               	movf	Button_State_Pressed@button+1,w
 19129  0AE4  0087               	movwf	7
 19130  0AE5  0801               	movf	1,w
 19131  0AE6  3197  27B7  318A   	fcall	_MTOUCH_Button_Initialize
 19132                           
 19133                           ;mtouch_button.c: 306: callback_notPressed(button->name);
 19134  0AE9  0020               	movlb	0	; select bank0
 19135  0AEA  0838               	movf	Button_State_Pressed@button,w
 19136  0AEB  0086               	movwf	6
 19137  0AEC  0839               	movf	Button_State_Pressed@button+1,w
 19138  0AED  0087               	movwf	7
 19139  0AEE  0801               	movf	1,w
 19140  0AEF  00BA               	movwf	??_Button_State_Pressed
 19141  0AF0  083A               	movf	??_Button_State_Pressed,w
 19142  0AF1  00AA               	movwf	Button_DefaultCallback@button
 19143  0AF2  0021               	movlb	1	; select bank1
 19144  0AF3  086C               	movf	(_callback_notPressed+1)^(0+128),w
 19145  0AF4  008A               	movwf	10
 19146  0AF5  086B               	movf	_callback_notPressed^(0+128),w
 19147  0AF6  000A               	callw
 19148  0AF7  318A               	pagesel	$
 19149                           
 19150                           ;mtouch_button.c: 307: }
 19151  0AF8  0008               	return
 19152  0AF9                     l6965:	
 19153                           
 19154                           ;mtouch_button.c: 310: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)-((button->threshold) >> button->hysteresis)))
 19155  0AF9  0020               	movlb	0	; select bank0
 19156  0AFA  0838               	movf	Button_State_Pressed@button,w
 19157  0AFB  0086               	movwf	6
 19158  0AFC  0839               	movf	Button_State_Pressed@button+1,w
 19159  0AFD  0087               	movwf	7
 19160  0AFE  3149               	addfsr 1,9
 19161  0AFF  0801               	movf	1,w
 19162  0B00  3A80               	xorlw	128
 19163  0B01  00BA               	movwf	??_Button_State_Pressed
 19164  0B02  0838               	movf	Button_State_Pressed@button,w
 19165  0B03  0086               	movwf	6
 19166  0B04  0839               	movf	Button_State_Pressed@button+1,w
 19167  0B05  0087               	movwf	7
 19168  0B06  314E               	addfsr 1,14
 19169  0B07  0838               	movf	Button_State_Pressed@button,w
 19170  0B08  0084               	movwf	4
 19171  0B09  0839               	movf	Button_State_Pressed@button+1,w
 19172  0B0A  0085               	movwf	5
 19173  0B0B  310E               	addfsr 0,14
 19174  0B0C  0800               	movf	0,w
 19175  0B0D  00BB               	movwf	??_Button_State_Pressed+1
 19176  0B0E  0838               	movf	Button_State_Pressed@button,w
 19177  0B0F  0084               	movwf	4
 19178  0B10  0839               	movf	Button_State_Pressed@button+1,w
 19179  0B11  0085               	movwf	5
 19180  0B12  3110               	addfsr 0,16
 19181  0B13  0A00               	incf	0,w
 19182  0B14  2B16               	goto	u6934
 19183  0B15                     u6935:	
 19184  0B15  36BB               	lsrf	??_Button_State_Pressed+1,f
 19185  0B16                     u6934:	
 19186  0B16  0B89               	decfsz	9,f
 19187  0B17  2B15               	goto	u6935
 19188  0B18  083B               	movf	??_Button_State_Pressed+1,w
 19189  0B19  3AFF               	xorlw	255
 19190  0B1A  3E01               	addlw	1
 19191  0B1B  0701               	addwf	1,w
 19192  0B1C  3A80               	xorlw	128
 19193  0B1D  02BA               	subwf	??_Button_State_Pressed,f
 19194  0B1E  1803               	skipnc
 19195  0B1F  0008               	return
 19196                           
 19197                           ;mtouch_button.c: 311: {
 19198                           ;mtouch_button.c: 312: button->state = MTOUCH_BUTTON_STATE_notPressed;
 19199  0B20  0838               	movf	Button_State_Pressed@button,w
 19200  0B21  3E02               	addlw	2
 19201  0B22  00BA               	movwf	??_Button_State_Pressed
 19202  0B23  3000               	movlw	0
 19203  0B24  3D39               	addwfc	Button_State_Pressed@button+1,w
 19204  0B25  00BB               	movwf	??_Button_State_Pressed+1
 19205  0B26  083A               	movf	??_Button_State_Pressed,w
 19206  0B27  0086               	movwf	6
 19207  0B28  083B               	movf	??_Button_State_Pressed+1,w
 19208  0B29  0087               	movwf	7
 19209  0B2A  3001               	movlw	1
 19210  0B2B  0081               	movwf	1
 19211                           
 19212                           ;mtouch_button.c: 313: button->counter = (mtouch_button_statecounter_t)0;
 19213  0B2C  0838               	movf	Button_State_Pressed@button,w
 19214  0B2D  0086               	movwf	6
 19215  0B2E  0839               	movf	Button_State_Pressed@button+1,w
 19216  0B2F  0087               	movwf	7
 19217  0B30  314A               	addfsr 1,10
 19218  0B31  3000               	movlw	0
 19219  0B32  3FC0               	movwi [0]fsr1
 19220  0B33  3FC1               	movwi [1]fsr1
 19221                           
 19222                           ;mtouch_button.c: 314: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024u);
 19223  0B34  0838               	movf	Button_State_Pressed@button,w
 19224  0B35  0086               	movwf	6
 19225  0B36  0839               	movf	Button_State_Pressed@button+1,w
 19226  0B37  0087               	movwf	7
 19227  0B38  314C               	addfsr 1,12
 19228  0B39  30FF               	movlw	255
 19229  0B3A  3FC0               	movwi [0]fsr1
 19230  0B3B  30FB               	movlw	251
 19231  0B3C  3FC1               	movwi [1]fsr1
 19232                           
 19233                           ;mtouch_button.c: 315: callback_notPressed(button->name);
 19234  0B3D  0838               	movf	Button_State_Pressed@button,w
 19235  0B3E  0086               	movwf	6
 19236  0B3F  0839               	movf	Button_State_Pressed@button+1,w
 19237  0B40  0087               	movwf	7
 19238  0B41  0801               	movf	1,w
 19239  0B42  00BA               	movwf	??_Button_State_Pressed
 19240  0B43  083A               	movf	??_Button_State_Pressed,w
 19241  0B44  00AA               	movwf	Button_DefaultCallback@button
 19242  0B45  0021               	movlb	1	; select bank1
 19243  0B46  086C               	movf	(_callback_notPressed+1)^(0+128),w
 19244  0B47  008A               	movwf	10
 19245  0B48  086B               	movf	_callback_notPressed^(0+128),w
 19246  0B49  000A               	callw
 19247  0B4A  318A               	pagesel	$
 19248  0B4B  0008               	return
 19249  0B4C                     __end_of_Button_State_Pressed:	
 19250                           
 19251                           	psect	text66
 19252  17B7                     __ptext66:	
 19253 ;; *************** function _MTOUCH_Button_Initialize *****************
 19254 ;; Defined at:
 19255 ;;		line 186 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19256 ;; Parameters:    Size  Location     Type
 19257 ;;  name            1    wreg     enum E14424
 19258 ;; Auto vars:     Size  Location     Type
 19259 ;;  name            1   20[BANK0 ] enum E14424
 19260 ;;  button          2   21[BANK0 ] PTR struct .
 19261 ;;		 -> mtouch_button(85), 
 19262 ;; Return value:  Size  Location     Type
 19263 ;;                  1    wreg      void 
 19264 ;; Registers used:
 19265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19266 ;; Tracked objects:
 19267 ;;		On entry : 0/0
 19268 ;;		On exit  : 0/0
 19269 ;;		Unchanged: 0/0
 19270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19275 ;;Total ram usage:        7 bytes
 19276 ;; Hardware stack levels used:    1
 19277 ;; Hardware stack levels required when called:    9
 19278 ;; This function calls:
 19279 ;;		_MTOUCH_Sensor_Calibrate
 19280 ;;		___wmul
 19281 ;; This function is called by:
 19282 ;;		_MTOUCH_Button_InitializeAll
 19283 ;;		_Button_Service
 19284 ;;		_Button_State_NotPressed
 19285 ;;		_Button_State_Pressed
 19286 ;; This function uses a non-reentrant model
 19287 ;;
 19288                           
 19289                           
 19290                           ;psect for function _MTOUCH_Button_Initialize
 19291  17B7                     _MTOUCH_Button_Initialize:	
 19292                           
 19293                           ;incstack = 0
 19294                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 19295                           ;MTOUCH_Button_Initialize@name stored from wreg
 19296  17B7  0020               	movlb	0	; select bank0
 19297  17B8  00B4               	movwf	MTOUCH_Button_Initialize@name
 19298                           
 19299                           ;mtouch_button.c: 188: mtouch_button_t* button = &mtouch_button[name];
 19300  17B9  0834               	movf	MTOUCH_Button_Initialize@name,w
 19301  17BA  00B0               	movwf	??_MTOUCH_Button_Initialize
 19302  17BB  01B1               	clrf	??_MTOUCH_Button_Initialize+1
 19303  17BC  0830               	movf	??_MTOUCH_Button_Initialize,w
 19304  17BD  00AA               	movwf	___wmul@multiplier
 19305  17BE  0831               	movf	??_MTOUCH_Button_Initialize+1,w
 19306  17BF  00AB               	movwf	___wmul@multiplier+1
 19307  17C0  3011               	movlw	17
 19308  17C1  00AC               	movwf	___wmul@multiplicand
 19309  17C2  3000               	movlw	0
 19310  17C3  00AD               	movwf	___wmul@multiplicand+1
 19311  17C4  3188  2002  3197   	fcall	___wmul
 19312  17C7  309B               	movlw	155
 19313  17C8  0020               	movlb	0	; select bank0
 19314  17C9  00B2               	movwf	??_MTOUCH_Button_Initialize+2
 19315  17CA  3023               	movlw	35
 19316  17CB  00B3               	movwf	??_MTOUCH_Button_Initialize+3
 19317  17CC  082A               	movf	?___wmul,w
 19318  17CD  0732               	addwf	??_MTOUCH_Button_Initialize+2,w
 19319  17CE  00B5               	movwf	MTOUCH_Button_Initialize@button
 19320  17CF  082B               	movf	?___wmul+1,w
 19321  17D0  3D33               	addwfc	??_MTOUCH_Button_Initialize+3,w
 19322  17D1  00B6               	movwf	MTOUCH_Button_Initialize@button+1
 19323                           
 19324                           ;mtouch_button.c: 190: button->state = MTOUCH_BUTTON_STATE_initializing;
 19325  17D2  0835               	movf	MTOUCH_Button_Initialize@button,w
 19326  17D3  0086               	movwf	6
 19327  17D4  0836               	movf	MTOUCH_Button_Initialize@button+1,w
 19328  17D5  0087               	movwf	7
 19329  17D6  3142               	addfsr 1,2
 19330  17D7  0181               	clrf	1
 19331                           
 19332                           ;mtouch_button.c: 191: button->baseline = (mtouch_button_baseline_t)0;
 19333  17D8  0835               	movf	MTOUCH_Button_Initialize@button,w
 19334  17D9  3E05               	addlw	5
 19335  17DA  00B0               	movwf	??_MTOUCH_Button_Initialize
 19336  17DB  3000               	movlw	0
 19337  17DC  3D36               	addwfc	MTOUCH_Button_Initialize@button+1,w
 19338  17DD  00B1               	movwf	??_MTOUCH_Button_Initialize+1
 19339  17DE  0830               	movf	??_MTOUCH_Button_Initialize,w
 19340  17DF  0086               	movwf	6
 19341  17E0  0831               	movf	??_MTOUCH_Button_Initialize+1,w
 19342  17E1  0087               	movwf	7
 19343  17E2  3000               	movlw	0
 19344  17E3  3FC0               	movwi [0]fsr1
 19345  17E4  3FC1               	movwi [1]fsr1
 19346  17E5  3FC2               	movwi [2]fsr1
 19347  17E6  3FC3               	movwi [3]fsr1
 19348                           
 19349                           ;mtouch_button.c: 192: button->counter = (mtouch_button_statecounter_t)0;
 19350  17E7  0835               	movf	MTOUCH_Button_Initialize@button,w
 19351  17E8  0086               	movwf	6
 19352  17E9  0836               	movf	MTOUCH_Button_Initialize@button+1,w
 19353  17EA  0087               	movwf	7
 19354  17EB  314A               	addfsr 1,10
 19355  17EC  3000               	movlw	0
 19356  17ED  3FC0               	movwi [0]fsr1
 19357  17EE  3FC1               	movwi [1]fsr1
 19358                           
 19359                           ;mtouch_button.c: 193: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 19360  17EF  0835               	movf	MTOUCH_Button_Initialize@button,w
 19361  17F0  0086               	movwf	6
 19362  17F1  0836               	movf	MTOUCH_Button_Initialize@button+1,w
 19363  17F2  0087               	movwf	7
 19364  17F3  314C               	addfsr 1,12
 19365  17F4  3000               	movlw	0
 19366  17F5  3FC0               	movwi [0]fsr1
 19367  17F6  3FC1               	movwi [1]fsr1
 19368                           
 19369                           ;mtouch_button.c: 195: MTOUCH_Sensor_Calibrate(button->sensor);
 19370  17F7  0835               	movf	MTOUCH_Button_Initialize@button,w
 19371  17F8  0086               	movwf	6
 19372  17F9  0836               	movf	MTOUCH_Button_Initialize@button+1,w
 19373  17FA  0087               	movwf	7
 19374  17FB  3141               	addfsr 1,1
 19375  17FC  0801               	movf	1,w
 19376  17FD  3191  21E6         	fcall	_MTOUCH_Sensor_Calibrate
 19377  17FF  0008               	return
 19378  1800                     __end_of_MTOUCH_Button_Initialize:	
 19379                           
 19380                           	psect	text67
 19381  0802                     __ptext67:	
 19382 ;; *************** function ___wmul *****************
 19383 ;; Defined at:
 19384 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;  multiplier      2   10[BANK0 ] unsigned int 
 19387 ;;  multiplicand    2   12[BANK0 ] unsigned int 
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;  product         2   14[BANK0 ] unsigned int 
 19390 ;; Return value:  Size  Location     Type
 19391 ;;                  2   10[BANK0 ] unsigned int 
 19392 ;; Registers used:
 19393 ;;		wreg, status,2, status,0
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19402 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19403 ;;Total ram usage:        6 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; Hardware stack levels required when called:    7
 19406 ;; This function calls:
 19407 ;;		Nothing
 19408 ;; This function is called by:
 19409 ;;		_MTOUCH_Button_Initialize
 19410 ;;		_Button_Service
 19411 ;;		_MTOUCH_Button_Tick
 19412 ;;		_MTOUCH_Button_isPressed
 19413 ;;		_ir_handler
 19414 ;;		_updateLight
 19415 ;;		_handleGeneralTouchControls
 19416 ;;		_handleUARTCommands
 19417 ;;		_MTOUCH_Button_Threshold_Set
 19418 ;;		_MTOUCH_Button_Scaling_Set
 19419 ;;		_MTOUCH_Button_Oversampling_Get
 19420 ;;		_MTOUCH_Button_Oversampling_Set
 19421 ;;		_Button_Baseline_Get_helper
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           
 19426                           ;psect for function ___wmul
 19427  0802                     ___wmul:	
 19428                           
 19429                           ;incstack = 0
 19430                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 19431  0802  0020               	movlb	0	; select bank0
 19432  0803  01AE               	clrf	___wmul@product
 19433  0804  01AF               	clrf	___wmul@product+1
 19434  0805                     l6695:	
 19435  0805  1C2A               	btfss	___wmul@multiplier,0
 19436  0806  280B               	goto	l2013
 19437  0807  082C               	movf	___wmul@multiplicand,w
 19438  0808  07AE               	addwf	___wmul@product,f
 19439  0809  082D               	movf	___wmul@multiplicand+1,w
 19440  080A  3DAF               	addwfc	___wmul@product+1,f
 19441  080B                     l2013:	
 19442  080B  3001               	movlw	1
 19443  080C                     u6585:	
 19444  080C  35AC               	lslf	___wmul@multiplicand,f
 19445  080D  0DAD               	rlf	___wmul@multiplicand+1,f
 19446  080E  0B89               	decfsz	9,f
 19447  080F  280C               	goto	u6585
 19448  0810  3001               	movlw	1
 19449  0811                     u6595:	
 19450  0811  36AB               	lsrf	___wmul@multiplier+1,f
 19451  0812  0CAA               	rrf	___wmul@multiplier,f
 19452  0813  0B89               	decfsz	9,f
 19453  0814  2811               	goto	u6595
 19454  0815  082A               	movf	___wmul@multiplier,w
 19455  0816  042B               	iorwf	___wmul@multiplier+1,w
 19456  0817  1D03               	btfss	3,2
 19457  0818  2805               	goto	l6695
 19458  0819  082F               	movf	___wmul@product+1,w
 19459  081A  00AB               	movwf	?___wmul+1
 19460  081B  082E               	movf	___wmul@product,w
 19461  081C  00AA               	movwf	?___wmul
 19462  081D  0008               	return
 19463  081E                     __end_of___wmul:	
 19464                           
 19465                           	psect	text68
 19466  11E6                     __ptext68:	
 19467 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 19468 ;; Defined at:
 19469 ;;		line 880 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 19470 ;; Parameters:    Size  Location     Type
 19471 ;;  sensor          1    wreg     enum E14537
 19472 ;; Auto vars:     Size  Location     Type
 19473 ;;  sensor          1   15[BANK0 ] enum E14537
 19474 ;; Return value:  Size  Location     Type
 19475 ;;                  1    wreg      void 
 19476 ;; Registers used:
 19477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19478 ;; Tracked objects:
 19479 ;;		On entry : 0/0
 19480 ;;		On exit  : 0/0
 19481 ;;		Unchanged: 0/0
 19482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;Total ram usage:        2 bytes
 19488 ;; Hardware stack levels used:    1
 19489 ;; Hardware stack levels required when called:    8
 19490 ;; This function calls:
 19491 ;;		___bmul
 19492 ;; This function is called by:
 19493 ;;		_MTOUCH_Button_Initialize
 19494 ;;		_MTOUCH_Sensor_Initialize
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           
 19499                           ;psect for function _MTOUCH_Sensor_Calibrate
 19500  11E6                     _MTOUCH_Sensor_Calibrate:	
 19501                           
 19502                           ;incstack = 0
 19503                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 19504                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 19505  11E6  0020               	movlb	0	; select bank0
 19506  11E7  00AF               	movwf	MTOUCH_Sensor_Calibrate@sensor
 19507                           
 19508                           ;mtouch_sensor.c: 882: if(sensor < (5u))
 19509  11E8  3005               	movlw	5
 19510  11E9  022F               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 19511  11EA  1803               	skipnc
 19512  11EB  0008               	return
 19513                           
 19514                           ;mtouch_sensor.c: 883: {
 19515                           ;mtouch_sensor.c: 884: mtouch_sensor[sensor].calibrated = 0;
 19516  11EC  3009               	movlw	9
 19517  11ED  00AE               	movwf	??_MTOUCH_Sensor_Calibrate
 19518  11EE  082E               	movf	??_MTOUCH_Sensor_Calibrate,w
 19519  11EF  00AA               	movwf	___bmul@multiplicand
 19520  11F0  082F               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 19521  11F1  3191  219C         	fcall	___bmul
 19522  11F3  3E08               	addlw	8
 19523  11F4  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 19524  11F5  0086               	movwf	6
 19525  11F6  3001               	movlw	1	; select bank3/4
 19526  11F7  0087               	movwf	7
 19527  11F8  1181               	bcf	1,3
 19528  11F9  0008               	return
 19529  11FA                     __end_of_MTOUCH_Sensor_Calibrate:	
 19530                           
 19531                           	psect	text69
 19532  0002                     __ptext69:	
 19533 ;; *************** function _Button_DefaultCallback *****************
 19534 ;; Defined at:
 19535 ;;		line 554 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19536 ;; Parameters:    Size  Location     Type
 19537 ;;  button          1   10[BANK0 ] enum E14424
 19538 ;; Auto vars:     Size  Location     Type
 19539 ;;		None
 19540 ;; Return value:  Size  Location     Type
 19541 ;;                  1    wreg      void 
 19542 ;; Registers used:
 19543 ;;		None
 19544 ;; Tracked objects:
 19545 ;;		On entry : 0/0
 19546 ;;		On exit  : 0/0
 19547 ;;		Unchanged: 0/0
 19548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19549 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19553 ;;Total ram usage:        1 bytes
 19554 ;; Hardware stack levels used:    1
 19555 ;; Hardware stack levels required when called:    7
 19556 ;; This function calls:
 19557 ;;		Nothing
 19558 ;; This function is called by:
 19559 ;;		_Button_State_NotPressed
 19560 ;;		_Button_State_Pressed
 19561 ;; This function uses a non-reentrant model
 19562 ;;
 19563                           
 19564                           
 19565                           ;psect for function _Button_DefaultCallback
 19566  0002                     _Button_DefaultCallback:	
 19567                           
 19568                           ;incstack = 0
 19569                           ; Regs used in _Button_DefaultCallback: []
 19570  0002  0008               	return
 19571  0003                     __end_of_Button_DefaultCallback:	
 19572                           
 19573                           	psect	text70
 19574  0CE9                     __ptext70:	
 19575 ;; *************** function _Button_Baseline_Update *****************
 19576 ;; Defined at:
 19577 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19578 ;; Parameters:    Size  Location     Type
 19579 ;;  button          2   10[BANK0 ] PTR struct .
 19580 ;;		 -> mtouch_button(85), 
 19581 ;; Auto vars:     Size  Location     Type
 19582 ;;		None
 19583 ;; Return value:  Size  Location     Type
 19584 ;;                  1    wreg      void 
 19585 ;; Registers used:
 19586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19587 ;; Tracked objects:
 19588 ;;		On entry : 0/0
 19589 ;;		On exit  : 0/0
 19590 ;;		Unchanged: 0/0
 19591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19594 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19595 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19596 ;;Total ram usage:        8 bytes
 19597 ;; Hardware stack levels used:    1
 19598 ;; Hardware stack levels required when called:    7
 19599 ;; This function calls:
 19600 ;;		Nothing
 19601 ;; This function is called by:
 19602 ;;		_Button_State_Initializing
 19603 ;;		_Button_State_NotPressed
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           
 19608                           ;psect for function _Button_Baseline_Update
 19609  0CE9                     _Button_Baseline_Update:	
 19610                           
 19611                           ;mtouch_button.c: 510: if (GIE == (uint8_t)1)
 19612                           
 19613                           ;incstack = 0
 19614                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 19615  0CE9  1F8B               	btfss	11,7	;volatile
 19616  0CEA  2D33               	goto	l6745
 19617                           
 19618                           ;mtouch_button.c: 511: {
 19619                           ;mtouch_button.c: 512: GIE = (uint8_t)0;
 19620  0CEB  138B               	bcf	11,7	;volatile
 19621                           
 19622                           ;mtouch_button.c: 513: button->baseline -= (button->baseline) >> ((uint8_t)4u);
 19623  0CEC  0020               	movlb	0	; select bank0
 19624  0CED  082A               	movf	Button_Baseline_Update@button,w
 19625  0CEE  0086               	movwf	6
 19626  0CEF  082B               	movf	Button_Baseline_Update@button+1,w
 19627  0CF0  0087               	movwf	7
 19628  0CF1  3145               	addfsr 1,5
 19629  0CF2  3F40               	moviw [0]fsr1
 19630  0CF3  00AC               	movwf	??_Button_Baseline_Update
 19631  0CF4  3F41               	moviw [1]fsr1
 19632  0CF5  00AD               	movwf	??_Button_Baseline_Update+1
 19633  0CF6  3F42               	moviw [2]fsr1
 19634  0CF7  00AE               	movwf	??_Button_Baseline_Update+2
 19635  0CF8  3F43               	moviw [3]fsr1
 19636  0CF9  00AF               	movwf	??_Button_Baseline_Update+3
 19637  0CFA  3004               	movlw	4
 19638  0CFB                     u6645:	
 19639  0CFB  36AF               	lsrf	??_Button_Baseline_Update+3,f
 19640  0CFC  0CAE               	rrf	??_Button_Baseline_Update+2,f
 19641  0CFD  0CAD               	rrf	??_Button_Baseline_Update+1,f
 19642  0CFE  0CAC               	rrf	??_Button_Baseline_Update,f
 19643  0CFF  0B89               	decfsz	9,f
 19644  0D00  2CFB               	goto	u6645
 19645  0D01  082A               	movf	Button_Baseline_Update@button,w
 19646  0D02  0086               	movwf	6
 19647  0D03  082B               	movf	Button_Baseline_Update@button+1,w
 19648  0D04  0087               	movwf	7
 19649  0D05  3145               	addfsr 1,5
 19650  0D06  082C               	movf	??_Button_Baseline_Update,w
 19651  0D07  0281               	subwf	1,f
 19652  0D08  3141               	addfsr 1,1
 19653  0D09  082D               	movf	??_Button_Baseline_Update+1,w
 19654  0D0A  3B81               	subwfb	1,f
 19655  0D0B  3141               	addfsr 1,1
 19656  0D0C  082E               	movf	??_Button_Baseline_Update+2,w
 19657  0D0D  3B81               	subwfb	1,f
 19658  0D0E  3141               	addfsr 1,1
 19659  0D0F  082F               	movf	??_Button_Baseline_Update+3,w
 19660  0D10  3B81               	subwfb	1,f
 19661  0D11  317D               	addfsr 1,-3
 19662                           
 19663                           ;mtouch_button.c: 514: button->baseline += button->reading;
 19664  0D12  082A               	movf	Button_Baseline_Update@button,w
 19665  0D13  0086               	movwf	6
 19666  0D14  082B               	movf	Button_Baseline_Update@button+1,w
 19667  0D15  0087               	movwf	7
 19668  0D16  3143               	addfsr 1,3
 19669  0D17  3F40               	moviw [0]fsr1
 19670  0D18  00AC               	movwf	??_Button_Baseline_Update
 19671  0D19  3F41               	moviw [1]fsr1
 19672  0D1A  00AD               	movwf	??_Button_Baseline_Update+1
 19673  0D1B  082C               	movf	??_Button_Baseline_Update,w
 19674  0D1C  00AE               	movwf	??_Button_Baseline_Update+2
 19675  0D1D  082D               	movf	??_Button_Baseline_Update+1,w
 19676  0D1E  00AF               	movwf	??_Button_Baseline_Update+3
 19677  0D1F  01B0               	clrf	??_Button_Baseline_Update+4
 19678  0D20  01B1               	clrf	??_Button_Baseline_Update+5
 19679  0D21  082A               	movf	Button_Baseline_Update@button,w
 19680  0D22  0086               	movwf	6
 19681  0D23  082B               	movf	Button_Baseline_Update@button+1,w
 19682  0D24  0087               	movwf	7
 19683  0D25  3145               	addfsr 1,5
 19684  0D26  082E               	movf	??_Button_Baseline_Update+2,w
 19685  0D27  0781               	addwf	1,f
 19686  0D28  3141               	addfsr 1,1
 19687  0D29  082F               	movf	??_Button_Baseline_Update+3,w
 19688  0D2A  3D81               	addwfc	1,f
 19689  0D2B  3141               	addfsr 1,1
 19690  0D2C  0830               	movf	??_Button_Baseline_Update+4,w
 19691  0D2D  3D81               	addwfc	1,f
 19692  0D2E  3141               	addfsr 1,1
 19693  0D2F  0831               	movf	??_Button_Baseline_Update+5,w
 19694  0D30  3D81               	addwfc	1,f
 19695                           
 19696                           ;mtouch_button.c: 515: GIE = (uint8_t)1;
 19697  0D31  178B               	bsf	11,7	;volatile
 19698                           
 19699                           ;mtouch_button.c: 516: }
 19700  0D32  0008               	return
 19701  0D33                     l6745:	
 19702                           
 19703                           ;mtouch_button.c: 517: else
 19704                           ;mtouch_button.c: 518: {
 19705                           ;mtouch_button.c: 519: button->baseline -= (button->baseline) >> ((uint8_t)4u);
 19706  0D33  0020               	movlb	0	; select bank0
 19707  0D34  082A               	movf	Button_Baseline_Update@button,w
 19708  0D35  0086               	movwf	6
 19709  0D36  082B               	movf	Button_Baseline_Update@button+1,w
 19710  0D37  0087               	movwf	7
 19711  0D38  3145               	addfsr 1,5
 19712  0D39  3F40               	moviw [0]fsr1
 19713  0D3A  00AC               	movwf	??_Button_Baseline_Update
 19714  0D3B  3F41               	moviw [1]fsr1
 19715  0D3C  00AD               	movwf	??_Button_Baseline_Update+1
 19716  0D3D  3F42               	moviw [2]fsr1
 19717  0D3E  00AE               	movwf	??_Button_Baseline_Update+2
 19718  0D3F  3F43               	moviw [3]fsr1
 19719  0D40  00AF               	movwf	??_Button_Baseline_Update+3
 19720  0D41  3004               	movlw	4
 19721  0D42                     u6655:	
 19722  0D42  36AF               	lsrf	??_Button_Baseline_Update+3,f
 19723  0D43  0CAE               	rrf	??_Button_Baseline_Update+2,f
 19724  0D44  0CAD               	rrf	??_Button_Baseline_Update+1,f
 19725  0D45  0CAC               	rrf	??_Button_Baseline_Update,f
 19726  0D46  0B89               	decfsz	9,f
 19727  0D47  2D42               	goto	u6655
 19728  0D48  082A               	movf	Button_Baseline_Update@button,w
 19729  0D49  0086               	movwf	6
 19730  0D4A  082B               	movf	Button_Baseline_Update@button+1,w
 19731  0D4B  0087               	movwf	7
 19732  0D4C  3145               	addfsr 1,5
 19733  0D4D  082C               	movf	??_Button_Baseline_Update,w
 19734  0D4E  0281               	subwf	1,f
 19735  0D4F  3141               	addfsr 1,1
 19736  0D50  082D               	movf	??_Button_Baseline_Update+1,w
 19737  0D51  3B81               	subwfb	1,f
 19738  0D52  3141               	addfsr 1,1
 19739  0D53  082E               	movf	??_Button_Baseline_Update+2,w
 19740  0D54  3B81               	subwfb	1,f
 19741  0D55  3141               	addfsr 1,1
 19742  0D56  082F               	movf	??_Button_Baseline_Update+3,w
 19743  0D57  3B81               	subwfb	1,f
 19744  0D58  317D               	addfsr 1,-3
 19745                           
 19746                           ;mtouch_button.c: 520: button->baseline += button->reading;
 19747  0D59  082A               	movf	Button_Baseline_Update@button,w
 19748  0D5A  0086               	movwf	6
 19749  0D5B  082B               	movf	Button_Baseline_Update@button+1,w
 19750  0D5C  0087               	movwf	7
 19751  0D5D  3143               	addfsr 1,3
 19752  0D5E  3F40               	moviw [0]fsr1
 19753  0D5F  00AC               	movwf	??_Button_Baseline_Update
 19754  0D60  3F41               	moviw [1]fsr1
 19755  0D61  00AD               	movwf	??_Button_Baseline_Update+1
 19756  0D62  082C               	movf	??_Button_Baseline_Update,w
 19757  0D63  00AE               	movwf	??_Button_Baseline_Update+2
 19758  0D64  082D               	movf	??_Button_Baseline_Update+1,w
 19759  0D65  00AF               	movwf	??_Button_Baseline_Update+3
 19760  0D66  01B0               	clrf	??_Button_Baseline_Update+4
 19761  0D67  01B1               	clrf	??_Button_Baseline_Update+5
 19762  0D68  082A               	movf	Button_Baseline_Update@button,w
 19763  0D69  0086               	movwf	6
 19764  0D6A  082B               	movf	Button_Baseline_Update@button+1,w
 19765  0D6B  0087               	movwf	7
 19766  0D6C  3145               	addfsr 1,5
 19767  0D6D  082E               	movf	??_Button_Baseline_Update+2,w
 19768  0D6E  0781               	addwf	1,f
 19769  0D6F  3141               	addfsr 1,1
 19770  0D70  082F               	movf	??_Button_Baseline_Update+3,w
 19771  0D71  3D81               	addwfc	1,f
 19772  0D72  3141               	addfsr 1,1
 19773  0D73  0830               	movf	??_Button_Baseline_Update+4,w
 19774  0D74  3D81               	addwfc	1,f
 19775  0D75  3141               	addfsr 1,1
 19776  0D76  0831               	movf	??_Button_Baseline_Update+5,w
 19777  0D77  3D81               	addwfc	1,f
 19778  0D78  0008               	return
 19779  0D79                     __end_of_Button_Baseline_Update:	
 19780                           
 19781                           	psect	text71
 19782  157D                     __ptext71:	
 19783 ;; *************** function _Button_Baseline_Initialize *****************
 19784 ;; Defined at:
 19785 ;;		line 502 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19786 ;; Parameters:    Size  Location     Type
 19787 ;;  button          2   18[BANK0 ] PTR struct .
 19788 ;;		 -> mtouch_button(85), 
 19789 ;; Auto vars:     Size  Location     Type
 19790 ;;		None
 19791 ;; Return value:  Size  Location     Type
 19792 ;;                  1    wreg      void 
 19793 ;; Registers used:
 19794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19795 ;; Tracked objects:
 19796 ;;		On entry : 0/0
 19797 ;;		On exit  : 0/0
 19798 ;;		Unchanged: 0/0
 19799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19802 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19803 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19804 ;;Total ram usage:        6 bytes
 19805 ;; Hardware stack levels used:    1
 19806 ;; Hardware stack levels required when called:    9
 19807 ;; This function calls:
 19808 ;;		_MTOUCH_Sensor_RawSample_Get
 19809 ;; This function is called by:
 19810 ;;		_Button_State_Initializing
 19811 ;; This function uses a non-reentrant model
 19812 ;;
 19813                           
 19814                           
 19815                           ;psect for function _Button_Baseline_Initialize
 19816  157D                     _Button_Baseline_Initialize:	
 19817                           
 19818                           ;mtouch_button.c: 504: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 19819                           
 19820                           ;incstack = 0
 19821                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19822  157D  0020               	movlb	0	; select bank0
 19823  157E  0832               	movf	Button_Baseline_Initialize@button,w
 19824  157F  0086               	movwf	6
 19825  1580  0833               	movf	Button_Baseline_Initialize@button+1,w
 19826  1581  0087               	movwf	7
 19827  1582  3141               	addfsr 1,1
 19828  1583  0801               	movf	1,w
 19829  1584  3192  22C7  3195   	fcall	_MTOUCH_Sensor_RawSample_Get
 19830  1587  0020               	movlb	0	; select bank0
 19831  1588  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 19832  1589  00B4               	movwf	??_Button_Baseline_Initialize
 19833  158A  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 19834  158B  00B5               	movwf	??_Button_Baseline_Initialize+1
 19835  158C  01B6               	clrf	??_Button_Baseline_Initialize+2
 19836  158D  01B7               	clrf	??_Button_Baseline_Initialize+3
 19837  158E  0832               	movf	Button_Baseline_Initialize@button,w
 19838  158F  0086               	movwf	6
 19839  1590  0833               	movf	Button_Baseline_Initialize@button+1,w
 19840  1591  0087               	movwf	7
 19841  1592  3145               	addfsr 1,5
 19842  1593  0834               	movf	??_Button_Baseline_Initialize,w
 19843  1594  3FC0               	movwi [0]fsr1
 19844  1595  0835               	movf	??_Button_Baseline_Initialize+1,w
 19845  1596  3FC1               	movwi [1]fsr1
 19846  1597  0836               	movf	??_Button_Baseline_Initialize+2,w
 19847  1598  3FC2               	movwi [2]fsr1
 19848  1599  0837               	movf	??_Button_Baseline_Initialize+3,w
 19849  159A  3FC3               	movwi [3]fsr1
 19850                           
 19851                           ;mtouch_button.c: 505: button->baseline <<= ((uint8_t)4u);
 19852  159B  0832               	movf	Button_Baseline_Initialize@button,w
 19853  159C  0086               	movwf	6
 19854  159D  0833               	movf	Button_Baseline_Initialize@button+1,w
 19855  159E  0087               	movwf	7
 19856  159F  3145               	addfsr 1,5
 19857  15A0  3004               	movlw	4
 19858  15A1                     u6625:	
 19859  15A1  3581               	lslf	1,f
 19860  15A2  3141               	addfsr 1,1
 19861  15A3  0D81               	rlf	1,f
 19862  15A4  3141               	addfsr 1,1
 19863  15A5  0D81               	rlf	1,f
 19864  15A6  3141               	addfsr 1,1
 19865  15A7  0D81               	rlf	1,f
 19866  15A8  317D               	addfsr 1,-3
 19867  15A9  0B89               	decfsz	9,f
 19868  15AA  2DA1               	goto	u6625
 19869  15AB  0008               	return
 19870  15AC                     __end_of_Button_Baseline_Initialize:	
 19871                           
 19872                           	psect	text72
 19873  11D2                     __ptext72:	
 19874 ;; *************** function _Button_Reading_Update *****************
 19875 ;; Defined at:
 19876 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19877 ;; Parameters:    Size  Location     Type
 19878 ;;  button          2   22[BANK0 ] PTR struct .
 19879 ;;		 -> mtouch_button(85), 
 19880 ;; Auto vars:     Size  Location     Type
 19881 ;;		None
 19882 ;; Return value:  Size  Location     Type
 19883 ;;                  1    wreg      void 
 19884 ;; Registers used:
 19885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19886 ;; Tracked objects:
 19887 ;;		On entry : 0/0
 19888 ;;		On exit  : 0/0
 19889 ;;		Unchanged: 0/0
 19890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19891 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19895 ;;Total ram usage:        2 bytes
 19896 ;; Hardware stack levels used:    1
 19897 ;; Hardware stack levels required when called:   10
 19898 ;; This function calls:
 19899 ;;		_Button_Reading_Update_Helper
 19900 ;; This function is called by:
 19901 ;;		_Button_Service
 19902 ;; This function uses a non-reentrant model
 19903 ;;
 19904                           
 19905                           
 19906                           ;psect for function _Button_Reading_Update
 19907  11D2                     _Button_Reading_Update:	
 19908                           
 19909                           ;mtouch_button.c: 477: if (GIE == (uint8_t) 1)
 19910                           
 19911                           ;incstack = 0
 19912                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19913  11D2  1F8B               	btfss	11,7	;volatile
 19914  11D3  29DE               	goto	l6905
 19915                           
 19916                           ;mtouch_button.c: 478: {
 19917                           ;mtouch_button.c: 479: GIE = (uint8_t) 0;
 19918  11D4  138B               	bcf	11,7	;volatile
 19919                           
 19920                           ;mtouch_button.c: 480: Button_Reading_Update_Helper(button);
 19921  11D5  0020               	movlb	0	; select bank0
 19922  11D6  0837               	movf	Button_Reading_Update@button+1,w
 19923  11D7  00B3               	movwf	Button_Reading_Update_Helper@button+1
 19924  11D8  0836               	movf	Button_Reading_Update@button,w
 19925  11D9  00B2               	movwf	Button_Reading_Update_Helper@button
 19926  11DA  3188  206F         	fcall	_Button_Reading_Update_Helper
 19927                           
 19928                           ;mtouch_button.c: 481: GIE = (uint8_t) 1;
 19929  11DC  178B               	bsf	11,7	;volatile
 19930                           
 19931                           ;mtouch_button.c: 482: }
 19932  11DD  0008               	return
 19933  11DE                     l6905:	
 19934                           
 19935                           ;mtouch_button.c: 483: else
 19936                           ;mtouch_button.c: 484: {
 19937                           ;mtouch_button.c: 485: Button_Reading_Update_Helper(button);
 19938  11DE  0020               	movlb	0	; select bank0
 19939  11DF  0837               	movf	Button_Reading_Update@button+1,w
 19940  11E0  00B3               	movwf	Button_Reading_Update_Helper@button+1
 19941  11E1  0836               	movf	Button_Reading_Update@button,w
 19942  11E2  00B2               	movwf	Button_Reading_Update_Helper@button
 19943  11E3  3188  206F         	fcall	_Button_Reading_Update_Helper
 19944  11E5  0008               	return
 19945  11E6                     __end_of_Button_Reading_Update:	
 19946                           
 19947                           	psect	text73
 19948  086F                     __ptext73:	
 19949 ;; *************** function _Button_Reading_Update_Helper *****************
 19950 ;; Defined at:
 19951 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_button.c"
 19952 ;; Parameters:    Size  Location     Type
 19953 ;;  button          2   18[BANK0 ] PTR struct .
 19954 ;;		 -> mtouch_button(85), 
 19955 ;; Auto vars:     Size  Location     Type
 19956 ;;		None
 19957 ;; Return value:  Size  Location     Type
 19958 ;;                  1    wreg      void 
 19959 ;; Registers used:
 19960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19961 ;; Tracked objects:
 19962 ;;		On entry : 0/0
 19963 ;;		On exit  : 0/0
 19964 ;;		Unchanged: 0/0
 19965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19966 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19969 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19970 ;;Total ram usage:        4 bytes
 19971 ;; Hardware stack levels used:    1
 19972 ;; Hardware stack levels required when called:    9
 19973 ;; This function calls:
 19974 ;;		_MTOUCH_Sensor_RawSample_Get
 19975 ;; This function is called by:
 19976 ;;		_Button_Reading_Update
 19977 ;; This function uses a non-reentrant model
 19978 ;;
 19979                           
 19980                           
 19981                           ;psect for function _Button_Reading_Update_Helper
 19982  086F                     _Button_Reading_Update_Helper:	
 19983                           
 19984                           ;mtouch_button.c: 491: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 19985                           
 19986                           ;incstack = 0
 19987                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 19988  086F  0020               	movlb	0	; select bank0
 19989  0870  0832               	movf	Button_Reading_Update_Helper@button,w
 19990  0871  0086               	movwf	6
 19991  0872  0833               	movf	Button_Reading_Update_Helper@button+1,w
 19992  0873  0087               	movwf	7
 19993  0874  3142               	addfsr 1,2
 19994  0875  0801               	movf	1,w
 19995  0876  1903               	btfsc	3,2
 19996  0877  28AD               	goto	l6755
 19997                           
 19998                           ;mtouch_button.c: 492: {
 19999                           ;mtouch_button.c: 493: button->reading -= button->reading>>((uint8_t)2u);
 20000  0878  0832               	movf	Button_Reading_Update_Helper@button,w
 20001  0879  0086               	movwf	6
 20002  087A  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20003  087B  0087               	movwf	7
 20004  087C  3143               	addfsr 1,3
 20005  087D  3F40               	moviw [0]fsr1
 20006  087E  00B4               	movwf	??_Button_Reading_Update_Helper
 20007  087F  3F41               	moviw [1]fsr1
 20008  0880  00B5               	movwf	??_Button_Reading_Update_Helper+1
 20009  0881  36B5               	lsrf	??_Button_Reading_Update_Helper+1,f
 20010  0882  0CB4               	rrf	??_Button_Reading_Update_Helper,f
 20011  0883  36B5               	lsrf	??_Button_Reading_Update_Helper+1,f
 20012  0884  0CB4               	rrf	??_Button_Reading_Update_Helper,f
 20013  0885  0832               	movf	Button_Reading_Update_Helper@button,w
 20014  0886  0086               	movwf	6
 20015  0887  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20016  0888  0087               	movwf	7
 20017  0889  3143               	addfsr 1,3
 20018  088A  0834               	movf	??_Button_Reading_Update_Helper,w
 20019  088B  0281               	subwf	1,f
 20020  088C  3141               	addfsr 1,1
 20021  088D  0835               	movf	??_Button_Reading_Update_Helper+1,w
 20022  088E  3B81               	subwfb	1,f
 20023  088F  317F               	addfsr 1,-1
 20024                           
 20025                           ;mtouch_button.c: 494: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           ((uint8_t)2u);
 20026  0890  0832               	movf	Button_Reading_Update_Helper@button,w
 20027  0891  0086               	movwf	6
 20028  0892  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20029  0893  0087               	movwf	7
 20030  0894  3141               	addfsr 1,1
 20031  0895  0801               	movf	1,w
 20032  0896  3192  22C7         	fcall	_MTOUCH_Sensor_RawSample_Get
 20033  0898  0020               	movlb	0	; select bank0
 20034  0899  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 20035  089A  00B4               	movwf	??_Button_Reading_Update_Helper
 20036  089B  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 20037  089C  00B5               	movwf	??_Button_Reading_Update_Helper+1
 20038  089D  36B5               	lsrf	??_Button_Reading_Update_Helper+1,f
 20039  089E  0CB4               	rrf	??_Button_Reading_Update_Helper,f
 20040  089F  36B5               	lsrf	??_Button_Reading_Update_Helper+1,f
 20041  08A0  0CB4               	rrf	??_Button_Reading_Update_Helper,f
 20042  08A1  0832               	movf	Button_Reading_Update_Helper@button,w
 20043  08A2  0086               	movwf	6
 20044  08A3  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20045  08A4  0087               	movwf	7
 20046  08A5  3143               	addfsr 1,3
 20047  08A6  0834               	movf	??_Button_Reading_Update_Helper,w
 20048  08A7  0781               	addwf	1,f
 20049  08A8  3141               	addfsr 1,1
 20050  08A9  0835               	movf	??_Button_Reading_Update_Helper+1,w
 20051  08AA  3D81               	addwfc	1,f
 20052  08AB  317F               	addfsr 1,-1
 20053                           
 20054                           ;mtouch_button.c: 495: }
 20055  08AC  0008               	return
 20056  08AD                     l6755:	
 20057                           
 20058                           ;mtouch_button.c: 496: else
 20059                           ;mtouch_button.c: 497: {
 20060                           ;mtouch_button.c: 498: button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 20061  08AD  0832               	movf	Button_Reading_Update_Helper@button,w
 20062  08AE  0086               	movwf	6
 20063  08AF  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20064  08B0  0087               	movwf	7
 20065  08B1  3141               	addfsr 1,1
 20066  08B2  0801               	movf	1,w
 20067  08B3  3192  22C7         	fcall	_MTOUCH_Sensor_RawSample_Get
 20068  08B5  0020               	movlb	0	; select bank0
 20069  08B6  0832               	movf	Button_Reading_Update_Helper@button,w
 20070  08B7  0086               	movwf	6
 20071  08B8  0833               	movf	Button_Reading_Update_Helper@button+1,w
 20072  08B9  0087               	movwf	7
 20073  08BA  3143               	addfsr 1,3
 20074  08BB  082E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 20075  08BC  3FC0               	movwi [0]fsr1
 20076  08BD  082F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 20077  08BE  3FC1               	movwi [1]fsr1
 20078  08BF  0008               	return
 20079  08C0                     __end_of_Button_Reading_Update_Helper:	
 20080                           
 20081                           	psect	text74
 20082  12C7                     __ptext74:	
 20083 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 20084 ;; Defined at:
 20085 ;;		line 629 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 20086 ;; Parameters:    Size  Location     Type
 20087 ;;  name            1    wreg     enum E14537
 20088 ;; Auto vars:     Size  Location     Type
 20089 ;;  name            1   17[BANK0 ] enum E14537
 20090 ;; Return value:  Size  Location     Type
 20091 ;;                  2   14[BANK0 ] unsigned int 
 20092 ;; Registers used:
 20093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20094 ;; Tracked objects:
 20095 ;;		On entry : 0/0
 20096 ;;		On exit  : 0/0
 20097 ;;		Unchanged: 0/0
 20098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20099 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20102 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20103 ;;Total ram usage:        4 bytes
 20104 ;; Hardware stack levels used:    1
 20105 ;; Hardware stack levels required when called:    8
 20106 ;; This function calls:
 20107 ;;		___bmul
 20108 ;; This function is called by:
 20109 ;;		_Button_Reading_Update_Helper
 20110 ;;		_Button_Baseline_Initialize
 20111 ;; This function uses a non-reentrant model
 20112 ;;
 20113                           
 20114                           
 20115                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 20116  12C7                     _MTOUCH_Sensor_RawSample_Get:	
 20117                           
 20118                           ;incstack = 0
 20119                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 20120                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 20121  12C7  0020               	movlb	0	; select bank0
 20122  12C8  00B1               	movwf	MTOUCH_Sensor_RawSample_Get@name
 20123                           
 20124                           ;mtouch_sensor.c: 631: if (name < (5u))
 20125  12C9  3005               	movlw	5
 20126  12CA  0231               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 20127  12CB  1803               	skipnc
 20128  12CC  2ADF               	goto	l6689
 20129                           
 20130                           ;mtouch_sensor.c: 632: {
 20131                           ;mtouch_sensor.c: 633: return mtouch_sensor[name].rawSample;
 20132  12CD  3009               	movlw	9
 20133  12CE  00B0               	movwf	??_MTOUCH_Sensor_RawSample_Get
 20134  12CF  0830               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 20135  12D0  00AA               	movwf	___bmul@multiplicand
 20136  12D1  0831               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 20137  12D2  3191  219C         	fcall	___bmul
 20138  12D4  3E06               	addlw	6
 20139  12D5  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 20140  12D6  0086               	movwf	6
 20141  12D7  3001               	movlw	1	; select bank3/4
 20142  12D8  0087               	movwf	7
 20143  12D9  3F40               	moviw [0]fsr1
 20144  12DA  0020               	movlb	0	; select bank0
 20145  12DB  00AE               	movwf	?_MTOUCH_Sensor_RawSample_Get
 20146  12DC  3F41               	moviw [1]fsr1
 20147  12DD  00AF               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 20148                           
 20149                           ;mtouch_sensor.c: 634: }
 20150  12DE  0008               	return
 20151  12DF                     l6689:	
 20152                           
 20153                           ;mtouch_sensor.c: 635: else
 20154                           ;mtouch_sensor.c: 636: return (mtouch_sensor_sample_t)0;
 20155  12DF  01AE               	clrf	?_MTOUCH_Sensor_RawSample_Get
 20156  12E0  01AF               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 20157  12E1  0008               	return
 20158  12E2                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 20159                           
 20160                           	psect	text75
 20161  119C                     __ptext75:	
 20162 ;; *************** function ___bmul *****************
 20163 ;; Defined at:
 20164 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul8.c"
 20165 ;; Parameters:    Size  Location     Type
 20166 ;;  multiplier      1    wreg     unsigned char 
 20167 ;;  multiplicand    1   10[BANK0 ] unsigned char 
 20168 ;; Auto vars:     Size  Location     Type
 20169 ;;  multiplier      1   13[BANK0 ] unsigned char 
 20170 ;;  product         1   12[BANK0 ] unsigned char 
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  1    wreg      unsigned char 
 20173 ;; Registers used:
 20174 ;;		wreg, status,2, status,0
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20180 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20183 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20184 ;;Total ram usage:        4 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; Hardware stack levels required when called:    7
 20187 ;; This function calls:
 20188 ;;		Nothing
 20189 ;; This function is called by:
 20190 ;;		_MTOUCH_Sensor_Initialize
 20191 ;;		_Sensor_scheduleNextScan
 20192 ;;		_MTOUCH_Sensor_postAcquisitionProcess
 20193 ;;		_MTOUCH_Sensor_Service
 20194 ;;		_MTOUCH_Sensor_RawSample_Get
 20195 ;;		_medianFilter
 20196 ;;		_Sensor_FrequencyHopping_Autotune_Process
 20197 ;;		_MTOUCH_Sensor_Enable
 20198 ;;		_MTOUCH_Sensor_isEnabled
 20199 ;;		_MTOUCH_Sensor_Calibrate
 20200 ;;		_MTOUCH_Sensor_isCalibrated
 20201 ;;		_MTOUCH_Sensor_wasSampled
 20202 ;;		_syncFanToggleState
 20203 ;;		_handleUARTCommands
 20204 ;;		i1_Sensor_scheduleNextScan
 20205 ;;		i1_MTOUCH_Sensor_isEnabled
 20206 ;;		i1_MTOUCH_Sensor_wasSampled
 20207 ;;		_MTOUCH_Sensor_isAnySensorActive
 20208 ;;		_MTOUCH_Sensor_Disable
 20209 ;;		_MTOUCH_Sensor_isActive
 20210 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 20211 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 20212 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 20213 ;;		_MTOUCH_Sensor_Oversampling_Get
 20214 ;;		_MTOUCH_Sensor_Oversampling_Set
 20215 ;;		_handleFanToggleControls
 20216 ;;		_handleFanSpeedControl
 20217 ;;		_ir_handler
 20218 ;;		_handleGeneralTouchControls
 20219 ;;		_updateLight
 20220 ;; This function uses a non-reentrant model
 20221 ;;
 20222                           
 20223                           
 20224                           ;psect for function ___bmul
 20225  119C                     ___bmul:	
 20226                           
 20227                           ;incstack = 0
 20228                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20229                           ;___bmul@multiplier stored from wreg
 20230  119C  0020               	movlb	0	; select bank0
 20231  119D  00AD               	movwf	___bmul@multiplier
 20232  119E  01AC               	clrf	___bmul@product
 20233  119F                     l6665:	
 20234  119F  1C2D               	btfss	___bmul@multiplier,0
 20235  11A0  29A5               	goto	l6669
 20236  11A1  082A               	movf	___bmul@multiplicand,w
 20237  11A2  00AB               	movwf	??___bmul
 20238  11A3  082B               	movf	??___bmul,w
 20239  11A4  07AC               	addwf	___bmul@product,f
 20240  11A5                     l6669:	
 20241  11A5  1003               	clrc
 20242  11A6  0DAA               	rlf	___bmul@multiplicand,f
 20243  11A7  1003               	clrc
 20244  11A8  0CAD               	rrf	___bmul@multiplier,f
 20245  11A9  082D               	movf	___bmul@multiplier,w
 20246  11AA  1D03               	btfss	3,2
 20247  11AB  299F               	goto	l6665
 20248  11AC  082C               	movf	___bmul@product,w
 20249  11AD  0008               	return
 20250  11AE                     __end_of___bmul:	
 20251                           
 20252                           	psect	text76
 20253  0E0B                     __ptext76:	
 20254 ;; *************** function _Button_Deviation_Update *****************
 20255 ;; Defined at:
 20256 ;;		line 426 in file "mcc_generated_files/mtouch/mtouch_button.c"
 20257 ;; Parameters:    Size  Location     Type
 20258 ;;  button          2   10[BANK0 ] PTR struct .
 20259 ;;		 -> mtouch_button(85), 
 20260 ;; Auto vars:     Size  Location     Type
 20261 ;;  deviation       4   22[BANK0 ] long 
 20262 ;; Return value:  Size  Location     Type
 20263 ;;                  1    wreg      void 
 20264 ;; Registers used:
 20265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20266 ;; Tracked objects:
 20267 ;;		On entry : 0/0
 20268 ;;		On exit  : 0/0
 20269 ;;		Unchanged: 0/0
 20270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20271 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20272 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20273 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20274 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20275 ;;Total ram usage:       16 bytes
 20276 ;; Hardware stack levels used:    1
 20277 ;; Hardware stack levels required when called:    7
 20278 ;; This function calls:
 20279 ;;		Nothing
 20280 ;; This function is called by:
 20281 ;;		_Button_Service
 20282 ;; This function uses a non-reentrant model
 20283 ;;
 20284                           
 20285                           
 20286                           ;psect for function _Button_Deviation_Update
 20287  0E0B                     _Button_Deviation_Update:	
 20288                           
 20289                           ;mtouch_button.c: 428: int32_t deviation;
 20290                           ;mtouch_button.c: 430: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 20291                           
 20292                           ;incstack = 0
 20293                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 20294  0E0B  0020               	movlb	0	; select bank0
 20295  0E0C  082A               	movf	Button_Deviation_Update@button,w
 20296  0E0D  0086               	movwf	6
 20297  0E0E  082B               	movf	Button_Deviation_Update@button+1,w
 20298  0E0F  0087               	movwf	7
 20299  0E10  3145               	addfsr 1,5
 20300  0E11  3F40               	moviw [0]fsr1
 20301  0E12  00AC               	movwf	??_Button_Deviation_Update
 20302  0E13  3F41               	moviw [1]fsr1
 20303  0E14  00AD               	movwf	??_Button_Deviation_Update+1
 20304  0E15  3F42               	moviw [2]fsr1
 20305  0E16  00AE               	movwf	??_Button_Deviation_Update+2
 20306  0E17  3F43               	moviw [3]fsr1
 20307  0E18  00AF               	movwf	??_Button_Deviation_Update+3
 20308  0E19  3004               	movlw	4
 20309  0E1A                     u6815:	
 20310  0E1A  36AF               	lsrf	??_Button_Deviation_Update+3,f
 20311  0E1B  0CAE               	rrf	??_Button_Deviation_Update+2,f
 20312  0E1C  0CAD               	rrf	??_Button_Deviation_Update+1,f
 20313  0E1D  0CAC               	rrf	??_Button_Deviation_Update,f
 20314  0E1E  0B89               	decfsz	9,f
 20315  0E1F  2E1A               	goto	u6815
 20316  0E20  09AC               	comf	??_Button_Deviation_Update,f
 20317  0E21  09AD               	comf	??_Button_Deviation_Update+1,f
 20318  0E22  09AE               	comf	??_Button_Deviation_Update+2,f
 20319  0E23  09AF               	comf	??_Button_Deviation_Update+3,f
 20320  0E24  0AAC               	incf	??_Button_Deviation_Update,f
 20321  0E25  1903               	skipnz
 20322  0E26  0AAD               	incf	??_Button_Deviation_Update+1,f
 20323  0E27  1903               	skipnz
 20324  0E28  0AAE               	incf	??_Button_Deviation_Update+2,f
 20325  0E29  1903               	skipnz
 20326  0E2A  0AAF               	incf	??_Button_Deviation_Update+3,f
 20327  0E2B  082A               	movf	Button_Deviation_Update@button,w
 20328  0E2C  0086               	movwf	6
 20329  0E2D  082B               	movf	Button_Deviation_Update@button+1,w
 20330  0E2E  0087               	movwf	7
 20331  0E2F  3143               	addfsr 1,3
 20332  0E30  3F40               	moviw [0]fsr1
 20333  0E31  00B0               	movwf	??_Button_Deviation_Update+4
 20334  0E32  3F41               	moviw [1]fsr1
 20335  0E33  00B1               	movwf	??_Button_Deviation_Update+5
 20336  0E34  0830               	movf	??_Button_Deviation_Update+4,w
 20337  0E35  00B2               	movwf	??_Button_Deviation_Update+6
 20338  0E36  0831               	movf	??_Button_Deviation_Update+5,w
 20339  0E37  00B3               	movwf	??_Button_Deviation_Update+7
 20340  0E38  01B4               	clrf	??_Button_Deviation_Update+8
 20341  0E39  01B5               	clrf	??_Button_Deviation_Update+9
 20342  0E3A  0832               	movf	??_Button_Deviation_Update+6,w
 20343  0E3B  07AC               	addwf	??_Button_Deviation_Update,f
 20344  0E3C  0833               	movf	??_Button_Deviation_Update+7,w
 20345  0E3D  3DAD               	addwfc	??_Button_Deviation_Update+1,f
 20346  0E3E  0834               	movf	??_Button_Deviation_Update+8,w
 20347  0E3F  3DAE               	addwfc	??_Button_Deviation_Update+2,f
 20348  0E40  0835               	movf	??_Button_Deviation_Update+9,w
 20349  0E41  3DAF               	addwfc	??_Button_Deviation_Update+3,f
 20350  0E42  082F               	movf	??_Button_Deviation_Update+3,w
 20351  0E43  00B9               	movwf	Button_Deviation_Update@deviation+3
 20352  0E44  082E               	movf	??_Button_Deviation_Update+2,w
 20353  0E45  00B8               	movwf	Button_Deviation_Update@deviation+2
 20354  0E46  082D               	movf	??_Button_Deviation_Update+1,w
 20355  0E47  00B7               	movwf	Button_Deviation_Update@deviation+1
 20356  0E48  082C               	movf	??_Button_Deviation_Update,w
 20357  0E49  00B6               	movwf	Button_Deviation_Update@deviation
 20358                           
 20359                           ;mtouch_button.c: 433: deviation = deviation >> (button->scaling);
 20360  0E4A  0836               	movf	Button_Deviation_Update@deviation,w
 20361  0E4B  00AC               	movwf	??_Button_Deviation_Update
 20362  0E4C  0837               	movf	Button_Deviation_Update@deviation+1,w
 20363  0E4D  00AD               	movwf	??_Button_Deviation_Update+1
 20364  0E4E  0838               	movf	Button_Deviation_Update@deviation+2,w
 20365  0E4F  00AE               	movwf	??_Button_Deviation_Update+2
 20366  0E50  0839               	movf	Button_Deviation_Update@deviation+3,w
 20367  0E51  00AF               	movwf	??_Button_Deviation_Update+3
 20368  0E52  082A               	movf	Button_Deviation_Update@button,w
 20369  0E53  0086               	movwf	6
 20370  0E54  082B               	movf	Button_Deviation_Update@button+1,w
 20371  0E55  0087               	movwf	7
 20372  0E56  314F               	addfsr 1,15
 20373  0E57  0A01               	incf	1,w
 20374  0E58  2E5D               	goto	u6820
 20375  0E59                     u6825:	
 20376  0E59  37AF               	asrf	??_Button_Deviation_Update+3,f
 20377  0E5A  0CAE               	rrf	??_Button_Deviation_Update+2,f
 20378  0E5B  0CAD               	rrf	??_Button_Deviation_Update+1,f
 20379  0E5C  0CAC               	rrf	??_Button_Deviation_Update,f
 20380  0E5D                     u6820:	
 20381  0E5D  0B89               	decfsz	9,f
 20382  0E5E  2E59               	goto	u6825
 20383  0E5F  082F               	movf	??_Button_Deviation_Update+3,w
 20384  0E60  00B9               	movwf	Button_Deviation_Update@deviation+3
 20385  0E61  082E               	movf	??_Button_Deviation_Update+2,w
 20386  0E62  00B8               	movwf	Button_Deviation_Update@deviation+2
 20387  0E63  082D               	movf	??_Button_Deviation_Update+1,w
 20388  0E64  00B7               	movwf	Button_Deviation_Update@deviation+1
 20389  0E65  082C               	movf	??_Button_Deviation_Update,w
 20390  0E66  00B6               	movwf	Button_Deviation_Update@deviation
 20391                           
 20392                           ;mtouch_button.c: 436: if (deviation > ((127)))
 20393  0E67  1BB9               	btfsc	Button_Deviation_Update@deviation+3,7
 20394  0E68  2E7E               	goto	l6913
 20395  0E69  0839               	movf	Button_Deviation_Update@deviation+3,w
 20396  0E6A  1D03               	btfss	3,2
 20397  0E6B  2E76               	goto	l6911
 20398  0E6C  0838               	movf	Button_Deviation_Update@deviation+2,w
 20399  0E6D  1D03               	btfss	3,2
 20400  0E6E  2E76               	goto	l6911
 20401  0E6F  0837               	movf	Button_Deviation_Update@deviation+1,w
 20402  0E70  1D03               	btfss	3,2
 20403  0E71  2E76               	goto	l6911
 20404  0E72  3080               	movlw	128
 20405  0E73  0236               	subwf	Button_Deviation_Update@deviation,w
 20406  0E74  1C03               	btfss	3,0
 20407  0E75  2E7E               	goto	l6913
 20408  0E76                     l6911:	
 20409                           
 20410                           ;mtouch_button.c: 437: {
 20411                           ;mtouch_button.c: 438: deviation = ((127));
 20412  0E76  3000               	movlw	0
 20413  0E77  00B9               	movwf	Button_Deviation_Update@deviation+3
 20414  0E78  3000               	movlw	0
 20415  0E79  00B8               	movwf	Button_Deviation_Update@deviation+2
 20416  0E7A  3000               	movlw	0
 20417  0E7B  00B7               	movwf	Button_Deviation_Update@deviation+1
 20418  0E7C  307F               	movlw	127
 20419  0E7D  00B6               	movwf	Button_Deviation_Update@deviation
 20420  0E7E                     l6913:	
 20421                           
 20422                           ;mtouch_button.c: 439: }
 20423                           ;mtouch_button.c: 440: if (deviation < ((-128)))
 20424  0E7E  1FB9               	btfss	Button_Deviation_Update@deviation+3,7
 20425  0E7F  2E92               	goto	l6917
 20426  0E80  3080               	movlw	128
 20427  0E81  0236               	subwf	Button_Deviation_Update@deviation,w
 20428  0E82  30FF               	movlw	255
 20429  0E83  3B37               	subwfb	Button_Deviation_Update@deviation+1,w
 20430  0E84  30FF               	movlw	255
 20431  0E85  3B38               	subwfb	Button_Deviation_Update@deviation+2,w
 20432  0E86  30FF               	movlw	255
 20433  0E87  3B39               	subwfb	Button_Deviation_Update@deviation+3,w
 20434  0E88  1803               	btfsc	3,0
 20435  0E89  2E92               	goto	l6917
 20436                           
 20437                           ;mtouch_button.c: 441: {
 20438                           ;mtouch_button.c: 442: deviation = ((-128));
 20439  0E8A  30FF               	movlw	255
 20440  0E8B  00B9               	movwf	Button_Deviation_Update@deviation+3
 20441  0E8C  30FF               	movlw	255
 20442  0E8D  00B8               	movwf	Button_Deviation_Update@deviation+2
 20443  0E8E  30FF               	movlw	255
 20444  0E8F  00B7               	movwf	Button_Deviation_Update@deviation+1
 20445  0E90  3080               	movlw	128
 20446  0E91  00B6               	movwf	Button_Deviation_Update@deviation
 20447  0E92                     l6917:	
 20448                           
 20449                           ;mtouch_button.c: 443: }
 20450                           ;mtouch_button.c: 445: button->deviation = (mtouch_button_deviation_t)deviation;
 20451  0E92  082A               	movf	Button_Deviation_Update@button,w
 20452  0E93  3E09               	addlw	9
 20453  0E94  00AC               	movwf	??_Button_Deviation_Update
 20454  0E95  3000               	movlw	0
 20455  0E96  3D2B               	addwfc	Button_Deviation_Update@button+1,w
 20456  0E97  00AD               	movwf	??_Button_Deviation_Update+1
 20457  0E98  082C               	movf	??_Button_Deviation_Update,w
 20458  0E99  0086               	movwf	6
 20459  0E9A  082D               	movf	??_Button_Deviation_Update+1,w
 20460  0E9B  0087               	movwf	7
 20461  0E9C  0836               	movf	Button_Deviation_Update@deviation,w
 20462  0E9D  0081               	movwf	1
 20463  0E9E  0008               	return
 20464  0E9F                     __end_of_Button_Deviation_Update:	
 20465                           
 20466                           	psect	text77
 20467  1FE6                     __ptext77:	
 20468 ;; *************** function _InitExternal_INT *****************
 20469 ;; Defined at:
 20470 ;;		line 84 in file "mcc_generated_files/interrupt_manager.c"
 20471 ;; Parameters:    Size  Location     Type
 20472 ;;		None
 20473 ;; Auto vars:     Size  Location     Type
 20474 ;;		None
 20475 ;; Return value:  Size  Location     Type
 20476 ;;                  1    wreg      void 
 20477 ;; Registers used:
 20478 ;;		None
 20479 ;; Tracked objects:
 20480 ;;		On entry : 0/0
 20481 ;;		On exit  : 0/0
 20482 ;;		Unchanged: 0/0
 20483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20488 ;;Total ram usage:        0 bytes
 20489 ;; Hardware stack levels used:    1
 20490 ;; Hardware stack levels required when called:    7
 20491 ;; This function calls:
 20492 ;;		Nothing
 20493 ;; This function is called by:
 20494 ;;		_main
 20495 ;; This function uses a non-reentrant model
 20496 ;;
 20497                           
 20498                           
 20499                           ;psect for function _InitExternal_INT
 20500  1FE6                     _InitExternal_INT:	
 20501                           
 20502                           ;interrupt_manager.c: 86: INTCONbits.INTEDG = 0;
 20503                           
 20504                           ;incstack = 0
 20505                           ; Regs used in _InitExternal_INT: []
 20506  1FE6  100B               	bcf	11,0	;volatile
 20507                           
 20508                           ;interrupt_manager.c: 87: PIR0bits.INTF = 0;
 20509  1FE7  002E               	movlb	14	; select bank14
 20510  1FE8  100C               	bcf	12,0	;volatile
 20511                           
 20512                           ;interrupt_manager.c: 88: PIE0bits.INTE = 1;
 20513  1FE9  1416               	bsf	22,0	;volatile
 20514                           
 20515                           ;interrupt_manager.c: 89: INTCONbits.GIE = 1;
 20516  1FEA  178B               	bsf	11,7	;volatile
 20517  1FEB  0008               	return
 20518  1FEC                     __end_of_InitExternal_INT:	
 20519                           
 20520                           	psect	text78
 20521  114E                     __ptext78:	
 20522 ;; *************** function _DATAEE_ReadByte *****************
 20523 ;; Defined at:
 20524 ;;		line 202 in file "mcc_generated_files/memory.c"
 20525 ;; Parameters:    Size  Location     Type
 20526 ;;  bAdd            2   10[BANK0 ] unsigned int 
 20527 ;; Auto vars:     Size  Location     Type
 20528 ;;		None
 20529 ;; Return value:  Size  Location     Type
 20530 ;;                  1    wreg      unsigned char 
 20531 ;; Registers used:
 20532 ;;		wreg, status,2
 20533 ;; Tracked objects:
 20534 ;;		On entry : 0/0
 20535 ;;		On exit  : 0/0
 20536 ;;		Unchanged: 0/0
 20537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20538 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20542 ;;Total ram usage:        2 bytes
 20543 ;; Hardware stack levels used:    1
 20544 ;; Hardware stack levels required when called:    7
 20545 ;; This function calls:
 20546 ;;		Nothing
 20547 ;; This function is called by:
 20548 ;;		_main
 20549 ;; This function uses a non-reentrant model
 20550 ;;
 20551                           
 20552                           
 20553                           ;psect for function _DATAEE_ReadByte
 20554  114E                     _DATAEE_ReadByte:	
 20555                           
 20556                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 20557                           
 20558                           ;incstack = 0
 20559                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 20560  114E  0020               	movlb	0	; select bank0
 20561  114F  082B               	movf	DATAEE_ReadByte@bAdd+1,w
 20562  1150  0030               	movlb	16	; select bank16
 20563  1151  009B               	movwf	27	;volatile
 20564                           
 20565                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 20566  1152  0020               	movlb	0	; select bank0
 20567  1153  082A               	movf	DATAEE_ReadByte@bAdd,w
 20568  1154  0030               	movlb	16	; select bank16
 20569  1155  009A               	movwf	26	;volatile
 20570                           
 20571                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 20572  1156  171E               	bsf	30,6	;volsfr
 20573                           
 20574                           ;memory.c: 207: NVMCON1bits.RD = 1;
 20575  1157  141E               	bsf	30,0	;volsfr
 20576                           
 20577                           ;memory.c: 208: __nop();
 20578  1158  0000               	nop
 20579                           
 20580                           ;memory.c: 209: __nop();
 20581  1159  0000               	nop
 20582                           
 20583                           ;memory.c: 211: return (NVMDATL);
 20584  115A  0030               	movlb	16	; select bank16
 20585  115B  081C               	movf	28,w	;volatile
 20586  115C  0008               	return
 20587  115D                     __end_of_DATAEE_ReadByte:	
 20588                           
 20589                           	psect	intentry
 20590  0004                     __pintentry:	
 20591 ;; *************** function _INTERRUPT_InterruptManager *****************
 20592 ;; Defined at:
 20593 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 20594 ;; Parameters:    Size  Location     Type
 20595 ;;		None
 20596 ;; Auto vars:     Size  Location     Type
 20597 ;;		None
 20598 ;; Return value:  Size  Location     Type
 20599 ;;                  1    wreg      void 
 20600 ;; Registers used:
 20601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20602 ;; Tracked objects:
 20603 ;;		On entry : 0/0
 20604 ;;		On exit  : 0/0
 20605 ;;		Unchanged: 0/0
 20606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20611 ;;Total ram usage:        1 bytes
 20612 ;; Hardware stack levels used:    1
 20613 ;; Hardware stack levels required when called:    6
 20614 ;; This function calls:
 20615 ;;		_ADCC_ThresholdISR
 20616 ;;		_decodeIRSignal
 20617 ;; This function is called by:
 20618 ;;		Interrupt level 1
 20619 ;; This function uses a non-reentrant model
 20620 ;;
 20621                           
 20622  0004                     _INTERRUPT_InterruptManager:	
 20623                           
 20624                           ;incstack = 0
 20625  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 20626                           
 20627                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20628  0005  3180               	pagesel	$
 20629  0006  0020               	movlb	0	; select bank0
 20630  0007  087F               	movf	127,w
 20631  0008  00A9               	movwf	??_INTERRUPT_InterruptManager
 20632                           
 20633                           ;interrupt_manager.c: 56: if(INTCONbits.PEIE == 1)
 20634  0009  1F0B               	btfss	11,6	;volatile
 20635  000A  281D               	goto	i1l1117
 20636                           
 20637                           ;interrupt_manager.c: 57: {
 20638                           ;interrupt_manager.c: 59: if(PIR0bits.INTF ==1)
 20639  000B  002E               	movlb	14	; select bank14
 20640  000C  1C0C               	btfss	12,0	;volatile
 20641  000D  2818               	goto	i1l8161
 20642                           
 20643                           ;interrupt_manager.c: 60: {
 20644                           ;interrupt_manager.c: 62: if (!sto)
 20645  000E  0021               	movlb	1	; select bank1
 20646  000F  0853               	movf	_sto^(0+128),w
 20647  0010  0454               	iorwf	(_sto+1)^(0+128),w
 20648  0011  1D03               	btfss	3,2
 20649  0012  2816               	goto	i1l8159
 20650                           
 20651                           ;interrupt_manager.c: 63: {
 20652                           ;interrupt_manager.c: 65: decodeIRSignal();
 20653  0013  3180  209F  3180   	fcall	_decodeIRSignal
 20654  0016                     i1l8159:	
 20655                           
 20656                           ;interrupt_manager.c: 66: }
 20657                           ;interrupt_manager.c: 67: PIR0bits.INTF = 0;
 20658  0016  002E               	movlb	14	; select bank14
 20659  0017  100C               	bcf	12,0	;volatile
 20660  0018                     i1l8161:	
 20661                           
 20662                           ;interrupt_manager.c: 68: }
 20663                           ;interrupt_manager.c: 69: if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 20664  0018  1897               	btfsc	23,1	;volatile
 20665  0019  1C8D               	btfss	13,1	;volatile
 20666  001A  281D               	goto	i1l1117
 20667                           
 20668                           ;interrupt_manager.c: 70: {
 20669                           ;interrupt_manager.c: 71: ADCC_ThresholdISR();
 20670  001B  3191  2118         	fcall	_ADCC_ThresholdISR
 20671  001D                     i1l1117:	
 20672                           ;interrupt_manager.c: 79: else
 20673                           ;interrupt_manager.c: 80: {
 20674                           
 20675                           ;interrupt_manager.c: 77: }
 20676                           ;interrupt_manager.c: 78: }
 20677                           
 20678                           ;interrupt_manager.c: 74: else
 20679                           ;interrupt_manager.c: 75: {
 20680                           
 20681                           ;interrupt_manager.c: 72: }
 20682                           
 20683  001D  0020               	movlb	0	; select bank0
 20684  001E  0829               	movf	??_INTERRUPT_InterruptManager,w
 20685  001F  00FF               	movwf	127
 20686  0020  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20687  0021  0009               	retfie
 20688  0022                     __end_of_INTERRUPT_InterruptManager:	
 20689                           
 20690                           	psect	text80
 20691  009F                     __ptext80:	
 20692 ;; *************** function _decodeIRSignal *****************
 20693 ;; Defined at:
 20694 ;;		line 20 in file "ir_handler.c"
 20695 ;; Parameters:    Size  Location     Type
 20696 ;;		None
 20697 ;; Auto vars:     Size  Location     Type
 20698 ;;  i               1    8[BANK0 ] unsigned char 
 20699 ;;  command         1    7[BANK0 ] unsigned char 
 20700 ;;  address         1    6[BANK0 ] unsigned char 
 20701 ;; Return value:  Size  Location     Type
 20702 ;;                  1    wreg      void 
 20703 ;; Registers used:
 20704 ;;		wreg, status,2, status,0, pclath, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : 0/0
 20707 ;;		On exit  : 0/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20712 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20713 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20714 ;;Total ram usage:        7 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:    1
 20717 ;; This function calls:
 20718 ;;		_DATAEE_WriteByte
 20719 ;;		___awdiv
 20720 ;;		i1_DATAEE_ReadByte
 20721 ;;		i1_EUSART_Write
 20722 ;;		i1___awmod
 20723 ;; This function is called by:
 20724 ;;		_INTERRUPT_InterruptManager
 20725 ;; This function uses a non-reentrant model
 20726 ;;
 20727                           
 20728                           
 20729                           ;psect for function _decodeIRSignal
 20730  009F                     _decodeIRSignal:	
 20731                           
 20732                           ;ir_handler.c: 21: uint8_t i;
 20733                           ;ir_handler.c: 22: uint8_t address = 0;
 20734                           
 20735                           ;incstack = 0
 20736                           ; Regs used in _decodeIRSignal: [wreg+status,2+status,0+pclath+cstack]
 20737  009F  0020               	movlb	0	; select bank0
 20738  00A0  01A6               	clrf	decodeIRSignal@address
 20739                           
 20740                           ;ir_handler.c: 23: uint8_t command = 0;
 20741  00A1  01A7               	clrf	decodeIRSignal@command
 20742                           
 20743                           ;ir_handler.c: 25: _delay((unsigned long)((445)*(32000000/4000000.0)));
 20744  00A2  3005               	movlw	5
 20745  00A3  0020               	movlb	0	; select bank0
 20746  00A4  00A2               	movwf	??_decodeIRSignal
 20747  00A5  309E               	movlw	158
 20748  00A6                     u927_27:	
 20749  00A6  0B89               	decfsz	9,f
 20750  00A7  28A6               	goto	u927_27
 20751  00A8  0BA2               	decfsz	??_decodeIRSignal,f
 20752  00A9  28A6               	goto	u927_27
 20753  00AA  0000               	nop
 20754                           
 20755                           ;ir_handler.c: 26: if (!PORTBbits.RB0)
 20756  00AB  0020               	movlb	0	; select bank0
 20757  00AC  180D               	btfsc	13,0	;volatile
 20758  00AD  0008               	return
 20759                           
 20760                           ;ir_handler.c: 27: _delay((unsigned long)((889)*(32000000/4000000.0)));
 20761  00AE  300A               	movlw	10
 20762  00AF  0020               	movlb	0	; select bank0
 20763  00B0  00A2               	movwf	??_decodeIRSignal
 20764  00B1  303B               	movlw	59
 20765  00B2                     u928_27:	
 20766  00B2  0B89               	decfsz	9,f
 20767  00B3  28B2               	goto	u928_27
 20768  00B4  0BA2               	decfsz	??_decodeIRSignal,f
 20769  00B5  28B2               	goto	u928_27
 20770                           
 20771                           ;ir_handler.c: 30: if (PORTBbits.RB0)
 20772                           
 20773                           ;ir_handler.c: 28: else return;
 20774  00B6  0020               	movlb	0	; select bank0
 20775  00B7  1C0D               	btfss	13,0	;volatile
 20776  00B8  0008               	return
 20777                           
 20778                           ;ir_handler.c: 31: _delay((unsigned long)((889)*(32000000/4000000.0)));
 20779  00B9  300A               	movlw	10
 20780  00BA  0020               	movlb	0	; select bank0
 20781  00BB  00A2               	movwf	??_decodeIRSignal
 20782  00BC  303B               	movlw	59
 20783  00BD                     u929_27:	
 20784  00BD  0B89               	decfsz	9,f
 20785  00BE  28BD               	goto	u929_27
 20786  00BF  0BA2               	decfsz	??_decodeIRSignal,f
 20787  00C0  28BD               	goto	u929_27
 20788                           
 20789                           ;ir_handler.c: 34: if (!PORTBbits.RB0)
 20790                           
 20791                           ;ir_handler.c: 32: else return;
 20792  00C1  0020               	movlb	0	; select bank0
 20793  00C2  180D               	btfsc	13,0	;volatile
 20794  00C3  0008               	return
 20795                           
 20796                           ;ir_handler.c: 35: _delay((unsigned long)((1778)*(32000000/4000000.0)));
 20797  00C4  3013               	movlw	19
 20798  00C5  0020               	movlb	0	; select bank0
 20799  00C6  00A2               	movwf	??_decodeIRSignal
 20800  00C7  3077               	movlw	119
 20801  00C8                     u930_27:	
 20802  00C8  0B89               	decfsz	9,f
 20803  00C9  28C8               	goto	u930_27
 20804  00CA  0BA2               	decfsz	??_decodeIRSignal,f
 20805  00CB  28C8               	goto	u930_27
 20806  00CC  3200               	nop2
 20807                           
 20808                           ;ir_handler.c: 38: for (i = 0; i < 12; i++) {
 20809                           
 20810                           ;ir_handler.c: 36: else return;
 20811  00CD  0020               	movlb	0	; select bank0
 20812  00CE  01A8               	clrf	decodeIRSignal@i
 20813  00CF  300C               	movlw	12
 20814  00D0  0228               	subwf	decodeIRSignal@i,w
 20815  00D1  1803               	btfsc	3,0
 20816  00D2  2937               	goto	i1l5989
 20817  00D3                     i1l5969:	
 20818                           
 20819                           ;ir_handler.c: 39: if (i == 0) {
 20820  00D3  0828               	movf	decodeIRSignal@i,w
 20821  00D4  1D03               	btfss	3,2
 20822  00D5  28DF               	goto	i1l5973
 20823                           
 20824                           ;ir_handler.c: 40: toggle = !PORTBbits.RB0;
 20825  00D6  1003               	clrc
 20826  00D7  1C0D               	btfss	13,0	;volatile
 20827  00D8  1403               	setc
 20828  00D9  3000               	movlw	0
 20829  00DA  1803               	btfsc	3,0
 20830  00DB  3001               	movlw	1
 20831  00DC  0021               	movlb	1	; select bank1
 20832  00DD  00DA               	movwf	_toggle^(0+128)
 20833                           
 20834                           ;ir_handler.c: 41: } else {
 20835  00DE  2925               	goto	i1l5985
 20836  00DF                     i1l5973:	
 20837                           
 20838                           ;ir_handler.c: 42: if (i < 6) {
 20839  00DF  3006               	movlw	6
 20840  00E0  0020               	movlb	0	; select bank0
 20841  00E1  0228               	subwf	decodeIRSignal@i,w
 20842  00E2  1803               	skipnc
 20843  00E3  2905               	goto	i1l1358
 20844                           
 20845                           ;ir_handler.c: 43: if (PORTBbits.RB0)
 20846  00E4  1C0D               	btfss	13,0	;volatile
 20847  00E5  28F6               	goto	i1l5979
 20848                           
 20849                           ;ir_handler.c: 44: address &= ~(1U << (5 - i));
 20850  00E6  3001               	movlw	1
 20851  00E7  00A2               	movwf	??_decodeIRSignal
 20852  00E8  0328               	decf	decodeIRSignal@i,w
 20853  00E9  3AFF               	xorlw	255
 20854  00EA  3E05               	addlw	5
 20855  00EB  0A89               	incf	9,f
 20856  00EC  28EE               	goto	u531_24
 20857  00ED                     u531_25:	
 20858  00ED  35A2               	lslf	??_decodeIRSignal,f
 20859  00EE                     u531_24:	
 20860  00EE  0B89               	decfsz	9,f
 20861  00EF  28ED               	goto	u531_25
 20862  00F0  0822               	movf	??_decodeIRSignal,w
 20863  00F1  3AFF               	xorlw	255
 20864  00F2  00A3               	movwf	??_decodeIRSignal+1
 20865  00F3  0823               	movf	??_decodeIRSignal+1,w
 20866  00F4  05A6               	andwf	decodeIRSignal@address,f
 20867  00F5  2925               	goto	i1l5985
 20868  00F6                     i1l5979:	
 20869                           
 20870                           ;ir_handler.c: 45: else
 20871                           ;ir_handler.c: 46: address |= (1U << (5 - i));
 20872  00F6  3001               	movlw	1
 20873  00F7  00A2               	movwf	??_decodeIRSignal
 20874  00F8  0328               	decf	decodeIRSignal@i,w
 20875  00F9  3AFF               	xorlw	255
 20876  00FA  3E05               	addlw	5
 20877  00FB  0A89               	incf	9,f
 20878  00FC  28FE               	goto	u532_24
 20879  00FD                     u532_25:	
 20880  00FD  35A2               	lslf	??_decodeIRSignal,f
 20881  00FE                     u532_24:	
 20882  00FE  0B89               	decfsz	9,f
 20883  00FF  28FD               	goto	u532_25
 20884  0100  0822               	movf	??_decodeIRSignal,w
 20885  0101  00A3               	movwf	??_decodeIRSignal+1
 20886  0102  0823               	movf	??_decodeIRSignal+1,w
 20887  0103  04A6               	iorwf	decodeIRSignal@address,f
 20888                           
 20889                           ;ir_handler.c: 47: } else {
 20890  0104  2925               	goto	i1l5985
 20891  0105                     i1l1358:	
 20892                           
 20893                           ;ir_handler.c: 48: if (PORTBbits.RB0)
 20894  0105  1C0D               	btfss	13,0	;volatile
 20895  0106  2917               	goto	i1l5983
 20896                           
 20897                           ;ir_handler.c: 49: command &= ~(1U << (11 - i));
 20898  0107  3001               	movlw	1
 20899  0108  00A2               	movwf	??_decodeIRSignal
 20900  0109  0328               	decf	decodeIRSignal@i,w
 20901  010A  3AFF               	xorlw	255
 20902  010B  3E0B               	addlw	11
 20903  010C  0A89               	incf	9,f
 20904  010D  290F               	goto	u534_24
 20905  010E                     u534_25:	
 20906  010E  35A2               	lslf	??_decodeIRSignal,f
 20907  010F                     u534_24:	
 20908  010F  0B89               	decfsz	9,f
 20909  0110  290E               	goto	u534_25
 20910  0111  0822               	movf	??_decodeIRSignal,w
 20911  0112  3AFF               	xorlw	255
 20912  0113  00A3               	movwf	??_decodeIRSignal+1
 20913  0114  0823               	movf	??_decodeIRSignal+1,w
 20914  0115  05A7               	andwf	decodeIRSignal@command,f
 20915  0116  2925               	goto	i1l5985
 20916  0117                     i1l5983:	
 20917                           
 20918                           ;ir_handler.c: 50: else
 20919                           ;ir_handler.c: 51: command |= (1U << (11 - i));
 20920  0117  3001               	movlw	1
 20921  0118  00A2               	movwf	??_decodeIRSignal
 20922  0119  0328               	decf	decodeIRSignal@i,w
 20923  011A  3AFF               	xorlw	255
 20924  011B  3E0B               	addlw	11
 20925  011C  0A89               	incf	9,f
 20926  011D  291F               	goto	u535_24
 20927  011E                     u535_25:	
 20928  011E  35A2               	lslf	??_decodeIRSignal,f
 20929  011F                     u535_24:	
 20930  011F  0B89               	decfsz	9,f
 20931  0120  291E               	goto	u535_25
 20932  0121  0822               	movf	??_decodeIRSignal,w
 20933  0122  00A3               	movwf	??_decodeIRSignal+1
 20934  0123  0823               	movf	??_decodeIRSignal+1,w
 20935  0124  04A7               	iorwf	decodeIRSignal@command,f
 20936  0125                     i1l5985:	
 20937                           
 20938                           ;ir_handler.c: 52: }
 20939                           ;ir_handler.c: 53: }
 20940                           ;ir_handler.c: 54: _delay((unsigned long)((1778)*(32000000/4000000.0)));
 20941  0125  3013               	movlw	19
 20942  0126  0020               	movlb	0	; select bank0
 20943  0127  00A2               	movwf	??_decodeIRSignal
 20944  0128  3077               	movlw	119
 20945  0129                     u931_27:	
 20946  0129  0B89               	decfsz	9,f
 20947  012A  2929               	goto	u931_27
 20948  012B  0BA2               	decfsz	??_decodeIRSignal,f
 20949  012C  2929               	goto	u931_27
 20950  012D  3200               	nop2
 20951  012E  3001               	movlw	1
 20952  012F  0020               	movlb	0	; select bank0
 20953  0130  00A2               	movwf	??_decodeIRSignal
 20954  0131  0822               	movf	??_decodeIRSignal,w
 20955  0132  07A8               	addwf	decodeIRSignal@i,f
 20956  0133  300C               	movlw	12
 20957  0134  0228               	subwf	decodeIRSignal@i,w
 20958  0135  1C03               	skipc
 20959  0136  28D3               	goto	i1l5969
 20960  0137                     i1l5989:	
 20961                           
 20962                           ;ir_handler.c: 55: }
 20963                           ;ir_handler.c: 57: t1 = toggle;
 20964  0137  0021               	movlb	1	; select bank1
 20965  0138  085A               	movf	_toggle^(0+128),w
 20966  0139  0020               	movlb	0	; select bank0
 20967  013A  00A2               	movwf	??_decodeIRSignal
 20968  013B  01A3               	clrf	??_decodeIRSignal+1
 20969  013C  0822               	movf	??_decodeIRSignal,w
 20970  013D  0021               	movlb	1	; select bank1
 20971  013E  00BF               	movwf	_t1^(0+128)
 20972  013F  0020               	movlb	0	; select bank0
 20973  0140  0823               	movf	??_decodeIRSignal+1,w
 20974  0141  0021               	movlb	1	; select bank1
 20975  0142  00C0               	movwf	(_t1+1)^(0+128)
 20976                           
 20977                           ;ir_handler.c: 58: a1 = (uint8_t)((address / 10) % 10);
 20978  0143  300A               	movlw	10
 20979  0144  00F9               	movwf	i1___awmod@divisor
 20980  0145  3000               	movlw	0
 20981  0146  00FA               	movwf	i1___awmod@divisor+1
 20982  0147  300A               	movlw	10
 20983  0148  00F0               	movwf	___awdiv@divisor
 20984  0149  3000               	movlw	0
 20985  014A  00F1               	movwf	___awdiv@divisor+1
 20986  014B  0020               	movlb	0	; select bank0
 20987  014C  0826               	movf	decodeIRSignal@address,w
 20988  014D  00A2               	movwf	??_decodeIRSignal
 20989  014E  01A3               	clrf	??_decodeIRSignal+1
 20990  014F  0822               	movf	??_decodeIRSignal,w
 20991  0150  00F2               	movwf	___awdiv@dividend
 20992  0151  0823               	movf	??_decodeIRSignal+1,w
 20993  0152  00F3               	movwf	___awdiv@dividend+1
 20994  0153  3188  201E  3180   	fcall	___awdiv
 20995  0156  0871               	movf	?___awdiv+1,w
 20996  0157  00FC               	movwf	i1___awmod@dividend+1
 20997  0158  0870               	movf	?___awdiv,w
 20998  0159  00FB               	movwf	i1___awmod@dividend
 20999  015A  3197  272B  3180   	fcall	i1___awmod
 21000  015D  0879               	movf	?i1___awmod,w
 21001  015E  0020               	movlb	0	; select bank0
 21002  015F  00A4               	movwf	??_decodeIRSignal+2
 21003  0160  01A5               	clrf	??_decodeIRSignal+3
 21004  0161  0824               	movf	??_decodeIRSignal+2,w
 21005  0162  00D5               	movwf	_a1
 21006  0163  0825               	movf	??_decodeIRSignal+3,w
 21007  0164  00D6               	movwf	_a1+1
 21008                           
 21009                           ;ir_handler.c: 59: a2 = (uint8_t)(address % 10);
 21010  0165  300A               	movlw	10
 21011  0166  00F9               	movwf	i1___awmod@divisor
 21012  0167  3000               	movlw	0
 21013  0168  00FA               	movwf	i1___awmod@divisor+1
 21014  0169  0826               	movf	decodeIRSignal@address,w
 21015  016A  00A2               	movwf	??_decodeIRSignal
 21016  016B  01A3               	clrf	??_decodeIRSignal+1
 21017  016C  0822               	movf	??_decodeIRSignal,w
 21018  016D  00FB               	movwf	i1___awmod@dividend
 21019  016E  0823               	movf	??_decodeIRSignal+1,w
 21020  016F  00FC               	movwf	i1___awmod@dividend+1
 21021  0170  3197  272B  3180   	fcall	i1___awmod
 21022  0173  0879               	movf	?i1___awmod,w
 21023  0174  0020               	movlb	0	; select bank0
 21024  0175  00A4               	movwf	??_decodeIRSignal+2
 21025  0176  01A5               	clrf	??_decodeIRSignal+3
 21026  0177  0824               	movf	??_decodeIRSignal+2,w
 21027  0178  00D3               	movwf	_a2
 21028  0179  0825               	movf	??_decodeIRSignal+3,w
 21029  017A  00D4               	movwf	_a2+1
 21030                           
 21031                           ;ir_handler.c: 60: c1 = (uint8_t)((command / 10) % 10);
 21032  017B  300A               	movlw	10
 21033  017C  00F9               	movwf	i1___awmod@divisor
 21034  017D  3000               	movlw	0
 21035  017E  00FA               	movwf	i1___awmod@divisor+1
 21036  017F  300A               	movlw	10
 21037  0180  00F0               	movwf	___awdiv@divisor
 21038  0181  3000               	movlw	0
 21039  0182  00F1               	movwf	___awdiv@divisor+1
 21040  0183  0827               	movf	decodeIRSignal@command,w
 21041  0184  00A2               	movwf	??_decodeIRSignal
 21042  0185  01A3               	clrf	??_decodeIRSignal+1
 21043  0186  0822               	movf	??_decodeIRSignal,w
 21044  0187  00F2               	movwf	___awdiv@dividend
 21045  0188  0823               	movf	??_decodeIRSignal+1,w
 21046  0189  00F3               	movwf	___awdiv@dividend+1
 21047  018A  3188  201E  3180   	fcall	___awdiv
 21048  018D  0871               	movf	?___awdiv+1,w
 21049  018E  00FC               	movwf	i1___awmod@dividend+1
 21050  018F  0870               	movf	?___awdiv,w
 21051  0190  00FB               	movwf	i1___awmod@dividend
 21052  0191  3197  272B  3180   	fcall	i1___awmod
 21053  0194  0879               	movf	?i1___awmod,w
 21054  0195  0020               	movlb	0	; select bank0
 21055  0196  00A4               	movwf	??_decodeIRSignal+2
 21056  0197  01A5               	clrf	??_decodeIRSignal+3
 21057  0198  0824               	movf	??_decodeIRSignal+2,w
 21058  0199  00D1               	movwf	_c1
 21059  019A  0825               	movf	??_decodeIRSignal+3,w
 21060  019B  00D2               	movwf	_c1+1
 21061                           
 21062                           ;ir_handler.c: 61: c2 = (uint8_t)(command % 10);
 21063  019C  300A               	movlw	10
 21064  019D  00F9               	movwf	i1___awmod@divisor
 21065  019E  3000               	movlw	0
 21066  019F  00FA               	movwf	i1___awmod@divisor+1
 21067  01A0  0827               	movf	decodeIRSignal@command,w
 21068  01A1  00A2               	movwf	??_decodeIRSignal
 21069  01A2  01A3               	clrf	??_decodeIRSignal+1
 21070  01A3  0822               	movf	??_decodeIRSignal,w
 21071  01A4  00FB               	movwf	i1___awmod@dividend
 21072  01A5  0823               	movf	??_decodeIRSignal+1,w
 21073  01A6  00FC               	movwf	i1___awmod@dividend+1
 21074  01A7  3197  272B  3180   	fcall	i1___awmod
 21075  01AA  0879               	movf	?i1___awmod,w
 21076  01AB  0020               	movlb	0	; select bank0
 21077  01AC  00A4               	movwf	??_decodeIRSignal+2
 21078  01AD  01A5               	clrf	??_decodeIRSignal+3
 21079  01AE  0824               	movf	??_decodeIRSignal+2,w
 21080  01AF  00CF               	movwf	_c2
 21081  01B0  0825               	movf	??_decodeIRSignal+3,w
 21082  01B1  00D0               	movwf	_c2+1
 21083                           
 21084                           ;ir_handler.c: 62: sto = 1;
 21085  01B2  3001               	movlw	1
 21086  01B3  0021               	movlb	1	; select bank1
 21087  01B4  00D3               	movwf	_sto^(0+128)
 21088  01B5  3000               	movlw	0
 21089  01B6  00D4               	movwf	(_sto^(0+128)+1)
 21090                           
 21091                           ;ir_handler.c: 64: if (d == 1) {
 21092  01B7  0341               	decf	_d^(0+128),w
 21093  01B8  0442               	iorwf	(_d+1)^(0+128),w
 21094  01B9  1D03               	btfss	3,2
 21095  01BA  0008               	return
 21096                           
 21097                           ;ir_handler.c: 65: d = 0;
 21098  01BB  01C1               	clrf	_d^(0+128)
 21099  01BC  01C2               	clrf	(_d+1)^(0+128)
 21100                           
 21101                           ;ir_handler.c: 66: DATAEE_WriteByte(0x00, a1);
 21102  01BD  3000               	movlw	0
 21103  01BE  00F0               	movwf	DATAEE_WriteByte@bAdd
 21104  01BF  00F1               	movwf	DATAEE_WriteByte@bAdd+1
 21105  01C0  0020               	movlb	0	; select bank0
 21106  01C1  0855               	movf	_a1,w
 21107  01C2  00A2               	movwf	??_decodeIRSignal
 21108  01C3  0822               	movf	??_decodeIRSignal,w
 21109  01C4  00F2               	movwf	DATAEE_WriteByte@bData
 21110  01C5  3192  22FD  3180   	fcall	_DATAEE_WriteByte
 21111                           
 21112                           ;ir_handler.c: 67: _delay((unsigned long)((650)*(32000000/4000.0)));
 21113  01C8  301B               	movlw	27
 21114  01C9  0020               	movlb	0	; select bank0
 21115  01CA  00A3               	movwf	??_decodeIRSignal+1
 21116  01CB  3062               	movlw	98
 21117  01CC  00A2               	movwf	??_decodeIRSignal
 21118  01CD  302B               	movlw	43
 21119  01CE                     u932_27:	
 21120  01CE  0B89               	decfsz	9,f
 21121  01CF  29CE               	goto	u932_27
 21122  01D0  0BA2               	decfsz	??_decodeIRSignal,f
 21123  01D1  29CE               	goto	u932_27
 21124  01D2  0BA3               	decfsz	??_decodeIRSignal+1,f
 21125  01D3  29CE               	goto	u932_27
 21126                           
 21127                           ;ir_handler.c: 68: DATAEE_WriteByte(0x01, a2);
 21128  01D4  3001               	movlw	1
 21129  01D5  00F0               	movwf	DATAEE_WriteByte@bAdd
 21130  01D6  3000               	movlw	0
 21131  01D7  00F1               	movwf	DATAEE_WriteByte@bAdd+1
 21132  01D8  0020               	movlb	0	; select bank0
 21133  01D9  0853               	movf	_a2,w
 21134  01DA  00A2               	movwf	??_decodeIRSignal
 21135  01DB  0822               	movf	??_decodeIRSignal,w
 21136  01DC  00F2               	movwf	DATAEE_WriteByte@bData
 21137  01DD  3192  22FD  3180   	fcall	_DATAEE_WriteByte
 21138                           
 21139                           ;ir_handler.c: 69: _delay((unsigned long)((650)*(32000000/4000.0)));
 21140  01E0  301B               	movlw	27
 21141  01E1  0020               	movlb	0	; select bank0
 21142  01E2  00A3               	movwf	??_decodeIRSignal+1
 21143  01E3  3062               	movlw	98
 21144  01E4  00A2               	movwf	??_decodeIRSignal
 21145  01E5  302B               	movlw	43
 21146  01E6                     u933_27:	
 21147  01E6  0B89               	decfsz	9,f
 21148  01E7  29E6               	goto	u933_27
 21149  01E8  0BA2               	decfsz	??_decodeIRSignal,f
 21150  01E9  29E6               	goto	u933_27
 21151  01EA  0BA3               	decfsz	??_decodeIRSignal+1,f
 21152  01EB  29E6               	goto	u933_27
 21153                           
 21154                           ;ir_handler.c: 70: r1 = DATAEE_ReadByte(0x00);
 21155  01EC  3000               	movlw	0
 21156  01ED  00F0               	movwf	i1DATAEE_ReadByte@bAdd
 21157  01EE  00F1               	movwf	i1DATAEE_ReadByte@bAdd+1
 21158  01EF  3190  20DC  3180   	fcall	i1_DATAEE_ReadByte
 21159  01F2  0020               	movlb	0	; select bank0
 21160  01F3  00A2               	movwf	??_decodeIRSignal
 21161  01F4  01A3               	clrf	??_decodeIRSignal+1
 21162  01F5  0822               	movf	??_decodeIRSignal,w
 21163  01F6  0021               	movlb	1	; select bank1
 21164  01F7  00B9               	movwf	_r1^(0+128)
 21165  01F8  0020               	movlb	0	; select bank0
 21166  01F9  0823               	movf	??_decodeIRSignal+1,w
 21167  01FA  0021               	movlb	1	; select bank1
 21168  01FB  00BA               	movwf	(_r1+1)^(0+128)
 21169                           
 21170                           ;ir_handler.c: 71: _delay((unsigned long)((650)*(32000000/4000.0)));
 21171  01FC  301B               	movlw	27
 21172  01FD  0020               	movlb	0	; select bank0
 21173  01FE  00A3               	movwf	??_decodeIRSignal+1
 21174  01FF  3062               	movlw	98
 21175  0200  00A2               	movwf	??_decodeIRSignal
 21176  0201  302B               	movlw	43
 21177  0202                     u934_27:	
 21178  0202  0B89               	decfsz	9,f
 21179  0203  2A02               	goto	u934_27
 21180  0204  0BA2               	decfsz	??_decodeIRSignal,f
 21181  0205  2A02               	goto	u934_27
 21182  0206  0BA3               	decfsz	??_decodeIRSignal+1,f
 21183  0207  2A02               	goto	u934_27
 21184                           
 21185                           ;ir_handler.c: 72: r2 = DATAEE_ReadByte(0x01);
 21186  0208  3001               	movlw	1
 21187  0209  00F0               	movwf	i1DATAEE_ReadByte@bAdd
 21188  020A  3000               	movlw	0
 21189  020B  00F1               	movwf	i1DATAEE_ReadByte@bAdd+1
 21190  020C  3190  20DC  3180   	fcall	i1_DATAEE_ReadByte
 21191  020F  0020               	movlb	0	; select bank0
 21192  0210  00A2               	movwf	??_decodeIRSignal
 21193  0211  01A3               	clrf	??_decodeIRSignal+1
 21194  0212  0822               	movf	??_decodeIRSignal,w
 21195  0213  0021               	movlb	1	; select bank1
 21196  0214  00B7               	movwf	_r2^(0+128)
 21197  0215  0020               	movlb	0	; select bank0
 21198  0216  0823               	movf	??_decodeIRSignal+1,w
 21199  0217  0021               	movlb	1	; select bank1
 21200  0218  00B8               	movwf	(_r2+1)^(0+128)
 21201                           
 21202                           ;ir_handler.c: 73: _delay((unsigned long)((650)*(32000000/4000.0)));
 21203  0219  301B               	movlw	27
 21204  021A  0020               	movlb	0	; select bank0
 21205  021B  00A3               	movwf	??_decodeIRSignal+1
 21206  021C  3062               	movlw	98
 21207  021D  00A2               	movwf	??_decodeIRSignal
 21208  021E  302B               	movlw	43
 21209  021F                     u935_27:	
 21210  021F  0B89               	decfsz	9,f
 21211  0220  2A1F               	goto	u935_27
 21212  0221  0BA2               	decfsz	??_decodeIRSignal,f
 21213  0222  2A1F               	goto	u935_27
 21214  0223  0BA3               	decfsz	??_decodeIRSignal+1,f
 21215  0224  2A1F               	goto	u935_27
 21216                           
 21217                           ;ir_handler.c: 74: EUSART_Write('V');
 21218  0225  3056               	movlw	86
 21219  0226  3190  206B  3180   	fcall	i1_EUSART_Write
 21220                           
 21221                           ;ir_handler.c: 75: _delay((unsigned long)((650)*(32000000/4000.0)));
 21222  0229  301B               	movlw	27
 21223  022A  0020               	movlb	0	; select bank0
 21224  022B  00A3               	movwf	??_decodeIRSignal+1
 21225  022C  3062               	movlw	98
 21226  022D  00A2               	movwf	??_decodeIRSignal
 21227  022E  302B               	movlw	43
 21228  022F                     u936_27:	
 21229  022F  0B89               	decfsz	9,f
 21230  0230  2A2F               	goto	u936_27
 21231  0231  0BA2               	decfsz	??_decodeIRSignal,f
 21232  0232  2A2F               	goto	u936_27
 21233  0233  0BA3               	decfsz	??_decodeIRSignal+1,f
 21234  0234  2A2F               	goto	u936_27
 21235                           
 21236                           ;ir_handler.c: 76: d1 = r1;
 21237  0235  0021               	movlb	1	; select bank1
 21238  0236  083A               	movf	(_r1+1)^(0+128),w
 21239  0237  00BE               	movwf	(_d1+1)^(0+128)
 21240  0238  0839               	movf	_r1^(0+128),w
 21241  0239  00BD               	movwf	_d1^(0+128)
 21242                           
 21243                           ;ir_handler.c: 77: d2 = r2;
 21244  023A  0838               	movf	(_r2+1)^(0+128),w
 21245  023B  00BC               	movwf	(_d2+1)^(0+128)
 21246  023C  0837               	movf	_r2^(0+128),w
 21247  023D  00BB               	movwf	_d2^(0+128)
 21248  023E  0008               	return
 21249  023F                     __end_of_decodeIRSignal:	
 21250                           
 21251                           	psect	text81
 21252  172B                     __ptext81:	
 21253 ;; *************** function i1___awmod *****************
 21254 ;; Defined at:
 21255 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 21256 ;; Parameters:    Size  Location     Type
 21257 ;;  divisor         2    9[COMMON] int 
 21258 ;;  dividend        2   11[COMMON] int 
 21259 ;; Auto vars:     Size  Location     Type
 21260 ;;  __awmod         1    1[BANK0 ] unsigned char 
 21261 ;;  __awmod         1    0[BANK0 ] unsigned char 
 21262 ;; Return value:  Size  Location     Type
 21263 ;;                  2    9[COMMON] int 
 21264 ;; Registers used:
 21265 ;;		wreg, status,2, status,0
 21266 ;; Tracked objects:
 21267 ;;		On entry : 0/0
 21268 ;;		On exit  : 0/0
 21269 ;;		Unchanged: 0/0
 21270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21274 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21275 ;;Total ram usage:        7 bytes
 21276 ;; Hardware stack levels used:    1
 21277 ;; This function calls:
 21278 ;;		Nothing
 21279 ;; This function is called by:
 21280 ;;		_decodeIRSignal
 21281 ;; This function uses a non-reentrant model
 21282 ;;
 21283                           
 21284                           
 21285                           ;psect for function i1___awmod
 21286  172B                     i1___awmod:	
 21287                           
 21288                           ;incstack = 0
 21289                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 21290  172B  0020               	movlb	0	; select bank0
 21291  172C  01A1               	clrf	i1___awmod@sign
 21292  172D  1FFC               	btfss	i1___awmod@dividend+1,7
 21293  172E  2F36               	goto	i1l5851
 21294  172F  09FB               	comf	i1___awmod@dividend,f
 21295  1730  09FC               	comf	i1___awmod@dividend+1,f
 21296  1731  0AFB               	incf	i1___awmod@dividend,f
 21297  1732  1903               	skipnz
 21298  1733  0AFC               	incf	i1___awmod@dividend+1,f
 21299  1734  01A1               	clrf	i1___awmod@sign
 21300  1735  0AA1               	incf	i1___awmod@sign,f
 21301  1736                     i1l5851:	
 21302  1736  1FFA               	btfss	i1___awmod@divisor+1,7
 21303  1737  2F3D               	goto	i1l5855
 21304  1738  09F9               	comf	i1___awmod@divisor,f
 21305  1739  09FA               	comf	i1___awmod@divisor+1,f
 21306  173A  0AF9               	incf	i1___awmod@divisor,f
 21307  173B  1903               	skipnz
 21308  173C  0AFA               	incf	i1___awmod@divisor+1,f
 21309  173D                     i1l5855:	
 21310  173D  0879               	movf	i1___awmod@divisor,w
 21311  173E  047A               	iorwf	i1___awmod@divisor+1,w
 21312  173F  1903               	btfsc	3,2
 21313  1740  2F64               	goto	i1l5873
 21314  1741  01A0               	clrf	i1___awmod@counter
 21315  1742  0AA0               	incf	i1___awmod@counter,f
 21316  1743                     i1l5863:	
 21317  1743  1BFA               	btfsc	i1___awmod@divisor+1,7
 21318  1744  2F4F               	goto	i1l5865
 21319  1745  3001               	movlw	1
 21320  1746                     u514_25:	
 21321  1746  35F9               	lslf	i1___awmod@divisor,f
 21322  1747  0DFA               	rlf	i1___awmod@divisor+1,f
 21323  1748  0B89               	decfsz	9,f
 21324  1749  2F46               	goto	u514_25
 21325  174A  3001               	movlw	1
 21326  174B  00FD               	movwf	??i1___awmod
 21327  174C  087D               	movf	??i1___awmod,w
 21328  174D  07A0               	addwf	i1___awmod@counter,f
 21329  174E  2F43               	goto	i1l5863
 21330  174F                     i1l5865:	
 21331  174F  087A               	movf	i1___awmod@divisor+1,w
 21332  1750  027C               	subwf	i1___awmod@dividend+1,w
 21333  1751  1D03               	skipz
 21334  1752  2F55               	goto	u516_25
 21335  1753  0879               	movf	i1___awmod@divisor,w
 21336  1754  027B               	subwf	i1___awmod@dividend,w
 21337  1755                     u516_25:	
 21338  1755  1C03               	skipc
 21339  1756  2F5B               	goto	i1l5869
 21340  1757  0879               	movf	i1___awmod@divisor,w
 21341  1758  02FB               	subwf	i1___awmod@dividend,f
 21342  1759  087A               	movf	i1___awmod@divisor+1,w
 21343  175A  3BFC               	subwfb	i1___awmod@dividend+1,f
 21344  175B                     i1l5869:	
 21345  175B  3001               	movlw	1
 21346  175C                     u517_25:	
 21347  175C  36FA               	lsrf	i1___awmod@divisor+1,f
 21348  175D  0CF9               	rrf	i1___awmod@divisor,f
 21349  175E  0B89               	decfsz	9,f
 21350  175F  2F5C               	goto	u517_25
 21351  1760  3001               	movlw	1
 21352  1761  02A0               	subwf	i1___awmod@counter,f
 21353  1762  1D03               	btfss	3,2
 21354  1763  2F4F               	goto	i1l5865
 21355  1764                     i1l5873:	
 21356  1764  0821               	movf	i1___awmod@sign,w
 21357  1765  1903               	btfsc	3,2
 21358  1766  2F6C               	goto	i1l5877
 21359  1767  09FB               	comf	i1___awmod@dividend,f
 21360  1768  09FC               	comf	i1___awmod@dividend+1,f
 21361  1769  0AFB               	incf	i1___awmod@dividend,f
 21362  176A  1903               	skipnz
 21363  176B  0AFC               	incf	i1___awmod@dividend+1,f
 21364  176C                     i1l5877:	
 21365  176C  087C               	movf	i1___awmod@dividend+1,w
 21366  176D  00FA               	movwf	?i1___awmod+1
 21367  176E  087B               	movf	i1___awmod@dividend,w
 21368  176F  00F9               	movwf	?i1___awmod
 21369  1770  0008               	return
 21370  1771                     __end_ofi1___awmod:	
 21371                           
 21372                           	psect	text82
 21373  106B                     __ptext82:	
 21374 ;; *************** function i1_EUSART_Write *****************
 21375 ;; Defined at:
 21376 ;;		line 132 in file "mcc_generated_files/eusart.c"
 21377 ;; Parameters:    Size  Location     Type
 21378 ;;  txData          1    wreg     unsigned char 
 21379 ;; Auto vars:     Size  Location     Type
 21380 ;;  txData          1    0[COMMON] unsigned char 
 21381 ;; Return value:  Size  Location     Type
 21382 ;;                  1    wreg      void 
 21383 ;; Registers used:
 21384 ;;		wreg
 21385 ;; Tracked objects:
 21386 ;;		On entry : 0/0
 21387 ;;		On exit  : 0/0
 21388 ;;		Unchanged: 0/0
 21389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21393 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21394 ;;Total ram usage:        1 bytes
 21395 ;; Hardware stack levels used:    1
 21396 ;; This function calls:
 21397 ;;		Nothing
 21398 ;; This function is called by:
 21399 ;;		_decodeIRSignal
 21400 ;; This function uses a non-reentrant model
 21401 ;;
 21402                           
 21403                           
 21404                           ;psect for function i1_EUSART_Write
 21405  106B                     i1_EUSART_Write:	
 21406                           
 21407                           ;incstack = 0
 21408                           ; Regs used in i1_EUSART_Write: [wreg]
 21409                           ;i1EUSART_Write@txData stored from wreg
 21410  106B  00F0               	movwf	i1EUSART_Write@txData
 21411  106C                     i1l1187:	
 21412                           ;eusart.c: 135: {
 21413                           
 21414                           ;eusart.c: 134: while(0 == PIR3bits.TXIF)
 21415                           
 21416  106C  002E               	movlb	14	; select bank14
 21417  106D  1E0F               	btfss	15,4	;volatile
 21418  106E  286C               	goto	i1l1187
 21419                           
 21420                           ;eusart.c: 136: }
 21421                           ;eusart.c: 138: TX1REG = txData;
 21422  106F  0870               	movf	i1EUSART_Write@txData,w
 21423  1070  0022               	movlb	2	; select bank2
 21424  1071  009A               	movwf	26	;volatile
 21425  1072  0008               	return
 21426  1073                     __end_ofi1_EUSART_Write:	
 21427                           
 21428                           	psect	text83
 21429  10DC                     __ptext83:	
 21430 ;; *************** function i1_DATAEE_ReadByte *****************
 21431 ;; Defined at:
 21432 ;;		line 202 in file "mcc_generated_files/memory.c"
 21433 ;; Parameters:    Size  Location     Type
 21434 ;;  bAdd            2    0[COMMON] unsigned int 
 21435 ;; Auto vars:     Size  Location     Type
 21436 ;;		None
 21437 ;; Return value:  Size  Location     Type
 21438 ;;                  1    wreg      unsigned char 
 21439 ;; Registers used:
 21440 ;;		wreg, status,2
 21441 ;; Tracked objects:
 21442 ;;		On entry : 0/0
 21443 ;;		On exit  : 0/0
 21444 ;;		Unchanged: 0/0
 21445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21450 ;;Total ram usage:        2 bytes
 21451 ;; Hardware stack levels used:    1
 21452 ;; This function calls:
 21453 ;;		Nothing
 21454 ;; This function is called by:
 21455 ;;		_decodeIRSignal
 21456 ;; This function uses a non-reentrant model
 21457 ;;
 21458                           
 21459                           
 21460                           ;psect for function i1_DATAEE_ReadByte
 21461  10DC                     i1_DATAEE_ReadByte:	
 21462                           
 21463                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 21464                           
 21465                           ;incstack = 0
 21466                           ; Regs used in i1_DATAEE_ReadByte: [wreg+status,2]
 21467  10DC  0871               	movf	i1DATAEE_ReadByte@bAdd+1,w
 21468  10DD  0030               	movlb	16	; select bank16
 21469  10DE  009B               	movwf	27	;volatile
 21470                           
 21471                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 21472  10DF  0870               	movf	i1DATAEE_ReadByte@bAdd,w
 21473  10E0  009A               	movwf	26	;volatile
 21474                           
 21475                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 21476  10E1  171E               	bsf	30,6	;volsfr
 21477                           
 21478                           ;memory.c: 207: NVMCON1bits.RD = 1;
 21479  10E2  141E               	bsf	30,0	;volsfr
 21480                           
 21481                           ;memory.c: 208: __nop();
 21482  10E3  0000               	nop
 21483                           
 21484                           ;memory.c: 209: __nop();
 21485  10E4  0000               	nop
 21486                           
 21487                           ;memory.c: 211: return (NVMDATL);
 21488  10E5  0030               	movlb	16	; select bank16
 21489  10E6  081C               	movf	28,w	;volatile
 21490  10E7  0008               	return
 21491  10E8                     __end_ofi1_DATAEE_ReadByte:	
 21492                           
 21493                           	psect	text84
 21494  081E                     __ptext84:	
 21495 ;; *************** function ___awdiv *****************
 21496 ;; Defined at:
 21497 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 21498 ;; Parameters:    Size  Location     Type
 21499 ;;  divisor         2    0[COMMON] int 
 21500 ;;  dividend        2    2[COMMON] int 
 21501 ;; Auto vars:     Size  Location     Type
 21502 ;;  quotient        2    7[COMMON] int 
 21503 ;;  sign            1    6[COMMON] unsigned char 
 21504 ;;  counter         1    5[COMMON] unsigned char 
 21505 ;; Return value:  Size  Location     Type
 21506 ;;                  2    0[COMMON] int 
 21507 ;; Registers used:
 21508 ;;		wreg, status,2, status,0
 21509 ;; Tracked objects:
 21510 ;;		On entry : 0/0
 21511 ;;		On exit  : 0/0
 21512 ;;		Unchanged: 0/0
 21513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21515 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21517 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21518 ;;Total ram usage:        9 bytes
 21519 ;; Hardware stack levels used:    1
 21520 ;; This function calls:
 21521 ;;		Nothing
 21522 ;; This function is called by:
 21523 ;;		_decodeIRSignal
 21524 ;; This function uses a non-reentrant model
 21525 ;;
 21526                           
 21527                           
 21528                           ;psect for function ___awdiv
 21529  081E                     ___awdiv:	
 21530                           
 21531                           ;incstack = 0
 21532                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21533  081E  01F6               	clrf	___awdiv@sign
 21534  081F  1FF1               	btfss	___awdiv@divisor+1,7
 21535  0820  2828               	goto	i1l5787
 21536  0821  09F0               	comf	___awdiv@divisor,f
 21537  0822  09F1               	comf	___awdiv@divisor+1,f
 21538  0823  0AF0               	incf	___awdiv@divisor,f
 21539  0824  1903               	skipnz
 21540  0825  0AF1               	incf	___awdiv@divisor+1,f
 21541  0826  01F6               	clrf	___awdiv@sign
 21542  0827  0AF6               	incf	___awdiv@sign,f
 21543  0828                     i1l5787:	
 21544  0828  1FF3               	btfss	___awdiv@dividend+1,7
 21545  0829  2833               	goto	i1l5793
 21546  082A  09F2               	comf	___awdiv@dividend,f
 21547  082B  09F3               	comf	___awdiv@dividend+1,f
 21548  082C  0AF2               	incf	___awdiv@dividend,f
 21549  082D  1903               	skipnz
 21550  082E  0AF3               	incf	___awdiv@dividend+1,f
 21551  082F  3001               	movlw	1
 21552  0830  00F4               	movwf	??___awdiv
 21553  0831  0874               	movf	??___awdiv,w
 21554  0832  06F6               	xorwf	___awdiv@sign,f
 21555  0833                     i1l5793:	
 21556  0833  01F7               	clrf	___awdiv@quotient
 21557  0834  01F8               	clrf	___awdiv@quotient+1
 21558  0835  0870               	movf	___awdiv@divisor,w
 21559  0836  0471               	iorwf	___awdiv@divisor+1,w
 21560  0837  1903               	btfsc	3,2
 21561  0838  2862               	goto	i1l5815
 21562  0839  01F5               	clrf	___awdiv@counter
 21563  083A  0AF5               	incf	___awdiv@counter,f
 21564  083B                     i1l5803:	
 21565  083B  1BF1               	btfsc	___awdiv@divisor+1,7
 21566  083C  2847               	goto	i1l5805
 21567  083D  3001               	movlw	1
 21568  083E                     u503_25:	
 21569  083E  35F0               	lslf	___awdiv@divisor,f
 21570  083F  0DF1               	rlf	___awdiv@divisor+1,f
 21571  0840  0B89               	decfsz	9,f
 21572  0841  283E               	goto	u503_25
 21573  0842  3001               	movlw	1
 21574  0843  00F4               	movwf	??___awdiv
 21575  0844  0874               	movf	??___awdiv,w
 21576  0845  07F5               	addwf	___awdiv@counter,f
 21577  0846  283B               	goto	i1l5803
 21578  0847                     i1l5805:	
 21579  0847  3001               	movlw	1
 21580  0848                     u505_25:	
 21581  0848  35F7               	lslf	___awdiv@quotient,f
 21582  0849  0DF8               	rlf	___awdiv@quotient+1,f
 21583  084A  0B89               	decfsz	9,f
 21584  084B  2848               	goto	u505_25
 21585  084C  0871               	movf	___awdiv@divisor+1,w
 21586  084D  0273               	subwf	___awdiv@dividend+1,w
 21587  084E  1D03               	skipz
 21588  084F  2852               	goto	u506_25
 21589  0850  0870               	movf	___awdiv@divisor,w
 21590  0851  0272               	subwf	___awdiv@dividend,w
 21591  0852                     u506_25:	
 21592  0852  1C03               	skipc
 21593  0853  2859               	goto	i1l5811
 21594  0854  0870               	movf	___awdiv@divisor,w
 21595  0855  02F2               	subwf	___awdiv@dividend,f
 21596  0856  0871               	movf	___awdiv@divisor+1,w
 21597  0857  3BF3               	subwfb	___awdiv@dividend+1,f
 21598  0858  1477               	bsf	___awdiv@quotient,0
 21599  0859                     i1l5811:	
 21600  0859  3001               	movlw	1
 21601  085A                     u507_25:	
 21602  085A  36F1               	lsrf	___awdiv@divisor+1,f
 21603  085B  0CF0               	rrf	___awdiv@divisor,f
 21604  085C  0B89               	decfsz	9,f
 21605  085D  285A               	goto	u507_25
 21606  085E  3001               	movlw	1
 21607  085F  02F5               	subwf	___awdiv@counter,f
 21608  0860  1D03               	btfss	3,2
 21609  0861  2847               	goto	i1l5805
 21610  0862                     i1l5815:	
 21611  0862  0876               	movf	___awdiv@sign,w
 21612  0863  1903               	btfsc	3,2
 21613  0864  286A               	goto	i1l5819
 21614  0865  09F7               	comf	___awdiv@quotient,f
 21615  0866  09F8               	comf	___awdiv@quotient+1,f
 21616  0867  0AF7               	incf	___awdiv@quotient,f
 21617  0868  1903               	skipnz
 21618  0869  0AF8               	incf	___awdiv@quotient+1,f
 21619  086A                     i1l5819:	
 21620  086A  0878               	movf	___awdiv@quotient+1,w
 21621  086B  00F1               	movwf	?___awdiv+1
 21622  086C  0877               	movf	___awdiv@quotient,w
 21623  086D  00F0               	movwf	?___awdiv
 21624  086E  0008               	return
 21625  086F                     __end_of___awdiv:	
 21626                           
 21627                           	psect	text85
 21628  12FD                     __ptext85:	
 21629 ;; *************** function _DATAEE_WriteByte *****************
 21630 ;; Defined at:
 21631 ;;		line 180 in file "mcc_generated_files/memory.c"
 21632 ;; Parameters:    Size  Location     Type
 21633 ;;  bAdd            2    0[COMMON] unsigned int 
 21634 ;;  bData           1    2[COMMON] unsigned char 
 21635 ;; Auto vars:     Size  Location     Type
 21636 ;;  GIEBitValue     1    3[COMMON] unsigned char 
 21637 ;; Return value:  Size  Location     Type
 21638 ;;                  1    wreg      void 
 21639 ;; Registers used:
 21640 ;;		wreg, status,2, status,0
 21641 ;; Tracked objects:
 21642 ;;		On entry : 0/0
 21643 ;;		On exit  : 0/0
 21644 ;;		Unchanged: 0/0
 21645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21646 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21649 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21650 ;;Total ram usage:        4 bytes
 21651 ;; Hardware stack levels used:    1
 21652 ;; This function calls:
 21653 ;;		Nothing
 21654 ;; This function is called by:
 21655 ;;		_decodeIRSignal
 21656 ;; This function uses a non-reentrant model
 21657 ;;
 21658                           
 21659                           
 21660                           ;psect for function _DATAEE_WriteByte
 21661  12FD                     _DATAEE_WriteByte:	
 21662                           
 21663                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
 21664                           
 21665                           ;incstack = 0
 21666                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 21667  12FD  3000               	movlw	0
 21668  12FE  1B8B               	btfsc	11,7	;volatile
 21669  12FF  3001               	movlw	1
 21670  1300  00F3               	movwf	DATAEE_WriteByte@GIEBitValue
 21671                           
 21672                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
 21673  1301  0871               	movf	DATAEE_WriteByte@bAdd+1,w
 21674  1302  0030               	movlb	16	; select bank16
 21675  1303  009B               	movwf	27	;volatile
 21676                           
 21677                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
 21678  1304  0870               	movf	DATAEE_WriteByte@bAdd,w
 21679  1305  009A               	movwf	26	;volatile
 21680                           
 21681                           ;memory.c: 186: NVMDATL = bData;
 21682  1306  0872               	movf	DATAEE_WriteByte@bData,w
 21683  1307  009C               	movwf	28	;volatile
 21684                           
 21685                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
 21686  1308  171E               	bsf	30,6	;volsfr
 21687                           
 21688                           ;memory.c: 188: NVMCON1bits.WREN = 1;
 21689  1309  151E               	bsf	30,2	;volsfr
 21690                           
 21691                           ;memory.c: 189: INTCONbits.GIE = 0;
 21692  130A  138B               	bcf	11,7	;volatile
 21693                           
 21694                           ;memory.c: 190: NVMCON2 = 0x55;
 21695  130B  3055               	movlw	85
 21696  130C  009F               	movwf	31	;volsfr
 21697                           
 21698                           ;memory.c: 191: NVMCON2 = 0xAA;
 21699  130D  30AA               	movlw	170
 21700  130E  009F               	movwf	31	;volsfr
 21701                           
 21702                           ;memory.c: 192: NVMCON1bits.WR = 1;
 21703  130F  149E               	bsf	30,1	;volsfr
 21704  1310                     i1l789:	
 21705                           ;memory.c: 195: {
 21706                           
 21707                           ;memory.c: 194: while (NVMCON1bits.WR)
 21708                           
 21709  1310  189E               	btfsc	30,1	;volsfr
 21710  1311  2B10               	goto	i1l789
 21711                           
 21712                           ;memory.c: 196: }
 21713                           ;memory.c: 198: NVMCON1bits.WREN = 0;
 21714  1312  111E               	bcf	30,2	;volsfr
 21715                           
 21716                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
 21717  1313  0C73               	rrf	DATAEE_WriteByte@GIEBitValue,w
 21718  1314  1C03               	skipc
 21719  1315  138B               	bcf	11,7	;volatile
 21720  1316  1803               	skipnc
 21721  1317  178B               	bsf	11,7	;volatile
 21722  1318  0008               	return
 21723  1319                     __end_of_DATAEE_WriteByte:	
 21724                           
 21725                           	psect	text86
 21726  1118                     __ptext86:	
 21727 ;; *************** function _ADCC_ThresholdISR *****************
 21728 ;; Defined at:
 21729 ;;		line 307 in file "mcc_generated_files/adcc.c"
 21730 ;; Parameters:    Size  Location     Type
 21731 ;;		None
 21732 ;; Auto vars:     Size  Location     Type
 21733 ;;		None
 21734 ;; Return value:  Size  Location     Type
 21735 ;;                  1    wreg      void 
 21736 ;; Registers used:
 21737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21738 ;; Tracked objects:
 21739 ;;		On entry : 0/0
 21740 ;;		On exit  : 0/0
 21741 ;;		Unchanged: 0/0
 21742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21747 ;;Total ram usage:        0 bytes
 21748 ;; Hardware stack levels used:    1
 21749 ;; Hardware stack levels required when called:    5
 21750 ;; This function calls:
 21751 ;;		Absolute function
 21752 ;;		_ADCC_DefaultInterruptHandler
 21753 ;;		_ADCC_ThresholdISR_mTouch
 21754 ;; This function is called by:
 21755 ;;		_INTERRUPT_InterruptManager
 21756 ;; This function uses a non-reentrant model
 21757 ;;
 21758                           
 21759                           
 21760                           ;psect for function _ADCC_ThresholdISR
 21761  1118                     _ADCC_ThresholdISR:	
 21762                           
 21763                           ;adcc.c: 310: PIR1bits.ADTIF = 0;
 21764                           
 21765                           ;incstack = 0
 21766                           ; Regs used in _ADCC_ThresholdISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21767  1118  002E               	movlb	14	; select bank14
 21768  1119  108D               	bcf	13,1	;volatile
 21769                           
 21770                           ;adcc.c: 312: if (ADCC_ADTI_InterruptHandler)
 21771  111A  0022               	movlb	2	; select bank2
 21772  111B  086D               	movf	_ADCC_ADTI_InterruptHandler^(0+256),w
 21773  111C  046E               	iorwf	(_ADCC_ADTI_InterruptHandler+1)^(0+256),w
 21774  111D  1903               	btfsc	3,2
 21775  111E  0008               	return
 21776                           
 21777                           ;adcc.c: 313: ADCC_ADTI_InterruptHandler();
 21778  111F  086E               	movf	(_ADCC_ADTI_InterruptHandler+1)^(0+256),w
 21779  1120  008A               	movwf	10
 21780  1121  086D               	movf	_ADCC_ADTI_InterruptHandler^(0+256),w
 21781  1122  000A               	callw
 21782  1123  3191               	pagesel	$
 21783  1124  0008               	return
 21784  1125                     __end_of_ADCC_ThresholdISR:	
 21785                           
 21786                           	psect	text87
 21787  0801                     __ptext87:	
 21788 ;; *************** function _ADCC_DefaultInterruptHandler *****************
 21789 ;; Defined at:
 21790 ;;		line 319 in file "mcc_generated_files/adcc.c"
 21791 ;; Parameters:    Size  Location     Type
 21792 ;;		None
 21793 ;; Auto vars:     Size  Location     Type
 21794 ;;		None
 21795 ;; Return value:  Size  Location     Type
 21796 ;;                  1    wreg      void 
 21797 ;; Registers used:
 21798 ;;		None
 21799 ;; Tracked objects:
 21800 ;;		On entry : 0/0
 21801 ;;		On exit  : 0/0
 21802 ;;		Unchanged: 0/0
 21803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21808 ;;Total ram usage:        0 bytes
 21809 ;; Hardware stack levels used:    1
 21810 ;; This function calls:
 21811 ;;		Nothing
 21812 ;; This function is called by:
 21813 ;;		_ADCC_Initialize
 21814 ;;		_ADCC_ThresholdISR
 21815 ;; This function uses a non-reentrant model
 21816 ;;
 21817                           
 21818                           
 21819                           ;psect for function _ADCC_DefaultInterruptHandler
 21820  0801                     _ADCC_DefaultInterruptHandler:	
 21821                           
 21822                           ;incstack = 0
 21823                           ; Regs used in _ADCC_DefaultInterruptHandler: []
 21824  0801  0008               	return
 21825  0802                     __end_of_ADCC_DefaultInterruptHandler:	
 21826                           
 21827                           	psect	text88
 21828  1FDC                     __ptext88:	
 21829 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 21830 ;; Defined at:
 21831 ;;		line 546 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 21832 ;; Parameters:    Size  Location     Type
 21833 ;;		None
 21834 ;; Auto vars:     Size  Location     Type
 21835 ;;		None
 21836 ;; Return value:  Size  Location     Type
 21837 ;;                  1    wreg      void 
 21838 ;; Registers used:
 21839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21840 ;; Tracked objects:
 21841 ;;		On entry : 0/0
 21842 ;;		On exit  : 0/0
 21843 ;;		Unchanged: 0/0
 21844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21849 ;;Total ram usage:        0 bytes
 21850 ;; Hardware stack levels used:    1
 21851 ;; Hardware stack levels required when called:    4
 21852 ;; This function calls:
 21853 ;;		_MTOUCH_Sensor_Service
 21854 ;; This function is called by:
 21855 ;;		_MTOUCH_Sensor_ADCC_Initialize
 21856 ;;		_ADCC_ThresholdISR
 21857 ;; This function uses a non-reentrant model
 21858 ;;
 21859                           
 21860                           
 21861                           ;psect for function _ADCC_ThresholdISR_mTouch
 21862  1FDC                     _ADCC_ThresholdISR_mTouch:	
 21863                           
 21864                           ;mtouch_sensor.c: 549: PIR1bits.ADTIF = 0;
 21865                           
 21866                           ;incstack = 0
 21867                           ; Regs used in _ADCC_ThresholdISR_mTouch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21868  1FDC  002E               	movlb	14	; select bank14
 21869  1FDD  108D               	bcf	13,1	;volatile
 21870                           
 21871                           ;mtouch_sensor.c: 550: MTOUCH_Sensor_Service();
 21872  1FDE  318B  234C         	fcall	_MTOUCH_Sensor_Service
 21873  1FE0  0008               	return
 21874  1FE1                     __end_of_ADCC_ThresholdISR_mTouch:	
 21875                           
 21876                           	psect	text89
 21877  0B4C                     __ptext89:	
 21878 ;; *************** function _MTOUCH_Sensor_Service *****************
 21879 ;; Defined at:
 21880 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 21881 ;; Parameters:    Size  Location     Type
 21882 ;;		None
 21883 ;; Auto vars:     Size  Location     Type
 21884 ;;  sensor          1   13[COMMON] PTR struct .
 21885 ;;		 -> mtouch_sensor(45), 
 21886 ;; Return value:  Size  Location     Type
 21887 ;;                  1    wreg      void 
 21888 ;; Registers used:
 21889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21890 ;; Tracked objects:
 21891 ;;		On entry : 0/0
 21892 ;;		On exit  : 0/0
 21893 ;;		Unchanged: 0/0
 21894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21897 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21898 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21899 ;;Total ram usage:        3 bytes
 21900 ;; Hardware stack levels used:    1
 21901 ;; Hardware stack levels required when called:    3
 21902 ;; This function calls:
 21903 ;;		_Sensor_autoCalibration
 21904 ;;		_Sensor_setSampled
 21905 ;;		i1_Sensor_SetTrisBit
 21906 ;;		i1_Sensor_isCalibrated
 21907 ;;		i1_Sensor_scheduleNextScan
 21908 ;;		i1___bmul
 21909 ;;		i1_abs
 21910 ;; This function is called by:
 21911 ;;		_ADCC_ThresholdISR_mTouch
 21912 ;; This function uses a non-reentrant model
 21913 ;;
 21914                           
 21915                           
 21916                           ;psect for function _MTOUCH_Sensor_Service
 21917  0B4C                     _MTOUCH_Sensor_Service:	
 21918                           
 21919                           ;mtouch_sensor.c: 561: mtouch_sensor_t* sensor;
 21920                           ;mtouch_sensor.c: 563: Sensor_SetTrisBit(currentScanSensor,0);
 21921                           
 21922                           ;incstack = 0
 21923                           ; Regs used in _MTOUCH_Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21924  0B4C  01F0               	clrf	i1Sensor_SetTrisBit@TrisBit
 21925  0B4D  0020               	movlb	0	; select bank0
 21926  0B4E  0860               	movf	_currentScanSensor,w
 21927  0B4F  3195  25DB  318B   	fcall	i1_Sensor_SetTrisBit
 21928                           
 21929                           ;mtouch_sensor.c: 565: if(scanInterrupted)
 21930  0B52  0020               	movlb	0	; select bank0
 21931  0B53  085E               	movf	_scanInterrupted,w	;volatile
 21932  0B54  1903               	btfsc	3,2
 21933  0B55  2B59               	goto	i1l519
 21934                           
 21935                           ;mtouch_sensor.c: 566: {
 21936                           ;mtouch_sensor.c: 567: ADCON0bits.ADON = 0;
 21937  0B56  0021               	movlb	1	; select bank1
 21938  0B57  1393               	bcf	19,7	;volatile
 21939                           
 21940                           ;mtouch_sensor.c: 568: }
 21941  0B58  2BC3               	goto	i1l7371
 21942  0B59                     i1l519:	
 21943                           
 21944                           ;mtouch_sensor.c: 569: else
 21945                           ;mtouch_sensor.c: 570: {
 21946                           ;mtouch_sensor.c: 571: ADCON0bits.ADON = 0;
 21947  0B59  0021               	movlb	1	; select bank1
 21948  0B5A  1393               	bcf	19,7	;volatile
 21949                           
 21950                           ;mtouch_sensor.c: 572: sensor = &mtouch_sensor[currentScanSensor];
 21951  0B5B  3009               	movlw	9
 21952  0B5C  00FB               	movwf	??_MTOUCH_Sensor_Service
 21953  0B5D  087B               	movf	??_MTOUCH_Sensor_Service,w
 21954  0B5E  00F0               	movwf	i1___bmul@multiplicand
 21955  0B5F  0020               	movlb	0	; select bank0
 21956  0B60  0860               	movf	_currentScanSensor,w
 21957  0B61  3191  218B  318B   	fcall	i1___bmul
 21958  0B64  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 21959  0B65  00FC               	movwf	??_MTOUCH_Sensor_Service+1
 21960  0B66  087C               	movf	??_MTOUCH_Sensor_Service+1,w
 21961  0B67  00FD               	movwf	MTOUCH_Sensor_Service@sensor
 21962                           
 21963                           ;mtouch_sensor.c: 573: if(!Sensor_isCalibrated(sensor))
 21964  0B68  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 21965  0B69  3190  20D0  318B   	fcall	i1_Sensor_isCalibrated
 21966  0B6C  3A00               	xorlw	0
 21967  0B6D  1D03               	skipz
 21968  0B6E  2B74               	goto	i1l7361
 21969                           
 21970                           ;mtouch_sensor.c: 574: {
 21971                           ;mtouch_sensor.c: 575: Sensor_autoCalibration(sensor);
 21972  0B6F  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 21973  0B70  318C  2459  318B   	fcall	_Sensor_autoCalibration
 21974                           
 21975                           ;mtouch_sensor.c: 576: }
 21976  0B73  2B78               	goto	i1l522
 21977  0B74                     i1l7361:	
 21978                           
 21979                           ;mtouch_sensor.c: 577: else
 21980                           ;mtouch_sensor.c: 578: {
 21981                           ;mtouch_sensor.c: 579: Sensor_setSampled(sensor);
 21982  0B74  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 21983  0B75  319F  27F8  318B   	fcall	_Sensor_setSampled
 21984  0B78                     i1l522:	
 21985                           
 21986                           ;mtouch_sensor.c: 580: }
 21987                           ;mtouch_sensor.c: 582: if((mtouch_sensor_packetsample_t)
 21988                           ;mtouch_sensor.c: 583: abs(packet_sample[currentScanSensor] - ADFLTR) >
 21989                           ;mtouch_sensor.c: 584: 100u)
 21990  0B78  0020               	movlb	0	; select bank0
 21991  0B79  3560               	lslf	_currentScanSensor,w
 21992  0B7A  3E3E               	addlw	(low (_packet_sample| (0+256)))& (0+255)
 21993  0B7B  0086               	movwf	6
 21994  0B7C  3001               	movlw	1	; select bank2/3
 21995  0B7D  0087               	movwf	7
 21996  0B7E  0022               	movlb	2	; select bank2
 21997  0B7F  0914               	comf	20,w	;volatile
 21998  0B80  00FB               	movwf	??_MTOUCH_Sensor_Service
 21999  0B81  0915               	comf	21,w	;volatile
 22000  0B82  00FC               	movwf	??_MTOUCH_Sensor_Service+1
 22001  0B83  0AFB               	incf	??_MTOUCH_Sensor_Service,f
 22002  0B84  1903               	skipnz
 22003  0B85  0AFC               	incf	??_MTOUCH_Sensor_Service+1,f
 22004  0B86  3F40               	moviw [0]fsr1
 22005  0B87  077B               	addwf	??_MTOUCH_Sensor_Service,w
 22006  0B88  00F0               	movwf	i1abs@a
 22007  0B89  3F41               	moviw [1]fsr1
 22008  0B8A  3D7C               	addwfc	??_MTOUCH_Sensor_Service+1,w
 22009  0B8B  00F1               	movwf	i1abs@a+1
 22010  0B8C  3191  2140  318B   	fcall	i1_abs
 22011  0B8F  3000               	movlw	0
 22012  0B90  0271               	subwf	?i1_abs+1,w
 22013  0B91  3065               	movlw	101
 22014  0B92  1903               	skipnz
 22015  0B93  0270               	subwf	?i1_abs,w
 22016  0B94  1C03               	skipc
 22017  0B95  2BA6               	goto	i1l7365
 22018                           
 22019                           ;mtouch_sensor.c: 585: {
 22020                           ;mtouch_sensor.c: 586: mtouch_sensor[currentScanSensor].active = 1;
 22021  0B96  3009               	movlw	9
 22022  0B97  00FB               	movwf	??_MTOUCH_Sensor_Service
 22023  0B98  087B               	movf	??_MTOUCH_Sensor_Service,w
 22024  0B99  00F0               	movwf	i1___bmul@multiplicand
 22025  0B9A  0020               	movlb	0	; select bank0
 22026  0B9B  0860               	movf	_currentScanSensor,w
 22027  0B9C  3191  218B  318B   	fcall	i1___bmul
 22028  0B9F  3E08               	addlw	8
 22029  0BA0  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 22030  0BA1  0086               	movwf	6
 22031  0BA2  3001               	movlw	1	; select bank3/4
 22032  0BA3  0087               	movwf	7
 22033  0BA4  1501               	bsf	1,2
 22034                           
 22035                           ;mtouch_sensor.c: 587: }
 22036  0BA5  2BB5               	goto	i1l7367
 22037  0BA6                     i1l7365:	
 22038                           
 22039                           ;mtouch_sensor.c: 588: else
 22040                           ;mtouch_sensor.c: 589: {
 22041                           ;mtouch_sensor.c: 590: mtouch_sensor[currentScanSensor].active = 0;
 22042  0BA6  3009               	movlw	9
 22043  0BA7  00FB               	movwf	??_MTOUCH_Sensor_Service
 22044  0BA8  087B               	movf	??_MTOUCH_Sensor_Service,w
 22045  0BA9  00F0               	movwf	i1___bmul@multiplicand
 22046  0BAA  0020               	movlb	0	; select bank0
 22047  0BAB  0860               	movf	_currentScanSensor,w
 22048  0BAC  3191  218B  318B   	fcall	i1___bmul
 22049  0BAF  3E08               	addlw	8
 22050  0BB0  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 22051  0BB1  0086               	movwf	6
 22052  0BB2  3001               	movlw	1	; select bank3/4
 22053  0BB3  0087               	movwf	7
 22054  0BB4  1101               	bcf	1,2
 22055  0BB5                     i1l7367:	
 22056                           
 22057                           ;mtouch_sensor.c: 591: }
 22058                           ;mtouch_sensor.c: 598: if(!lowpowerActivated)
 22059  0BB5  0020               	movlb	0	; select bank0
 22060  0BB6  085D               	movf	_lowpowerActivated,w
 22061  0BB7  1D03               	btfss	3,2
 22062  0BB8  2BC3               	goto	i1l7371
 22063                           
 22064                           ;mtouch_sensor.c: 599: packet_sample[currentScanSensor] = ADFLTR;
 22065  0BB9  3560               	lslf	_currentScanSensor,w
 22066  0BBA  3E3E               	addlw	(low (_packet_sample| (0+256)))& (0+255)
 22067  0BBB  0086               	movwf	6
 22068  0BBC  3001               	movlw	1	; select bank2/3
 22069  0BBD  0087               	movwf	7
 22070  0BBE  0022               	movlb	2	; select bank2
 22071  0BBF  0814               	movf	20,w	;volatile
 22072  0BC0  3FC0               	movwi [0]fsr1
 22073  0BC1  0815               	movf	21,w	;volatile
 22074  0BC2  3FC1               	movwi [1]fsr1
 22075  0BC3                     i1l7371:	
 22076                           
 22077                           ;mtouch_sensor.c: 600: }
 22078                           ;mtouch_sensor.c: 602: if(lowpowerActivated == 1u)
 22079  0BC3  0020               	movlb	0	; select bank0
 22080  0BC4  035D               	decf	_lowpowerActivated,w
 22081  0BC5  1D03               	btfss	3,2
 22082  0BC6  2BC9               	goto	i1l7375
 22083                           
 22084                           ;mtouch_sensor.c: 603: {
 22085                           ;mtouch_sensor.c: 604: sampling_flag = 0;
 22086  0BC7  01DF               	clrf	_sampling_flag
 22087                           
 22088                           ;mtouch_sensor.c: 605: }
 22089  0BC8  0008               	return
 22090  0BC9                     i1l7375:	
 22091                           
 22092                           ;mtouch_sensor.c: 606: else
 22093                           ;mtouch_sensor.c: 607: {
 22094                           ;mtouch_sensor.c: 608: Sensor_scheduleNextScan();
 22095  0BC9  318E  269F         	fcall	i1_Sensor_scheduleNextScan
 22096  0BCB  0008               	return
 22097  0BCC                     __end_of_MTOUCH_Sensor_Service:	
 22098                           
 22099                           	psect	text90
 22100  0E9F                     __ptext90:	
 22101 ;; *************** function i1_Sensor_scheduleNextScan *****************
 22102 ;; Defined at:
 22103 ;;		line 414 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22104 ;; Parameters:    Size  Location     Type
 22105 ;;		None
 22106 ;; Auto vars:     Size  Location     Type
 22107 ;;  Sensor_sched    1   10[COMMON] PTR struct .
 22108 ;;		 -> mtouch_sensor(45), 
 22109 ;;  Sensor_sched    1    9[COMMON] unsigned char 
 22110 ;;  Sensor_sched    1    8[COMMON] unsigned char 
 22111 ;; Return value:  Size  Location     Type
 22112 ;;                  1    wreg      void 
 22113 ;; Registers used:
 22114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22115 ;; Tracked objects:
 22116 ;;		On entry : 0/0
 22117 ;;		On exit  : 0/0
 22118 ;;		Unchanged: 0/0
 22119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22121 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22123 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22124 ;;Total ram usage:        5 bytes
 22125 ;; Hardware stack levels used:    1
 22126 ;; Hardware stack levels required when called:    2
 22127 ;; This function calls:
 22128 ;;		i1_MTOUCH_Sensor_isEnabled
 22129 ;;		i1_MTOUCH_Sensor_wasSampled
 22130 ;;		i1_Sensor_SetTrisBit
 22131 ;;		i1_Sensor_isCalibrated
 22132 ;;		i1_Sensor_isCalibratingAcqTime
 22133 ;;		i1___bmul
 22134 ;; This function is called by:
 22135 ;;		_MTOUCH_Sensor_Service
 22136 ;; This function uses a non-reentrant model
 22137 ;;
 22138                           
 22139                           
 22140                           ;psect for function i1_Sensor_scheduleNextScan
 22141  0E9F                     i1_Sensor_scheduleNextScan:	
 22142                           
 22143                           ;mtouch_sensor.c: 416: mtouch_sensor_t* sensor;
 22144                           ;mtouch_sensor.c: 417: bool skipScan = (bool)0;
 22145                           
 22146                           ;incstack = 0
 22147                           ; Regs used in i1_Sensor_scheduleNextScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22148  0E9F  01F9               	clrf	i1Sensor_scheduleNextScan@skipScan
 22149                           
 22150                           ;mtouch_sensor.c: 418: bool state = (bool)GIE;
 22151  0EA0  3000               	movlw	0
 22152  0EA1  1B8B               	btfsc	11,7	;volatile
 22153  0EA2  3001               	movlw	1
 22154  0EA3  00F8               	movwf	i1Sensor_scheduleNextScan@state
 22155  0EA4                     i1l7177:	
 22156                           ;mtouch_sensor.c: 421: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 22157                           
 22158  0EA4  0020               	movlb	0	; select bank0
 22159  0EA5  0860               	movf	_currentScanSensor,w
 22160  0EA6  3192  2239  318E   	fcall	i1_MTOUCH_Sensor_wasSampled
 22161  0EA9  3A00               	xorlw	0
 22162  0EAA  1903               	btfsc	3,2
 22163  0EAB  2EBA               	goto	i1l7179
 22164  0EAC                     i1l7171:	
 22165                           
 22166                           ;mtouch_sensor.c: 422: {
 22167                           ;mtouch_sensor.c: 423: if(++currentScanSensor == (5u))
 22168  0EAC  3001               	movlw	1
 22169  0EAD  00F6               	movwf	??i1_Sensor_scheduleNextScan
 22170  0EAE  0876               	movf	??i1_Sensor_scheduleNextScan,w
 22171  0EAF  0020               	movlb	0	; select bank0
 22172  0EB0  07E0               	addwf	_currentScanSensor,f
 22173  0EB1  3005               	movlw	5
 22174  0EB2  0660               	xorwf	_currentScanSensor,w
 22175  0EB3  1D03               	btfss	3,2
 22176  0EB4  2EA4               	goto	i1l7177
 22177                           
 22178                           ;mtouch_sensor.c: 424: {
 22179                           ;mtouch_sensor.c: 425: currentScanSensor = 0;
 22180  0EB5  01E0               	clrf	_currentScanSensor
 22181                           
 22182                           ;mtouch_sensor.c: 426: sampling_flag = 0;
 22183  0EB6  01DF               	clrf	_sampling_flag
 22184                           
 22185                           ;mtouch_sensor.c: 427: skipScan = 1;
 22186  0EB7  01F9               	clrf	i1Sensor_scheduleNextScan@skipScan
 22187  0EB8  0AF9               	incf	i1Sensor_scheduleNextScan@skipScan,f
 22188                           
 22189                           ;mtouch_sensor.c: 428: break;
 22190  0EB9  2EC2               	goto	i1l7181
 22191  0EBA                     i1l7179:	
 22192  0EBA  0020               	movlb	0	; select bank0
 22193  0EBB  0860               	movf	_currentScanSensor,w
 22194  0EBC  3192  2223  318E   	fcall	i1_MTOUCH_Sensor_isEnabled
 22195  0EBF  3A00               	xorlw	0
 22196  0EC0  1903               	skipnz
 22197  0EC1  2EAC               	goto	i1l7171
 22198  0EC2                     i1l7181:	
 22199                           
 22200                           ;mtouch_sensor.c: 429: }
 22201                           ;mtouch_sensor.c: 430: }
 22202                           ;mtouch_sensor.c: 432: if(skipScan==0)
 22203  0EC2  0879               	movf	i1Sensor_scheduleNextScan@skipScan,w
 22204  0EC3  1D03               	btfss	3,2
 22205  0EC4  0008               	return
 22206                           
 22207                           ;mtouch_sensor.c: 433: {
 22208                           ;mtouch_sensor.c: 434: sensor = &mtouch_sensor[currentScanSensor];
 22209  0EC5  3009               	movlw	9
 22210  0EC6  00F6               	movwf	??i1_Sensor_scheduleNextScan
 22211  0EC7  0876               	movf	??i1_Sensor_scheduleNextScan,w
 22212  0EC8  00F0               	movwf	i1___bmul@multiplicand
 22213  0EC9  0020               	movlb	0	; select bank0
 22214  0ECA  0860               	movf	_currentScanSensor,w
 22215  0ECB  3191  218B  318E   	fcall	i1___bmul
 22216  0ECE  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 22217  0ECF  00F7               	movwf	??i1_Sensor_scheduleNextScan+1
 22218  0ED0  0877               	movf	??i1_Sensor_scheduleNextScan+1,w
 22219  0ED1  00FA               	movwf	i1Sensor_scheduleNextScan@sensor
 22220                           
 22221                           ;mtouch_sensor.c: 435: if(Sensor_isCalibrated(sensor))
 22222  0ED2  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22223  0ED3  3190  20D0  318E   	fcall	i1_Sensor_isCalibrated
 22224  0ED6  3A00               	xorlw	0
 22225  0ED7  1903               	skipnz
 22226  0ED8  2EE9               	goto	i1l7189
 22227                           
 22228                           ;mtouch_sensor.c: 436: {
 22229                           ;mtouch_sensor.c: 437: ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
 22230  0ED9  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22231  0EDA  0086               	movwf	6
 22232  0EDB  3001               	movlw	1	; select bank2/3
 22233  0EDC  0087               	movwf	7
 22234  0EDD  3001               	movlw	1	; select bank2/3
 22235  0EDE  3F43               	moviw [3]fsr1
 22236  0EDF  0021               	movlb	1	; select bank1
 22237  0EE0  009D               	movwf	29	;volatile
 22238                           
 22239                           ;mtouch_sensor.c: 438: ADPRE = (mtouch_sensor_time_t)sensor->precharge_time;
 22240  0EE1  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22241  0EE2  0086               	movwf	6
 22242  0EE3  3001               	movlw	1	; select bank2/3
 22243  0EE4  0087               	movwf	7
 22244  0EE5  3001               	movlw	1	; select bank2/3
 22245  0EE6  3F42               	moviw [2]fsr1
 22246  0EE7  009C               	movwf	28	;volatile
 22247                           
 22248                           ;mtouch_sensor.c: 439: }
 22249  0EE8  2F04               	goto	i1l7195
 22250  0EE9                     i1l7189:	
 22251                           
 22252                           ;mtouch_sensor.c: 440: else
 22253                           ;mtouch_sensor.c: 441: {
 22254                           ;mtouch_sensor.c: 442: if(Sensor_isCalibratingAcqTime(sensor))
 22255  0EE9  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22256  0EEA  3190  207B  318E   	fcall	i1_Sensor_isCalibratingAcqTime
 22257  0EED  3A00               	xorlw	0
 22258  0EEE  1903               	skipnz
 22259  0EEF  2EFF               	goto	i1l7193
 22260                           
 22261                           ;mtouch_sensor.c: 443: {
 22262                           ;mtouch_sensor.c: 444: ADPRE = (mtouch_sensor_time_t)sensor->precharge_time;
 22263  0EF0  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22264  0EF1  0086               	movwf	6
 22265  0EF2  3001               	movlw	1	; select bank2/3
 22266  0EF3  0087               	movwf	7
 22267  0EF4  3001               	movlw	1	; select bank2/3
 22268  0EF5  3F42               	moviw [2]fsr1
 22269  0EF6  0021               	movlb	1	; select bank1
 22270  0EF7  009C               	movwf	28	;volatile
 22271                           
 22272                           ;mtouch_sensor.c: 445: ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
 22273  0EF8  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22274  0EF9  0086               	movwf	6
 22275  0EFA  3001               	movlw	1	; select bank2/3
 22276  0EFB  0087               	movwf	7
 22277  0EFC  3001               	movlw	1	; select bank2/3
 22278  0EFD  3F43               	moviw [3]fsr1
 22279  0EFE  2F03               	goto	L18
 22280  0EFF                     i1l7193:	
 22281                           ;mtouch_sensor.c: 446: }
 22282                           
 22283                           
 22284                           ;mtouch_sensor.c: 447: else
 22285                           ;mtouch_sensor.c: 448: {
 22286                           ;mtouch_sensor.c: 449: ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)2));
 22287  0EFF  30C0               	movlw	192
 22288  0F00  0021               	movlb	1	; select bank1
 22289  0F01  009C               	movwf	28	;volatile
 22290                           
 22291                           ;mtouch_sensor.c: 450: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)2));
 22292  0F02  30C0               	movlw	192
 22293  0F03                     L18:	
 22294  0F03  009D               	movwf	29	;volatile
 22295  0F04                     i1l7195:	
 22296                           
 22297                           ;mtouch_sensor.c: 451: }
 22298                           ;mtouch_sensor.c: 452: }
 22299                           ;mtouch_sensor.c: 454: ADPRE +=(uint8_t)sample_delay;
 22300  0F04  0020               	movlb	0	; select bank0
 22301  0F05  085B               	movf	_sample_delay,w
 22302  0F06  00F6               	movwf	??i1_Sensor_scheduleNextScan
 22303  0F07  0876               	movf	??i1_Sensor_scheduleNextScan,w
 22304  0F08  0021               	movlb	1	; select bank1
 22305  0F09  079C               	addwf	28,f	;volatile
 22306                           
 22307                           ;mtouch_sensor.c: 455: ADPCH = (uint8_t)sensor->adpch;
 22308  0F0A  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22309  0F0B  0086               	movwf	6
 22310  0F0C  3001               	movlw	1	; select bank2/3
 22311  0F0D  0087               	movwf	7
 22312  0F0E  3001               	movlw	1	; select bank2/3
 22313  0F0F  3F41               	moviw [1]fsr1
 22314  0F10  009E               	movwf	30	;volatile
 22315                           
 22316                           ;mtouch_sensor.c: 456: ADRPT = (uint8_t)(sensor->oversampling>>1);
 22317  0F11  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22318  0F12  3E04               	addlw	4
 22319  0F13  0086               	movwf	6
 22320  0F14  3001               	movlw	1	; select bank2/3
 22321  0F15  0087               	movwf	7
 22322  0F16  3601               	lsrf	1,w
 22323  0F17  0022               	movlb	2	; select bank2
 22324  0F18  008D               	movwf	13	;volatile
 22325                           
 22326                           ;mtouch_sensor.c: 457: ADCAP = (uint8_t)sensor->addcap;
 22327  0F19  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22328  0F1A  0086               	movwf	6
 22329  0F1B  3001               	movlw	1	; select bank2/3
 22330  0F1C  0087               	movwf	7
 22331  0F1D  3001               	movlw	1	; select bank2/3
 22332  0F1E  3F45               	moviw [5]fsr1
 22333  0F1F  0021               	movlb	1	; select bank1
 22334  0F20  009B               	movwf	27	;volatile
 22335                           
 22336                           ;mtouch_sensor.c: 458: ADCON0bits.ADON = 1;
 22337  0F21  1793               	bsf	19,7	;volatile
 22338                           
 22339                           ;mtouch_sensor.c: 459: sampling_flag= 1;
 22340  0F22  0020               	movlb	0	; select bank0
 22341  0F23  01DF               	clrf	_sampling_flag
 22342  0F24  0ADF               	incf	_sampling_flag,f
 22343                           
 22344                           ;mtouch_sensor.c: 460: Sensor_SetTrisBit(currentScanSensor,1);
 22345  0F25  01F0               	clrf	i1Sensor_SetTrisBit@TrisBit
 22346  0F26  0AF0               	incf	i1Sensor_SetTrisBit@TrisBit,f
 22347  0F27  0860               	movf	_currentScanSensor,w
 22348  0F28  3195  25DB  318E   	fcall	i1_Sensor_SetTrisBit
 22349                           
 22350                           ;mtouch_sensor.c: 461: GIE = 0;
 22351  0F2B  138B               	bcf	11,7	;volatile
 22352                           
 22353                           ;mtouch_sensor.c: 462: ADCON0bits.GO = 1;
 22354  0F2C  0021               	movlb	1	; select bank1
 22355  0F2D  1413               	bsf	19,0	;volatile
 22356                           
 22357                           ;mtouch_sensor.c: 463: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 22358  0F2E  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 22359  0F2F  3E04               	addlw	4
 22360  0F30  0086               	movwf	6
 22361  0F31  3001               	movlw	1	; select bank2/3
 22362  0F32  0087               	movwf	7
 22363  0F33  0801               	movf	1,w
 22364  0F34  00F6               	movwf	??i1_Sensor_scheduleNextScan
 22365  0F35  01F7               	clrf	??i1_Sensor_scheduleNextScan+1
 22366  0F36  3009               	movlw	9
 22367  0F37                     u734_25:	
 22368  0F37  35F6               	lslf	??i1_Sensor_scheduleNextScan,f
 22369  0F38  0DF7               	rlf	??i1_Sensor_scheduleNextScan+1,f
 22370  0F39  0B89               	decfsz	9,f
 22371  0F3A  2F37               	goto	u734_25
 22372  0F3B  0876               	movf	??i1_Sensor_scheduleNextScan,w
 22373  0F3C  0090               	movwf	16	;volatile
 22374  0F3D  0877               	movf	??i1_Sensor_scheduleNextScan+1,w
 22375  0F3E  0091               	movwf	17	;volatile
 22376                           
 22377                           ;mtouch_sensor.c: 464: GIE = state;
 22378  0F3F  1C78               	btfss	i1Sensor_scheduleNextScan@state,0
 22379  0F40  2F43               	goto	u735_20
 22380  0F41  178B               	bsf	11,7	;volatile
 22381  0F42  2F44               	goto	i1l7215
 22382  0F43                     u735_20:	
 22383  0F43  138B               	bcf	11,7	;volatile
 22384  0F44                     i1l7215:	
 22385                           
 22386                           ;mtouch_sensor.c: 465: scanInterrupted = 0;
 22387  0F44  0020               	movlb	0	; select bank0
 22388  0F45  01DE               	clrf	_scanInterrupted	;volatile
 22389  0F46  0008               	return
 22390  0F47                     __end_ofi1_Sensor_scheduleNextScan:	
 22391                           
 22392                           	psect	text91
 22393  10D0                     __ptext91:	
 22394 ;; *************** function i1_Sensor_isCalibrated *****************
 22395 ;; Defined at:
 22396 ;;		line 896 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22397 ;; Parameters:    Size  Location     Type
 22398 ;;  sensor          1    wreg     PTR struct .
 22399 ;;		 -> mtouch_sensor(45), 
 22400 ;; Auto vars:     Size  Location     Type
 22401 ;;  sensor          1    1[COMMON] PTR struct .
 22402 ;;		 -> mtouch_sensor(45), 
 22403 ;; Return value:  Size  Location     Type
 22404 ;;                  1    wreg      unsigned char 
 22405 ;; Registers used:
 22406 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22407 ;; Tracked objects:
 22408 ;;		On entry : 0/0
 22409 ;;		On exit  : 0/0
 22410 ;;		Unchanged: 0/0
 22411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22414 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22415 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22416 ;;Total ram usage:        2 bytes
 22417 ;; Hardware stack levels used:    1
 22418 ;; This function calls:
 22419 ;;		Nothing
 22420 ;; This function is called by:
 22421 ;;		_MTOUCH_Sensor_Service
 22422 ;;		i1_Sensor_scheduleNextScan
 22423 ;; This function uses a non-reentrant model
 22424 ;;
 22425                           
 22426                           
 22427                           ;psect for function i1_Sensor_isCalibrated
 22428  10D0                     i1_Sensor_isCalibrated:	
 22429                           
 22430                           ;incstack = 0
 22431                           ; Regs used in i1_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 22432                           ;i1Sensor_isCalibrated@sensor stored from wreg
 22433  10D0  00F1               	movwf	i1Sensor_isCalibrated@sensor
 22434                           
 22435                           ;mtouch_sensor.c: 898: return (bool)sensor->calibrated;
 22436  10D1  0871               	movf	i1Sensor_isCalibrated@sensor,w
 22437  10D2  3E08               	addlw	8
 22438  10D3  0086               	movwf	6
 22439  10D4  3001               	movlw	1	; select bank2/3
 22440  10D5  0087               	movwf	7
 22441  10D6  0C01               	rrf	1,w
 22442  10D7  00F0               	movwf	??i1_Sensor_isCalibrated
 22443  10D8  0CF0               	rrf	??i1_Sensor_isCalibrated,f
 22444  10D9  0C70               	rrf	??i1_Sensor_isCalibrated,w
 22445  10DA  3901               	andlw	1
 22446  10DB  0008               	return
 22447  10DC                     __end_ofi1_Sensor_isCalibrated:	
 22448                           
 22449                           	psect	text92
 22450  15DB                     __ptext92:	
 22451 ;; *************** function i1_Sensor_SetTrisBit *****************
 22452 ;; Defined at:
 22453 ;;		line 240 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22454 ;; Parameters:    Size  Location     Type
 22455 ;;  sensor          1    wreg     enum E14537
 22456 ;;  TrisBit         1    0[COMMON] unsigned char 
 22457 ;; Auto vars:     Size  Location     Type
 22458 ;;  sensor          1    1[COMMON] enum E14537
 22459 ;; Return value:  Size  Location     Type
 22460 ;;                  1    wreg      void 
 22461 ;; Registers used:
 22462 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 22463 ;; Tracked objects:
 22464 ;;		On entry : 0/0
 22465 ;;		On exit  : 0/0
 22466 ;;		Unchanged: 0/0
 22467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22468 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22472 ;;Total ram usage:        2 bytes
 22473 ;; Hardware stack levels used:    1
 22474 ;; This function calls:
 22475 ;;		Nothing
 22476 ;; This function is called by:
 22477 ;;		_MTOUCH_Sensor_Service
 22478 ;;		i1_Sensor_scheduleNextScan
 22479 ;; This function uses a non-reentrant model
 22480 ;;
 22481                           
 22482                           
 22483                           ;psect for function i1_Sensor_SetTrisBit
 22484  15DB                     i1_Sensor_SetTrisBit:	
 22485                           
 22486                           ;incstack = 0
 22487                           ; Regs used in i1_Sensor_SetTrisBit: [wreg-fsr0h+status,2+status,0]
 22488                           ;i1Sensor_SetTrisBit@sensor stored from wreg
 22489  15DB  00F1               	movwf	i1Sensor_SetTrisBit@sensor
 22490                           
 22491                           ;mtouch_sensor.c: 242: switch(sensor)
 22492  15DC  2E00               	goto	i1l4901
 22493  15DD                     i1l4889:	
 22494                           ;mtouch_sensor.c: 243: {
 22495                           ;mtouch_sensor.c: 244: case 0:
 22496                           
 22497                           
 22498                           ;mtouch_sensor.c: 245: TRISAbits.TRISA0 = TrisBit;
 22499  15DD  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 22500  15DE  0020               	movlb	0	; select bank0
 22501  15DF  1C03               	skipc
 22502  15E0  1011               	bcf	17,0	;volatile
 22503  15E1  1803               	skipnc
 22504  15E2  1411               	bsf	17,0	;volatile
 22505                           
 22506                           ;mtouch_sensor.c: 246: break;
 22507  15E3  0008               	return
 22508  15E4                     i1l4891:	
 22509                           ;mtouch_sensor.c: 247: case 1:
 22510                           
 22511                           
 22512                           ;mtouch_sensor.c: 248: TRISAbits.TRISA1 = TrisBit;
 22513  15E4  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 22514  15E5  0020               	movlb	0	; select bank0
 22515  15E6  1C03               	skipc
 22516  15E7  1091               	bcf	17,1	;volatile
 22517  15E8  1803               	skipnc
 22518  15E9  1491               	bsf	17,1	;volatile
 22519                           
 22520                           ;mtouch_sensor.c: 249: break;
 22521  15EA  0008               	return
 22522  15EB                     i1l4893:	
 22523                           ;mtouch_sensor.c: 250: case 2:
 22524                           
 22525                           
 22526                           ;mtouch_sensor.c: 251: TRISAbits.TRISA2 = TrisBit;
 22527  15EB  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 22528  15EC  0020               	movlb	0	; select bank0
 22529  15ED  1C03               	skipc
 22530  15EE  1111               	bcf	17,2	;volatile
 22531  15EF  1803               	skipnc
 22532  15F0  1511               	bsf	17,2	;volatile
 22533                           
 22534                           ;mtouch_sensor.c: 252: break;
 22535  15F1  0008               	return
 22536  15F2                     i1l4895:	
 22537                           ;mtouch_sensor.c: 253: case 3:
 22538                           
 22539                           
 22540                           ;mtouch_sensor.c: 254: TRISAbits.TRISA3 = TrisBit;
 22541  15F2  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 22542  15F3  0020               	movlb	0	; select bank0
 22543  15F4  1C03               	skipc
 22544  15F5  1191               	bcf	17,3	;volatile
 22545  15F6  1803               	skipnc
 22546  15F7  1591               	bsf	17,3	;volatile
 22547                           
 22548                           ;mtouch_sensor.c: 255: break;
 22549  15F8  0008               	return
 22550  15F9                     i1l4897:	
 22551                           ;mtouch_sensor.c: 256: case 4:
 22552                           
 22553                           
 22554                           ;mtouch_sensor.c: 257: TRISAbits.TRISA4 = TrisBit;
 22555  15F9  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 22556  15FA  0020               	movlb	0	; select bank0
 22557  15FB  1C03               	skipc
 22558  15FC  1211               	bcf	17,4	;volatile
 22559  15FD  1803               	skipnc
 22560  15FE  1611               	bsf	17,4	;volatile
 22561                           
 22562                           ;mtouch_sensor.c: 260: }
 22563                           
 22564                           ;mtouch_sensor.c: 259: default: break;
 22565                           
 22566                           ;mtouch_sensor.c: 258: break;
 22567  15FF  0008               	return
 22568  1600                     i1l4901:	
 22569  1600  0871               	movf	i1Sensor_SetTrisBit@sensor,w
 22570                           
 22571                           ; Switch size 1, requested type "space"
 22572                           ; Number of cases is 5, Range of values is 0 to 4
 22573                           ; switch strategies available:
 22574                           ; Name         Instructions Cycles
 22575                           ; direct_byte           16     6 (fixed)
 22576                           ; simple_byte           16     9 (average)
 22577                           ; jumptable            260     6 (fixed)
 22578                           ;	Chosen strategy is direct_byte
 22579  1601  0084               	movwf	4
 22580  1602  3005               	movlw	5
 22581  1603  0204               	subwf	4,w
 22582  1604  1803               	skipnc
 22583  1605  0008               	return
 22584  1606  3190               	movlp	high i1S8315
 22585  1607  3504               	lslf	4,w
 22586  1608  3E5F               	addlw	low i1S8315
 22587  1609  0082               	movwf	2
 22588  160A  0008               	return
 22589  160B                     __end_ofi1_Sensor_SetTrisBit:	
 22590                           
 22591                           	psect	swtext2
 22592  105F                     __pswtext2:	
 22593  105F                     i1S8315:	
 22594  105F  3195  2DDD         	ljmp	i1l4889
 22595  1061  3195  2DE4         	ljmp	i1l4891
 22596  1063  3195  2DEB         	ljmp	i1l4893
 22597  1065  3195  2DF2         	ljmp	i1l4895
 22598  1067  3195  2DF9         	ljmp	i1l4897
 22599                           
 22600                           	psect	text93
 22601  1239                     __ptext93:	
 22602 ;; *************** function i1_MTOUCH_Sensor_wasSampled *****************
 22603 ;; Defined at:
 22604 ;;		line 936 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22605 ;; Parameters:    Size  Location     Type
 22606 ;;  sensor          1    wreg     enum E14537
 22607 ;; Auto vars:     Size  Location     Type
 22608 ;;  sensor          1    5[COMMON] enum E14537
 22609 ;; Return value:  Size  Location     Type
 22610 ;;                  1    wreg      unsigned char 
 22611 ;; Registers used:
 22612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22613 ;; Tracked objects:
 22614 ;;		On entry : 0/0
 22615 ;;		On exit  : 0/0
 22616 ;;		Unchanged: 0/0
 22617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22622 ;;Total ram usage:        2 bytes
 22623 ;; Hardware stack levels used:    1
 22624 ;; Hardware stack levels required when called:    1
 22625 ;; This function calls:
 22626 ;;		i1___bmul
 22627 ;; This function is called by:
 22628 ;;		i1_Sensor_scheduleNextScan
 22629 ;; This function uses a non-reentrant model
 22630 ;;
 22631                           
 22632                           
 22633                           ;psect for function i1_MTOUCH_Sensor_wasSampled
 22634  1239                     i1_MTOUCH_Sensor_wasSampled:	
 22635                           
 22636                           ;incstack = 0
 22637                           ; Regs used in i1_MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 22638                           ;i1MTOUCH_Sensor_wasSampled@sensor stored from wreg
 22639  1239  00F5               	movwf	i1MTOUCH_Sensor_wasSampled@sensor
 22640                           
 22641                           ;mtouch_sensor.c: 938: if(sensor < (5u))
 22642  123A  3005               	movlw	5
 22643  123B  0275               	subwf	i1MTOUCH_Sensor_wasSampled@sensor,w
 22644  123C  1803               	skipnc
 22645  123D  2A4D               	goto	i1l6881
 22646                           
 22647                           ;mtouch_sensor.c: 939: return (bool)mtouch_sensor[sensor].sampled;
 22648  123E  3009               	movlw	9
 22649  123F  00F4               	movwf	??i1_MTOUCH_Sensor_wasSampled
 22650  1240  0874               	movf	??i1_MTOUCH_Sensor_wasSampled,w
 22651  1241  00F0               	movwf	i1___bmul@multiplicand
 22652  1242  0875               	movf	i1MTOUCH_Sensor_wasSampled@sensor,w
 22653  1243  3191  218B         	fcall	i1___bmul
 22654  1245  3E08               	addlw	8
 22655  1246  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 22656  1247  0086               	movwf	6
 22657  1248  3001               	movlw	1	; select bank3/4
 22658  1249  0087               	movwf	7
 22659  124A  0C01               	rrf	1,w
 22660  124B  3901               	andlw	1
 22661  124C  0008               	return
 22662  124D                     i1l6881:	
 22663                           
 22664                           ;mtouch_sensor.c: 940: else
 22665                           ;mtouch_sensor.c: 941: return 0;
 22666  124D  3000               	movlw	0
 22667  124E  0008               	return
 22668  124F                     __end_ofi1_MTOUCH_Sensor_wasSampled:	
 22669                           
 22670                           	psect	text94
 22671  1223                     __ptext94:	
 22672 ;; *************** function i1_MTOUCH_Sensor_isEnabled *****************
 22673 ;; Defined at:
 22674 ;;		line 824 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22675 ;; Parameters:    Size  Location     Type
 22676 ;;  sensor          1    wreg     enum E14537
 22677 ;; Auto vars:     Size  Location     Type
 22678 ;;  sensor          1    5[COMMON] enum E14537
 22679 ;; Return value:  Size  Location     Type
 22680 ;;                  1    wreg      unsigned char 
 22681 ;; Registers used:
 22682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22683 ;; Tracked objects:
 22684 ;;		On entry : 0/0
 22685 ;;		On exit  : 0/0
 22686 ;;		Unchanged: 0/0
 22687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22690 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22692 ;;Total ram usage:        2 bytes
 22693 ;; Hardware stack levels used:    1
 22694 ;; Hardware stack levels required when called:    1
 22695 ;; This function calls:
 22696 ;;		i1___bmul
 22697 ;; This function is called by:
 22698 ;;		i1_Sensor_scheduleNextScan
 22699 ;; This function uses a non-reentrant model
 22700 ;;
 22701                           
 22702                           
 22703                           ;psect for function i1_MTOUCH_Sensor_isEnabled
 22704  1223                     i1_MTOUCH_Sensor_isEnabled:	
 22705                           
 22706                           ;incstack = 0
 22707                           ; Regs used in i1_MTOUCH_Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 22708                           ;i1MTOUCH_Sensor_isEnabled@sensor stored from wreg
 22709  1223  00F5               	movwf	i1MTOUCH_Sensor_isEnabled@sensor
 22710                           
 22711                           ;mtouch_sensor.c: 826: if(sensor < (5u))
 22712  1224  3005               	movlw	5
 22713  1225  0275               	subwf	i1MTOUCH_Sensor_isEnabled@sensor,w
 22714  1226  1803               	skipnc
 22715  1227  2A37               	goto	i1l6869
 22716                           
 22717                           ;mtouch_sensor.c: 827: return (bool)mtouch_sensor[sensor].enabled;
 22718  1228  3009               	movlw	9
 22719  1229  00F4               	movwf	??i1_MTOUCH_Sensor_isEnabled
 22720  122A  0874               	movf	??i1_MTOUCH_Sensor_isEnabled,w
 22721  122B  00F0               	movwf	i1___bmul@multiplicand
 22722  122C  0875               	movf	i1MTOUCH_Sensor_isEnabled@sensor,w
 22723  122D  3191  218B         	fcall	i1___bmul
 22724  122F  3E08               	addlw	8
 22725  1230  3EA0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 22726  1231  0086               	movwf	6
 22727  1232  3001               	movlw	1	; select bank3/4
 22728  1233  0087               	movwf	7
 22729  1234  0801               	movf	1,w
 22730  1235  3901               	andlw	1
 22731  1236  0008               	return
 22732  1237                     i1l6869:	
 22733                           
 22734                           ;mtouch_sensor.c: 828: else
 22735                           ;mtouch_sensor.c: 829: return 0;
 22736  1237  3000               	movlw	0
 22737  1238  0008               	return
 22738  1239                     __end_ofi1_MTOUCH_Sensor_isEnabled:	
 22739                           
 22740                           	psect	text95
 22741  118B                     __ptext95:	
 22742 ;; *************** function i1___bmul *****************
 22743 ;; Defined at:
 22744 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul8.c"
 22745 ;; Parameters:    Size  Location     Type
 22746 ;;  multiplier      1    wreg     unsigned char 
 22747 ;;  multiplicand    1    0[COMMON] unsigned char 
 22748 ;; Auto vars:     Size  Location     Type
 22749 ;;  multiplier      1    2[COMMON] unsigned char 
 22750 ;;  __bmul          1    3[COMMON] unsigned char 
 22751 ;; Return value:  Size  Location     Type
 22752 ;;                  1    wreg      unsigned char 
 22753 ;; Registers used:
 22754 ;;		wreg, status,2, status,0
 22755 ;; Tracked objects:
 22756 ;;		On entry : 0/0
 22757 ;;		On exit  : 0/0
 22758 ;;		Unchanged: 0/0
 22759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22760 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22763 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22764 ;;Total ram usage:        4 bytes
 22765 ;; Hardware stack levels used:    1
 22766 ;; This function calls:
 22767 ;;		Nothing
 22768 ;; This function is called by:
 22769 ;;		_MTOUCH_Sensor_Service
 22770 ;;		i1_Sensor_scheduleNextScan
 22771 ;;		i1_MTOUCH_Sensor_isEnabled
 22772 ;;		i1_MTOUCH_Sensor_wasSampled
 22773 ;; This function uses a non-reentrant model
 22774 ;;
 22775                           
 22776                           
 22777                           ;psect for function i1___bmul
 22778  118B                     i1___bmul:	
 22779                           
 22780                           ;incstack = 0
 22781                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 22782                           ;i1___bmul@multiplier stored from wreg
 22783  118B  00F2               	movwf	i1___bmul@multiplier
 22784  118C  01F3               	clrf	i1___bmul@product
 22785  118D                     i1l4717:	
 22786  118D  1C72               	btfss	i1___bmul@multiplier,0
 22787  118E  2993               	goto	i1l4721
 22788  118F  0870               	movf	i1___bmul@multiplicand,w
 22789  1190  00F1               	movwf	??i1___bmul
 22790  1191  0871               	movf	??i1___bmul,w
 22791  1192  07F3               	addwf	i1___bmul@product,f
 22792  1193                     i1l4721:	
 22793  1193  1003               	clrc
 22794  1194  0DF0               	rlf	i1___bmul@multiplicand,f
 22795  1195  1003               	clrc
 22796  1196  0CF2               	rrf	i1___bmul@multiplier,f
 22797  1197  0872               	movf	i1___bmul@multiplier,w
 22798  1198  1D03               	btfss	3,2
 22799  1199  298D               	goto	i1l4717
 22800  119A  0873               	movf	i1___bmul@product,w
 22801  119B  0008               	return
 22802  119C                     __end_ofi1___bmul:	
 22803                           
 22804                           	psect	text96
 22805  1FF8                     __ptext96:	
 22806 ;; *************** function _Sensor_setSampled *****************
 22807 ;; Defined at:
 22808 ;;		line 949 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22809 ;; Parameters:    Size  Location     Type
 22810 ;;  sensor          1    wreg     PTR struct .
 22811 ;;		 -> mtouch_sensor(45), 
 22812 ;; Auto vars:     Size  Location     Type
 22813 ;;  sensor          1    0[COMMON] PTR struct .
 22814 ;;		 -> mtouch_sensor(45), 
 22815 ;; Return value:  Size  Location     Type
 22816 ;;                  1    wreg      void 
 22817 ;; Registers used:
 22818 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22819 ;; Tracked objects:
 22820 ;;		On entry : 0/0
 22821 ;;		On exit  : 0/0
 22822 ;;		Unchanged: 0/0
 22823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22828 ;;Total ram usage:        1 bytes
 22829 ;; Hardware stack levels used:    1
 22830 ;; This function calls:
 22831 ;;		Nothing
 22832 ;; This function is called by:
 22833 ;;		_MTOUCH_Sensor_Service
 22834 ;; This function uses a non-reentrant model
 22835 ;;
 22836                           
 22837                           
 22838                           ;psect for function _Sensor_setSampled
 22839  1FF8                     _Sensor_setSampled:	
 22840                           
 22841                           ;incstack = 0
 22842                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
 22843                           ;Sensor_setSampled@sensor stored from wreg
 22844  1FF8  00F0               	movwf	Sensor_setSampled@sensor
 22845                           
 22846                           ;mtouch_sensor.c: 951: sensor->sampled = 1;
 22847  1FF9  0870               	movf	Sensor_setSampled@sensor,w
 22848  1FFA  3E08               	addlw	8
 22849  1FFB  0086               	movwf	6
 22850  1FFC  3001               	movlw	1	; select bank2/3
 22851  1FFD  0087               	movwf	7
 22852  1FFE  1481               	bsf	1,1
 22853  1FFF  0008               	return
 22854  2000                     __end_of_Sensor_setSampled:	
 22855                           
 22856                           	psect	text97
 22857  0C59                     __ptext97:	
 22858 ;; *************** function _Sensor_autoCalibration *****************
 22859 ;; Defined at:
 22860 ;;		line 476 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 22861 ;; Parameters:    Size  Location     Type
 22862 ;;  sensor          1    wreg     PTR struct .
 22863 ;;		 -> mtouch_sensor(45), 
 22864 ;; Auto vars:     Size  Location     Type
 22865 ;;  sensor          1    9[COMMON] PTR struct .
 22866 ;;		 -> mtouch_sensor(45), 
 22867 ;;  name            1    8[COMMON] enum E14537
 22868 ;; Return value:  Size  Location     Type
 22869 ;;                  1    wreg      enum E14543
 22870 ;; Registers used:
 22871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22872 ;; Tracked objects:
 22873 ;;		On entry : 0/0
 22874 ;;		On exit  : 0/0
 22875 ;;		Unchanged: 0/0
 22876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22879 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22880 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22881 ;;Total ram usage:        6 bytes
 22882 ;; Hardware stack levels used:    1
 22883 ;; Hardware stack levels required when called:    1
 22884 ;; This function calls:
 22885 ;;		_Sensor_setCalibratAcqTime
 22886 ;;		_Sensor_setCalibrated
 22887 ;;		i1_Sensor_isCalibratingAcqTime
 22888 ;;		i1_abs
 22889 ;; This function is called by:
 22890 ;;		_MTOUCH_Sensor_Service
 22891 ;; This function uses a non-reentrant model
 22892 ;;
 22893                           
 22894                           
 22895                           ;psect for function _Sensor_autoCalibration
 22896  0C59                     _Sensor_autoCalibration:	
 22897                           
 22898                           ;incstack = 0
 22899                           ; Regs used in _Sensor_autoCalibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 22900                           ;Sensor_autoCalibration@sensor stored from wreg
 22901  0C59  00F9               	movwf	Sensor_autoCalibration@sensor
 22902                           
 22903                           ;mtouch_sensor.c: 478: enum mtouch_sensor_names name = sensor->sensor_name;
 22904  0C5A  0879               	movf	Sensor_autoCalibration@sensor,w
 22905  0C5B  0086               	movwf	6
 22906  0C5C  3001               	movlw	1	; select bank2/3
 22907  0C5D  0087               	movwf	7
 22908  0C5E  0801               	movf	1,w
 22909  0C5F  00F4               	movwf	??_Sensor_autoCalibration
 22910  0C60  0874               	movf	??_Sensor_autoCalibration,w
 22911  0C61  00F8               	movwf	Sensor_autoCalibration@name
 22912                           
 22913                           ;mtouch_sensor.c: 481: if(!Sensor_isCalibratingAcqTime(sensor))
 22914  0C62  0879               	movf	Sensor_autoCalibration@sensor,w
 22915  0C63  3190  207B  318C   	fcall	i1_Sensor_isCalibratingAcqTime
 22916  0C66  3A00               	xorlw	0
 22917  0C67  1D03               	skipz
 22918  0C68  2C94               	goto	i1l5135
 22919                           
 22920                           ;mtouch_sensor.c: 482: {
 22921                           ;mtouch_sensor.c: 483: if(ADFLTR > ((mtouch_sensor_packetsample_t)(sensor->oversampling)
      +                          <<9))
 22922  0C69  0879               	movf	Sensor_autoCalibration@sensor,w
 22923  0C6A  3E04               	addlw	4
 22924  0C6B  0086               	movwf	6
 22925  0C6C  3001               	movlw	1	; select bank2/3
 22926  0C6D  0087               	movwf	7
 22927  0C6E  0801               	movf	1,w
 22928  0C6F  00F4               	movwf	??_Sensor_autoCalibration
 22929  0C70  01F5               	clrf	??_Sensor_autoCalibration+1
 22930  0C71  3009               	movlw	9
 22931  0C72                     u388_25:	
 22932  0C72  35F4               	lslf	??_Sensor_autoCalibration,f
 22933  0C73  0DF5               	rlf	??_Sensor_autoCalibration+1,f
 22934  0C74  0B89               	decfsz	9,f
 22935  0C75  2C72               	goto	u388_25
 22936  0C76  0022               	movlb	2	; select bank2
 22937  0C77  0815               	movf	21,w	;volatile
 22938  0C78  0275               	subwf	??_Sensor_autoCalibration+1,w
 22939  0C79  1D03               	skipz
 22940  0C7A  2C7D               	goto	u389_25
 22941  0C7B  0814               	movf	20,w	;volatile
 22942  0C7C  0274               	subwf	??_Sensor_autoCalibration,w
 22943  0C7D                     u389_25:	
 22944  0C7D  1803               	skipnc
 22945  0C7E  2C90               	goto	i1l5133
 22946                           
 22947                           ;mtouch_sensor.c: 484: {
 22948                           ;mtouch_sensor.c: 485: if(++(sensor->addcap) >= (mtouch_sensor_addcap_t)31)
 22949  0C7F  3001               	movlw	1
 22950  0C80  00F4               	movwf	??_Sensor_autoCalibration
 22951  0C81  0879               	movf	Sensor_autoCalibration@sensor,w
 22952  0C82  3E05               	addlw	5
 22953  0C83  0086               	movwf	6
 22954  0C84  3001               	movlw	1	; select bank2/3
 22955  0C85  0087               	movwf	7
 22956  0C86  0874               	movf	??_Sensor_autoCalibration,w
 22957  0C87  0781               	addwf	1,f
 22958  0C88  301F               	movlw	31
 22959  0C89  0201               	subwf	1,w
 22960  0C8A  1C03               	skipc
 22961  0C8B  0008               	return
 22962                           
 22963                           ;mtouch_sensor.c: 486: Sensor_setCalibratAcqTime(sensor);
 22964  0C8C  0879               	movf	Sensor_autoCalibration@sensor,w
 22965  0C8D  3192  22AD         	fcall	_Sensor_setCalibratAcqTime
 22966                           
 22967                           ;mtouch_sensor.c: 487: }
 22968  0C8F  0008               	return
 22969  0C90                     i1l5133:	
 22970                           
 22971                           ;mtouch_sensor.c: 488: else
 22972                           ;mtouch_sensor.c: 489: {
 22973                           ;mtouch_sensor.c: 490: Sensor_setCalibratAcqTime(sensor);
 22974  0C90  0879               	movf	Sensor_autoCalibration@sensor,w
 22975  0C91  3192  22AD         	fcall	_Sensor_setCalibratAcqTime
 22976                           
 22977                           ;mtouch_sensor.c: 491: }
 22978                           ;mtouch_sensor.c: 492: }
 22979  0C93  0008               	return
 22980  0C94                     i1l5135:	
 22981                           
 22982                           ;mtouch_sensor.c: 493: else
 22983                           ;mtouch_sensor.c: 495: {
 22984                           ;mtouch_sensor.c: 496: if((mtouch_sensor_packetsample_t)abs(packet_sample[name] - ADFLTR
      +                          ) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 22985  0C94  0879               	movf	Sensor_autoCalibration@sensor,w
 22986  0C95  3E04               	addlw	4
 22987  0C96  0086               	movwf	6
 22988  0C97  3001               	movlw	1	; select bank2/3
 22989  0C98  0087               	movwf	7
 22990  0C99  0801               	movf	1,w
 22991  0C9A  00F4               	movwf	??_Sensor_autoCalibration
 22992  0C9B  01F5               	clrf	??_Sensor_autoCalibration+1
 22993  0C9C  35F4               	lslf	??_Sensor_autoCalibration,f
 22994  0C9D  0DF5               	rlf	??_Sensor_autoCalibration+1,f
 22995  0C9E  3578               	lslf	Sensor_autoCalibration@name,w
 22996  0C9F  3E3E               	addlw	(low (_packet_sample| (0+256)))& (0+255)
 22997  0CA0  0086               	movwf	6
 22998  0CA1  3001               	movlw	1	; select bank2/3
 22999  0CA2  0087               	movwf	7
 23000  0CA3  0022               	movlb	2	; select bank2
 23001  0CA4  0914               	comf	20,w	;volatile
 23002  0CA5  00F6               	movwf	??_Sensor_autoCalibration+2
 23003  0CA6  0915               	comf	21,w	;volatile
 23004  0CA7  00F7               	movwf	??_Sensor_autoCalibration+3
 23005  0CA8  0AF6               	incf	??_Sensor_autoCalibration+2,f
 23006  0CA9  1903               	skipnz
 23007  0CAA  0AF7               	incf	??_Sensor_autoCalibration+3,f
 23008  0CAB  3F40               	moviw [0]fsr1
 23009  0CAC  0776               	addwf	??_Sensor_autoCalibration+2,w
 23010  0CAD  00F0               	movwf	i1abs@a
 23011  0CAE  3F41               	moviw [1]fsr1
 23012  0CAF  3D77               	addwfc	??_Sensor_autoCalibration+3,w
 23013  0CB0  00F1               	movwf	i1abs@a+1
 23014  0CB1  3191  2140  318C   	fcall	i1_abs
 23015  0CB4  0875               	movf	??_Sensor_autoCalibration+1,w
 23016  0CB5  0271               	subwf	?i1_abs+1,w
 23017  0CB6  1D03               	skipz
 23018  0CB7  2CBA               	goto	u391_25
 23019  0CB8  0874               	movf	??_Sensor_autoCalibration,w
 23020  0CB9  0270               	subwf	?i1_abs,w
 23021  0CBA                     u391_25:	
 23022  0CBA  1803               	skipnc
 23023  0CBB  2CC9               	goto	i1l5141
 23024                           
 23025                           ;mtouch_sensor.c: 497: {
 23026                           ;mtouch_sensor.c: 498: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)2));
 23027  0CBC  30C0               	movlw	192
 23028  0CBD  00F4               	movwf	??_Sensor_autoCalibration
 23029  0CBE  0879               	movf	Sensor_autoCalibration@sensor,w
 23030  0CBF  3E02               	addlw	2
 23031  0CC0  0086               	movwf	6
 23032  0CC1  3001               	movlw	1	; select bank2/3
 23033  0CC2  0087               	movwf	7
 23034  0CC3  0874               	movf	??_Sensor_autoCalibration,w
 23035  0CC4  0081               	movwf	1
 23036                           
 23037                           ;mtouch_sensor.c: 499: Sensor_setCalibrated(sensor);
 23038  0CC5  0879               	movf	Sensor_autoCalibration@sensor,w
 23039  0CC6  3191  2132         	fcall	_Sensor_setCalibrated
 23040                           
 23041                           ;mtouch_sensor.c: 500: }
 23042  0CC8  0008               	return
 23043  0CC9                     i1l5141:	
 23044                           
 23045                           ;mtouch_sensor.c: 501: else
 23046                           ;mtouch_sensor.c: 502: {
 23047                           ;mtouch_sensor.c: 503: if((sensor->acquisition_time) >= (mtouch_sensor_time_t)(((mtouch_
      +                          sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)2)) - ((mtouch_sensor_time_t)2 << (u
      +                          int8_t)2)))
 23048  0CC9  0879               	movf	Sensor_autoCalibration@sensor,w
 23049  0CCA  3E03               	addlw	3
 23050  0CCB  0086               	movwf	6
 23051  0CCC  3001               	movlw	1	; select bank2/3
 23052  0CCD  0087               	movwf	7
 23053  0CCE  30B8               	movlw	184
 23054  0CCF  0201               	subwf	1,w
 23055  0CD0  1C03               	skipc
 23056  0CD1  2CDF               	goto	i1l5147
 23057                           
 23058                           ;mtouch_sensor.c: 504: {
 23059                           ;mtouch_sensor.c: 505: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)2));
 23060  0CD2  30C0               	movlw	192
 23061  0CD3  00F4               	movwf	??_Sensor_autoCalibration
 23062  0CD4  0879               	movf	Sensor_autoCalibration@sensor,w
 23063  0CD5  3E02               	addlw	2
 23064  0CD6  0086               	movwf	6
 23065  0CD7  3001               	movlw	1	; select bank2/3
 23066  0CD8  0087               	movwf	7
 23067  0CD9  0874               	movf	??_Sensor_autoCalibration,w
 23068  0CDA  0081               	movwf	1
 23069                           
 23070                           ;mtouch_sensor.c: 506: Sensor_setCalibrated(sensor);
 23071  0CDB  0879               	movf	Sensor_autoCalibration@sensor,w
 23072  0CDC  3191  2132         	fcall	_Sensor_setCalibrated
 23073                           
 23074                           ;mtouch_sensor.c: 507: }
 23075  0CDE  0008               	return
 23076  0CDF                     i1l5147:	
 23077                           
 23078                           ;mtouch_sensor.c: 508: else
 23079                           ;mtouch_sensor.c: 509: {
 23080                           ;mtouch_sensor.c: 512: sensor->acquisition_time += ((mtouch_sensor_time_t)2 << (uint8_t)
      +                          2);
 23081  0CDF  3008               	movlw	8
 23082  0CE0  00F4               	movwf	??_Sensor_autoCalibration
 23083  0CE1  0879               	movf	Sensor_autoCalibration@sensor,w
 23084  0CE2  3E03               	addlw	3
 23085  0CE3  0086               	movwf	6
 23086  0CE4  3001               	movlw	1	; select bank2/3
 23087  0CE5  0087               	movwf	7
 23088  0CE6  0874               	movf	??_Sensor_autoCalibration,w
 23089  0CE7  0781               	addwf	1,f
 23090  0CE8  0008               	return
 23091  0CE9                     __end_of_Sensor_autoCalibration:	
 23092                           ;mtouch_sensor.c: 513: }
 23093                           ;mtouch_sensor.c: 514: }
 23094                           ;mtouch_sensor.c: 515: }
 23095                           ;mtouch_sensor.c: 517: return MTOUCH_SENSOR_ERROR_none;
 23096                           ;	Return value of _Sensor_autoCalibration is never used
 23097                           
 23098                           
 23099                           	psect	text98
 23100  1140                     __ptext98:	
 23101 ;; *************** function i1_abs *****************
 23102 ;; Defined at:
 23103 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\abs.c"
 23104 ;; Parameters:    Size  Location     Type
 23105 ;;  a               2    0[COMMON] int 
 23106 ;; Auto vars:     Size  Location     Type
 23107 ;;		None
 23108 ;; Return value:  Size  Location     Type
 23109 ;;                  2    0[COMMON] int 
 23110 ;; Registers used:
 23111 ;;		wreg, status,2, status,0
 23112 ;; Tracked objects:
 23113 ;;		On entry : 0/0
 23114 ;;		On exit  : 0/0
 23115 ;;		Unchanged: 0/0
 23116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23121 ;;Total ram usage:        4 bytes
 23122 ;; Hardware stack levels used:    1
 23123 ;; This function calls:
 23124 ;;		Nothing
 23125 ;; This function is called by:
 23126 ;;		_Sensor_autoCalibration
 23127 ;;		_MTOUCH_Sensor_Service
 23128 ;; This function uses a non-reentrant model
 23129 ;;
 23130                           
 23131                           
 23132                           ;psect for function i1_abs
 23133  1140                     i1_abs:	
 23134                           
 23135                           ;incstack = 0
 23136                           ; Regs used in i1_abs: [wreg+status,2+status,0]
 23137  1140  1FF1               	btfss	i1abs@a+1,7
 23138  1141  0008               	return
 23139  1142  0970               	comf	i1abs@a,w
 23140  1143  00F2               	movwf	??i1_abs
 23141  1144  0971               	comf	i1abs@a+1,w
 23142  1145  00F3               	movwf	??i1_abs+1
 23143  1146  0AF2               	incf	??i1_abs,f
 23144  1147  1903               	skipnz
 23145  1148  0AF3               	incf	??i1_abs+1,f
 23146  1149  0872               	movf	??i1_abs,w
 23147  114A  00F0               	movwf	?i1_abs
 23148  114B  0873               	movf	??i1_abs+1,w
 23149  114C  00F1               	movwf	?i1_abs+1
 23150  114D  0008               	return
 23151  114E                     __end_ofi1_abs:	
 23152                           
 23153                           	psect	text99
 23154  107B                     __ptext99:	
 23155 ;; *************** function i1_Sensor_isCalibratingAcqTime *****************
 23156 ;; Defined at:
 23157 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 23158 ;; Parameters:    Size  Location     Type
 23159 ;;  sensor          1    wreg     PTR struct .
 23160 ;;		 -> mtouch_sensor(45), 
 23161 ;; Auto vars:     Size  Location     Type
 23162 ;;  sensor          1    0[COMMON] PTR struct .
 23163 ;;		 -> mtouch_sensor(45), 
 23164 ;; Return value:  Size  Location     Type
 23165 ;;                  1    wreg      unsigned char 
 23166 ;; Registers used:
 23167 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23168 ;; Tracked objects:
 23169 ;;		On entry : 0/0
 23170 ;;		On exit  : 0/0
 23171 ;;		Unchanged: 0/0
 23172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23177 ;;Total ram usage:        1 bytes
 23178 ;; Hardware stack levels used:    1
 23179 ;; This function calls:
 23180 ;;		Nothing
 23181 ;; This function is called by:
 23182 ;;		_Sensor_autoCalibration
 23183 ;;		i1_Sensor_scheduleNextScan
 23184 ;; This function uses a non-reentrant model
 23185 ;;
 23186                           
 23187                           
 23188                           ;psect for function i1_Sensor_isCalibratingAcqTime
 23189  107B                     i1_Sensor_isCalibratingAcqTime:	
 23190                           
 23191                           ;incstack = 0
 23192                           ; Regs used in i1_Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 23193                           ;i1Sensor_isCalibratingAcqTime@sensor stored from wreg
 23194  107B  00F0               	movwf	i1Sensor_isCalibratingAcqTime@sensor
 23195                           
 23196                           ;mtouch_sensor.c: 916: return (bool)sensor->acqTime_cal;
 23197  107C  0870               	movf	i1Sensor_isCalibratingAcqTime@sensor,w
 23198  107D  3E08               	addlw	8
 23199  107E  0086               	movwf	6
 23200  107F  3001               	movlw	1	; select bank2/3
 23201  1080  0087               	movwf	7
 23202  1081  0E01               	swapf	1,w
 23203  1082  3901               	andlw	1
 23204  1083  0008               	return
 23205  1084                     __end_ofi1_Sensor_isCalibratingAcqTime:	
 23206                           
 23207                           	psect	text100
 23208  1132                     __ptext100:	
 23209 ;; *************** function _Sensor_setCalibrated *****************
 23210 ;; Defined at:
 23211 ;;		line 901 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 23212 ;; Parameters:    Size  Location     Type
 23213 ;;  sensor          1    wreg     PTR struct .
 23214 ;;		 -> mtouch_sensor(45), 
 23215 ;; Auto vars:     Size  Location     Type
 23216 ;;  sensor          1    0[COMMON] PTR struct .
 23217 ;;		 -> mtouch_sensor(45), 
 23218 ;; Return value:  Size  Location     Type
 23219 ;;                  1    wreg      void 
 23220 ;; Registers used:
 23221 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23222 ;; Tracked objects:
 23223 ;;		On entry : 0/0
 23224 ;;		On exit  : 0/0
 23225 ;;		Unchanged: 0/0
 23226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23231 ;;Total ram usage:        1 bytes
 23232 ;; Hardware stack levels used:    1
 23233 ;; This function calls:
 23234 ;;		Nothing
 23235 ;; This function is called by:
 23236 ;;		_Sensor_autoCalibration
 23237 ;; This function uses a non-reentrant model
 23238 ;;
 23239                           
 23240                           
 23241                           ;psect for function _Sensor_setCalibrated
 23242  1132                     _Sensor_setCalibrated:	
 23243                           
 23244                           ;incstack = 0
 23245                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 23246                           ;Sensor_setCalibrated@sensor stored from wreg
 23247  1132  00F0               	movwf	Sensor_setCalibrated@sensor
 23248                           
 23249                           ;mtouch_sensor.c: 903: sensor->calibrated = 1;
 23250  1133  0870               	movf	Sensor_setCalibrated@sensor,w
 23251  1134  3E08               	addlw	8
 23252  1135  0086               	movwf	6
 23253  1136  3001               	movlw	1	; select bank2/3
 23254  1137  0087               	movwf	7
 23255  1138  1581               	bsf	1,3
 23256                           
 23257                           ;mtouch_sensor.c: 904: sensor->acqTime_cal = 0;
 23258  1139  0870               	movf	Sensor_setCalibrated@sensor,w
 23259  113A  3E08               	addlw	8
 23260  113B  0086               	movwf	6
 23261  113C  3001               	movlw	1	; select bank2/3
 23262  113D  0087               	movwf	7
 23263  113E  1201               	bcf	1,4
 23264  113F  0008               	return
 23265  1140                     __end_of_Sensor_setCalibrated:	
 23266                           
 23267                           	psect	text101
 23268  12AD                     __ptext101:	
 23269 ;; *************** function _Sensor_setCalibratAcqTime *****************
 23270 ;; Defined at:
 23271 ;;		line 907 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 23272 ;; Parameters:    Size  Location     Type
 23273 ;;  sensor          1    wreg     PTR struct .
 23274 ;;		 -> mtouch_sensor(45), 
 23275 ;; Auto vars:     Size  Location     Type
 23276 ;;  sensor          1    1[COMMON] PTR struct .
 23277 ;;		 -> mtouch_sensor(45), 
 23278 ;; Return value:  Size  Location     Type
 23279 ;;                  1    wreg      void 
 23280 ;; Registers used:
 23281 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23282 ;; Tracked objects:
 23283 ;;		On entry : 0/0
 23284 ;;		On exit  : 0/0
 23285 ;;		Unchanged: 0/0
 23286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23291 ;;Total ram usage:        2 bytes
 23292 ;; Hardware stack levels used:    1
 23293 ;; This function calls:
 23294 ;;		Nothing
 23295 ;; This function is called by:
 23296 ;;		_Sensor_autoCalibration
 23297 ;; This function uses a non-reentrant model
 23298 ;;
 23299                           
 23300                           
 23301                           ;psect for function _Sensor_setCalibratAcqTime
 23302  12AD                     _Sensor_setCalibratAcqTime:	
 23303                           
 23304                           ;incstack = 0
 23305                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 23306                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 23307  12AD  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 23308                           
 23309                           ;mtouch_sensor.c: 909: sensor->acqTime_cal = 1;
 23310  12AE  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 23311  12AF  3E08               	addlw	8
 23312  12B0  0086               	movwf	6
 23313  12B1  3001               	movlw	1	; select bank2/3
 23314  12B2  0087               	movwf	7
 23315  12B3  1601               	bsf	1,4
 23316                           
 23317                           ;mtouch_sensor.c: 910: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)2));
 23318  12B4  3004               	movlw	4
 23319  12B5  00F0               	movwf	??_Sensor_setCalibratAcqTime
 23320  12B6  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 23321  12B7  3E03               	addlw	3
 23322  12B8  0086               	movwf	6
 23323  12B9  3001               	movlw	1	; select bank2/3
 23324  12BA  0087               	movwf	7
 23325  12BB  0870               	movf	??_Sensor_setCalibratAcqTime,w
 23326  12BC  0081               	movwf	1
 23327                           
 23328                           ;mtouch_sensor.c: 911: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)2));
 23329  12BD  30C0               	movlw	192
 23330  12BE  00F0               	movwf	??_Sensor_setCalibratAcqTime
 23331  12BF  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 23332  12C0  3E02               	addlw	2
 23333  12C1  0086               	movwf	6
 23334  12C2  3001               	movlw	1	; select bank2/3
 23335  12C3  0087               	movwf	7
 23336  12C4  0870               	movf	??_Sensor_setCalibratAcqTime,w
 23337  12C5  0081               	movwf	1
 23338  12C6  0008               	return
 23339  12C7                     __end_of_Sensor_setCalibratAcqTime:	
 23340  007E                     btemp	set	126	;btemp
 23341  007E                     int$flags	set	126
 23342  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    140
    Data        56
    BSS         310
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      70
    BANK1            80      1      80
    BANK2            80      0      79
    BANK3            80      0      79
    BANK4            80      0      40
    BANK5            80      0      70
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           43      0       0
    BANK12            0      0       0

Pointer List with Targets:

    processFanToggle@ft.fn	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@ft.led	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@ft.fan	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@ft.state	PTR unsigned char  size(1) Largest target is 0

    handleUARTCommands$3294	PTR struct . size(1) Largest target is 70
		 -> fanSpeedControls(BANK5[70]), 

    fanSpeedControls.ledStatus	PTR unsigned char  size(1) Largest target is 0

    fanSpeedControls.fanSpeed	PTR unsigned char  size(1) Largest target is 0

    Button_Service$3221$0	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Service$3221	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    handleUARTCommands$3219	PTR struct . size(1) Largest target is 70
		 -> fanSpeedControls(BANK5[70]), 

    MTOUCH_Sensor_postAcquisitionProcess$3218	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    handleFanToggleU@index.fn	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@index.led	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@index.fan	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@index.state	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@index.fn	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@index.led	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@index.fan	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@index.state	PTR unsigned char  size(1) Largest target is 0

    Button_StateMachine$0	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 85
		 -> mtouch_sensor_init(CODE[45]), mtouch_button_init(CODE[85]), 

    __builtin_memcpy$0	PTR void  size(2) Largest target is 85
		 -> mtouch_sensor(BANK3[45]), mtouch_button(BIGRAM[85]), 

    fanToggles.fanCtrl	PTR struct . size(1) Largest target is 0

    fanToggles.toggleState	PTR unsigned char  size(1) Largest target is 0

    fanToggles.toggleFlag	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.fanCtrl.fn	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.fanCtrl.led	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.fanCtrl.fan	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.fanCtrl.state	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.fanCtrl	PTR struct . size(1) Largest target is 0

    syncFanToggleState@ft.toggleState	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft.toggleFlag	PTR unsigned char  size(1) Largest target is 0

    syncFanToggleState@ft	PTR struct . size(1) Largest target is 14
		 -> fanToggles(BANK2[14]), 

    handleFanSpeedControl@fc.ledStatus	PTR unsigned char  size(1) Largest target is 0

    handleFanSpeedControl@fc.fanSpeed	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fan.fn	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fan.led	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fan.fan	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fan.state	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fan	PTR struct . size(1) Largest target is 34
		 -> fans(BANK3[34]), 

    processFanSpeedControlU@fc.ledStatus	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fc.fanSpeed	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControlU@fc	PTR struct . size(1) Largest target is 70
		 -> fanSpeedControls(BANK5[70]), 

    processFanSpeedControl@fan.fn	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControl@fan.led	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControl@fan.fan	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControl@fan.state	PTR unsigned char  size(1) Largest target is 0

    S2165$ledStatus	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControl@fc.ledStatus	PTR unsigned char  size(1) Largest target is 0

    S2165$fanSpeed	PTR unsigned char  size(1) Largest target is 0

    processFanSpeedControl@fc.fanSpeed	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleControls@ft.fanCtrl	PTR struct . size(1) Largest target is 0

    handleFanToggleControls@ft.toggleState	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleControls@ft.toggleFlag	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@fan.fn	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@fan.led	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@fan.fan	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@fan.state	PTR unsigned char  size(1) Largest target is 0

    S2185$fanCtrl	PTR struct . size(1) Largest target is 0

    processFanToggle@ft.fanCtrl	PTR struct . size(1) Largest target is 0

    S2185$toggleState	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@ft.toggleState	PTR unsigned char  size(1) Largest target is 0

    S2185$toggleFlag	PTR unsigned char  size(1) Largest target is 0

    processFanToggle@ft.toggleFlag	PTR unsigned char  size(1) Largest target is 0

    handleGeneralTouchControls@ctrl	PTR struct . size(1) Largest target is 36
		 -> controls(BANK4[36]), 

    processToggle@ctrl	PTR struct . size(1) Largest target is 36
		 -> controls(BANK4[36]), 

    handleFanSpeedChange@fan.fn	PTR unsigned char  size(1) Largest target is 0

    handleFanSpeedChange@fan.led	PTR unsigned char  size(1) Largest target is 0

    handleFanSpeedChange@fan.fan	PTR unsigned char  size(1) Largest target is 0

    handleFanSpeedChange@fan.state	PTR unsigned char  size(1) Largest target is 0

    handleFanSpeedChange@fan	PTR struct . size(1) Largest target is 34
		 -> fans(BANK3[34]), 

    handleFanToggleU@fan.fn	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@fan.led	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@fan.fan	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@fan.state	PTR unsigned char  size(1) Largest target is 0

    handleFanToggleU@fan	PTR struct . size(1) Largest target is 34
		 -> fans(BANK3[34]), 

    handleFanToggle@fan.fn	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@fan.led	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@fan.fan	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@fan.state	PTR unsigned char  size(1) Largest target is 0

    handleFanToggle@fan	PTR struct . size(1) Largest target is 34
		 -> fans(BANK3[34]), 

    S1851$fn	PTR unsigned char  size(1) Largest target is 0

    fans.fn	PTR unsigned char  size(1) Largest target is 0

    S1851$led	PTR unsigned char  size(1) Largest target is 0

    fans.led	PTR unsigned char  size(1) Largest target is 0

    S1851$fan	PTR unsigned char  size(1) Largest target is 0

    fans.fan	PTR unsigned char  size(1) Largest target is 0

    S1851$state	PTR unsigned char  size(1) Largest target is 0

    fans.state	PTR unsigned char  size(1) Largest target is 0

    ir_handler@ctrl	PTR struct . size(1) Largest target is 36
		 -> controls(BANK4[36]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    ADCC_SetADTIInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADCC_DefaultInterruptHandler(), ADCC_ThresholdISR_mTouch(), 

    ADCC_ADTI_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ADCC_DefaultInterruptHandler(), ADCC_ThresholdISR_mTouch(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(1) Largest target is 45
		 -> mtouch_sensor(BANK3[45]), 

    callback_sampled	PTR FTN(enum E14537,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_Service@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BIGRAM[85]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E14424,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E14424,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _decodeIRSignal->i1___awmod
    i1___awmod->___awdiv
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->i1_Sensor_scheduleNextScan
    i1_Sensor_scheduleNextScan->i1_MTOUCH_Sensor_isEnabled
    i1_Sensor_scheduleNextScan->i1_MTOUCH_Sensor_wasSampled
    i1_MTOUCH_Sensor_wasSampled->i1___bmul
    i1_MTOUCH_Sensor_isEnabled->i1___bmul
    _Sensor_autoCalibration->i1_abs

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _ir_handler->_processToggle
    _handleFanToggle->_EUSART_Write
    _handleFanSpeedChange->_EUSART_Write
    _handleUARTCommands->_processFanSpeedControlU
    _processFanSpeedControlU->_syncFanToggleState
    _syncFanToggleState->___bmul
    _handleGeneralTouchControls->_processToggle
    _processToggle->_updateLight
    _updateLight->_setLightState
    _setLightState->___bmul
    _MTOUCH_Button_isPressed->___wmul
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _ADCC_Initialize->_ADCC_SetADTIInterruptHandler
    _OnHold->_EUSART_Write
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _Button_Tick_helper->___wmul
    _Sensor_FrequencyHopping->_Sensor_FrequencyHopping_Autotune_Process
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _abs->___bmul
    _MTOUCH_Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _medianFilter->___bmul
    _MTOUCH_Sensor_isSamplingComplete->_Sensor_scheduleNextScan
    _Sensor_scheduleNextScan->_MTOUCH_Sensor_isEnabled
    _Sensor_scheduleNextScan->_MTOUCH_Sensor_wasSampled
    _MTOUCH_Sensor_isEnabled->___bmul
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_ADCC_Initialize->_ADCC_SetADTIInterruptHandler
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Button_Initialize->___wmul
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_decodeIRSignal
    _decodeIRSignal->i1___awmod

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  177497
                                             41 BANK0      2     2      0
                                              0 BANK1      1     1      0
                    _DATAEE_ReadByte
                       _EUSART_Write
                   _InitExternal_INT
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                             _OnHold
                  _SYSTEM_Initialize
         _handleGeneralTouchControls
                 _handleUARTCommands
                         _ir_handler
 ---------------------------------------------------------------------------------
 (1) _ir_handler                                           5     5      0    8403
                                             26 BANK0      5     5      0
                       _EUSART_Write
                             ___bmul
               _handleFanSpeedChange
                    _handleFanToggle
                      _processToggle
                 _syncFanToggleState
 ---------------------------------------------------------------------------------
 (2) _handleFanToggle                                      6     6      0     849
                                             11 BANK0      6     6      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _handleFanSpeedChange                                 2     1      1     693
                                             11 BANK0      2     1      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (1) _handleUARTCommands                                   9     9      0    9703
                                             24 BANK0      8     8      0
                        _EUSART_Read
                 _EUSART_is_rx_ready
                             ___bmul
                   _handleFanToggleU
            _processFanSpeedControlU
                      _setLightState
                 _syncFanToggleState
                          _uartLight
 ---------------------------------------------------------------------------------
 (2) _uartLight                                            1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _processFanSpeedControlU                              6     5      1    4257
                                             18 BANK0      6     5      1
                            ___awmod
                   _handleFanToggleU
                 _syncFanToggleState
 ---------------------------------------------------------------------------------
 (2) _syncFanToggleState                                   4     4      0    1831
                                             14 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _handleFanToggleU                                     6     6      0     780
                                             10 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1233
                                             10 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGeneralTouchControls                           4     4      0   16189
                                             26 BANK0      4     4      0
            _MTOUCH_Button_isPressed
                             ___bmul
                      _processToggle
 ---------------------------------------------------------------------------------
 (2) _processToggle                                        6     5      1    2763
                                             20 BANK0      6     5      1
                       _EUSART_Write
                        _updateLight
 ---------------------------------------------------------------------------------
 (3) _updateLight                                          4     4      0    2126
                                             16 BANK0      4     4      0
                             ___bmul
                      _setLightState
 ---------------------------------------------------------------------------------
 (4) _setLightState                                        2     1      1     335
                                             14 BANK0      2     1      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_isPressed                              7     7      0   11440
                                             16 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0   20084
                    _ADCC_Initialize
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     363
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0     211
       _ADCC_SetADTIInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _OnHold                                               3     3      0      62
                                             11 BANK0      3     3      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              2     2      0  111137
                                             39 BANK0      2     2      0
           _MTOUCH_Button_ServiceAll
                  _MTOUCH_Initialize
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0   11691
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   5     5      0   11691
                                             20 BANK0      5     5      0
                 _Button_Tick_helper
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                             16 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              0     0      0   17191
   _MTOUCH_Sensor_isSamplingComplete
_MTOUCH_Sensor_postAcquisitionProces
            _Sensor_FrequencyHopping
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              0     0      0    2718
_Sensor_FrequencyHopping_Autotune_Pr
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               1     1      0       0
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            13    13      0    2718
                                             18 BANK0     13    13      0
                             ___bmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     293
                                             14 BANK0      4     2      2
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_postAcquisitionProcess                 2     2      0    4529
                                             26 BANK0      2     2      0
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0    2574
                                             23 BANK0      3     3      0
                       _medianFilter
 ---------------------------------------------------------------------------------
 (5) _medianFilter                                         9     7      2    2380
                                             14 BANK0      9     7      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      65
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSamplingComplete                     2     2      0    9944
                                             21 BANK0      2     2      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (4) _Sensor_scheduleNextScan                              5     5      0    6232
                                             16 BANK0      5     5      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  2     2      0     103
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_SetTrisBit                                    2     1      1     331
                                             10 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_isEnabled                              2     2      0    1791
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0   19510
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        1     1      0     245
                                             12 BANK0      1     1      0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0     211
       _ADCC_SetADTIInterruptHandler
 ---------------------------------------------------------------------------------
 (5) _ADCC_SetADTIInterruptHandler                         2     0      2     211
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                             11 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    5606
                                             18 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    5507
                                             16 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0    1791
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0   13457
                                             23 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   62506
                                             37 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       7     7      0   62407
                                             30 BANK0      7     7      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_wasSampled                             2     2      0    1791
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           3     3      0    1791
                                             14 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 4     2      2   13959
                                             24 BANK0      4     2      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              4     2      2   14477
                                             24 BANK0      4     2      2
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             7     7      0   13358
                                             16 BANK0      7     7      0
            _MTOUCH_Sensor_Calibrate
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4   11378
                                             10 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0    1791
                                             14 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     195
                                             10 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2    2681
                                             24 BANK0      6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               8     6      2     428
                                             10 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2    1974
                                             18 BANK0      6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2    2340
                                             22 BANK0      2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2    2188
                                             18 BANK0      4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2    1791
                                             14 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    1729
                                             10 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             16    14      2     350
                                             10 BANK0     16    14      2
 ---------------------------------------------------------------------------------
 (1) _InitExternal_INT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      2     0      2     352
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0    4554
                                              9 BANK0      1     1      0
                  _ADCC_ThresholdISR
                     _decodeIRSignal
 ---------------------------------------------------------------------------------
 (9) _decodeIRSignal                                       7     7      0    1891
                                              2 BANK0      7     7      0
                   _DATAEE_WriteByte
                            ___awdiv
                  i1_DATAEE_ReadByte
                     i1_EUSART_Write
                          i1___awmod
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     504
                                              9 COMMON     5     1      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_EUSART_Write                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_DATAEE_ReadByte                                   2     0      2      96
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             9     5      4     604
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (10) _DATAEE_WriteByte                                    4     1      3     393
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (9) _ADCC_ThresholdISR                                    0     0      0    2663
                   Absolute function *
       _ADCC_DefaultInterruptHandler *
           _ADCC_ThresholdISR_mTouch *
 ---------------------------------------------------------------------------------
 (10) _ADCC_ThresholdISR_mTouch                            0     0      0    2663
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_Sensor_Service                               3     3      0    2663
                                             11 COMMON     3     3      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i1_Sensor_SetTrisBit
              i1_Sensor_isCalibrated
          i1_Sensor_scheduleNextScan
                           i1___bmul
                              i1_abs
 ---------------------------------------------------------------------------------
 (12) i1_Sensor_scheduleNextScan                           5     5      0    1282
                                              6 COMMON     5     5      0
          i1_MTOUCH_Sensor_isEnabled
         i1_MTOUCH_Sensor_wasSampled
                i1_Sensor_SetTrisBit
              i1_Sensor_isCalibrated
      i1_Sensor_isCalibratingAcqTime
                           i1___bmul
 ---------------------------------------------------------------------------------
 (13) i1_Sensor_isCalibrated                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (13) i1_Sensor_SetTrisBit                                 2     1      1     184
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (13) i1_MTOUCH_Sensor_wasSampled                          2     2      0     244
                                              4 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (13) i1_MTOUCH_Sensor_isEnabled                           2     2      0     244
                                              4 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            4     3      1     182
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _Sensor_setSampled                                   1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _Sensor_autoCalibration                              6     6      0     724
                                              4 COMMON     6     6      0
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i1_Sensor_isCalibratingAcqTime
                              i1_abs
 ---------------------------------------------------------------------------------
 (12) i1_abs                                               4     2      2     118
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_Sensor_isCalibratingAcqTime                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _Sensor_setCalibrated                                1     1      0     110
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _Sensor_setCalibratAcqTime                           2     2      0     132
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _ADCC_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_ReadByte
   _EUSART_Write
   _InitExternal_INT
   _MTOUCH_Button_isPressed
     ___wmul
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
             ___wmul
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
             ___wmul
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
           ___wmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
         ___wmul *
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           ___wmul
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
           _ADCC_SetADTIInterruptHandler
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isSamplingComplete
         _MTOUCH_Sensor_isEnabled
           ___bmul
         _MTOUCH_Sensor_isSampling
         _MTOUCH_Sensor_wasSampled
           ___bmul
         _Sensor_scheduleNextScan
           _MTOUCH_Sensor_isEnabled
             ___bmul
           _MTOUCH_Sensor_wasSampled
             ___bmul
           _Sensor_SetTrisBit
           _Sensor_isCalibrated
           _Sensor_isCalibratingAcqTime
           ___bmul
       _MTOUCH_Sensor_postAcquisitionProcess
         _Sensor_DefaultCallback *
         _Sensor_RawSample_Update *
           _medianFilter
             ___bmul
         ___bmul *
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           ___bmul
           _abs
             ___bmul (ARG)
         _Sensor_setSamplePeriod
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
           ___wmul (ARG)
         ___wmul
     _MTOUCH_needReburst
   _OnHold
     _EUSART_Write
   _SYSTEM_Initialize
     _ADCC_Initialize
       _ADCC_SetADTIInterruptHandler
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           ___wmul
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
           _ADCC_SetADTIInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _handleGeneralTouchControls
     _MTOUCH_Button_isPressed
       ___wmul
     ___bmul
     _processToggle
       _EUSART_Write
       _updateLight
         ___bmul
         _setLightState
           ___bmul (ARG)
   _handleUARTCommands
     _EUSART_Read
     _EUSART_is_rx_ready
     ___bmul
     _handleFanToggleU
     _processFanSpeedControlU
       ___awmod
       _handleFanToggleU
       _syncFanToggleState
         ___bmul
     _setLightState
       ___bmul (ARG)
     _syncFanToggleState
       ___bmul
     _uartLight
   _ir_handler
     _EUSART_Write
     ___bmul
     _handleFanSpeedChange
       _EUSART_Write
     _handleFanToggle
       _EUSART_Write
     _processToggle
       _EUSART_Write
       _updateLight
         ___bmul
         _setLightState
           ___bmul (ARG)
     _syncFanToggleState
       ___bmul

 _INTERRUPT_InterruptManager (ROOT)
   _ADCC_ThresholdISR
     Absolute function(Fake) *
     _ADCC_DefaultInterruptHandler *
     _ADCC_ThresholdISR_mTouch *
       _MTOUCH_Sensor_Service
         _Sensor_autoCalibration
           _Sensor_setCalibratAcqTime
           _Sensor_setCalibrated
           i1_Sensor_isCalibratingAcqTime
           i1_abs
         _Sensor_setSampled
         i1_Sensor_SetTrisBit
         i1_Sensor_isCalibrated
         i1_Sensor_scheduleNextScan
           i1_MTOUCH_Sensor_isEnabled
             i1___bmul
           i1_MTOUCH_Sensor_wasSampled
             i1___bmul
           i1_Sensor_SetTrisBit
           i1_Sensor_isCalibrated
           i1_Sensor_isCalibratingAcqTime
           i1___bmul
         i1___bmul
         i1_abs
   _decodeIRSignal
     _DATAEE_WriteByte
     ___awdiv
     i1_DATAEE_ReadByte
     i1_EUSART_Write
     i1___awmod
       ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2B      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      28      13       50.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      46      15       87.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1B0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              2B      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1B0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Jul 27 17:29:16 2025

                                                ??i1_EUSART_Write 0070  
                                    ?_MTOUCH_Sensor_RawSample_Get 002E  
                                                               _H 00E7  
                                                               _L 0155  
                                                               _d 00C1  
                                                               pc 0002  
                                                  ___bmul@product 002C  
                                                     __CFG_CP$OFF 0000  
                                         ?_Sensor_autoCalibration 0070  
                                                              _a1 0055  
                                                              _a2 0053  
                                                              _c1 0051  
                                                              _c2 004F  
                                                              _d1 00BD  
                                                              _d2 00BB  
                                                              _l1 00A4  
                                                              _l2 00A0  
                                                              _l3 0151  
                                                              _l4 014D  
                                                    ___awdiv@sign 0076  
                                                              _r1 00B9  
                                                              _r2 00B7  
                                                              _t1 00BF  
                                                              _x1 00B5  
                                                              _x2 00B3  
                                          __end_of_decodeIRSignal 023F  
                                             ___wmul@multiplicand 002C  
                                       _Sensor_setCalibratAcqTime 12AD  
                                                     __CFG_LVP$ON 0000  
                                     __size_of_handleUARTCommands 013C  
                                                             _GIE 005F  
                                                    __CFG_CPD$OFF 0000  
                                                             _f10 00DF  
                                                             _f11 00DE  
                                                             _f20 00DD  
                                                             _f21 00DC  
                                                             _fn1 00C7  
                                                             _fn2 00C5  
                                                             _ld1 00AC  
                                                             _ld2 00A8  
                                                             _ld3 004B  
                                                             _abs 115D  
                                  ?_EUSART_SetFramingErrorHandler 002A  
                                                             _sto 00D3  
                                         __size_of_PMD_Initialize 0008  
                                                    ___awmod@sign 0030  
                                                    __CFG_BORV$LO 0000  
                                                             wreg 0009  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 002B  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                                __size_of_MTOUCH_Sensor_SampleAll 000F  
                               __size_of_MTOUCH_Sensor_Initialize 0018  
                                                            S8313 1055  
                                       ?_MTOUCH_Sensor_Initialize 0070  
                                 __size_of_Sensor_setSamplePeriod 0012  
                                                    ?_EUSART_Read 0070  
                                                    __CFG_ZCD$OFF 0000  
                                                            ?_abs 002E  
                                                            l2013 080B  
                                                            l1180 10F4  
                                                            l1504 0DDE  
                                                            l1187 10BD  
                                                            l1461 156C  
                                                            l1454 1565  
                                                            l1518 0A51  
                                                            l1447 155E  
                                                            l1439 1557  
                                                            l1535 08DD  
                                                            l1464 157C  
                                                            l1472 1641  
                                                            l1482 1647  
                                                            l1386 0372  
                                                            l1491 164D  
                                                            l1476 1643  
                                                            l1485 1649  
                                                            l1494 164F  
                                                            l1479 1645  
                                                            l1488 164B  
                                                            l1499 1671  
                                                            l7023 0F4D  
                                                            l7041 0FB4  
                                                            l7025 0F62  
                                                            l7017 0F54  
                                                            l7105 06F7  
                                                            l7035 0F95  
                                                            l7027 0F6A  
                                                            l7131 071D  
                                                            l7301 09E0  
                                                            l7061 0FFD  
                                                            l7109 06FE  
                                                            l7039 0FAF  
                                                            l7127 0715  
                                                            l7119 0709  
                                                            l7233 136A  
                                                            l7321 14C1  
                                                            l7073 1449  
                                                            l7161 1567  
                                                            l7219 138C  
                                                            l7147 0737  
                                                            l7155 1552  
                                                            l7411 0A33  
                                                            l7317 14BF  
                                                            l7325 14CA  
                                                            l7309 14A8  
                                                            l7093 06D3  
                                                            l7157 1559  
                                                            l7165 156E  
                                                            l8221 0C52  
                                                            l8205 0C3E  
                                                            l7087 0695  
                                                            l7159 1560  
                                                            l7431 1783  
                                                            l7415 0A42  
                                                            l7407 0A1C  
                                                            l8215 0C47  
                                                            l7345 1638  
                                                            l7097 06DB  
                                                            l7441 1795  
                                                            l7417 0A46  
                                                            l7427 177C  
                                                            l7701 14F4  
                                                            l7453 17B2  
                                                            l7445 17A1  
                                                            l7621 0DCF  
                                                            l7613 0DA9  
                                                            l6911 0E76  
                                                            l6727 1264  
                                                            l7439 1789  
                                                            l7623 0DD3  
                                                            l8183 0C0F  
                                                            l6913 0E7E  
                                                            l6665 119F  
                                                            l6905 11DE  
                                                            l6745 0D33  
                                                            l6841 04C5  
                                                            l7481 1174  
                                                            l7465 15D9  
                                                            l7449 17AA  
                                                            l7641 08EF  
                                                            l7617 0DC0  
                                                            l8193 0C25  
                                                            l6755 08AD  
                                                            l6923 0A7B  
                                                            l6771 150B  
                                                            l6819 040E  
                                                     OnHold@touch 002D  
                                                            l6917 0E92  
                                                            l6669 11A5  
                                                            l6925 0A83  
                                                            l6773 1511  
                                                            l6765 14F9  
                                                            l6837 04B4  
                                                            l6829 0477  
                                                            l7661 1715  
                                                            l7653 1651  
                                                            l7645 0903  
                                                            l7637 08EA  
                                                            l7813 0323  
                                                            l6695 0805  
                                                            l6951 07C8  
                                                            l6943 078B  
                                                            l6767 14FF  
                                                            l7911 0570  
                                                            l7903 055F  
                                                            l7823 0331  
                                                            l6689 12DF  
                                                            l6953 07D1  
                                                            l6769 1505  
                                                            l6777 1517  
                                                            l6857 053F  
                                                            l6849 0501  
                                                            l7817 032C  
                                                            l6795 127B  
                                                            l7667 1728  
                                                            l6965 0AF9  
                                                            l6893 12FB  
                                                            l7677 14D6  
                                                            l7597 1692  
                                                            l7589 10FE  
                                                            l7933 05A0  
                                                            l7925 058F  
                                                            l7917 057E  
                                                            l7909 056D  
                                                            l7853 03A2  
                                                            l7861 03D4  
                                                            l7773 02B4  
                                                            l7687 14E3  
                                                            l7935 05A3  
                                                            l7927 0592  
                                                            l7919 0581  
                                                            l7839 0369  
                                                            l7783 02BC  
                                                            l7759 027E  
                                                            l7945 05C3  
                                                            l7971 065A  
                                                            l7955 05E3  
                                                            l7787 02C0  
                                                            l7965 060D  
                                                            l7887 0962  
                                                            l7879 094F  
                                                            l7799 02E1  
                                                            l7897 0982  
                                                            l7993 16DE  
                                                            l7977 0660  
                                                            l7995 16E5  
                               __end_ofi1_MTOUCH_Sensor_isEnabled 1239  
                                   ?_Button_Reading_Update_Helper 0032  
                                                            _LATA 0016  
                                                            _LATB 0017  
                                                            _LATC 0018  
                                                            _PMD0 0796  
                                                            _PMD1 0797  
                                                            _PMD2 0798  
                                                            _PMD3 0799  
                                                            u7040 0FFC  
                                                            _PMD4 079A  
                                                            u7105 06CD  
                                                            _PMD5 079B  
                                                            u7035 0FEC  
                                                            u8220 026D  
                                                            u8310 02A8  
                                                            u8230 026E  
                                                            u9110 0C32  
                                                            u7095 069D  
                                                            u8320 02A9  
                                                            u8240 0276  
                                                            u9120 0C33  
                                                            u6625 15A1  
                                                            u6705 03E8  
                                                            u7450 1336  
                                                            u8250 0277  
                                                            u6820 0E5D  
                                                            u6645 0CFB  
                                                            u6725 0437  
                                                            u6815 0E1A  
                                                            u6655 0D42  
                                                            u6735 0463  
                                                            u6825 0E59  
                                                            u6585 080C  
                                                            u6905 07A2  
                                                            u6745 04A0  
                                                            u8505 03B4  
                                                            u8185 0251  
                                                            u6595 0811  
                                                            u6755 04EE  
                                                            u8515 03C7  
                                                            u8435 0342  
                                                            u8355 02CE  
                                                            u8275 028C  
                                                            u8195 025D  
                                                            u6765 052B  
                                                            u7805 179B  
                                                            u8445 0355  
                                                            u8365 02DA  
                                                            u8285 0298  
                                                            u9237 0BEB  
                                                            u6934 0B16  
                                                            u6935 0B15  
                                                            u7815 17A2  
                                                            u9247 0C09  
                                                            u7920 167E  
                                                            u7680 09FD  
                                                            u9257 0946  
                                                            u8385 02FD  
                                                            u7850 15D7  
                                                            u7930 167F  
                                                            u7690 09FE  
                                                            u6875 0AAC  
                                                            u9267 0977  
                                                            u8395 030E  
                                                            u8485 038A  
                                                            u8670 0626  
                                                            u7950 0D81  
                                                            u8495 039D  
                                                            u8680 0627  
                                                            u7960 0D82  
                                                            u7785 178C  
                                      Button_State_Pressed@button 0038  
                                         ??i1_Sensor_isCalibrated 0070  
                                                            _WPUA 0F39  
                                                            _WPUB 0F44  
                                                            _WPUC 0F4F  
                                                            _WPUE 0F65  
                                             _sensor_medianBuffer 0120  
                                                    __CFG_WRT$OFF 0000  
                                                   __CFG_FCMEN$ON 0000  
                                      __end_of_syncFanToggleState 12AD  
                                              _MTOUCH_needReburst 1FD8  
                                                            _fan1 00D7  
                                                            _fan2 00D6  
                                                            _fan3 00D5  
                                                            abs@a 002E  
                                                            _fans 01CD  
                                                            _main 0BCC  
                            __size_of_MTOUCH_Button_InitializeAll 0022  
                                                            fsr0h 0005  
                                                            fsr1h 0007  
                                                            indf0 0000  
                                                            fsr0l 0004  
                                                            indf1 0001  
                                                            fsr1l 0006  
                            __size_of_MTOUCH_Sensor_InitializeAll 0022  
                                                            btemp 007E  
                                           i1DATAEE_ReadByte@bAdd 0070  
                                                            start 0022  
                                     ?i1_MTOUCH_Sensor_wasSampled 0070  
                                       ??_Sensor_FrequencyHopping 003F  
                           __end_ofi1_Sensor_isCalibratingAcqTime 1084  
                          __size_ofi1_Sensor_isCalibratingAcqTime 0009  
                                   i1_Sensor_isCalibratingAcqTime 107B  
                                                   __CFG_CSWEN$ON 0000  
                                               ___bmul@multiplier 002D  
                                                   __CFG_MCLRE$ON 0000  
                                             ?_MTOUCH_needReburst 0070  
                                       processFanSpeedControlU@fc 0036  
                                               ?_InitExternal_INT 0070  
                                                   ?_medianFilter 002E  
                                  __end_of_Sensor_autoCalibration 0CE9  
                                        ?_MTOUCH_Service_Mainloop 0070  
                                __size_of_MTOUCH_Button_isPressed 002F  
                                   __size_of_Button_State_Pressed 007C  
                                                           ??_abs 0030  
                          MTOUCH_Sensor_isSamplingComplete@sensor 0036  
                                       __size_of_DATAEE_WriteByte 001C  
                                     ?_Button_Baseline_Initialize 0032  
                                              ??_InitExternal_INT 002A  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 00B0  
                                   ??_MTOUCH_Sensor_RawSample_Get 0030  
                                   Sensor_RawSample_Update@sensor 0039  
                                   Sensor_RawSample_Update@result 0037  
                                                   ?_EUSART_Write 0070  
                                                 ?_decodeIRSignal 0070  
                                  __size_of_OSCILLATOR_Initialize 0009  
                                   __end_of_OSCILLATOR_Initialize 0800  
                             __end_of_Sensor_isCalibratingAcqTime 10BB  
                                     _Sensor_isCalibratingAcqTime 10B1  
                                                           _ADACC 0090  
                                                           _ADACQ 009D  
                                                           _ADCAP 009B  
                                                           _ADACT 0099  
                                                           ?_main 0070  
                                                           _ADCLK 0098  
                                                           _ADCNT 010C  
                                                           _ADPCH 009E  
                                                           _ADREF 009A  
                                                 __end_of___awdiv 086F  
                                                           _ADPRE 009C  
                                                   __CFG_WDTE$OFF 0000  
                                                 __end_of___awmod 17B7  
                                                           _ADRPT 010D  
                                                 ___awdiv@divisor 0070  
                                                  __CFG_DEBUG$OFF 0000  
                                         __size_of_Button_Service 006B  
                                      _ADCC_ADTI_InterruptHandler 016D  
                                                           i1l522 0B78  
                                                           i1l519 0B59  
                                                           i1l789 1310  
                                                 ___awdiv@counter 0075  
                                           __end_of_setLightState 157D  
                                                           _OSCEN 0891  
                                      handleUARTCommands@received 003E  
                                                           u740m0 1366  
                                                           u737m0 1388  
                                                           _TRISA 0011  
                                                           _TRISB 0012  
                                                           _TRISC 0013  
                                                           i1_abs 1140  
                                                           _RXPPS 0ECB  
                                 __size_of_Button_DefaultCallback 0001  
                                            ??_MTOUCH_needReburst 002A  
                                                  i1___awmod@sign 0021  
                                                 _DATAEE_ReadByte 114E  
                                 __size_of_Sensor_DefaultCallback 0001  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 1338  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 001F  
                                   _MTOUCH_Sensor_Scan_Initialize 1319  
                                         Sensor_setSampled@sensor 0070  
                                                           _count 00C9  
                                          ??_handleFanSpeedChange 002C  
                                 __end_of_Sensor_scheduleNextScan 1000  
                                                 ??_processToggle 0035  
                                __size_of_Button_State_NotPressed 00AB  
                                                __end_ofi1___bmul 119C  
                                                           pclath 000A  
                                         __end_of_handleFanToggle 0E0B  
                                                _fanSpeedControls 02A0  
                                            _Sensor_Sampled_Reset 1084  
                                                           status 0003  
                                __size_of_MTOUCH_Sensor_isEnabled 0017  
                                                           wtemp0 007E  
                                               uartLight@received 002A  
                                              __size_ofi1___awmod 0046  
                                                    updateLight@i 0033  
                                                  ??_medianFilter 0030  
                                   handleFanSpeedChange@direction 002B  
                                                 __initialization 0024  
                                      ?i1_Sensor_scheduleNextScan 0070  
                                          _Sensor_setSamplePeriod 11AE  
                                                    __end_of_main 0C59  
                                            _Sensor_setCalibrated 1132  
                                                  ??_EUSART_Write 002A  
                                     ?_INTERRUPT_InterruptManager 0070  
                                __end_of_MTOUCH_Button_Initialize 1800  
                                                          ??_main 0049  
                                         _MTOUCH_Sensor_Calibrate 11E6  
                                                     ir_handler@i 003D  
                                                     ir_handler@k 003E  
                                         ??_Button_Reading_Update 0038  
                                                          ?i1_abs 0070  
                                __end_of_ADCC_ThresholdISR_mTouch 1FE1  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 002C  
                                        ?_Button_Deviation_Update 002A  
                                                    ?_MTOUCH_Tick 0070  
                                    Button_Baseline_Update@button 002A  
                                                          _ADACCH 0091  
                                                          _ADACCL 0090  
                               _EUSART_DefaultFramingErrorHandler 0000  
                                                          _ADCON0 0093  
                                                          _ADCON1 0094  
                                                          _ADCON2 0095  
                                                          _ADCON3 0096  
                                      _EUSART_OverrunErrorHandler 0246  
                                                          _ADFLTR 0114  
                                                          _ADERRH 0117  
                                                          _ADERRL 0116  
                            __size_of_MTOUCH_Sensor_RawSample_Get 001B  
                                                          _ADLTHH 010F  
                                                          _ADLTHL 010E  
                                                          _ADRESH 008D  
                                                          i1S8315 105F  
                                                          _ADRESL 008C  
                                                          _CCPR2L 0310  
                                                          _CCPR5H 031D  
                                                          _CCPR5L 031C  
                                                          _ADSTAT 0097  
                                                          _ADUTHH 0111  
                                                ___awdiv@dividend 0072  
                                                          _ADUTHL 0110  
                                                          _ANSELA 0F38  
                                                          _ANSELB 0F43  
                                                          _ANSELC 0F4E  
                                              __CFG_RSTOSC$HFINT1 0000  
                                                 _wipeTriggerFlag 00E2  
                             __size_of_handleGeneralTouchControls 003D  
                                      __end_of_EUSART_is_rx_ready 1FE6  
                                     __end_ofi1_Sensor_SetTrisBit 160B  
                                                          _RC1REG 0119  
                                                          _RA5PPS 0F15  
                                                          _RC1STA 011D  
                                                          i1l1117 001D  
                                                          _ODCONA 0F3A  
                                                          _ODCONB 0F45  
                                                          i1l1187 106C  
                                                          _ODCONC 0F50  
                                                          _RC6PPS 0F26  
                                                          i1l1358 0105  
                                                          i1l5141 0CC9  
                                                          i1l5133 0C90  
                                                          i1l5135 0C94  
                                                          i1l5147 0CDF  
                                                          i1l4721 1193  
                                                  __CFG_WDTCCS$SC 0000  
                                                          i1l4717 118D  
                                                          i1l4901 1600  
                                                          i1l7215 0F44  
                                                          i1l7171 0EAC  
                                                          i1l5811 0859  
                                                          i1l5803 083B  
                                                          i1l7181 0EC2  
                                                          i1l5805 0847  
                                                          i1l5815 0862  
                                                          i1l7193 0EFF  
                                                          i1l7177 0EA4  
                                                          i1l7361 0B74  
                                                          i1l8161 0018  
                                                          i1l4891 15E4  
                                                          i1l7195 0F04  
                                                          i1l7179 0EBA  
                                                          i1l7371 0BC3  
                                                          i1l5819 086A  
                                                          i1l5851 1736  
                                                          i1l4893 15EB  
                                                          i1l7189 0EE9  
                                                          i1l7365 0BA6  
                                                          i1l4895 15F2  
                                                          i1l7375 0BC9  
                                                          i1l7367 0BB5  
                                                          i1l5863 1743  
                                                          i1l5855 173D  
                                                          i1l8159 0016  
                                                          i1l4897 15F9  
                                                          i1l4889 15DD  
                                                          i1l5793 0833  
                                                          i1l5865 174F  
                                                          i1l5873 1764  
                                                          i1l5787 0828  
                                                          i1l5877 176C  
                                                          i1l5869 175B  
                                                          i1l5973 00DF  
                                                          i1l5983 0117  
                                                          i1l6881 124D  
                                                          i1l5985 0125  
                                                          i1l5969 00D3  
                                                          _INLVLA 0F3C  
                                                          _INLVLB 0F47  
                                                          i1l5979 00F6  
                                           ?_Sensor_Sampled_Reset 0070  
                                                          _INLVLC 0F52  
                                                          i1l6869 1237  
                                                          i1l5989 0137  
                                                          _INLVLE 0F68  
                                                          u503_25 083E  
                                                          u505_25 0848  
                                                          u506_25 0852  
                                                          u514_25 1746  
                                                          u531_24 00EE  
                                                          u507_25 085A  
                                                          u531_25 00ED  
                                                          u532_24 00FE  
                                                          u516_25 1755  
                                                          u532_25 00FD  
                                                          u517_25 175C  
                                                          u534_24 010F  
                                                          u534_25 010E  
                                                          u535_24 011F  
                                                          u391_25 0CBA  
                                                          u535_25 011E  
                                                          u388_25 0C72  
                                                          _OSCFRQ 0893  
                                                          u389_25 0C7D  
                                                          u734_25 0F37  
                                                          u735_20 0F43  
                                                          u930_27 00C8  
                                                          u931_27 0129  
                                                          u932_27 01CE  
                                                          u933_27 01E6  
                                                 _mainToggleState 0059  
                                                          u934_27 0202  
                                                          u935_27 021F  
                                                          u927_27 00A6  
                                                          u936_27 022F  
                                                          u928_27 00B2  
                                                          u929_27 00BD  
                                                          _TX1REG 011A  
                                                          _TX1STA 011E  
                               MTOUCH_Button_InitializeAll@button 0038  
                                                          i1abs@a 0070  
                                  ??_Button_Reading_Update_Helper 0034  
                                         handleFanSpeedChange@fan 002C  
                                          _Button_DefaultCallback 0002  
                                 __end_of_MTOUCH_Service_Mainloop 14F6  
                                                  __CFG_PWRTE$OFF 0000  
                                                          _OnHold 0922  
                                             _Sensor_isCalibrated 1125  
                                     MTOUCH_Sensor_Service@sensor 007D  
                                          _Sensor_DefaultCallback 0003  
                                                   _packet_sample 013E  
                                                          ___bmul 119C  
                                           ?_Sensor_setCalibrated 0070  
                               __end_ofi1_Sensor_scheduleNextScan 0F47  
                                               _ADCC_ThresholdISR 1118  
                                                          ___wmul 0802  
                                    Sensor_DefaultCallback@sensor 002A  
                                                       ??___awdiv 0074  
                                                  __CFG_STVREN$ON 0000  
                                                       ??___awmod 002E  
                                              ?_ADCC_ThresholdISR 0070  
                                                ___awdiv@quotient 0077  
                                                          _temp1h 00D1  
                                                          _temp2h 00CB  
                                                          _temp1l 00CF  
                                                          _temp2l 00CD  
                                                 ___awmod@divisor 002A  
                                __end_of_MTOUCH_Button_ServiceAll 118B  
                                  __size_of_MTOUCH_Sensor_Service 0080  
                                                 ___awmod@counter 002F  
                                                          _toggle 00DA  
                                   __end_of_MTOUCH_Sensor_Service 0BCC  
                                    Sensor_autoCalibration@sensor 0079  
                                         __end_of_DATAEE_ReadByte 115D  
                                                          _ustate 0058  
                                               __end_ofi1___awmod 1771  
                                                 _ADCC_Initialize 139C  
                                                  _PMD_Initialize 1073  
                                         _MTOUCH_Sensor_SampleAll 116C  
                                    Button_DefaultCallback@button 002A  
                                             ??_ADCC_ThresholdISR 007E  
                                        __end_of_handleFanToggleU 0A62  
                                            ?_Sensor_isCalibrated 0070  
                                        ?_Sensor_RawSample_Update 0070  
                                             handleFanToggleU@fan 002F  
                                         ?_Button_Baseline_Update 002A  
                    ADCC_SetADTIInterruptHandler@InterruptHandler 002A  
                              __size_of_Sensor_setCalibratAcqTime 001A  
                                     ??i1_MTOUCH_Sensor_isEnabled 0074  
                                 MTOUCH_Sensor_RawSample_Get@name 0031  
                                            __size_of_EUSART_Read 000C  
                                               _SYSTEM_Initialize 11C0  
                                                ?_handleFanToggle 0030  
                                         __end_of__initialization 009B  
                             __size_of_Button_Baseline_Initialize 002F  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0070  
                                              ?_SYSTEM_Initialize 0070  
                                             _Button_StateMachine 0165  
                                      __end_of_Button_Tick_helper 147A  
                                   MTOUCH_Sensor_Calibrate@sensor 002F  
                                                    ?_updateLight 0070  
                                             ___bmul@multiplicand 002A  
                                       __end_of_ADCC_ThresholdISR 1125  
                                                   __end_ofi1_abs 114E  
                                                  ir_handler@ctrl 003C  
                               __size_of_MTOUCH_Sensor_isSampling 0003  
                                       ?_MTOUCH_Sensor_isSampling 0070  
                                                  __pcstackCOMMON 0070  
                                         _MTOUCH_Button_isPressed 15AC  
                                                    __pidataBANK0 1FD5  
                                                    __pidataBANK1 10C5  
                                                    __pidataBANK2 1FF2  
                                                    __pidataBANK4 13E3  
                                             ??_SYSTEM_Initialize 0039  
                                      __end_of_MTOUCH_Button_Tick 14A2  
                                                _DATAEE_WriteByte 12FD  
                                                      _fan1_state 00E1  
                                                      _fan2_state 00E0  
                                __end_of_MTOUCH_Sensor_Initialize 1295  
                                       ??_MTOUCH_Sensor_Calibrate 002E  
                                __size_of_Sensor_scheduleNextScan 00B9  
                                 __end_of_Button_Deviation_Update 0E9F  
                                          __end_of_PMD_Initialize 107B  
                                                       ?i1___bmul 0070  
                                                  _Button_Service 098A  
                                        ?_processFanSpeedControlU 0032  
                                      ?_Button_State_Initializing 0038  
                                            Button_Service@button 0043  
                                                         ??i1_abs 0072  
                                           ??_Sensor_isCalibrated 002A  
                                  i1Sensor_scheduleNextScan@state 0078  
                                  __end_of_Button_Baseline_Update 0D79  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 003D  
                                        _MTOUCH_Button_Initialize 17B7  
                                 ??_EUSART_SetOverrunErrorHandler 002C  
                                            __end_of_medianFilter 0551  
                                                i1___bmul@product 0073  
                                         _Button_State_NotPressed 074C  
                                   __size_of_MTOUCH_Sensor_Enable 0014  
                                       __end_of_SYSTEM_Initialize 11D2  
                                               _lowpowerActivated 005D  
                                MTOUCH_Sensor_isCalibrated@sensor 0030  
                                          ??_Sensor_Sampled_Reset 002A  
                                        _ADCC_ThresholdISR_mTouch 1FDC  
                                                      __pbssBANK0 004B  
                                                      __pbssBANK1 00A0  
                                                      __pbssBANK2 0120  
                                                      __pbssBANK3 01A0  
                                                      __pbssBANK5 02A0  
                                            __end_of_EUSART_Write 10C5  
                                         _MTOUCH_Sensor_isEnabled 1266  
                                            syncFanToggleState@ft 0030  
                                                      _fanToggles 0157  
                                  __size_ofi1_Sensor_isCalibrated 000C  
                                   __end_ofi1_Sensor_isCalibrated 10DC  
                                    handleUARTCommands@index_2479 003C  
                                      __end_of_mtouch_button_init 1055  
                              __end_of_handleGeneralTouchControls 16EB  
                                      _handleGeneralTouchControls 16AE  
                                                         ?_OnHold 0070  
                                          ??_Sensor_setCalibrated 0070  
                                                ??_decodeIRSignal 0022  
                                                      __pmaintext 0BCC  
                                         Sensor_SetTrisBit@sensor 002B  
                                                         ?___bmul 002A  
                                       i1_MTOUCH_Sensor_isEnabled 1223  
                                                         ?___wmul 002A  
                                         __end_of_ADCC_Initialize 13BF  
                                  MTOUCH_Sensor_wasSampled@sensor 002F  
                                                      __pintentry 0004  
                                              _syncFanToggleState 1295  
                                                         _ADFLTRH 0115  
                                                         _ADFLTRL 0114  
                                          __end_of_Button_Service 09F5  
                                      __end_of_handleUARTCommands 068D  
                                                         _ADPREVH 008F  
                                                         _ADPREVL 008E  
                             __end_of_MTOUCH_Button_InitializeAll 137A  
                                     _MTOUCH_Button_InitializeAll 1358  
                            __end_of_ADCC_SetADTIInterruptHandler 1096  
                           __size_of_ADCC_SetADTIInterruptHandler 0009  
                                    _ADCC_SetADTIInterruptHandler 108D  
                                                         _ADSTPTH 0113  
                                                         _ADSTPTL 0112  
                             __end_of_MTOUCH_Sensor_InitializeAll 139C  
                                     _MTOUCH_Sensor_InitializeAll 137A  
                                       ??_MTOUCH_Sensor_SampleAll 003F  
                                                      ??i1___bmul 0071  
                                                 ?_PMD_Initialize 0070  
                                              __size_of_uartLight 0034  
                                 __end_of_Sensor_RawSample_Update 1453  
                               __size_of_MTOUCH_Sensor_wasSampled 0017  
                                                ?_DATAEE_ReadByte 002A  
                                       ?_MTOUCH_Sensor_wasSampled 0070  
                                       Sensor_isCalibrated@sensor 002B  
                                             ?_syncFanToggleState 0070  
                                       i1Sensor_SetTrisBit@sensor 0071  
                                              _processToggle$2288 0037  
                               __end_of_Button_State_Initializing 0AD0  
                                                         _SP1BRGH 011C  
                                                         _SP1BRGL 011B  
                                        _MTOUCH_Button_ServiceAll 117B  
                                                         _OSCCON1 088D  
                                                         _OSCCON3 088F  
                                       __size_of_InitExternal_INT 0006  
                                                         _NVMADRH 081B  
                                                         _NVMADRL 081A  
                                                         _NVMDATH 081D  
                                                         _OSCTUNE 0892  
                                                         _NVMDATL 081C  
                                __size_of_MTOUCH_Service_Mainloop 002A  
                                                         _NVMCON2 081F  
                                                         _SLRCONA 0F3B  
                                                         _SLRCONB 0F46  
                                                         _SLRCONC 0F51  
                                                         _PPSLOCK 0E8F  
                                    __end_of_Button_State_Pressed 0B4C  
                                        ??_EUSART_SetErrorHandler 002C  
                                Button_Baseline_Initialize@button 0032  
                                 Sensor_setCalibratAcqTime@sensor 0071  
                                     MTOUCH_Service_Mainloop@mask 0048  
                                            __size_of_MTOUCH_Tick 0003  
                            __size_of_Sensor_isCalibratingAcqTime 000A  
                                            DATAEE_WriteByte@bAdd 0070  
                                         ?_Sensor_setSamplePeriod 0070  
                                            ??_syncFanToggleState 002E  
                                       ??_MTOUCH_Button_isPressed 0030  
                                                      _freq_index 005C  
                                               _Sensor_SetTrisBit 14F6  
                                      __size_of_ADCC_ThresholdISR 000D  
                                                 __size_of_OnHold 0068  
                                                      _ir_handler 023F  
                                     ??i1_Sensor_scheduleNextScan 0076  
                                            __CFG_SCANE$available 0000  
                                         _handleUARTCommands$3294 003D  
                                              ?_Sensor_SetTrisBit 002A  
                                              processToggle@index 0034  
                                                 __size_of___bmul 0012  
                                                         ___awdiv 081E  
                                                         ___awmod 1771  
                                  MTOUCH_Button_Initialize@button 0035  
                                                 __size_of___wmul 001C  
                                                 ?_Button_Service 0070  
                                         handleUARTCommands@index 003B  
                                                 _scanInterrupted 005E  
                                                         __ptext1 023F  
                                                         __ptext2 0D79  
                                                         __ptext3 08C0  
                                                         __ptext4 0551  
                                                         __ptext5 163E  
                                                         __ptext6 16EB  
                                                         __ptext7 1295  
                                                         __ptext8 09F5  
                                                         __ptext9 1771  
                                     Button_Reading_Update@button 0036  
                                             ??_Sensor_SetTrisBit 002B  
                                   ?_ADCC_SetADTIInterruptHandler 002A  
                                        _MTOUCH_Sensor_Initialize 127D  
                                           _OSCILLATOR_Initialize 07F7  
                                                    __size_of_abs 000F  
                                         __size_ofi1_EUSART_Write 0008  
                                       ??_Button_State_NotPressed 003A  
                                                ___awmod@dividend 002C  
                                        ??_PIN_MANAGER_Initialize 002A  
                                             i1___bmul@multiplier 0072  
                                  __size_of_Button_Reading_Update 0014  
                                     __size_of_MTOUCH_needReburst 0004  
                                   __end_of_Button_Reading_Update 11E6  
                               MTOUCH_Sensor_InitializeAll@sensor 0033  
                                                _callback_sampled 00E9  
                                       ??_MTOUCH_Sensor_isEnabled 002E  
                                      __size_of_SYSTEM_Initialize 0012  
                                                         clrloop0 1101  
                                                _callback_pressed 00ED  
                                  MTOUCH_Sensor_Initialize@sensor 0031  
                                           OnHold@matterTriggered 00D9  
                                   Sensor_scheduleNextScan@sensor 0034  
                                            end_of_initialization 009B  
                                           __end_of_processToggle 16AE  
                                   __size_of_handleFanSpeedChange 0062  
                                         ?_Button_DefaultCallback 002A  
                           __end_of_EUSART_SetOverrunErrorHandler 10B1  
                          __size_of_EUSART_SetOverrunErrorHandler 0009  
                                   _EUSART_SetOverrunErrorHandler 10A8  
                                  __end_of_Sensor_setSamplePeriod 11C0  
                                      __end_of_mtouch_sensor_init 182D  
                                                         init_ram 110C  
                                        ?_Sensor_FrequencyHopping 0070  
                                                         initloop 110D  
                                               __end_of_uartLight 1672  
                                       __end_of_Sensor_SetTrisBit 1522  
                                     i1Sensor_isCalibrated@sensor 0071  
                                         ?_Sensor_DefaultCallback 002A  
                                __size_of_Button_Deviation_Update 0094  
                                               _EUSART_Initialize 1407  
                                    ??_MTOUCH_Sensor_isCalibrated 002E  
                                          __size_of_setLightState 002E  
                                              ?_EUSART_Initialize 0070  
                                               _touchEdgeDetected 00DB  
                             __end_of_MTOUCH_Sensor_RawSample_Get 12E2  
                                     _MTOUCH_Sensor_RawSample_Get 12C7  
                                              _EUSART_is_rx_ready 1FE1  
                                            __size_of_updateLight 0024  
                                         _Sensor_scheduleNextScan 0F47  
                                             _mtouch_request_init 0061  
                                            handleFanToggle@index 002F  
                                                ?_ADCC_Initialize 0070  
                                           __CFG_WDTCPS$WDTCPS_31 0000  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 003C  
                                             ??_EUSART_Initialize 002C  
                                                       _PORTBbits 000D  
                                             ?_EUSART_is_rx_ready 0070  
                                           __size_of_medianFilter 0179  
                                    processFanSpeedControlU@index 0032  
                                            setLightState@touchID 002F  
                                   Button_Deviation_Update@button 002A  
                                                       _TRISAbits 0011  
                                       i1_Sensor_scheduleNextScan 0E9F  
                                           __size_of_EUSART_Write 000A  
                                   MTOUCH_Sensor_isEnabled@sensor 002F  
                                               ?_handleFanToggleU 002A  
                                      MTOUCH_Sensor_Enable@sensor 002F  
                                                       i1___awmod 172B  
                                             _callback_notPressed 00EB  
                                                __CFG_FEXTOSC$OFF 0000  
                                __end_of_MTOUCH_Sensor_isSampling 1FD2  
                             __size_of_MTOUCH_Sensor_isCalibrated 001B  
                                  __end_of_Button_DefaultCallback 0003  
                                 __size_of_EUSART_SetErrorHandler 0009  
                                              ??_handleFanToggleU 002A  
                                        __end_of_DATAEE_WriteByte 1319  
                                      Sensor_setCalibrated@sensor 0070  
                                  __end_of_Sensor_DefaultCallback 0004  
                                       __end_of_EUSART_Initialize 142C  
                                            ??_EUSART_is_rx_ready 002A  
                                        ??_Sensor_autoCalibration 0074  
                                              medianFilter@sensor 0036  
                                __size_of_Sensor_RawSample_Update 0027  
                                               OnHold@irTriggered 0057  
                                    __size_ofi1_Sensor_SetTrisBit 0030  
                                                     ?_ir_handler 0070  
                                                  __end_of_OnHold 098A  
                                                    _medianFilter 03D8  
                                    ??_handleGeneralTouchControls 003A  
                                            _Button_State_Pressed 0AD0  
                                  ??_ADCC_DefaultInterruptHandler 0070  
                                                  __end_of___bmul 11AE  
                                      _EUSART_DefaultErrorHandler 0000  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 1358  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 0020  
                                   _MTOUCH_Sensor_ADCC_Initialize 1338  
                                                  __end_of___wmul 081E  
                                      ??_MTOUCH_Button_Initialize 0030  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 074C  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 00BF  
                      ??_Sensor_FrequencyHopping_Autotune_Process 0032  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0070  
                        _Sensor_FrequencyHopping_Autotune_Process 068D  
                                 ??_MTOUCH_Sensor_Scan_Initialize 002C  
                                                    _EUSART_Write 10BB  
                                              _Button_Tick_helper 1453  
                                          ?_OSCILLATOR_Initialize 0070  
                                                    _lastFanSpeed 0063  
                                             MTOUCH_Button_Tick@i 0038  
                                      ??_ADCC_ThresholdISR_mTouch 007E  
                                     ??_Button_State_Initializing 003A  
                                               __size_ofi1___bmul 0011  
                                           _MTOUCH_Sensor_Service 0B4C  
                                                   _setLightState 154F  
                                             start_initialization 0024  
                                         _MTOUCH_Service_Mainloop 14CC  
                                                _InitExternal_INT 1FE6  
                                 __size_of_PIN_MANAGER_Initialize 002D  
                                              _MTOUCH_Button_Tick 147A  
                                             ?_Button_Tick_helper 0030  
                                                     __end_of_abs 116C  
                                                      ?i1___awmod 0079  
                                                   ??_EUSART_Read 002A  
                                 __end_of_Sensor_FrequencyHopping 1FF2  
                                             ?_MTOUCH_Button_Tick 0070  
                                __size_of_processFanSpeedControlU 0040  
                                 Button_State_Initializing@button 0038  
                                      __size_of_Sensor_SetTrisBit 002C  
                                             DATAEE_ReadByte@bAdd 002A  
                                 i1Sensor_scheduleNextScan@sensor 007A  
                                         medianFilter@bufferIndex 0148  
                                     ?_handleGeneralTouchControls 0070  
                                                        ??_OnHold 002B  
                                  ?_EUSART_SetOverrunErrorHandler 002A  
                                __end_of_MTOUCH_Sensor_wasSampled 1266  
                                                __CFG_LPBOREN$OFF 0000  
                                    ??i1_MTOUCH_Sensor_wasSampled 0074  
                                       ??_Sensor_scheduleNextScan 0030  
                                            ??_Button_Tick_helper 0032  
                                    __end_of_MTOUCH_Sensor_Enable 120E  
                                      _EUSART_FramingErrorHandler 016B  
                                                        ??___bmul 002B  
                                                ??_PMD_Initialize 002A  
                                        __size_of_handleFanToggle 0092  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 003A  
                                           ?_Button_State_Pressed 0038  
                                                        ??___wmul 002E  
                                          _EUSART_SetErrorHandler 1096  
                                      ??_MTOUCH_Button_ServiceAll 0045  
                                                     __pdataBANK0 0063  
                                                     __pdataBANK1 00E4  
                                                     __pdataBANK2 0165  
                                                     __pdataBANK4 0220  
                                              i1___awmod@dividend 007B  
                                     __end_of_Sensor_isCalibrated 1132  
                                    ??_Button_Baseline_Initialize 0034  
                                            ??_MTOUCH_Button_Tick 0034  
                                              _mtouch_button_init 1000  
                                      Sensor_Sampled_Reset@sensor 002A  
                                              handleFanToggle@fan 0030  
                                  ?i1_Sensor_isCalibratingAcqTime 0070  
                                    ?_Sensor_isCalibratingAcqTime 0070  
                                                  i1_EUSART_Write 106B  
                                              setLightState@state 002E  
                                                  ?_setLightState 002E  
                                                     __pbssBIGRAM 239B  
                                                       ___latbits 0002  
                                                   _sampling_flag 005F  
                                                     _activeFanIR 0065  
                                                   __pcstackBANK0 0020  
                                                   __pcstackBANK1 00EF  
                        __end_of_MTOUCH_Sensor_isSamplingComplete 14CC  
                       __size_of_MTOUCH_Sensor_isSamplingComplete 002A  
                              ??_MTOUCH_Sensor_isSamplingComplete 0035  
                               ?_MTOUCH_Sensor_isSamplingComplete 0070  
                                _MTOUCH_Sensor_isSamplingComplete 14A2  
                                             __size_of_ir_handler 0199  
                                i1MTOUCH_Sensor_wasSampled@sensor 0075  
                                              _handleUARTCommands 0551  
                                        Sensor_SetTrisBit@TrisBit 002A  
                                  MTOUCH_Button_ServiceAll@button 0046  
                             __size_ofi1_MTOUCH_Sensor_wasSampled 0016  
                                 i1MTOUCH_Sensor_isEnabled@sensor 0075  
                                   __size_of_Sensor_Sampled_Reset 0009  
                                      __size_of_EUSART_Initialize 0025  
                                         _Button_Deviation_Update 0E0B  
                                      ?_Sensor_setCalibratAcqTime 0070  
                                             ?_handleUARTCommands 0070  
                                             __end_of_EUSART_Read 1100  
                                       _Button_State_Initializing 0A62  
                                        _MTOUCH_Sensor_isSampling 1FCF  
                              __end_of_MTOUCH_Sensor_isCalibrated 12FD  
                                      _MTOUCH_Sensor_isCalibrated 12E2  
                                             syncFanToggleState@i 0031  
                                                       __pnvBANK2 016B  
                                                       __pnvBANK4 0244  
                                 __size_of_Sensor_autoCalibration 0090  
                                               _Sensor_setSampled 1FF8  
                                           i1_Sensor_isCalibrated 10D0  
                                          _PIN_MANAGER_Initialize 1522  
                                                ??_Button_Service 003E  
                                        ?_MTOUCH_Sensor_Calibrate 0070  
                                              ?_Sensor_setSampled 0070  
                              Button_Reading_Update_Helper@button 0032  
                                      ??_MTOUCH_Sensor_Initialize 0030  
                                   __size_of_Sensor_setCalibrated 000E  
                                                        ?___awdiv 0070  
                                                       __ptext100 1132  
                                                       __ptext101 12AD  
                                                        ?___awmod 002A  
                                                __CFG_PPS1WAY$OFF 0000  
                                          __end_ofi1_EUSART_Write 1073  
                                    ??_INTERRUPT_InterruptManager 0029  
                                             ??_Sensor_setSampled 0070  
                                                       __pswtext1 1055  
                                                       __pswtext2 105F  
                                       ??_MTOUCH_Service_Mainloop 0047  
                                            ??_handleUARTCommands 0038  
                                          ?_MTOUCH_Sensor_Service 0070  
                                      i1Sensor_SetTrisBit@TrisBit 0070  
                                                        _BAUD1CON 011F  
                                           decodeIRSignal@address 0026  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0070  
                                               i1_DATAEE_ReadByte 10DC  
                                                  __size_ofi1_abs 000E  
                    __end_of_MTOUCH_Sensor_postAcquisitionProcess 163E  
                   __size_of_MTOUCH_Sensor_postAcquisitionProcess 0033  
                          ??_MTOUCH_Sensor_postAcquisitionProcess 003A  
                           ?_MTOUCH_Sensor_postAcquisitionProcess 0070  
                            _MTOUCH_Sensor_postAcquisitionProcess 160B  
                                   ??_Sensor_isCalibratingAcqTime 002A  
                                                   ??_MTOUCH_Tick 0039  
                                           decodeIRSignal@command 0027  
                                                     ??i1___awmod 007D  
                                               processToggle@ctrl 0039  
                                              ?i1_DATAEE_ReadByte 0070  
                                        __size_of_DATAEE_ReadByte 000F  
                                            i1EUSART_Write@txData 0070  
                                             ??i1_DATAEE_ReadByte 0072  
                                       __end_of_Sensor_setSampled 2000  
                                                  ___wmul@product 002E  
                          EUSART_SetErrorHandler@interruptHandler 002A  
                                                        _LATCbits 0018  
                              __size_ofi1_Sensor_scheduleNextScan 00A8  
                                         _Sensor_RawSample_Update 142C  
                               __end_of_Sensor_setCalibratAcqTime 12C7  
                                                       clear_ram0 1100  
                                                        _PIE0bits 0716  
                                                        _PIE1bits 0717  
                                      processFanSpeedControlU@fan 0037  
                                               _eusartRxLastError 00E3  
                                     __size_of_syncFanToggleState 0018  
                                           i1___bmul@multiplicand 0070  
                             __size_of_INTERRUPT_InterruptManager 001E  
                                                        _PIR0bits 070C  
                                                        _PIR1bits 070D  
                                 ??_EUSART_SetFramingErrorHandler 002C  
                                                        _PIR3bits 070F  
                                          ??_Button_State_Pressed 003A  
                                                       _uartLight 163E  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 1223  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015  
                                  _MTOUCH_Sensor_Sampled_ResetAll 120E  
                                        ?_MTOUCH_Sensor_SampleAll 0070  
                               _EUSART_DefaultOverrunErrorHandler 0000  
                                    __end_of_handleFanSpeedChange 0922  
                                              _mtouch_sensor_init 1800  
                                        _MTOUCH_Sensor_wasSampled 124F  
                                              _mtouch_time_toScan 0062  
                                __size_of_Sensor_FrequencyHopping 0006  
                                        ??_Button_Baseline_Update 002C  
                                                 ?i1_EUSART_Write 0070  
                                                        i1___bmul 118B  
                                                 ??_setLightState 002F  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 003E  
                                                      _ADCON0bits 0093  
                                                      _ADCON1bits 0094  
                                                      _ADCON2bits 0095  
                                                      _ADCON3bits 0096  
                                       __end_ofi1_DATAEE_ReadByte 10E8  
                                               ___wmul@multiplier 002A  
                                               ??_handleFanToggle 002B  
                                          _Sensor_autoCalibration 0C59  
                                      __end_of_MTOUCH_needReburst 1FDC  
                                         __size_of_decodeIRSignal 01A0  
                                     handleGeneralTouchControls@i 003D  
                                             i1_Sensor_SetTrisBit 15DB  
                                           DATAEE_WriteByte@bData 0072  
                                            _MTOUCH_Sensor_Enable 11FA  
                                                     _EUSART_Read 10F4  
                                                     _holdCounter 00C3  
                                        Button_Tick_helper@button 0030  
                                       ??_Button_Deviation_Update 002C  
                                           _Button_Reading_Update 11D2  
                                         _processFanSpeedControlU 16EB  
                                               ?_DATAEE_WriteByte 0070  
                                        ?_MTOUCH_Button_isPressed 0070  
                                             __end_of_MTOUCH_Tick 1FD5  
                                               _MTOUCH_Initialize 10E8  
                                              ??_DATAEE_WriteByte 0073  
                                 __end_of_MTOUCH_Sensor_Calibrate 11FA  
                                          ?i1_Sensor_isCalibrated 0070  
                              __end_ofi1_MTOUCH_Sensor_wasSampled 124F  
                                      i1_MTOUCH_Sensor_wasSampled 1239  
                                                   ??_updateLight 0030  
                                                      _ADSTATbits 0097  
                                            ?i1_Sensor_SetTrisBit 0070  
                                              ?_MTOUCH_Initialize 0070  
                                                    ??_ir_handler 003A  
                                       __size_of_handleFanToggleU 006D  
                                        __end_of_InitExternal_INT 1FEC  
                                                      ?_uartLight 0070  
                                                    _sample_delay 005B  
                                               i1___awmod@divisor 0079  
                        MTOUCH_Sensor_postAcquisitionProcess@name 003B  
                                         ??_OSCILLATOR_Initialize 002A  
                              __end_of_Button_Baseline_Initialize 15AC  
                                      _Button_Baseline_Initialize 157D  
                                             _EUSART_ErrorHandler 0244  
                                               i1___awmod@counter 0020  
                                             ??_MTOUCH_Initialize 0039  
                                                __size_of___awdiv 0051  
                                                __size_of___awmod 0046  
                                        ?_Button_State_NotPressed 0038  
                                          __size_of_processToggle 003C  
                                              Button_Service@name 0042  
                                        ?_MTOUCH_Sensor_isEnabled 0070  
                                        __size_of_ADCC_Initialize 0023  
                                             __end_of_speedDelays 1837  
                                               main@touchDetected 00EF  
                                           ?_MTOUCH_Sensor_Enable 0070  
                                                        __ptext10 1FE1  
                                                        __ptext11 10F4  
                                                        __ptext20 07F7  
                                                        __ptext12 16AE  
                                                        __ptext21 1407  
                                                        __ptext13 1672  
                                                        __ptext30 1FD2  
                                                        __ptext22 10A8  
                                                        __ptext14 13BF  
                                                        __ptext31 147A  
                                                        __ptext23 109F  
                                                        __ptext15 154F  
                                                        __ptext40 03D8  
                                                        __ptext32 1453  
                                                        __ptext24 1096  
                                                        __ptext16 15AC  
                                                        __ptext41 0003  
                                                        __ptext33 116C  
                                                        __ptext25 139C  
                                                        __ptext17 11C0  
                                                        __ptext50 1319  
                                                        __ptext42 14A2  
                                                        __ptext34 1FEC  
                                                        __ptext26 0922  
                                                        __ptext18 1073  
                                                        __ptext51 1338  
                                                        __ptext43 0F47  
                                                        __ptext35 11AE  
                                                        __ptext27 10BB  
                                                        __ptext19 1522  
                                                        __ptext60 098A  
                                                        __ptext52 108D  
                                                        __ptext44 10B1  
                                                        __ptext36 068D  
                                                        __ptext28 14CC  
                                                        __ptext61 124F  
                                                        __ptext53 120E  
                                                        __ptext45 1125  
                                                        __ptext37 115D  
                                                        __ptext29 1FD8  
                                                        __ptext70 0CE9  
                                                        __ptext62 12E2  
                                                        __ptext54 137A  
                                                        __ptext46 14F6  
                                                        __ptext38 160B  
                                                        __ptext71 157D  
                                                        __ptext63 074C  
                                                        __ptext55 127D  
                                                        __ptext47 1266  
                                                        __ptext39 142C  
                                                        __ptext80 009F  
                                                        __ptext72 11D2  
                                                        __ptext64 0A62  
                                                        __ptext56 1084  
                                                        __ptext48 1FCF  
                                                        __ptext81 172B  
                                                        __ptext73 086F  
                                                        __ptext65 0AD0  
                                                        __ptext57 11FA  
                                                        __ptext49 10E8  
                                                        __ptext90 0E9F  
                                                        __ptext82 106B  
                                                        __ptext74 12C7  
                                                        __ptext66 17B7  
                                                        __ptext58 1358  
                                                        __ptext91 10D0  
                                                        __ptext83 10DC  
                                                        __ptext75 119C  
                                                        __ptext67 0802  
                                                        __ptext59 117B  
                                                        __ptext92 15DB  
                                                        __ptext84 081E  
                                                        __ptext76 0E0B  
                                                        __ptext68 11E6  
                                                        __ptext93 1239  
                                                        __ptext85 12FD  
                                                        __ptext77 1FE6  
                                                        __ptext69 0002  
                                                        __ptext94 1223  
                                                        __ptext86 1118  
                                                        __ptext78 114E  
                                                        __ptext95 118B  
                                                        __ptext87 0801  
                                                        __ptext96 1FF8  
                                                        __ptext88 1FDC  
                                                        __ptext97 0C59  
                                                        __ptext89 0B4C  
                                                        __ptext98 1140  
                                                        __ptext99 107B  
                                             handleUARTCommands@i 003F  
                                              __end_of_ir_handler 03D8  
                                       __end_of_MTOUCH_Initialize 10F4  
                                     DATAEE_WriteByte@GIEBitValue 0073  
                                       ??_Sensor_RawSample_Update 0037  
                                                        _controls 0220  
                                                        _freq_hop 00E4  
                              MTOUCH_Sensor_Scan_Initialize@state 002C  
                                      __size_of_Sensor_setSampled 0008  
                                               _currentScanSensor 0060  
                                     __size_of_EUSART_is_rx_ready 0005  
                                                   __size_of_main 008D  
                                  handleGeneralTouchControls@ctrl 003C  
                                                        _received 00D8  
                                           ??i1_Sensor_SetTrisBit 0071  
                                 __end_of_MTOUCH_Sensor_SampleAll 117B  
                                               ??_DATAEE_ReadByte 002C  
                                            __CFG_WDTCWS$WDTCWS_7 0000  
                                      Sensor_autoCalibration@name 0078  
                                         ?_EUSART_SetErrorHandler 002A  
                                   MTOUCH_needReburst@needReburst 002A  
                                                      _RC1STAbits 011D  
                   EUSART_SetOverrunErrorHandler@interruptHandler 002A  
                                                        int$flags 007E  
                              __size_of_Button_State_Initializing 006E  
                              __end_of_INTERRUPT_InterruptManager 0022  
                                      _INTERRUPT_InterruptManager 0004  
                                             __end_of_updateLight 13E3  
                           __end_of_EUSART_SetFramingErrorHandler 10A8  
                          __size_of_EUSART_SetFramingErrorHandler 0009  
                                   _EUSART_SetFramingErrorHandler 109F  
                                           _handleFanToggleU$2059 002C  
                                 __size_of_Button_Baseline_Update 0090  
                                    ?_MTOUCH_Button_InitializeAll 0070  
                                      __size_ofi1_DATAEE_ReadByte 000C  
                                    ?_MTOUCH_Sensor_InitializeAll 0070  
                                                   _mtouch_button 239B  
                                                      _INTCONbits 000B  
                                                     _NVMCON1bits 081E  
                                                   _mtouch_sensor 01A0  
                                 __end_of_MTOUCH_Button_isPressed 15DB  
                                        ??_Sensor_setSamplePeriod 002A  
                                                 decodeIRSignal@i 0028  
                                       ??_processFanSpeedControlU 0033  
                                               __CFG_BOREN$NSLEEP 0000  
                                      ??_MTOUCH_Sensor_isSampling 002A  
                                                     _MTOUCH_Tick 1FD2  
                                          ?_Button_Reading_Update 0036  
                                Button_Deviation_Update@deviation 0036  
                                    MTOUCH_Button_Initialize@name 0034  
                               __size_of_MTOUCH_Button_Initialize 0049  
                            __end_of_ADCC_DefaultInterruptHandler 0802  
                           __size_of_ADCC_DefaultInterruptHandler 0001  
                                    _ADCC_DefaultInterruptHandler 0801  
                                                        intlevel1 0000  
                                       ?_MTOUCH_Button_Initialize 0070  
                                            _handleFanSpeedChange 08C0  
                                 ??i1_Sensor_isCalibratingAcqTime 0070  
                                                   _processToggle 1672  
                                         ?_PIN_MANAGER_Initialize 0070  
                               __size_of_ADCC_ThresholdISR_mTouch 0005  
                                     ??_Sensor_setCalibratAcqTime 0070  
                                       ?_ADCC_ThresholdISR_mTouch 0070  
                                  __end_of_EUSART_SetErrorHandler 109F  
                                               __CFG_CLKOUTEN$OFF 0000  
                                     ?_MTOUCH_Sensor_isCalibrated 0070  
                                                     _PPSLOCKbits 0E8F  
                Sensor_FrequencyHopping_Autotune_Process@variance 0038  
                                    Sensor_scheduleNextScan@state 0032  
                                            _handleFanToggle$2042 002D  
                                                     ??_uartLight 002A  
                                     __size_of_Button_Tick_helper 0027  
                                 __end_of_Button_State_NotPressed 07F7  
                                         _Sensor_FrequencyHopping 1FEC  
                   EUSART_SetFramingErrorHandler@interruptHandler 002A  
                                         ??_MTOUCH_Sensor_Service 007B  
                                    __end_of_Sensor_Sampled_Reset 108D  
                                 __end_of_MTOUCH_Sensor_isEnabled 127D  
                                                     _speedDelays 182D  
                                     __size_of_MTOUCH_Button_Tick 0028  
                                                   __pstringtext1 182D  
                                                   __pstringtext2 1000  
                                                   __pstringtext3 1800  
                                           handleFanToggleU@index 002E  
                                 Sensor_scheduleNextScan@skipScan 0033  
                               i1Sensor_scheduleNextScan@skipScan 0079  
                                                  _decodeIRSignal 009F  
                                   ??_MTOUCH_Button_InitializeAll 0037  
                                        ??_Button_DefaultCallback 002B  
                                   ??_MTOUCH_Sensor_InitializeAll 0032  
                                __size_of_MTOUCH_Sensor_Calibrate 0014  
                                          ??_MTOUCH_Sensor_Enable 002E  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 0037  
                               Sensor_isCalibratingAcqTime@sensor 002A  
                             i1Sensor_isCalibratingAcqTime@sensor 0070  
                                    __size_of_Sensor_isCalibrated 000D  
                                        ??_Sensor_DefaultCallback 002B  
                                    __end_of_Sensor_setCalibrated 1140  
                              __size_ofi1_MTOUCH_Sensor_isEnabled 0016  
                            __end_of_Button_Reading_Update_Helper 08C0  
                           __size_of_Button_Reading_Update_Helper 0051  
                                    _Button_Reading_Update_Helper 086F  
                                                      _TX1STAbits 011E  
                                      ?i1_MTOUCH_Sensor_isEnabled 0070  
                               __size_of_MTOUCH_Button_ServiceAll 0010  
                                       ?_MTOUCH_Button_ServiceAll 0070  
                                   Button_State_NotPressed@button 0038  
                                              EUSART_Write@txData 002A  
                                           ?_handleFanSpeedChange 002B  
                                      __size_of_MTOUCH_Initialize 000C  
                                  ??_ADCC_SetADTIInterruptHandler 002C  
                                  __end_of_PIN_MANAGER_Initialize 154F  
                                               ??_ADCC_Initialize 002C  
                                                  ?_processToggle 0034  
                                          _Button_Baseline_Update 0CE9  
                                   ?_ADCC_DefaultInterruptHandler 0070  
                                        ?_Sensor_scheduleNextScan 0070  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 002C  
                                     MTOUCH_Button_isPressed@name 0036  
                                                     _wipeEnabled 005A  
                                      ??_MTOUCH_Sensor_wasSampled 002E  
                                                     _updateLight 13BF  
                                                _handleFanToggleU 09F5  
                                                 _handleFanToggle 0D79  
                                 __end_of_processFanSpeedControlU 172B  
